{"version":3,"sources":["webpack:///./src/cloud/constants/websiteMonitoringTemplate.ts"],"names":["meta","version","type","name","description","content","data","attributes","relationships","cell","id","variable","included","x","y","w","h","view","properties","shape","queries","text","editMode","builderConfig","buckets","tags","key","values","functions","aggregateWindow","period","axes","bounds","label","prefix","suffix","base","scale","legend","colors","hex","value","decimalPlaces","isEnforced","digits","note","showNoteWhenEmpty","xColumn","yColumn","shadeBelow","position","hoverDimension","tableOptions","verticalTimeAxis","sortBy","internalName","displayName","visible","wrapping","fixFirstColumn","fieldOptions","timeFormat","tickPrefix","tickSuffix","labels"],"mappings":"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","file":"static/68.a31ecaa0a1.js","sourcesContent":["import {DashboardTemplate} from 'src/types'\n\nexport default {\n  meta: {\n    version: '1',\n    type: 'dashboard',\n    name: 'Website Monitoring Demo Data Dashboard Template',\n    description:\n      'template created from dashboard: Website Monitoring Demo Data',\n  },\n  content: {\n    data: {\n      type: 'dashboard',\n      attributes: {\n        name: 'Website Monitoring Demo Data Dashboard',\n        description: 'Visualize Website Monitoring Demo Data',\n      },\n      relationships: {\n        cell: {\n          data: [\n            {\n              type: 'cell',\n              id: '04e6ec89904e8000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec8996118000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec8996bd6000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec8997359000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec8999905000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec899938a000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec899ca1c000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec899c91f000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec899dbe5000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec899ec13000',\n            },\n            {\n              type: 'cell',\n              id: '04e6ec89a08dd000',\n            },\n          ],\n        },\n        variable: {\n          data: [],\n        },\n      },\n    },\n    included: [\n      {\n        id: '04e6ec89904e8000',\n        type: 'cell',\n        attributes: {\n          x: 2,\n          y: 1,\n          w: 5,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec89904e8000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec8996118000',\n        type: 'cell',\n        attributes: {\n          x: 0,\n          y: 6,\n          w: 12,\n          h: 4,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec8996118000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec8996bd6000',\n        type: 'cell',\n        attributes: {\n          x: 9,\n          y: 4,\n          w: 3,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec8996bd6000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec8997359000',\n        type: 'cell',\n        attributes: {\n          x: 0,\n          y: 1,\n          w: 2,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec8997359000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec8999905000',\n        type: 'cell',\n        attributes: {\n          x: 7,\n          y: 1,\n          w: 2,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec8999905000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec899938a000',\n        type: 'cell',\n        attributes: {\n          x: 0,\n          y: 3,\n          w: 12,\n          h: 1,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec899938a000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec899ca1c000',\n        type: 'cell',\n        attributes: {\n          x: 0,\n          y: 4,\n          w: 2,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec899ca1c000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec899c91f000',\n        type: 'cell',\n        attributes: {\n          x: 2,\n          y: 4,\n          w: 5,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec899c91f000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec899dbe5000',\n        type: 'cell',\n        attributes: {\n          x: 9,\n          y: 1,\n          w: 3,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec899dbe5000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec899ec13000',\n        type: 'cell',\n        attributes: {\n          x: 7,\n          y: 4,\n          w: 2,\n          h: 2,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec899ec13000',\n            },\n          },\n        },\n      },\n      {\n        id: '04e6ec89a08dd000',\n        type: 'cell',\n        attributes: {\n          x: 0,\n          y: 0,\n          w: 12,\n          h: 1,\n        },\n        relationships: {\n          view: {\n            data: {\n              type: 'view',\n              id: '04e6ec89a08dd000',\n            },\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec89904e8000',\n        attributes: {\n          name: 'Response Time',\n          properties: {\n            shape: 'chronograf-v2',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\") \\n  |> drop(columns: [\"_start\", \"_stop\",\"_measurement\",\"method\",\"result\",\"server\",\"status_code\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\")\\n  |> map(fn: (r) => ({ r with _value: 1.0 }))\\n  |> set(key: \"_field\", value: \"1 Second\")\\n  |> keep(columns: [\"_time\", \"_value\",\"_field\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\")\\n  |> map(fn: (r) => ({ r with _value: 0.5 }))\\n  |> set(key: \"_field\", value: \"0.5 Seconds\")\\n  |> keep(columns: [\"_time\", \"_value\",\"_field\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            axes: {\n              x: {\n                bounds: ['', ''],\n                label: '',\n                prefix: '',\n                suffix: '',\n                base: '10',\n                scale: 'linear',\n              },\n              y: {\n                bounds: ['', ''],\n                label: '',\n                prefix: '',\n                suffix: '',\n                base: '10',\n                scale: 'linear',\n              },\n            },\n            type: 'line-plus-single-stat',\n            legend: {},\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n              {\n                id: 'ed8d4d40-1c61-41e7-9224-f5f9f048e46a',\n                type: 'text',\n                hex: '#FFB94A',\n                name: 'pineapple',\n                value: 1,\n              },\n              {\n                id: '4cc90c18-70c9-4851-bdc2-5db54f0fc6c1',\n                type: 'text',\n                hex: '#BF3D5E',\n                name: 'ruby',\n                value: 5,\n              },\n            ],\n            prefix: '',\n            suffix: 's',\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n            xColumn: '_time',\n            yColumn: '_value',\n            shadeBelow: false,\n            position: '',\n            hoverDimension: 'y',\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec8996118000',\n        attributes: {\n          name: 'Response Log',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'table',\n            queries: [\n              {\n                text:\n                  'import \"influxdata/influxdb/v1\"\\nfrom(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> v1.fieldsAsCols()\\n  |> group(columns: [\"method\", \"server\"], mode:\"by\")\\n  |> drop(columns: [\"_start\", \"_stop\",\"result\",\"_measurement\",\"host\",\"result_type\",\"result_code\"])\\n  |> group()',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            tableOptions: {\n              verticalTimeAxis: true,\n              sortBy: {\n                internalName: '',\n                displayName: '',\n                visible: false,\n              },\n              wrapping: '',\n              fixFirstColumn: false,\n            },\n            fieldOptions: [\n              {\n                internalName: '',\n                displayName: '',\n                visible: true,\n              },\n              {\n                internalName: 'result',\n                displayName: 'result',\n                visible: true,\n              },\n              {\n                internalName: 'table',\n                displayName: 'table',\n                visible: true,\n              },\n              {\n                internalName: '_start',\n                displayName: '_start',\n                visible: true,\n              },\n              {\n                internalName: '_stop',\n                displayName: '_stop',\n                visible: true,\n              },\n              {\n                internalName: '_time',\n                displayName: '_time',\n                visible: true,\n              },\n              {\n                internalName: '_measurement',\n                displayName: '_measurement',\n                visible: true,\n              },\n              {\n                internalName: 'host',\n                displayName: 'host',\n                visible: true,\n              },\n              {\n                internalName: 'method',\n                displayName: 'method',\n                visible: true,\n              },\n              {\n                internalName: 'result',\n                displayName: 'result',\n                visible: true,\n              },\n              {\n                internalName: 'server',\n                displayName: 'server',\n                visible: true,\n              },\n              {\n                internalName: 'http_response_code',\n                displayName: 'http_response_code',\n                visible: true,\n              },\n              {\n                internalName: 'result_type',\n                displayName: 'result_type',\n                visible: true,\n              },\n              {\n                internalName: 'content_length',\n                displayName: 'content_length',\n                visible: true,\n              },\n              {\n                internalName: 'response_time',\n                displayName: 'response_time',\n                visible: true,\n              },\n              {\n                internalName: 'result_code',\n                displayName: 'result_code',\n                visible: true,\n              },\n            ],\n            timeFormat: 'YYYY-MM-DD HH:mm:ss',\n            decimalPlaces: {\n              isEnforced: false,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec8996bd6000',\n        attributes: {\n          name: 'Response Code Counts',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'table',\n            queries: [\n              {\n                text:\n                  'import \"influxdata/influxdb/v1\"\\nfrom(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"http_response_code\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> duplicate(column: \"_value\", as: \"http_response_code\")\\n  |> group(columns: [\"server\",\"http_response_code\"])\\n  |> count(column: \"_value\")\\n  |> drop(columns: [\"server\"])\\n  |> rename(columns: {http_response_code:\"Response Code\", _value: \"Count\"})\\n',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            tableOptions: {\n              verticalTimeAxis: true,\n              sortBy: {\n                internalName: '',\n                displayName: '',\n                visible: false,\n              },\n              wrapping: '',\n              fixFirstColumn: false,\n            },\n            fieldOptions: [\n              {\n                internalName: '',\n                displayName: '',\n                visible: true,\n              },\n              {\n                internalName: 'result',\n                displayName: 'result',\n                visible: true,\n              },\n              {\n                internalName: 'table',\n                displayName: 'table',\n                visible: true,\n              },\n              {\n                internalName: 'Response Code',\n                displayName: 'Response Code',\n                visible: true,\n              },\n              {\n                internalName: 'Count',\n                displayName: 'Count',\n                visible: true,\n              },\n            ],\n            timeFormat: 'YYYY-MM-DD HH:mm:ss',\n            decimalPlaces: {\n              isEnforced: false,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec8997359000',\n        attributes: {\n          name: 'Last Status Code',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'single-stat',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"http_response_code\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\")\\n  |> last()',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            prefix: '',\n            tickPrefix: '',\n            suffix: '',\n            tickSuffix: '',\n            colors: [\n              {\n                id: 'base',\n                type: 'background',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n              {\n                id: 'dad182b1-537c-4bc1-9e7a-b016fa9de070',\n                type: 'background',\n                hex: '#FFD255',\n                name: 'thunder',\n                value: 300,\n              },\n              {\n                id: 'e1a12ab5-35e0-4553-a2d5-bf8db3b0f6df',\n                type: 'background',\n                hex: '#F95F53',\n                name: 'curacao',\n                value: 400,\n              },\n              {\n                id: 'e07775ef-1975-43b7-a59f-2d2180dc1d3b',\n                type: 'background',\n                hex: '#BF3D5E',\n                name: 'ruby',\n                value: 600,\n              },\n            ],\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec8999905000',\n        attributes: {\n          name: 'Max Response Time',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'single-stat',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\")\\n  |> max()\\n  ',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            prefix: '',\n            tickPrefix: '',\n            suffix: 's',\n            tickSuffix: '',\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec899938a000',\n        attributes: {\n          name: 'Name this Cell',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'markdown',\n            note: '## *https://docs.influxdata.com*',\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec899ca1c000',\n        attributes: {\n          name: 'Last Status Code',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'single-stat',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"http_response_code\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> last()',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            prefix: '',\n            tickPrefix: '',\n            suffix: '',\n            tickSuffix: '',\n            colors: [\n              {\n                id: 'base',\n                type: 'background',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n              {\n                id: 'dad182b1-537c-4bc1-9e7a-b016fa9de070',\n                type: 'background',\n                hex: '#FFD255',\n                name: 'thunder',\n                value: 300,\n              },\n              {\n                id: 'e1a12ab5-35e0-4553-a2d5-bf8db3b0f6df',\n                type: 'background',\n                hex: '#F95F53',\n                name: 'curacao',\n                value: 400,\n              },\n              {\n                id: 'e07775ef-1975-43b7-a59f-2d2180dc1d3b',\n                type: 'background',\n                hex: '#BF3D5E',\n                name: 'ruby',\n                value: 600,\n              },\n            ],\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec899c91f000',\n        attributes: {\n          name: 'Response Time',\n          properties: {\n            shape: 'chronograf-v2',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> drop(columns: [\"_start\", \"_stop\",\"_measurement\",\"method\",\"result\",\"server\",\"status_code\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> map(fn: (r) => ({ r with _value: 1.0 }))\\n  |> set(key: \"_field\", value: \"1 Second\")\\n  |> keep(columns: [\"_time\", \"_value\",\"_field\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> map(fn: (r) => ({ r with _value: 0.5 }))\\n  |> set(key: \"_field\", value: \"0.5 Seconds\")\\n  |> keep(columns: [\"_time\", \"_value\",\"_field\"])',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            axes: {\n              x: {\n                bounds: ['', ''],\n                label: '',\n                prefix: '',\n                suffix: '',\n                base: '10',\n                scale: 'linear',\n              },\n              y: {\n                bounds: ['', ''],\n                label: '',\n                prefix: '',\n                suffix: '',\n                base: '10',\n                scale: 'linear',\n              },\n            },\n            type: 'line-plus-single-stat',\n            legend: {},\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            prefix: '',\n            suffix: 's',\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n            xColumn: '_time',\n            yColumn: '_value',\n            shadeBelow: false,\n            position: '',\n            hoverDimension: 'y',\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec899dbe5000',\n        attributes: {\n          name: 'Response Code Counts',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'table',\n            queries: [\n              {\n                text:\n                  'import \"influxdata/influxdb/v1\"\\nfrom(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"http_response_code\")\\n  |> filter(fn: (r) => r.server == \"https://influxdata.com\")\\n  |> duplicate(column: \"_value\", as: \"http_response_code\")\\n  |> group(columns: [\"server\",\"http_response_code\"])\\n  |> count(column: \"_value\")\\n  |> drop(columns: [\"server\"])\\n  |> rename(columns: {http_response_code:\"Response Code\", _value: \"Count\"})\\n',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            tableOptions: {\n              verticalTimeAxis: true,\n              sortBy: {\n                internalName: '',\n                displayName: '',\n                visible: false,\n              },\n              wrapping: '',\n              fixFirstColumn: false,\n            },\n            fieldOptions: [\n              {\n                internalName: '',\n                displayName: '',\n                visible: true,\n              },\n              {\n                internalName: 'result',\n                displayName: 'result',\n                visible: true,\n              },\n              {\n                internalName: 'table',\n                displayName: 'table',\n                visible: true,\n              },\n              {\n                internalName: 'Response Code',\n                displayName: 'Response Code',\n                visible: true,\n              },\n              {\n                internalName: 'Count',\n                displayName: 'Count',\n                visible: true,\n              },\n            ],\n            timeFormat: 'YYYY-MM-DD HH:mm:ss',\n            decimalPlaces: {\n              isEnforced: false,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec899ec13000',\n        attributes: {\n          name: 'Max Response Time',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'single-stat',\n            queries: [\n              {\n                text:\n                  'from(bucket: \"Website Monitoring Bucket\")\\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\\n  |> filter(fn: (r) => r._measurement == \"http_response\")\\n  |> filter(fn: (r) => r._field == \"response_time\")\\n  |> filter(fn: (r) => r.server == \"https://docs.influxdata.com\")\\n  |> max()\\n  ',\n                editMode: 'advanced',\n                name: '',\n                builderConfig: {\n                  buckets: [],\n                  tags: [\n                    {\n                      key: '_measurement',\n                      values: [],\n                    },\n                  ],\n                  functions: [],\n                  aggregateWindow: {\n                    period: 'auto',\n                  },\n                },\n              },\n            ],\n            prefix: '',\n            tickPrefix: '',\n            suffix: 's',\n            tickSuffix: '',\n            colors: [\n              {\n                id: 'base',\n                type: 'text',\n                hex: '#00C9FF',\n                name: 'laser',\n                value: 0,\n              },\n            ],\n            decimalPlaces: {\n              isEnforced: true,\n              digits: 2,\n            },\n            note: '',\n            showNoteWhenEmpty: false,\n          },\n        },\n      },\n      {\n        type: 'view',\n        id: '04e6ec89a08dd000',\n        attributes: {\n          name: 'Name this Cell',\n          properties: {\n            shape: 'chronograf-v2',\n            type: 'markdown',\n            note: '## *https://influxdata.com*',\n          },\n        },\n      },\n    ],\n  },\n  labels: [],\n} as DashboardTemplate\n"],"sourceRoot":""}