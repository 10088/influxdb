{"version":3,"sources":["webpack:///./src/dataLoaders/components/collectorsWizard/select/StreamingSelector.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/select/SelectCollectorsStep.tsx","webpack:///./src/shared/components/URIFormElement.tsx","webpack:///./src/dataLoaders/components/configureStep/streaming/ArrayFormElement.tsx","webpack:///./src/dataLoaders/components/configureStep/streaming/ConfigFieldSwitcher.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/ConfigFieldHandler.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginConfigForm.tsx","webpack:///./src/dataLoaders/components/configureStep/EmptyDataSourceState.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBarTab.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBarButton.tsx","webpack:///./src/dataLoaders/components/side_bar/SideBar.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginsSideBar.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/TelegrafPluginInstructions.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/configure/PluginConfigSwitcher.tsx","webpack:///./src/dataLoaders/components/verifyStep/ConnectionInformation.tsx","webpack:///./src/dataLoaders/components/verifyStep/DataListening.tsx","webpack:///./src/dataLoaders/components/verifyStep/DataStreaming.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/verify/VerifyCollectorsStep.tsx","webpack:///./src/dataLoaders/components/collectorsWizard/CollectorsStepSwitcher.tsx"],"names":["props","super","handleSelectBucket","bucket","this","onSelectBucket","handleToggle","bundle","onTogglePluginBundle","isCardChecked","handleFilterChange","e","setState","searchTerm","target","value","handleFilterBlur","state","gridSizerUpdateFlag","v4","prevProps","addFirst","telegrafPlugins","length","removeLast","buckets","cardSize","className","Row","Column","widthSM","Five","label","selectedBucketID","offsetSM","Two","size","Small","icon","Search","onBlur","onChange","placeholder","gutter","filteredBundles","map","b","Card","key","id","formName","testID","selected","onClick","Checkmark","emptyState","selectedBucketName","find","name","noMatches","Medium","Text","filter","toLowerCase","includes","pluginBundles","orgID","onSetBucketInfo","handleTogglePluginBundle","isSelected","onRemovePluginBundle","onAddPluginBundle","onSubmit","onIncrementCurrentStepIndex","autoHide","href","OnboardingButtons","autoFocusNext","nextButtonStatus","Default","Disabled","mdtp","dataLoading","dataLoaders","steps","VALIDATE_DEBOUNCE_MS","handleChange","debouncedValidate","handleValidateURI","validateURI","status","Valid","Error","debounce","autoFocus","helpText","widthXS","Eight","offsetXS","errorMessage","handleAddRow","item","addTagValue","fieldName","handleRemoveRow","removeTagValue","handleEditRow","index","onSetConfigArrayValue","telegrafPluginName","title","inputType","onAddRow","onDeleteRow","onEditRow","tags","fieldType","Uri","UriArray","URI","String","StringArray","v","text","optionalText","Element","isRequired","handleAddConfigFieldValue","onAddConfigValue","telegrafPlugin","handleRemoveConfigFieldValue","onRemoveConfigValue","handleUpdateConfigField","onUpdateTelegrafPluginConfig","formFields","configFields","Object","entries","type","i","getFieldValue","defaultEmpty","get","handleSubmitForm","onSetPluginConfiguration","onSetActiveTelegrafPlugin","activeTelegrafPlugin","tp","active","hasOwnProperty","startCase","nextButtonText","handleClick","Success","Pending","glyph","Remove","CircleThick","titleText","color","SideBarTabStatus","containerClassName","childTabs","visible","show","children","Children","child","Tab","Button","configStateToTabStatus","cs","Unconfigured","InvalidConfiguration","Configured","tabs","onTabClick","t","configured","handleFormSubmit","onSaveTelegrafConfig","telegrafConfigID","handleCreateDashboardsForPlugins","onIncrementStep","handleNameInput","onSetTelegrafConfigName","handleDescriptionInput","onSetTelegrafConfigDescription","handleClickSideBarTab","tabID","telegrafConfigName","telegrafConfigDescription","onDecrementStep","sideBarVisible","onClickBack","notify","configuredPluginTemplateIdentifiers","templateID","templatesToInstantiate","pendingDashboards","pendingDashboardNames","meta","Promise","all","err","LoadingState","header","additionalText","loading","Loading","Done","NotFound","countDownSeconds","startTimer","startTime","Number","Date","checkForData","async","match","params","secondsLeft","script","responseLength","timePassed","result","promise","message","csv","intervalID","setTimeout","countDown","secs","timePassedInSeconds","clearInterval","timer","NotStarted","connectionInfo","listenButton","Primary","setInterval","token","configID","TelegrafInstructions","org","onDecrementCurrentStepIndex","onExit","me","username","stepProps","currentStepIndex","Select","Configure","Verify","VerifyCollectorsStep"],"mappings":"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","file":"static/69.d226342274.js","sourcesContent":["// Libraries\nimport React, {PureComponent, ChangeEvent, createElement} from 'react'\nimport uuid from 'uuid'\nimport _ from 'lodash'\n\n// Components\nimport {\n  Input,\n  EmptyState,\n  FormElement,\n  Grid,\n  SelectableCard,\n  IconFont,\n  SquareGrid,\n} from '@influxdata/clockface'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\n// Constants\nimport {\n  PLUGIN_BUNDLE_OPTIONS,\n  BUNDLE_LOGOS,\n} from 'src/dataLoaders/constants/pluginConfigs'\nimport BucketDropdown from 'src/dataLoaders/components/BucketsDropdown'\n\n// Types\nimport {TelegrafPlugin, BundleName} from 'src/types/dataLoaders'\nimport {Bucket} from 'src/types'\nimport {Columns, ComponentSize} from '@influxdata/clockface'\n\nexport interface Props {\n  buckets: Bucket[]\n  selectedBucketName: string\n  pluginBundles: BundleName[]\n  telegrafPlugins: TelegrafPlugin[]\n  onTogglePluginBundle: (telegrafPlugin: string, isSelected: boolean) => void\n  onSelectBucket: (bucket: Bucket) => void\n}\n\ninterface State {\n  gridSizerUpdateFlag: string\n  searchTerm: string\n}\n\n@ErrorHandling\nclass StreamingSelector extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      gridSizerUpdateFlag: uuid.v4(),\n      searchTerm: '',\n    }\n  }\n\n  public componentDidUpdate(prevProps) {\n    const addFirst =\n      prevProps.telegrafPlugins.length === 0 &&\n      this.props.telegrafPlugins.length > 0\n\n    const removeLast =\n      prevProps.telegrafPlugins.length > 0 &&\n      this.props.telegrafPlugins.length === 0\n\n    if (addFirst || removeLast) {\n      const gridSizerUpdateFlag = uuid.v4()\n      this.setState({gridSizerUpdateFlag})\n    }\n  }\n\n  public render() {\n    const {buckets} = this.props\n    const {searchTerm} = this.state\n\n    const cardSize = `${100 / (PLUGIN_BUNDLE_OPTIONS.length + 1)}%`\n\n    return (\n      <div className=\"wizard-step--grid-container\">\n        <Grid.Row>\n          <Grid.Column widthSM={Columns.Five}>\n            <FormElement label=\"Bucket\">\n              <BucketDropdown\n                selectedBucketID={this.selectedBucketID}\n                buckets={buckets}\n                onSelectBucket={this.handleSelectBucket}\n              />\n            </FormElement>\n          </Grid.Column>\n          <Grid.Column widthSM={Columns.Five} offsetSM={Columns.Two}>\n            <FormElement label=\"\">\n              <Input\n                className=\"wizard-step--filter\"\n                size={ComponentSize.Small}\n                icon={IconFont.Search}\n                value={searchTerm}\n                onBlur={this.handleFilterBlur}\n                onChange={this.handleFilterChange}\n                placeholder=\"Filter Plugins...\"\n              />\n            </FormElement>\n          </Grid.Column>\n        </Grid.Row>\n        <SquareGrid cardSize={cardSize} gutter={ComponentSize.Small}>\n          {this.filteredBundles.map(b => {\n            return (\n              <SquareGrid.Card key={b}>\n                <SelectableCard\n                  id={b}\n                  formName=\"telegraf-plugins\"\n                  label={b}\n                  testID={`telegraf-plugins--${b}`}\n                  selected={this.isCardChecked(b)}\n                  onClick={this.handleToggle}\n                  icon={IconFont.Checkmark}\n                >\n                  {createElement(BUNDLE_LOGOS[b])}\n                </SelectableCard>\n              </SquareGrid.Card>\n            )\n          })}\n        </SquareGrid>\n        {this.emptyState}\n      </div>\n    )\n  }\n\n  private get selectedBucketID(): string {\n    const {buckets, selectedBucketName} = this.props\n\n    return buckets.find(b => b.name === selectedBucketName).id\n  }\n\n  private handleSelectBucket = (bucket: Bucket) => {\n    this.props.onSelectBucket(bucket)\n  }\n\n  private get emptyState(): JSX.Element {\n    const {searchTerm} = this.state\n\n    const noMatches = this.filteredBundles.length === 0\n\n    if (searchTerm && noMatches) {\n      return (\n        <EmptyState size={ComponentSize.Medium}>\n          <EmptyState.Text>No plugins match your search</EmptyState.Text>\n        </EmptyState>\n      )\n    }\n  }\n\n  private get filteredBundles(): BundleName[] {\n    const {searchTerm} = this.state\n\n    return PLUGIN_BUNDLE_OPTIONS.filter(b =>\n      b.toLowerCase().includes(searchTerm.toLowerCase())\n    )\n  }\n\n  private isCardChecked(bundle: BundleName): boolean {\n    const {pluginBundles} = this.props\n\n    if (pluginBundles.find(b => b === bundle)) {\n      return true\n    }\n    return false\n  }\n\n  private handleToggle = (bundle: BundleName): void => {\n    this.props.onTogglePluginBundle(bundle, this.isCardChecked(bundle))\n  }\n\n  private handleFilterChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({searchTerm: e.target.value})\n  }\n\n  private handleFilterBlur = (e: ChangeEvent<HTMLInputElement>): void => {\n    this.setState({searchTerm: e.target.value})\n  }\n}\n\nexport default StreamingSelector\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\n\n// Components\nimport {Form, DapperScrollbars} from '@influxdata/clockface'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\nimport StreamingSelector from 'src/dataLoaders/components/collectorsWizard/select/StreamingSelector'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\n\n// Actions\nimport {\n  addPluginBundleWithPlugins,\n  removePluginBundleWithPlugins,\n} from 'src/dataLoaders/actions/dataLoaders'\nimport {setBucketInfo} from 'src/dataLoaders/actions/steps'\n\n// Types\nimport {Bucket} from 'src/types'\nimport {ComponentStatus} from '@influxdata/clockface'\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {BundleName} from 'src/types/dataLoaders'\nimport {AppState} from 'src/types'\n\nexport interface OwnProps extends CollectorsStepProps {\n  buckets: Bucket[]\n}\n\ntype ReduxProps = ConnectedProps<typeof connector>\ntype Props = OwnProps & ReduxProps\n\n@ErrorHandling\nexport class SelectCollectorsStep extends PureComponent<Props> {\n  public render() {\n    return (\n      <Form\n        onSubmit={this.props.onIncrementCurrentStepIndex}\n        className=\"data-loading--form\"\n      >\n        <DapperScrollbars\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">What do you want to monitor?</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Telegraf is a plugin-based data collection agent which writes\n              metrics to a bucket in InfluxDB\n            </h5>\n          </div>\n          {!!this.props.bucket && (\n            <StreamingSelector\n              pluginBundles={this.props.pluginBundles}\n              telegrafPlugins={this.props.telegrafPlugins}\n              onTogglePluginBundle={this.handleTogglePluginBundle}\n              buckets={this.props.buckets}\n              selectedBucketName={this.props.bucket}\n              onSelectBucket={this.handleSelectBucket}\n            />\n          )}\n          <h5 className=\"wizard-step--sub-title\">\n            Looking for other things to monitor? Check out our 200+ other &nbsp;\n            <a\n              href=\"https://v2.docs.influxdata.com/v2.0/reference/telegraf-plugins/#input-plugins\"\n              target=\"_blank\"\n            >\n              Telegraf Plugins\n            </a>\n            &nbsp; and how to &nbsp;\n            <a\n              href=\"https://v2.docs.influxdata.com/v2.0/write-data/no-code/use-telegraf/manual-config/\"\n              target=\"_blank\"\n            >\n              Configure these Plugins\n            </a>\n          </h5>\n        </DapperScrollbars>\n        <OnboardingButtons\n          autoFocusNext={true}\n          nextButtonStatus={this.nextButtonStatus}\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private get nextButtonStatus(): ComponentStatus {\n    const {telegrafPlugins, buckets} = this.props\n\n    if (!buckets || !buckets.length) {\n      return ComponentStatus.Disabled\n    }\n\n    if (!telegrafPlugins.length) {\n      return ComponentStatus.Disabled\n    }\n\n    return ComponentStatus.Default\n  }\n\n  private handleSelectBucket = (bucket: Bucket) => {\n    const {orgID, id, name} = bucket\n\n    this.props.onSetBucketInfo(orgID, name, id)\n  }\n\n  private handleTogglePluginBundle = (\n    bundle: BundleName,\n    isSelected: boolean\n  ) => {\n    if (isSelected) {\n      this.props.onRemovePluginBundle(bundle)\n\n      return\n    }\n\n    this.props.onAddPluginBundle(bundle)\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins, pluginBundles},\n    steps: {bucket},\n  },\n}: AppState) => ({\n  telegrafPlugins,\n  bucket,\n  pluginBundles,\n})\n\nconst mdtp = {\n  onAddPluginBundle: addPluginBundleWithPlugins,\n  onRemovePluginBundle: removePluginBundleWithPlugins,\n  onSetBucketInfo: setBucketInfo,\n}\n\nconst connector = connect(mstp, mdtp)\n\nexport default connector(SelectCollectorsStep)\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {Input, FormElement, Grid} from '@influxdata/clockface'\n\n// Utils\nimport {validateURI} from 'src/shared/utils/validateURI'\n\n// Type\nimport {Columns, ComponentStatus, ComponentSize} from '@influxdata/clockface'\n\nconst VALIDATE_DEBOUNCE_MS = 350\n\ninterface Props {\n  name: string\n  autoFocus?: boolean\n  value: string\n  helpText: string\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void\n}\n\ninterface State {\n  status: ComponentStatus\n}\n\nclass URIFormElement extends PureComponent<Props, State> {\n  private debouncedValidate: (value: string) => void\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      status: ComponentStatus.Default,\n    }\n\n    this.debouncedValidate = _.debounce(\n      this.handleValidateURI,\n      VALIDATE_DEBOUNCE_MS\n    )\n  }\n\n  public render() {\n    const {name, value, autoFocus, helpText} = this.props\n\n    return (\n      <Grid>\n        <Grid.Row>\n          <Grid.Column widthXS={Columns.Eight} offsetXS={Columns.Two}>\n            <FormElement\n              label={name}\n              key={name}\n              errorMessage={this.errorMessage}\n              helpText={helpText}\n            >\n              <Input\n                name={name}\n                autoFocus={autoFocus}\n                status={this.state.status}\n                onChange={this.handleChange}\n                size={ComponentSize.Medium}\n                value={value}\n              />\n            </FormElement>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    )\n  }\n\n  private get errorMessage(): string | null {\n    const {status} = this.state\n\n    if (status === ComponentStatus.Error) {\n      return 'Must be a valid URI.'\n    }\n  }\n\n  private handleChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const {onChange} = this.props\n    const {value} = e.target\n\n    onChange(e)\n    this.debouncedValidate(value)\n  }\n\n  private handleValidateURI = (value: string): void => {\n    if (validateURI(value)) {\n      this.setState({status: ComponentStatus.Valid})\n    } else {\n      this.setState({status: ComponentStatus.Error})\n    }\n  }\n}\n\nexport default URIFormElement\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {MultipleInput, MultiInputType} from 'src/clockface'\n\n// Actions\nimport {setConfigArrayValue} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {TelegrafPluginName, ConfigFieldType} from 'src/types'\n\ninterface Props {\n  fieldName: string\n  fieldType: ConfigFieldType\n  addTagValue: (item: string, fieldName: string) => void\n  removeTagValue: (item: string, fieldName: string) => void\n  autoFocus: boolean\n  value: string[]\n  helpText: string\n  onSetConfigArrayValue: typeof setConfigArrayValue\n  telegrafPluginName: TelegrafPluginName\n}\n\nclass ArrayFormElement extends PureComponent<Props> {\n  public render() {\n    const {fieldName, autoFocus, helpText} = this.props\n\n    return (\n      <div className=\"multiple-input-index\">\n        <MultipleInput\n          title={fieldName}\n          helpText={helpText}\n          inputType={this.inputType}\n          autoFocus={autoFocus}\n          onAddRow={this.handleAddRow}\n          onDeleteRow={this.handleRemoveRow}\n          onEditRow={this.handleEditRow}\n          tags={this.tags}\n        />\n      </div>\n    )\n  }\n\n  private get inputType(): MultiInputType {\n    switch (this.props.fieldType) {\n      case ConfigFieldType.Uri:\n      case ConfigFieldType.UriArray:\n        return MultiInputType.URI\n      case ConfigFieldType.String:\n      case ConfigFieldType.StringArray:\n        return MultiInputType.String\n    }\n  }\n\n  private handleAddRow = (item: string) => {\n    this.props.addTagValue(item, this.props.fieldName)\n  }\n\n  private handleRemoveRow = (item: string) => {\n    const {removeTagValue, fieldName} = this.props\n\n    removeTagValue(item, fieldName)\n  }\n\n  private handleEditRow = (index: number, item: string) => {\n    const {onSetConfigArrayValue, telegrafPluginName, fieldName} = this.props\n\n    onSetConfigArrayValue(telegrafPluginName, fieldName, index, item)\n  }\n\n  private get tags(): Array<{name: string; text: string}> {\n    const {value} = this.props\n    return value.map(v => {\n      return {text: v, name: v}\n    })\n  }\n}\n\nexport default ArrayFormElement\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport {Form, Input, Grid} from '@influxdata/clockface'\nimport URIFormElement from 'src/shared/components/URIFormElement'\nimport ArrayFormElement from 'src/dataLoaders/components/configureStep/streaming/ArrayFormElement'\n\n// Types\nimport {ConfigFieldType, TelegrafPluginName} from 'src/types/dataLoaders'\nimport {Columns, ComponentSize} from '@influxdata/clockface'\n\n// Actions\nimport {setConfigArrayValue} from 'src/dataLoaders/actions/dataLoaders'\n\ninterface Props {\n  fieldName: string\n  fieldType: ConfigFieldType\n  index: number\n  onChange: (e: ChangeEvent<HTMLElement>) => void\n  addTagValue: (item: string, fieldName: string) => void\n  removeTagValue: (item: string, fieldName: string) => void\n  value: string | string[]\n  isRequired: boolean\n  onSetConfigArrayValue: typeof setConfigArrayValue\n  telegrafPluginName: TelegrafPluginName\n}\n\nclass ConfigFieldSwitcher extends PureComponent<Props> {\n  public render() {\n    const {\n      fieldType,\n      fieldName,\n      onChange,\n      value,\n      onSetConfigArrayValue,\n      telegrafPluginName,\n    } = this.props\n\n    switch (fieldType) {\n      case ConfigFieldType.Uri:\n        return (\n          <URIFormElement\n            name={fieldName}\n            key={name}\n            autoFocus={this.autoFocus}\n            onChange={onChange}\n            value={value as string}\n            helpText={this.optionalText}\n          />\n        )\n      case ConfigFieldType.UriArray:\n      case ConfigFieldType.StringArray:\n        return (\n          <ArrayFormElement\n            fieldName={fieldName}\n            fieldType={fieldType}\n            addTagValue={this.props.addTagValue}\n            removeTagValue={this.props.removeTagValue}\n            autoFocus={this.autoFocus}\n            value={value as string[]}\n            helpText={this.optionalText}\n            onSetConfigArrayValue={onSetConfigArrayValue}\n            telegrafPluginName={telegrafPluginName}\n          />\n        )\n      case ConfigFieldType.String:\n        return (\n          <Grid>\n            <Grid.Row>\n              <Grid.Column widthXS={Columns.Eight} offsetXS={Columns.Two}>\n                <Form.Element\n                  label={fieldName}\n                  key={fieldName}\n                  helpText={this.optionalText}\n                >\n                  <Input\n                    name={fieldName}\n                    autoFocus={this.autoFocus}\n                    onChange={onChange}\n                    size={ComponentSize.Medium}\n                    value={value as string}\n                  />\n                </Form.Element>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        )\n      default:\n        return <div />\n    }\n  }\n\n  private get optionalText(): string {\n    if (!this.props.isRequired) {\n      return 'optional'\n    }\n\n    return ''\n  }\n\n  private get autoFocus(): boolean {\n    const {index} = this.props\n    return index === 0\n  }\n}\n\nexport default ConfigFieldSwitcher\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport _ from 'lodash'\n\n// Components\nimport ConfigFieldSwitcher from 'src/dataLoaders/components/configureStep/streaming/ConfigFieldSwitcher'\n\n// Actions\nimport {\n  updateTelegrafPluginConfig,\n  addConfigValue,\n  removeConfigValue,\n  setConfigArrayValue,\n} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {\n  TelegrafPlugin,\n  ConfigFields,\n  ConfigFieldType,\n} from 'src/types/dataLoaders'\n\ninterface OwnProps {\n  configFields: ConfigFields\n  telegrafPlugin: TelegrafPlugin\n}\n\ntype ReduxProps = ConnectedProps<typeof connector>\ntype Props = OwnProps & ReduxProps\n\nexport class ConfigFieldHandler extends PureComponent<Props> {\n  public render() {\n    return <div>{this.formFields}</div>\n  }\n\n  private get formFields(): JSX.Element[] | JSX.Element {\n    const {configFields, telegrafPlugin, onSetConfigArrayValue} = this.props\n\n    if (!configFields) {\n      return <p data-testid=\"no-config\">No configuration required.</p>\n    }\n\n    return Object.entries(configFields).map(\n      ([fieldName, {type: fieldType, isRequired}], i) => {\n        return (\n          <ConfigFieldSwitcher\n            key={fieldName}\n            fieldName={fieldName}\n            fieldType={fieldType}\n            index={i}\n            onChange={this.handleUpdateConfigField}\n            value={this.getFieldValue(telegrafPlugin, fieldName, fieldType)}\n            isRequired={isRequired}\n            addTagValue={this.handleAddConfigFieldValue}\n            removeTagValue={this.handleRemoveConfigFieldValue}\n            onSetConfigArrayValue={onSetConfigArrayValue}\n            telegrafPluginName={telegrafPlugin.name}\n          />\n        )\n      }\n    )\n  }\n\n  private handleAddConfigFieldValue = (\n    value: string,\n    fieldName: string\n  ): void => {\n    const {onAddConfigValue, telegrafPlugin} = this.props\n\n    onAddConfigValue(telegrafPlugin.name, fieldName, value)\n  }\n\n  private handleRemoveConfigFieldValue = (value: string, fieldName: string) => {\n    const {onRemoveConfigValue, telegrafPlugin} = this.props\n\n    onRemoveConfigValue(telegrafPlugin.name, fieldName, value)\n  }\n\n  private getFieldValue(\n    telegrafPlugin: TelegrafPlugin,\n    fieldName: string,\n    fieldType: ConfigFieldType\n  ): string | string[] {\n    let defaultEmpty: string | string[]\n    if (\n      fieldType === ConfigFieldType.String ||\n      fieldType === ConfigFieldType.Uri\n    ) {\n      defaultEmpty = ''\n    } else {\n      defaultEmpty = []\n    }\n    return _.get(telegrafPlugin, `plugin.config.${fieldName}`, defaultEmpty)\n  }\n\n  private handleUpdateConfigField = (e: ChangeEvent<HTMLInputElement>) => {\n    const {onUpdateTelegrafPluginConfig, telegrafPlugin} = this.props\n    const {name, value} = e.target\n\n    onUpdateTelegrafPluginConfig(telegrafPlugin.name, name, value)\n  }\n}\n\nconst mdtp = {\n  onUpdateTelegrafPluginConfig: updateTelegrafPluginConfig,\n  onAddConfigValue: addConfigValue,\n  onRemoveConfigValue: removeConfigValue,\n  onSetConfigArrayValue: setConfigArrayValue,\n}\n\nconst connector = connect(null, mdtp)\n\nexport default connector(ConfigFieldHandler)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport _ from 'lodash'\n\n// Components\nimport {Form, DapperScrollbars} from '@influxdata/clockface'\nimport ConfigFieldHandler from 'src/dataLoaders/components/collectorsWizard/configure/ConfigFieldHandler'\n\n// Actions\nimport {\n  setActiveTelegrafPlugin,\n  setPluginConfiguration,\n} from 'src/dataLoaders/actions/dataLoaders'\n\n// Types\nimport {TelegrafPlugin, ConfigFields} from 'src/types/dataLoaders'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport {AppState} from 'src/types'\n\ninterface OwnProps {\n  telegrafPlugin: TelegrafPlugin\n  configFields: ConfigFields\n}\n\ntype ReduxProps = ConnectedProps<typeof connector>\ntype Props = OwnProps & ReduxProps\n\nexport class PluginConfigForm extends PureComponent<Props> {\n  public render() {\n    const {configFields, telegrafPlugin} = this.props\n    return (\n      <Form onSubmit={this.handleSubmitForm} className=\"data-loading--form\">\n        <DapperScrollbars\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">\n              {_.startCase(telegrafPlugin.name)}\n            </h3>\n            <h5 className=\"wizard-step--sub-title\">\n              For more information about this plugin, see{' '}\n              <a\n                target=\"_blank\"\n                data-testid=\"docs-link\"\n                href={`https://github.com/influxdata/telegraf/tree/master/plugins/inputs/${telegrafPlugin.name}`}\n              >\n                Documentation\n              </a>\n            </h5>\n          </div>\n          <ConfigFieldHandler\n            configFields={configFields}\n            telegrafPlugin={telegrafPlugin}\n          />\n        </DapperScrollbars>\n        <OnboardingButtons\n          autoFocusNext={this.autoFocus}\n          nextButtonText=\"Done\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private get autoFocus(): boolean {\n    const {configFields} = this.props\n    return !configFields\n  }\n\n  private handleSubmitForm = () => {\n    const {\n      telegrafPlugins,\n      onSetPluginConfiguration,\n      onSetActiveTelegrafPlugin,\n    } = this.props\n\n    const activeTelegrafPlugin = telegrafPlugins.find(tp => tp.active)\n    if (!!activeTelegrafPlugin) {\n      if (!activeTelegrafPlugin.hasOwnProperty('plugin')) {\n        onSetActiveTelegrafPlugin('')\n        return\n      }\n      onSetPluginConfiguration(activeTelegrafPlugin.name)\n    }\n\n    onSetActiveTelegrafPlugin('')\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins},\n  },\n}: AppState) => ({\n  telegrafPlugins,\n})\n\nconst mdtp = {\n  onSetActiveTelegrafPlugin: setActiveTelegrafPlugin,\n  onSetPluginConfiguration: setPluginConfiguration,\n}\n\nconst connector = connect(mstp, mdtp)\n\nexport default connector(PluginConfigForm)\n","// Libraries\nimport React, {PureComponent} from 'react'\n\nclass EmptyDataSourceState extends PureComponent {\n  public render() {\n    return <div>Must select a data source.</div>\n  }\n}\n\nexport default EmptyDataSourceState\n","// Libraries\nimport React, {Component} from 'react'\nimport classnames from 'classnames'\n\n// Types\nimport {Icon, IconFont} from '@influxdata/clockface'\nimport {SideBarTabStatus as TabStatus} from 'src/dataLoaders/components/side_bar/SideBar'\n\ninterface Props {\n  label: string\n  id: string\n  active: boolean\n  status: TabStatus\n  onClick: (tabID: string) => void\n}\n\nclass SideBarTab extends Component<Props> {\n  public render() {\n    const {label} = this.props\n\n    return (\n      <div className={this.className} onClick={this.handleClick}>\n        <pre>\n          {this.icon} {label}\n        </pre>\n      </div>\n    )\n  }\n\n  private handleClick = (): void => {\n    const {id, onClick} = this.props\n\n    onClick(id)\n  }\n\n  private get className(): string {\n    const {status, active} = this.props\n\n    return classnames('side-bar--tab', {\n      active,\n      'side-bar--tab__success': status === TabStatus.Success,\n      'side-bar--tab__error': status === TabStatus.Error,\n      'side-bar--tab__pending': status === TabStatus.Pending,\n    })\n  }\n\n  private get icon(): JSX.Element {\n    const {status} = this.props\n\n    switch (status) {\n      case TabStatus.Pending:\n      case TabStatus.Success:\n        return <Icon glyph={IconFont.Checkmark} />\n      case TabStatus.Error:\n        return <Icon glyph={IconFont.Remove} />\n      default:\n        return <Icon glyph={IconFont.CircleThick} />\n    }\n  }\n}\n\nexport default SideBarTab\n","// Libraries\nimport React, {Component} from 'react'\n\n// Components\nimport {\n  Button,\n  ComponentColor,\n  ComponentSize,\n  IconFont,\n} from '@influxdata/clockface'\n\ninterface Props {\n  text: string\n  titleText: string\n  color: ComponentColor\n  icon?: IconFont\n  onClick?: () => void\n}\n\nclass SideBarButton extends Component<Props> {\n  public render() {\n    const {text, titleText, color, onClick, icon} = this.props\n\n    return (\n      <Button\n        className=\"side-bar--button\"\n        text={text}\n        titleText={titleText}\n        onClick={onClick}\n        size={ComponentSize.Small}\n        color={color}\n        icon={icon}\n      />\n    )\n  }\n}\n\nexport default SideBarButton\n","// Libraries\nimport React, {Component} from 'react'\nimport classnames from 'classnames'\n\n// Components\nimport {DapperScrollbars} from '@influxdata/clockface'\nimport SideBarTab from 'src/dataLoaders/components/side_bar/SideBarTab'\nimport SideBarButton from 'src/dataLoaders/components/side_bar/SideBarButton'\n\nexport enum SideBarTabStatus {\n  Default = 'default',\n  Error = 'error',\n  Success = 'success',\n  Pending = 'pending',\n  Blank = 'blank',\n}\n\ninterface Props {\n  title: string\n  children: JSX.Element[]\n  visible: boolean\n}\n\nclass SideBar extends Component<Props> {\n  public static Tab = SideBarTab\n  public static Button = SideBarButton\n\n  public render() {\n    const {title} = this.props\n\n    return (\n      <div className={this.containerClassName}>\n        <div className=\"side-bar--container\">\n          <h3 className=\"side-bar--title\">{title}</h3>\n          <DapperScrollbars autoHide={false}>\n            <div className=\"side-bar--tabs\">{this.childTabs}</div>\n          </DapperScrollbars>\n        </div>\n      </div>\n    )\n  }\n\n  private get containerClassName(): string {\n    const {visible} = this.props\n\n    return classnames('side-bar', {show: visible})\n  }\n\n  private get childTabs(): JSX.Element[] {\n    const {children} = this.props\n    return React.Children.map(children, (child: JSX.Element) => {\n      if (child.type === SideBarTab) {\n        return child\n      }\n    })\n  }\n}\n\nexport default SideBar\n","import React, {Component} from 'react'\n\n// Components\nimport SideBar from 'src/dataLoaders/components/side_bar/SideBar'\nimport {SideBarTabStatus as TabStatus} from 'src/dataLoaders/components/side_bar/SideBar'\n\nimport {TelegrafPlugin, ConfigurationState} from 'src/types/dataLoaders'\n\ninterface Props {\n  title: string\n  visible: boolean\n  telegrafPlugins: TelegrafPlugin[]\n  onTabClick: (tabID: string) => void\n}\n\nconst configStateToTabStatus = (cs: ConfigurationState): TabStatus => {\n  switch (cs) {\n    case ConfigurationState.Unconfigured:\n      return TabStatus.Default\n    case ConfigurationState.InvalidConfiguration:\n      return TabStatus.Error\n    case ConfigurationState.Configured:\n      return TabStatus.Success\n  }\n}\n\nclass PluginsSideBar extends Component<Props> {\n  public render() {\n    const {title, visible} = this.props\n    return (\n      <SideBar title={title} visible={visible}>\n        {this.tabs}\n      </SideBar>\n    )\n  }\n\n  private get tabs(): JSX.Element[] {\n    const {telegrafPlugins, onTabClick} = this.props\n    return telegrafPlugins.map(t => (\n      <SideBar.Tab\n        label={t.name}\n        key={t.name}\n        id={t.name}\n        active={t.active}\n        status={configStateToTabStatus(t.configured)}\n        onClick={onTabClick}\n      />\n    ))\n  }\n}\n\nexport default PluginsSideBar\n","// Libraries\nimport React, {PureComponent, ChangeEvent} from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\nimport {includes, get} from 'lodash'\n\n// Components\nimport {Form, Input, DapperScrollbars} from '@influxdata/clockface'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\nimport PluginsSideBar from 'src/dataLoaders/components/collectorsWizard/configure/PluginsSideBar'\n\n// Actions\nimport {\n  setTelegrafConfigName,\n  setTelegrafConfigDescription,\n  setActiveTelegrafPlugin,\n  setPluginConfiguration,\n  createOrUpdateTelegrafConfigAsync,\n} from 'src/dataLoaders/actions/dataLoaders'\nimport {\n  incrementCurrentStepIndex,\n  decrementCurrentStepIndex,\n} from 'src/dataLoaders/actions/steps'\nimport {notify as notifyAction} from 'src/shared/actions/notifications'\n\n// APIs\nimport {createDashboardFromTemplate as createDashboardFromTemplateAJAX} from 'src/templates/api'\n\n// Constants\nimport {\n  TelegrafDashboardCreated,\n  TelegrafDashboardFailed,\n} from 'src/shared/copy/notifications'\n\n// Types\nimport {AppState, ConfigurationState} from 'src/types'\nimport {InputType, ComponentSize} from '@influxdata/clockface'\nimport {influxdbTemplateList} from 'src/templates/constants/defaultTemplates'\n\n// Selectors\nimport {getOrg} from 'src/organizations/selectors'\nimport {getDataLoaders} from 'src/dataLoaders/selectors'\n\ntype ReduxProps = ConnectedProps<typeof connector>\ntype Props = ReduxProps\n\nexport class TelegrafPluginInstructions extends PureComponent<Props> {\n  public render() {\n    const {\n      telegrafConfigName,\n      telegrafConfigDescription,\n      telegrafPlugins,\n      onDecrementStep,\n    } = this.props\n\n    return (\n      <Form onSubmit={this.handleFormSubmit} className=\"data-loading--form\">\n        <div className=\"data-loading--scroll-content\">\n          <div>\n            <h3 className=\"wizard-step--title\">Configure Plugins</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Configure each plugin from the menu on the left. Some plugins do\n              not require any configuration.\n            </h5>\n          </div>\n          <div className=\"data-loading--columns\">\n            <PluginsSideBar\n              telegrafPlugins={telegrafPlugins}\n              onTabClick={this.handleClickSideBarTab}\n              title=\"Plugins\"\n              visible={this.sideBarVisible}\n            />\n            <div className=\"data-loading--column-panel\">\n              <DapperScrollbars\n                autoHide={false}\n                className=\"data-loading--scroll-content\"\n              >\n                <Form.Element label=\"Telegraf Configuration Name\">\n                  <Input\n                    type={InputType.Text}\n                    value={telegrafConfigName}\n                    name=\"name\"\n                    onChange={this.handleNameInput}\n                    titleText=\"Telegraf Configuration Name\"\n                    size={ComponentSize.Medium}\n                    autoFocus={true}\n                  />\n                </Form.Element>\n                <Form.Element label=\"Telegraf Configuration Description\">\n                  <Input\n                    type={InputType.Text}\n                    value={telegrafConfigDescription}\n                    name=\"description\"\n                    onChange={this.handleDescriptionInput}\n                    titleText=\"Telegraf Configuration Description\"\n                    size={ComponentSize.Medium}\n                  />\n                </Form.Element>\n              </DapperScrollbars>\n            </div>\n          </div>\n        </div>\n\n        <OnboardingButtons\n          onClickBack={onDecrementStep}\n          nextButtonText=\"Create and Verify\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n\n  private handleFormSubmit = () => {\n    const {onSaveTelegrafConfig, telegrafConfigID} = this.props\n\n    onSaveTelegrafConfig()\n\n    if (!telegrafConfigID) {\n      this.handleCreateDashboardsForPlugins()\n    }\n\n    this.props.onIncrementStep()\n  }\n\n  private async handleCreateDashboardsForPlugins() {\n    const {notify, telegrafPlugins, orgID} = this.props\n    try {\n      const configuredPlugins = telegrafPlugins.filter(\n        tp => tp.configured === ConfigurationState.Configured\n      )\n\n      const configuredPluginTemplateIdentifiers = configuredPlugins\n        .map(t => t.templateID)\n        .filter(t => t)\n\n      const templatesToInstantiate = influxdbTemplateList.filter(t => {\n        return includes(\n          configuredPluginTemplateIdentifiers,\n          get(t, 'meta.templateID')\n        )\n      })\n\n      const pendingDashboards = templatesToInstantiate.map(t =>\n        createDashboardFromTemplateAJAX(t, orgID)\n      )\n\n      const pendingDashboardNames = templatesToInstantiate.map(t =>\n        t.meta.name.toLowerCase()\n      )\n\n      const dashboards = await Promise.all(pendingDashboards)\n\n      if (dashboards.length) {\n        notify(TelegrafDashboardCreated(pendingDashboardNames))\n      }\n    } catch (err) {\n      notify(TelegrafDashboardFailed())\n    }\n  }\n\n  private get sideBarVisible() {\n    const {telegrafPlugins} = this.props\n\n    return telegrafPlugins.length > 0\n  }\n\n  private handleNameInput = (e: ChangeEvent<HTMLInputElement>) => {\n    this.props.onSetTelegrafConfigName(e.target.value)\n  }\n\n  private handleDescriptionInput = (e: ChangeEvent<HTMLInputElement>) => {\n    this.props.onSetTelegrafConfigDescription(e.target.value)\n  }\n\n  private handleClickSideBarTab = (tabID: string) => {\n    const {\n      onSetActiveTelegrafPlugin,\n      telegrafPlugins,\n      onSetPluginConfiguration,\n    } = this.props\n\n    const activeTelegrafPlugin = telegrafPlugins.find(tp => tp.active)\n    if (!!activeTelegrafPlugin) {\n      onSetPluginConfiguration(activeTelegrafPlugin.name)\n    }\n\n    onSetActiveTelegrafPlugin(tabID)\n  }\n}\n\nconst mstp = (state: AppState) => {\n  const {\n    telegrafConfigName,\n    telegrafConfigDescription,\n    telegrafPlugins,\n    telegrafConfigID,\n  } = getDataLoaders(state)\n\n  const {id: orgID} = getOrg(state)\n\n  return {\n    telegrafConfigName,\n    telegrafConfigDescription,\n    telegrafPlugins,\n    telegrafConfigID,\n    orgID,\n  }\n}\n\nconst mdtp = {\n  onSetTelegrafConfigName: setTelegrafConfigName,\n  onSetTelegrafConfigDescription: setTelegrafConfigDescription,\n  onIncrementStep: incrementCurrentStepIndex,\n  onDecrementStep: decrementCurrentStepIndex,\n  onSetActiveTelegrafPlugin: setActiveTelegrafPlugin,\n  onSetPluginConfiguration: setPluginConfiguration,\n  onSaveTelegrafConfig: createOrUpdateTelegrafConfigAsync,\n  notify: notifyAction,\n}\n\nconst connector = connect(mstp, mdtp)\n\nexport default connector(TelegrafPluginInstructions)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect, ConnectedProps} from 'react-redux'\n\n// Components\nimport PluginConfigForm from 'src/dataLoaders/components/collectorsWizard/configure/PluginConfigForm'\nimport EmptyDataSourceState from 'src/dataLoaders/components/configureStep/EmptyDataSourceState'\n\n// Utils\nimport {getConfigFields} from 'src/dataLoaders/utils/pluginConfigs'\n\n// Types\nimport {TelegrafPlugin, ConfigFields} from 'src/types/dataLoaders'\nimport {AppState} from 'src/types'\nimport TelegrafPluginInstructions from 'src/dataLoaders/components/collectorsWizard/configure/TelegrafPluginInstructions'\n\ntype ReduxProps = ConnectedProps<typeof connector>\ntype Props = ReduxProps\n\nexport class PluginConfigSwitcher extends PureComponent<Props> {\n  public render() {\n    const {telegrafPlugins} = this.props\n\n    if (this.activeTelegrafPlugin) {\n      return (\n        <PluginConfigForm\n          telegrafPlugin={this.activeTelegrafPlugin}\n          configFields={this.configFields}\n        />\n      )\n    } else if (!telegrafPlugins || !telegrafPlugins.length) {\n      return <EmptyDataSourceState />\n    }\n\n    return <TelegrafPluginInstructions />\n  }\n\n  private get activeTelegrafPlugin(): TelegrafPlugin {\n    const {telegrafPlugins} = this.props\n    return telegrafPlugins.find(tp => tp.active)\n  }\n\n  private get configFields(): ConfigFields {\n    if (this.activeTelegrafPlugin) {\n      return getConfigFields(this.activeTelegrafPlugin.name)\n    }\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafPlugins},\n  },\n}: AppState) => ({\n  telegrafPlugins,\n})\n\nconst connector = connect(mstp)\n\nexport default connector(PluginConfigSwitcher)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Decorator\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\nexport enum LoadingState {\n  NotStarted = 'NotStarted',\n  Loading = 'Loading',\n  Done = 'Done',\n  NotFound = 'NotFound',\n  Error = 'Error',\n}\n\nexport interface Props {\n  loading: LoadingState\n  bucket: string\n  countDownSeconds: number\n}\n\n@ErrorHandling\nclass ConnectionInformation extends PureComponent<Props> {\n  public render() {\n    return (\n      <div>\n        <h4 className={`wizard-step--text-state ${this.className}`}>\n          {this.header}\n        </h4>\n        <p>{this.additionalText}</p>\n      </div>\n    )\n  }\n\n  private get className(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return 'loading'\n      case LoadingState.Done:\n        return 'success'\n      case LoadingState.NotFound:\n      case LoadingState.Error:\n        return 'error'\n    }\n  }\n\n  private get header(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return 'Awaiting Connection...'\n      case LoadingState.Done:\n        return 'Connection Found!'\n      case LoadingState.NotFound:\n        return 'Data Not Found'\n      case LoadingState.Error:\n        return 'Error Listening for Data'\n    }\n  }\n\n  private get additionalText(): string {\n    switch (this.props.loading) {\n      case LoadingState.Loading:\n        return `Timeout in ${this.props.countDownSeconds} seconds`\n      case LoadingState.Done:\n        return `${this.props.bucket} is receiving data loud and clear!`\n      case LoadingState.NotFound:\n      case LoadingState.Error:\n        return 'Check config and try again'\n    }\n  }\n}\n\nexport default ConnectionInformation\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {withRouter, RouteComponentProps} from 'react-router-dom'\n\n// Apis\nimport {runQuery} from 'src/shared/apis/query'\n\n// Components\nimport {ErrorHandling} from 'src/shared/decorators/errors'\nimport {\n  Button,\n  ComponentColor,\n  ComponentSize,\n  ComponentStatus,\n} from '@influxdata/clockface'\nimport ConnectionInformation, {\n  LoadingState,\n} from 'src/dataLoaders/components/verifyStep/ConnectionInformation'\n\ninterface OwnProps {\n  bucket: string\n}\n\ninterface State {\n  loading: LoadingState\n  timePassedInSeconds: number\n  secondsLeft: number\n}\n\nconst MINUTE = 60000\nconst FETCH_WAIT = 5000\nconst SECONDS = 60\nconst TIMER_WAIT = 1000\n\ntype Props = RouteComponentProps<{orgID: string}> & OwnProps\n\n@ErrorHandling\nclass DataListening extends PureComponent<Props, State> {\n  private intervalID: NodeJS.Timer\n  private startTime: number\n  private timer: NodeJS.Timer\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      loading: LoadingState.NotStarted,\n      timePassedInSeconds: 0,\n      secondsLeft: SECONDS,\n    }\n  }\n\n  public componentWillUnmount() {\n    clearInterval(this.intervalID)\n    clearInterval(this.timer)\n    this.setState({\n      timePassedInSeconds: 0,\n      secondsLeft: SECONDS,\n    })\n  }\n\n  public render() {\n    return (\n      <div className=\"wizard-step--body-streaming\" data-testid=\"streaming\">\n        {this.connectionInfo}\n        {this.listenButton}\n      </div>\n    )\n  }\n\n  private get connectionInfo(): JSX.Element {\n    const {loading} = this.state\n\n    if (loading === LoadingState.NotStarted) {\n      return\n    }\n\n    return (\n      <ConnectionInformation\n        loading={this.state.loading}\n        bucket={this.props.bucket}\n        countDownSeconds={this.state.secondsLeft}\n      />\n    )\n  }\n\n  private get listenButton(): JSX.Element {\n    const {loading} = this.state\n\n    if (loading === LoadingState.Loading || loading === LoadingState.Done) {\n      return\n    }\n\n    return (\n      <Button\n        color={ComponentColor.Primary}\n        text=\"Listen for Data\"\n        size={ComponentSize.Medium}\n        onClick={this.handleClick}\n        status={ComponentStatus.Default}\n        titleText=\"Listen for Data\"\n      />\n    )\n  }\n\n  private handleClick = (): void => {\n    this.startTimer()\n    this.setState({loading: LoadingState.Loading})\n    this.startTime = Number(new Date())\n    this.checkForData()\n  }\n\n  private checkForData = async (): Promise<void> => {\n    const {\n      bucket,\n      match: {\n        params: {orgID},\n      },\n    } = this.props\n    const {secondsLeft} = this.state\n    const script = `from(bucket: \"${bucket}\")\n      |> range(start: -1m)`\n\n    let responseLength: number\n    let timePassed: number\n\n    try {\n      const result = await runQuery(orgID, script).promise\n\n      if (result.type !== 'SUCCESS') {\n        throw new Error(result.message)\n      }\n\n      responseLength = result.csv.length\n      timePassed = Number(new Date()) - this.startTime\n    } catch (err) {\n      this.setState({loading: LoadingState.Error})\n      return\n    }\n\n    if (responseLength > 1) {\n      this.setState({loading: LoadingState.Done})\n      return\n    }\n\n    if (timePassed >= MINUTE || secondsLeft <= 0) {\n      this.setState({loading: LoadingState.NotFound})\n      return\n    }\n\n    this.intervalID = setTimeout(() => {\n      this.checkForData()\n    }, FETCH_WAIT)\n  }\n\n  private startTimer() {\n    this.setState({timePassedInSeconds: 0, secondsLeft: SECONDS})\n\n    this.timer = setInterval(this.countDown, TIMER_WAIT)\n  }\n\n  private countDown = () => {\n    const {secondsLeft} = this.state\n    const secs = secondsLeft - 1\n    this.setState({\n      timePassedInSeconds: SECONDS - secs,\n      secondsLeft: secs,\n    })\n\n    if (secs === 0) {\n      clearInterval(this.timer)\n    }\n  }\n}\n\nexport default withRouter(DataListening)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport TelegrafInstructions from 'src/dataLoaders/components/verifyStep/TelegrafInstructions'\nimport DataListening from 'src/dataLoaders/components/verifyStep/DataListening'\n\n// Decorator\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\ninterface Props {\n  bucket: string\n  org: string\n  configID: string\n  token: string\n}\n\n@ErrorHandling\nclass DataStreaming extends PureComponent<Props> {\n  public render() {\n    const {token, configID, bucket} = this.props\n\n    return (\n      <div className=\"streaming\">\n        <TelegrafInstructions token={token} configID={configID} />\n\n        <DataListening bucket={bucket} />\n      </div>\n    )\n  }\n}\n\nexport default DataStreaming\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport {connect} from 'react-redux'\n\n// Components\nimport {Form, DapperScrollbars} from '@influxdata/clockface'\nimport DataStreaming from 'src/dataLoaders/components/verifyStep/DataStreaming'\nimport OnboardingButtons from 'src/onboarding/components/OnboardingButtons'\n\n// Types\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {AppState} from 'src/types'\n\n// Decorators\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\ntype OwnProps = CollectorsStepProps\n\ninterface StateProps {\n  username: string\n  telegrafConfigID: string\n  bucket: string\n  org: string\n  token: string\n}\n\nexport type Props = StateProps & OwnProps\n\n@ErrorHandling\nexport class VerifyCollectorStep extends PureComponent<Props> {\n  public render() {\n    const {\n      telegrafConfigID,\n      bucket,\n      org,\n      onDecrementCurrentStepIndex,\n      onExit,\n      token,\n    } = this.props\n\n    return (\n      <Form onSubmit={onExit} className=\"data-loading--form\">\n        <DapperScrollbars\n          autoHide={false}\n          className=\"data-loading--scroll-content\"\n        >\n          <div>\n            <h3 className=\"wizard-step--title\">Test your Configuration</h3>\n            <h5 className=\"wizard-step--sub-title\">\n              Start Telegraf and ensure data is being written to InfluxDB\n            </h5>\n          </div>\n          <DataStreaming\n            org={org}\n            bucket={bucket}\n            token={token}\n            configID={telegrafConfigID}\n          />\n        </DapperScrollbars>\n        <OnboardingButtons\n          onClickBack={onDecrementCurrentStepIndex}\n          nextButtonText=\"Finish\"\n          className=\"data-loading--button-container\"\n        />\n      </Form>\n    )\n  }\n}\n\nconst mstp = ({\n  dataLoading: {\n    dataLoaders: {telegrafConfigID, token},\n    steps: {bucket, org},\n  },\n  me: {name},\n}: AppState) => ({\n  username: name,\n  telegrafConfigID,\n  bucket,\n  org,\n  token,\n})\n\nexport default connect<StateProps, {}, OwnProps>(mstp)(VerifyCollectorStep)\n","// Libraries\nimport React, {PureComponent} from 'react'\nimport _ from 'lodash'\n\n// Components\nimport SelectCollectorsStep from 'src/dataLoaders/components/collectorsWizard/select/SelectCollectorsStep'\nimport PluginConfigSwitcher from 'src/dataLoaders/components/collectorsWizard/configure/PluginConfigSwitcher'\nimport VerifyCollectorsStep from 'src/dataLoaders/components/collectorsWizard/verify/VerifyCollectorsStep'\nimport {ErrorHandling} from 'src/shared/decorators/errors'\n\n// Types\nimport {CollectorsStep} from 'src/types/dataLoaders'\nimport {CollectorsStepProps} from 'src/dataLoaders/components/collectorsWizard/CollectorsWizard'\nimport {Bucket} from 'src/types'\n\ninterface Props {\n  stepProps: CollectorsStepProps\n  buckets: Bucket[]\n}\n\n@ErrorHandling\nclass StepSwitcher extends PureComponent<Props> {\n  public render() {\n    const {stepProps, buckets} = this.props\n\n    switch (stepProps.currentStepIndex) {\n      case CollectorsStep.Select:\n        return <SelectCollectorsStep {...stepProps} buckets={buckets} />\n      case CollectorsStep.Configure:\n        return <PluginConfigSwitcher />\n      case CollectorsStep.Verify:\n        return <VerifyCollectorsStep {...stepProps} />\n      default:\n        return <div />\n    }\n  }\n}\n\nexport default StepSwitcher\n"],"sourceRoot":""}