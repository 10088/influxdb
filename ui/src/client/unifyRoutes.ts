// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
  readonly message: string
}

export interface CloudUsers {
  links?: {
    self?: string
  }
  users?: CloudUser[]
}

export interface CloudUser {
  readonly id: string
  firstName?: string
  lastName?: string
  email: string
  role: 'member' | 'owner'
  readonly links?: {
    self?: string
  }
}

export interface Invites {
  links?: {
    self?: string
  }
  invites?: Invite[]
}

export interface Invite {
  readonly id: string
  email: string
  role: 'member' | 'owner'
  expiresAt?: string
  readonly links?: {
    self?: string
  }
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else if (responseContentType.includes('text')) {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)

export const setRequestHandler = rc.setRequestHandler.bind(rc)
export const setResponseHandler = rc.setResponseHandler.bind(rc)

export interface DeleteOrgsUserParams {
  userID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsUserResult =
  | DeleteOrgsUserNoContentResult
  | DeleteOrgsUserDefaultResult

interface DeleteOrgsUserNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsUserDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsUser = (
  params: DeleteOrgsUserParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsUserResult> =>
  request(
    'DELETE',
    `/api/experimental/orgs/${params.orgID}/users/${params.userID}`,
    params,
    options
  ) as Promise<DeleteOrgsUserResult>

export interface GetOrgsUsersParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsUsersResult = GetOrgsUsersOKResult | GetOrgsUsersDefaultResult

interface GetOrgsUsersOKResult {
  status: 200
  headers: Headers
  data: CloudUsers
}

interface GetOrgsUsersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsUsers = (
  params: GetOrgsUsersParams,
  options: RequestOptions = {}
): Promise<GetOrgsUsersResult> =>
  request(
    'GET',
    `/api/experimental/orgs/${params.orgID}/users`,
    params,
    options
  ) as Promise<GetOrgsUsersResult>

export interface GetOrgsInvitesParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsInvitesResult = GetOrgsInvitesOKResult | GetOrgsInvitesDefaultResult

interface GetOrgsInvitesOKResult {
  status: 200
  headers: Headers
  data: Invites
}

interface GetOrgsInvitesDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsInvites = (
  params: GetOrgsInvitesParams,
  options: RequestOptions = {}
): Promise<GetOrgsInvitesResult> =>
  request(
    'GET',
    `/api/experimental/orgs/${params.orgID}/invites`,
    params,
    options
  ) as Promise<GetOrgsInvitesResult>

export interface PostOrgsInviteParams {
  orgID: string

  data: Invite

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsInviteResult =
  | PostOrgsInviteCreatedResult
  | PostOrgsInviteDefaultResult

interface PostOrgsInviteCreatedResult {
  status: 201
  headers: Headers
  data: Invite
}

interface PostOrgsInviteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsInvite = (
  params: PostOrgsInviteParams,
  options: RequestOptions = {}
): Promise<PostOrgsInviteResult> =>
  request(
    'POST',
    `/api/experimental/orgs/${params.orgID}/invites`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgsInviteResult>

export interface DeleteOrgsInviteParams {
  inviteID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsInviteResult =
  | DeleteOrgsInviteNoContentResult
  | DeleteOrgsInviteDefaultResult

interface DeleteOrgsInviteNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsInviteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsInvite = (
  params: DeleteOrgsInviteParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsInviteResult> =>
  request(
    'DELETE',
    `/api/experimental/orgs/${params.orgID}/invites/${params.inviteID}`,
    params,
    options
  ) as Promise<DeleteOrgsInviteResult>

export interface PostOrgsInvitesResendParams {
  inviteID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsInvitesResendResult =
  | PostOrgsInvitesResendOKResult
  | PostOrgsInvitesResendDefaultResult

interface PostOrgsInvitesResendOKResult {
  status: 200
  headers: Headers
  data: Invite
}

interface PostOrgsInvitesResendDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsInvitesResend = (
  params: PostOrgsInvitesResendParams,
  options: RequestOptions = {}
): Promise<PostOrgsInvitesResendResult> =>
  request(
    'POST',
    `/api/experimental/orgs/${params.orgID}/invites/${params.inviteID}/resend`,
    params,
    options
  ) as Promise<PostOrgsInvitesResendResult>
