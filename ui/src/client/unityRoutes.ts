// This file is generated by [oats][0] and should not be edited by hand.
//
// [0]: https://github.com/influxdata/oats

export interface Account {
  id: number
  balance: number
  billingContact: any
  deletable: boolean
  marketplaceSubscription: any
  pricingVersion: number
  type: 'free' | 'cancelled' | 'pay_as_you_go'
  updatedAt: string
  users: any
  zuoraAccountId: string
}

export interface Error {
  readonly code:
    | 'internal error'
    | 'not found'
    | 'conflict'
    | 'invalid'
    | 'unprocessable entity'
    | 'empty value'
    | 'unavailable'
    | 'forbidden'
    | 'too many requests'
    | 'unauthorized'
    | 'method not allowed'
  readonly message: string
}

export interface BillingDate {
  date: string
  time: string
}

export interface Region {
  title: string
  isBeta: boolean
  isAvailable: boolean
  provider: string
  region: string
}

export interface History {
  billingStats: string
  rateLimits: string
  usageStats: string
}

export interface BillingNotifySettings {
  isNotify: boolean
  balanceThreshold: number
  notifyEmail: string
}

export interface BillingContact {
  companyName: string
  email: string
  firstName: string
  lastName: string
  country: string
  street1: string
  street2?: string
  subdivision?: string
  postalCode: number
}

export interface CreditCardParams {
  readonly id: string
  readonly tenantID: string
  readonly key: string
  readonly signature: string
  readonly token: string
  readonly style: string
  readonly submitEnabled: 'true' | 'false'
  readonly url: string
}

export interface PaymentMethods {
  invoices?: PaymentMethod[]
}

export interface PaymentMethod {
  cardType: string
  cardNumber: string
  expirationMonth: string
  expirationYear: string
  defaultPaymentMethod?: boolean
}

export interface PaymentMethodPut {
  readonly paymentMethodID?: string
}

export interface Invoices {
  invoices?: Invoice[]
}

export interface Invoice {
  readonly status: string
  readonly amount: number
  readonly targetDate: string
  filesID: string
}

export interface Invites {
  links?: {
    self?: string
  }
  invites?: Invite[]
}

export interface Invite {
  readonly id: string
  email: string
  role: 'member' | 'owner'
  expiresAt?: string
  readonly links?: {
    self?: string
  }
}

export interface Users {
  links?: {
    self?: string
  }
  users?: User[]
}

export interface User {
  readonly id: string
  firstName?: string
  lastName?: string
  email: string
  role: 'member' | 'owner'
  readonly links?: {
    self?: string
  }
}

interface RequestOptions {
  signal?: AbortSignal
}

export type RequestHandler = (
  url: string,
  query: string,
  init: RequestInit
) => {url: string; query: string; init: RequestInit}
export type ResponseHandler = (
  status: number,
  headers: Headers,
  data: any
) => {status: number; headers: Headers; data: any}

const RequestContext = function(
  requestHandler: RequestHandler,
  responseHandler: ResponseHandler
) {
  this.requestHandler = requestHandler
  this.responseHandler = responseHandler
}

RequestContext.prototype.request = async function(
  method: string,
  url: string,
  params: any = {},
  options: RequestOptions = {}
): Promise<any> {
  const requestHeaders = new Headers(params.headers)
  const contentType = requestHeaders.get('Content-Type') || ''

  if (params.auth) {
    const credentials = btoa(`${params.auth.username}:${params.auth.password}`)

    requestHeaders.append('Authorization', `Basic ${credentials}`)
  }

  const body =
    params.data && contentType.includes('json')
      ? JSON.stringify(params.data)
      : params.data

  const query = params.query ? `?${new URLSearchParams(params.query)}` : ''

  const {
    url: middlewareUrl,
    query: middlewareQuery,
    init,
  } = this.requestHandler(url, query, {
    method,
    body,
    credentials: 'same-origin',
    signal: options.signal,
    headers: requestHeaders,
  })

  const response = await fetch(`${middlewareUrl}${middlewareQuery}`, init)

  const {status, headers} = response
  const responseContentType = headers.get('Content-Type') || ''

  let data

  if (responseContentType.includes('json')) {
    data = await response.json()
  } else if (responseContentType.includes('octet-stream')) {
    data = await response.blob()
  } else if (responseContentType.includes('text')) {
    data = await response.text()
  }

  return this.responseHandler(status, headers, data)
}

RequestContext.prototype.setRequestHandler = function(
  requestHandler: RequestHandler
) {
  this.requestHandler = requestHandler
}

RequestContext.prototype.setResponseHandler = function(
  responseHandler: ResponseHandler
) {
  this.responseHandler = responseHandler
}

const rc = new RequestContext(
  (url, query, init) => {
    return {url, query, init}
  },
  (status, headers, data) => {
    return {status, headers, data}
  }
)
const request = rc.request.bind(rc)

export const setRequestHandler = rc.setRequestHandler.bind(rc)
export const setResponseHandler = rc.setResponseHandler.bind(rc)

export interface GetBillingAccountParams {}

type GetBillingAccountResult =
  | GetBillingAccountOKResult
  | GetBillingAccountDefaultResult

interface GetBillingAccountOKResult {
  status: 200
  headers: Headers
  data: Account
}

interface GetBillingAccountDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingAccount = (
  params: GetBillingAccountParams,
  options: RequestOptions = {}
): Promise<GetBillingAccountResult> =>
  request('GET', '/unity/v2/billing/account', params, options) as Promise<
    GetBillingAccountResult
  >

export interface GetBillingDateParams {}

type GetBillingDateResult = GetBillingDateOKResult | GetBillingDateDefaultResult

interface GetBillingDateOKResult {
  status: 200
  headers: Headers
  data: BillingDate
}

interface GetBillingDateDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingDate = (
  params: GetBillingDateParams,
  options: RequestOptions = {}
): Promise<GetBillingDateResult> =>
  request('GET', '/unity/v2/billing/date', params, options) as Promise<
    GetBillingDateResult
  >

export interface GetBillingRegionParams {}

type GetBillingRegionResult =
  | GetBillingRegionOKResult
  | GetBillingRegionDefaultResult

interface GetBillingRegionOKResult {
  status: 200
  headers: Headers
  data: Region
}

interface GetBillingRegionDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingRegion = (
  params: GetBillingRegionParams,
  options: RequestOptions = {}
): Promise<GetBillingRegionResult> =>
  request('GET', '/unity/v2/billing/region', params, options) as Promise<
    GetBillingRegionResult
  >

export interface GetAccountHistoryParams {}

type GetAccountHistoryResult =
  | GetAccountHistoryOKResult
  | GetAccountHistoryDefaultResult

interface GetAccountHistoryOKResult {
  status: 200
  headers: Headers
  data: History
}

interface GetAccountHistoryDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getAccountHistory = (
  params: GetAccountHistoryParams,
  options: RequestOptions = {}
): Promise<GetAccountHistoryResult> =>
  request('GET', '/unity/v2/account/history', params, options) as Promise<
    GetAccountHistoryResult
  >

export interface GetBillingNotifySettingsParams {}

type GetBillingNotifySettingsResult =
  | GetBillingNotifySettingsOKResult
  | GetBillingNotifySettingsDefaultResult

interface GetBillingNotifySettingsOKResult {
  status: 200
  headers: Headers
  data: BillingNotifySettings
}

interface GetBillingNotifySettingsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingNotifySettings = (
  params: GetBillingNotifySettingsParams,
  options: RequestOptions = {}
): Promise<GetBillingNotifySettingsResult> =>
  request(
    'GET',
    '/unity/v2/billing/notify_settings',
    params,
    options
  ) as Promise<GetBillingNotifySettingsResult>

export interface PutBillingNotifySettingsParams {
  data: BillingNotifySettings
}

type PutBillingNotifySettingsResult =
  | PutBillingNotifySettingsOKResult
  | PutBillingNotifySettingsDefaultResult

interface PutBillingNotifySettingsOKResult {
  status: 200
  headers: Headers
  data: BillingNotifySettings
}

interface PutBillingNotifySettingsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putBillingNotifySettings = (
  params: PutBillingNotifySettingsParams,
  options: RequestOptions = {}
): Promise<PutBillingNotifySettingsResult> =>
  request(
    'PUT',
    '/unity/v2/billing/notify_settings',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutBillingNotifySettingsResult>

export interface GetBillingContactParams {}

type GetBillingContactResult =
  | GetBillingContactOKResult
  | GetBillingContactDefaultResult

interface GetBillingContactOKResult {
  status: 200
  headers: Headers
  data: BillingContact
}

interface GetBillingContactDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingContact = (
  params: GetBillingContactParams,
  options: RequestOptions = {}
): Promise<GetBillingContactResult> =>
  request('GET', '/unity/v2/billing/contact', params, options) as Promise<
    GetBillingContactResult
  >

export interface PutBillingContactParams {
  data: BillingContact
}

type PutBillingContactResult =
  | PutBillingContactOKResult
  | PutBillingContactDefaultResult

interface PutBillingContactOKResult {
  status: 200
  headers: Headers
  data: BillingContact
}

interface PutBillingContactDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putBillingContact = (
  params: PutBillingContactParams,
  options: RequestOptions = {}
): Promise<PutBillingContactResult> =>
  request(
    'PUT',
    '/unity/v2/billing/contact',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutBillingContactResult>

export interface GetBillingCcParams {}

type GetBillingCcResult = GetBillingCcOKResult | GetBillingCcDefaultResult

interface GetBillingCcOKResult {
  status: 200
  headers: Headers
  data: CreditCardParams
}

interface GetBillingCcDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingCc = (
  params: GetBillingCcParams,
  options: RequestOptions = {}
): Promise<GetBillingCcResult> =>
  request('GET', '/unity/v2/billing/cc', params, options) as Promise<
    GetBillingCcResult
  >

export interface GetBillingPaymentMethodsParams {}

type GetBillingPaymentMethodsResult =
  | GetBillingPaymentMethodsOKResult
  | GetBillingPaymentMethodsDefaultResult

interface GetBillingPaymentMethodsOKResult {
  status: 200
  headers: Headers
  data: PaymentMethods
}

interface GetBillingPaymentMethodsDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getBillingPaymentMethods = (
  params: GetBillingPaymentMethodsParams,
  options: RequestOptions = {}
): Promise<GetBillingPaymentMethodsResult> =>
  request(
    'GET',
    '/unity/v2/billing/payment_methods',
    params,
    options
  ) as Promise<GetBillingPaymentMethodsResult>

export interface PutBillingPaymentMethodParams {
  data: PaymentMethodPut
}

type PutBillingPaymentMethodResult =
  | PutBillingPaymentMethodOKResult
  | PutBillingPaymentMethodDefaultResult

interface PutBillingPaymentMethodOKResult {
  status: 200
  headers: Headers
  data: PaymentMethods
}

interface PutBillingPaymentMethodDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const putBillingPaymentMethod = (
  params: PutBillingPaymentMethodParams,
  options: RequestOptions = {}
): Promise<PutBillingPaymentMethodResult> =>
  request(
    'PUT',
    '/unity/v2/billing/payment_method',
    {...params, headers: {'Content-Type': 'application/json'}},
    options
  ) as Promise<PutBillingPaymentMethodResult>

export interface GetInvoicesParams {}

type GetInvoicesResult = GetInvoicesOKResult | GetInvoicesDefaultResult

interface GetInvoicesOKResult {
  status: 200
  headers: Headers
  data: Invoices
}

interface GetInvoicesDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getInvoices = (
  params: GetInvoicesParams,
  options: RequestOptions = {}
): Promise<GetInvoicesResult> =>
  request('GET', '/unity/v2/invoices', params, options) as Promise<
    GetInvoicesResult
  >

export interface GetOrgsInvitesParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsInvitesResult = GetOrgsInvitesOKResult | GetOrgsInvitesDefaultResult

interface GetOrgsInvitesOKResult {
  status: 200
  headers: Headers
  data: Invites
}

interface GetOrgsInvitesDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsInvites = (
  params: GetOrgsInvitesParams,
  options: RequestOptions = {}
): Promise<GetOrgsInvitesResult> =>
  request(
    'GET',
    `/unity/v2/orgs/${params.orgID}/invites`,
    params,
    options
  ) as Promise<GetOrgsInvitesResult>

export interface PostOrgsInviteParams {
  orgID: string

  data: Invite

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsInviteResult =
  | PostOrgsInviteCreatedResult
  | PostOrgsInviteDefaultResult

interface PostOrgsInviteCreatedResult {
  status: 201
  headers: Headers
  data: Invite
}

interface PostOrgsInviteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsInvite = (
  params: PostOrgsInviteParams,
  options: RequestOptions = {}
): Promise<PostOrgsInviteResult> =>
  request(
    'POST',
    `/unity/v2/orgs/${params.orgID}/invites`,
    {
      ...params,
      headers: {...params.headers, 'Content-Type': 'application/json'},
    },
    options
  ) as Promise<PostOrgsInviteResult>

export interface DeleteOrgsInviteParams {
  inviteID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsInviteResult =
  | DeleteOrgsInviteNoContentResult
  | DeleteOrgsInviteDefaultResult

interface DeleteOrgsInviteNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsInviteDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsInvite = (
  params: DeleteOrgsInviteParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsInviteResult> =>
  request(
    'DELETE',
    `/unity/v2/orgs/${params.orgID}/invites/${params.inviteID}`,
    params,
    options
  ) as Promise<DeleteOrgsInviteResult>

export interface PostOrgsInvitesResendParams {
  inviteID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type PostOrgsInvitesResendResult =
  | PostOrgsInvitesResendOKResult
  | PostOrgsInvitesResendDefaultResult

interface PostOrgsInvitesResendOKResult {
  status: 200
  headers: Headers
  data: Invite
}

interface PostOrgsInvitesResendDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const postOrgsInvitesResend = (
  params: PostOrgsInvitesResendParams,
  options: RequestOptions = {}
): Promise<PostOrgsInvitesResendResult> =>
  request(
    'POST',
    `/unity/v2/orgs/${params.orgID}/invites/${params.inviteID}/resend`,
    params,
    options
  ) as Promise<PostOrgsInvitesResendResult>

export interface GetOrgsUsersParams {
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type GetOrgsUsersResult = GetOrgsUsersOKResult | GetOrgsUsersDefaultResult

interface GetOrgsUsersOKResult {
  status: 200
  headers: Headers
  data: Users
}

interface GetOrgsUsersDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const getOrgsUsers = (
  params: GetOrgsUsersParams,
  options: RequestOptions = {}
): Promise<GetOrgsUsersResult> =>
  request(
    'GET',
    `/unity/v2/orgs/${params.orgID}/users`,
    params,
    options
  ) as Promise<GetOrgsUsersResult>

export interface DeleteOrgsUserParams {
  userID: string
  orgID: string

  headers?: {
    'Zap-Trace-Span'?: string
  }
}

type DeleteOrgsUserResult =
  | DeleteOrgsUserNoContentResult
  | DeleteOrgsUserDefaultResult

interface DeleteOrgsUserNoContentResult {
  status: 204
  headers: Headers
  data: any
}

interface DeleteOrgsUserDefaultResult {
  status: 500
  headers: Headers
  data: Error
}

export const deleteOrgsUser = (
  params: DeleteOrgsUserParams,
  options: RequestOptions = {}
): Promise<DeleteOrgsUserResult> =>
  request(
    'DELETE',
    `/unity/v2/orgs/${params.orgID}/users/${params.userID}`,
    params,
    options
  ) as Promise<DeleteOrgsUserResult>
