// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tasks.proto

/*
	Package pb is a generated protocol buffer package.

	It is generated from these files:
		tasks.proto

	It has these top-level messages:
		StoredTaskInternalMeta
*/
package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// StoredTaskInternalMeta is the internal state of a task.
// It is only intended to be used from implementations of Store.
type StoredTaskInternalMeta struct {
	MaxConcurrency             int32                                 `protobuf:"varint,1,opt,name=max_concurrency,json=maxConcurrency,proto3" json:"max_concurrency,omitempty"`
	LastCompletedTimestampUnix int64                                 `protobuf:"varint,2,opt,name=last_completed_timestamp_unix,json=lastCompletedTimestampUnix,proto3" json:"last_completed_timestamp_unix,omitempty"`
	CurrentlyRunning           []*StoredTaskInternalMeta_RunningList `protobuf:"bytes,3,rep,name=currently_running,json=currentlyRunning" json:"currently_running,omitempty"`
}

func (m *StoredTaskInternalMeta) Reset()                    { *m = StoredTaskInternalMeta{} }
func (m *StoredTaskInternalMeta) String() string            { return proto.CompactTextString(m) }
func (*StoredTaskInternalMeta) ProtoMessage()               {}
func (*StoredTaskInternalMeta) Descriptor() ([]byte, []int) { return fileDescriptorTasks, []int{0} }

func (m *StoredTaskInternalMeta) GetMaxConcurrency() int32 {
	if m != nil {
		return m.MaxConcurrency
	}
	return 0
}

func (m *StoredTaskInternalMeta) GetLastCompletedTimestampUnix() int64 {
	if m != nil {
		return m.LastCompletedTimestampUnix
	}
	return 0
}

func (m *StoredTaskInternalMeta) GetCurrentlyRunning() []*StoredTaskInternalMeta_RunningList {
	if m != nil {
		return m.CurrentlyRunning
	}
	return nil
}

type StoredTaskInternalMeta_RunningList struct {
	NowTimestampUnix int64  `protobuf:"varint,1,opt,name=now_timestamp_unix,json=nowTimestampUnix,proto3" json:"now_timestamp_unix,omitempty"`
	Try              uint32 `protobuf:"varint,2,opt,name=try,proto3" json:"try,omitempty"`
	RunID            uint64 `protobuf:"varint,3,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
}

func (m *StoredTaskInternalMeta_RunningList) Reset()         { *m = StoredTaskInternalMeta_RunningList{} }
func (m *StoredTaskInternalMeta_RunningList) String() string { return proto.CompactTextString(m) }
func (*StoredTaskInternalMeta_RunningList) ProtoMessage()    {}
func (*StoredTaskInternalMeta_RunningList) Descriptor() ([]byte, []int) {
	return fileDescriptorTasks, []int{0, 0}
}

func (m *StoredTaskInternalMeta_RunningList) GetNowTimestampUnix() int64 {
	if m != nil {
		return m.NowTimestampUnix
	}
	return 0
}

func (m *StoredTaskInternalMeta_RunningList) GetTry() uint32 {
	if m != nil {
		return m.Try
	}
	return 0
}

func (m *StoredTaskInternalMeta_RunningList) GetRunID() uint64 {
	if m != nil {
		return m.RunID
	}
	return 0
}

func init() {
	proto.RegisterType((*StoredTaskInternalMeta)(nil), "com.influxdata.platform.task.backend.StoredTaskInternalMeta")
	proto.RegisterType((*StoredTaskInternalMeta_RunningList)(nil), "com.influxdata.platform.task.backend.StoredTaskInternalMeta.RunningList")
}
func (m *StoredTaskInternalMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredTaskInternalMeta) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MaxConcurrency != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.MaxConcurrency))
	}
	if m.LastCompletedTimestampUnix != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.LastCompletedTimestampUnix))
	}
	if len(m.CurrentlyRunning) > 0 {
		for _, msg := range m.CurrentlyRunning {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintTasks(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *StoredTaskInternalMeta_RunningList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StoredTaskInternalMeta_RunningList) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.NowTimestampUnix != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.NowTimestampUnix))
	}
	if m.Try != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.Try))
	}
	if m.RunID != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintTasks(dAtA, i, uint64(m.RunID))
	}
	return i, nil
}

func encodeVarintTasks(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *StoredTaskInternalMeta) Size() (n int) {
	var l int
	_ = l
	if m.MaxConcurrency != 0 {
		n += 1 + sovTasks(uint64(m.MaxConcurrency))
	}
	if m.LastCompletedTimestampUnix != 0 {
		n += 1 + sovTasks(uint64(m.LastCompletedTimestampUnix))
	}
	if len(m.CurrentlyRunning) > 0 {
		for _, e := range m.CurrentlyRunning {
			l = e.Size()
			n += 1 + l + sovTasks(uint64(l))
		}
	}
	return n
}

func (m *StoredTaskInternalMeta_RunningList) Size() (n int) {
	var l int
	_ = l
	if m.NowTimestampUnix != 0 {
		n += 1 + sovTasks(uint64(m.NowTimestampUnix))
	}
	if m.Try != 0 {
		n += 1 + sovTasks(uint64(m.Try))
	}
	if m.RunID != 0 {
		n += 1 + sovTasks(uint64(m.RunID))
	}
	return n
}

func sovTasks(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTasks(x uint64) (n int) {
	return sovTasks(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StoredTaskInternalMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StoredTaskInternalMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StoredTaskInternalMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxConcurrency", wireType)
			}
			m.MaxConcurrency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxConcurrency |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastCompletedTimestampUnix", wireType)
			}
			m.LastCompletedTimestampUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastCompletedTimestampUnix |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentlyRunning", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTasks
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentlyRunning = append(m.CurrentlyRunning, &StoredTaskInternalMeta_RunningList{})
			if err := m.CurrentlyRunning[len(m.CurrentlyRunning)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StoredTaskInternalMeta_RunningList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RunningList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RunningList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NowTimestampUnix", wireType)
			}
			m.NowTimestampUnix = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NowTimestampUnix |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Try", wireType)
			}
			m.Try = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Try |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunID", wireType)
			}
			m.RunID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RunID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTasks(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTasks
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTasks(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTasks
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTasks
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTasks
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTasks
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTasks(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTasks = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTasks   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tasks.proto", fileDescriptorTasks) }

var fileDescriptorTasks = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x6a, 0xdb, 0x40,
	0x14, 0x85, 0x3b, 0x56, 0x6d, 0xe8, 0x98, 0xb6, 0xae, 0x28, 0x45, 0x18, 0xaa, 0x8a, 0x52, 0xa8,
	0x16, 0xc9, 0x18, 0x92, 0x27, 0x88, 0x9d, 0x45, 0x0c, 0xc9, 0x46, 0x71, 0x36, 0xd9, 0x88, 0x91,
	0x34, 0x56, 0x06, 0x6b, 0xee, 0x88, 0xd1, 0x1d, 0x2c, 0xbf, 0x45, 0x1e, 0x2b, 0xcb, 0x3c, 0x41,
	0x08, 0xca, 0x36, 0x0f, 0x11, 0x2c, 0xc7, 0xf9, 0x23, 0x8b, 0xec, 0xee, 0x3d, 0x7c, 0x73, 0xe6,
	0x1c, 0x2e, 0xed, 0x23, 0xaf, 0x16, 0x15, 0x2b, 0x8d, 0x46, 0xed, 0xfe, 0x4b, 0xb5, 0x62, 0x12,
	0xe6, 0x85, 0xad, 0x33, 0x8e, 0x9c, 0x95, 0x05, 0xc7, 0xb9, 0x36, 0x8a, 0xad, 0x21, 0x96, 0xf0,
	0x74, 0x21, 0x20, 0x1b, 0xee, 0xe6, 0x12, 0x2f, 0x6c, 0xc2, 0x52, 0xad, 0x46, 0xb9, 0xce, 0xf5,
	0xa8, 0x7d, 0x9c, 0xd8, 0x79, 0xbb, 0xb5, 0x4b, 0x3b, 0x6d, 0x4c, 0xff, 0xde, 0x77, 0xe8, 0xaf,
	0x53, 0xd4, 0x46, 0x64, 0x33, 0x5e, 0x2d, 0xa6, 0x80, 0xc2, 0x00, 0x2f, 0x4e, 0x04, 0x72, 0xf7,
	0x3f, 0xfd, 0xae, 0x78, 0x1d, 0xa7, 0x1a, 0x52, 0x6b, 0x8c, 0x80, 0x74, 0xe5, 0x91, 0x80, 0x84,
	0xdd, 0xe8, 0x9b, 0xe2, 0xf5, 0xe4, 0x59, 0x75, 0x0f, 0xe8, 0xef, 0x82, 0x57, 0x18, 0xa7, 0x5a,
	0x95, 0x85, 0x40, 0x91, 0xc5, 0x28, 0x95, 0xa8, 0x90, 0xab, 0x32, 0xb6, 0x20, 0x6b, 0xaf, 0x13,
	0x90, 0xd0, 0x89, 0x86, 0x6b, 0x68, 0xb2, 0x65, 0x66, 0x5b, 0xe4, 0x0c, 0x64, 0xed, 0x5a, 0xfa,
	0x63, 0x63, 0x87, 0xc5, 0x2a, 0x36, 0x16, 0x40, 0x42, 0xee, 0x39, 0x81, 0x13, 0xf6, 0xf7, 0x8e,
	0xd8, 0x47, 0x7a, 0xb3, 0xf7, 0x4b, 0xb0, 0x68, 0xe3, 0x75, 0x2c, 0x2b, 0x8c, 0x06, 0x4f, 0x5f,
	0x3c, 0xaa, 0x43, 0x4d, 0xfb, 0x2f, 0x00, 0x77, 0x87, 0xba, 0xa0, 0x97, 0x6f, 0xd3, 0x93, 0x36,
	0xfd, 0x00, 0xf4, 0xf2, 0x75, 0xe6, 0x01, 0x75, 0xd0, 0xac, 0xda, 0x72, 0x5f, 0xa3, 0xf5, 0xe8,
	0x06, 0xb4, 0x67, 0x2c, 0xc4, 0x32, 0xf3, 0x9c, 0x80, 0x84, 0x9f, 0xc7, 0x5f, 0x9a, 0x9b, 0x3f,
	0xdd, 0xc8, 0xc2, 0xf4, 0x30, 0xea, 0x1a, 0x0b, 0xd3, 0x6c, 0xfc, 0xf3, 0xaa, 0xf1, 0xc9, 0x75,
	0xe3, 0x93, 0xdb, 0xc6, 0x27, 0x97, 0x77, 0xfe, 0xa7, 0xf3, 0x4e, 0x99, 0x24, 0xbd, 0xf6, 0x16,
	0xfb, 0x0f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x60, 0x91, 0x80, 0x05, 0xef, 0x01, 0x00, 0x00,
}
