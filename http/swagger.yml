openapi: "3.0.0"
info:
  title: Influx API Service
  version: 0.1.0
servers:
  - url: /api/v2
paths:
  /signin:
    post:
      operationId: PostSignin
      summary: Exchange basic auth credentials for session
      security:
        - BasicAuth: []
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "204":
          description: Successfully authenticated
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: user account is disabled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /signout:
    post:
      operationId: PostSignout
      summary: Expire the current session
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "204":
          description: Session successfully expired
        "401":
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful session expiry
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /:
    get:
      operationId: GetRoutes
      summary: Map of all top level routes available
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        default:
          description: All routes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Routes"
  /setup:
    get:
      operationId: GetSetup
      tags:
        - Setup
      summary: Check if database has default user, org, bucket
      description: Returns `true` if no default user, organization, or bucket has been created.
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: allowed true or false
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IsOnboarding"
    post:
      operationId: PostSetup
      tags:
        - Setup
      summary: Set up initial user, org and bucket
      description: Post an onboarding request to set up initial user, org and bucket.
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnboardingRequest"
      responses:
        "201":
          description: Created default user, bucket, org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnboardingResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /setup/user:
    post:
      operationId: PostSetupUser
      tags:
        - Setup
      summary: Set up a new user, org and bucket
      description: Post an onboarding request to set up a new user, org and bucket.
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OnboardingRequest"
      responses:
        "201":
          description: Created default user, bucket, org
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OnboardingResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /documents/templates:
    get:
      operationId: GetDocumentsTemplates
      tags:
        - Templates
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: org
          description: Specifies the name of the organization of the template.
          schema:
            type: string
        - in: query
          name: orgID
          description: Specifies the organization ID of the template.
          schema:
            type: string
      responses:
        "200":
          description: A list of template documents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Documents"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDocumentsTemplates
      tags:
        - Templates
      summary: Create a template
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Template that will be created
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentCreate"
      responses:
        "201":
          description: Template created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/templates/{templateID}":
    get:
      operationId: GetDocumentsTemplatesID
      tags:
        - Templates
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
      responses:
        "200":
          description: The template requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutDocumentsTemplatesID
      tags:
        - Templates
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
      requestBody:
        description: Template that will be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DocumentUpdate"
      responses:
        "200":
          description: The newly updated template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Document"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteDocumentsTemplatesID
      tags:
        - Templates
      summary: Delete a template
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
      responses:
        "204":
          description: Delete has been accepted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/templates/{templateID}/labels":
    get:
      operationId: GetDocumentsTemplatesIDLabels
      tags:
        - Templates
      summary: List all labels for a template
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
      responses:
        "200":
          description: A list of all labels for a template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDocumentsTemplatesIDLabels
      tags:
        - Templates
      summary: Add a label to a template
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label added to the template
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/documents/templates/{templateID}/labels/{labelID}":
    delete:
      operationId: DeleteDocumentsTemplatesIDLabelsID
      tags:
        - Templates
      summary: Delete a label from a template
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: templateID
          schema:
            type: string
          required: true
          description: The template ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Template not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dbrps:
    get:
      operationId: GetDBRPs
      tags:
        - DBRPs
      summary: List all database retention policy mappings
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          required: true
          description: Specifies the organization ID to filter on
          schema:
            type: string
        - in: query
          name: id
          description: Specifies the mapping ID to filter on
          schema:
            type: string
        - in: query
          name: bucketID
          description: Specifies the bucket ID to filter on
          schema:
            type: string
        - in: query
          name: default
          description: Specifies filtering on default
          schema:
            type: boolean
        - in: query
          name: db
          description: Specifies the database to filter on
          schema:
            type: string
        - in: query
          name: rp
          description: Specifies the retention policy to filter on
          schema:
            type: string
      responses:
        "200":
          description: A list of all database retention policy mappings
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DBRPs"
        "400":
          description: if any of the parameter passed is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDBRP
      tags:
        - DBRPs
      summary: Add a database retention policy mapping
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: The database retention policy mapping to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DBRP"
      responses:
        "201":
          description: Database retention policy mapping created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DBRP"
        "400":
          description: if any of the IDs in the mapping is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dbrps/{dbrpID}":
    get:
      operationId: GetDBRPsID
      tags:
        - DBRPs
      summary: Retrieve a database retention policy mapping
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          required: true
          description: Specifies the organization ID of the mapping
          schema:
            type: string
        - in: path
          name: dbrpID
          schema:
            type: string
          required: true
          description: The database retention policy mapping ID
      responses:
        "200":
          description: The database retention policy requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DBRP"
        "400":
          description: if any of the IDs passed is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchDBRPID
      tags:
        - DBRPs
      summary: Update a database retention policy mapping
      requestBody:
        description: Database retention policy update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DBRPUpdate"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          required: true
          description: Specifies the organization ID of the mapping
          schema:
            type: string
        - in: path
          name: dbrpID
          schema:
            type: string
          required: true
          description: The database retention policy mapping.
      responses:
        "200":
          description: An updated mapping
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DBRP"
        "404":
          description: The mapping was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: if any of the IDs passed is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteDBRPID
      tags:
        - DBRPs
      summary: Delete a database retention policy
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          required: true
          description: Specifies the organization ID of the mapping
          schema:
            type: string
        - in: path
          name: dbrpID
          schema:
            type: string
          required: true
          description: The database retention policy mapping
      responses:
        "204":
          description: Delete has been accepted
        "400":
          description: if any of the IDs passed is invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /telegraf/plugins:
    get:
      operationId: GetTelegrafPlugins
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: type
          description: The type of plugin desired.
          schema:
            type: string
      responses:
        "200":
          description: A list of Telegraf plugins.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TelegrafPlugins"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /telegrafs:
    get:
      operationId: GetTelegrafs
      tags:
        - Telegrafs
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          description: The organization ID the Telegraf config belongs to.
          schema:
            type: string
      responses:
        "200":
          description: A list of Telegraf configs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Telegrafs"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTelegrafs
      tags:
        - Telegrafs
      summary: Create a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Telegraf config to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelegrafRequest"
      responses:
        "201":
          description: Telegraf config created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Telegraf"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}":
    get:
      operationId: GetTelegrafsID
      tags:
        - Telegrafs
      summary: Retrieve a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
        - in: header
          name: Accept
          required: false
          schema:
            type: string
            default: application/toml
            enum:
              - application/toml
              - application/json
              - application/octet-stream
      responses:
        "200":
          description: Telegraf config details
          content:
            application/toml:
              example: "[agent]\ninterval = \"10s\""
              schema:
                type: string
            application/json:
              schema:
                $ref: "#/components/schemas/Telegraf"
            application/octet-stream:
              example: "[agent]\ninterval = \"10s\""
              schema:
                type: string
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutTelegrafsID
      tags:
        - Telegrafs
      summary: Update a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      requestBody:
        description: Telegraf config update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TelegrafRequest"
      responses:
        "200":
          description: An updated Telegraf config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Telegraf"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteTelegrafsID
      tags:
        - Telegrafs
      summary: Delete a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "204":
          description: Delete has been accepted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/labels":
    get:
      operationId: GetTelegrafsIDLabels
      tags:
        - Telegrafs
      summary: List all labels for a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "200":
          description: A list of all labels for a Telegraf config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTelegrafsIDLabels
      tags:
        - Telegrafs
      summary: Add a label to a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label added to the Telegraf config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/labels/{labelID}":
    delete:
      operationId: DeleteTelegrafsIDLabelsID
      tags:
        - Telegrafs
      summary: Delete a label from a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Telegraf config not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/members":
    get:
      operationId: GetTelegrafsIDMembers
      tags:
        - Users
        - Telegrafs
      summary: List all users with member privileges for a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "200":
          description: A list of Telegraf config members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTelegrafsIDMembers
      tags:
        - Users
        - Telegrafs
      summary: Add a member to a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Member added to Telegraf config
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/members/{userID}":
    delete:
      operationId: DeleteTelegrafsIDMembersID
      tags:
        - Users
        - Telegrafs
      summary: Remove a member from a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/owners":
    get:
      operationId: GetTelegrafsIDOwners
      tags:
        - Users
        - Telegrafs
      summary: List all owners of a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "200":
          description: A list of Telegraf config owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTelegrafsIDOwners
      tags:
        - Users
        - Telegrafs
      summary: Add an owner to a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Telegraf config owner added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/telegrafs/{telegrafID}/owners/{userID}":
    delete:
      operationId: DeleteTelegrafsIDOwnersID
      tags:
        - Users
        - Telegrafs
      summary: Remove an owner from a Telegraf config
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the owner to remove.
        - in: path
          name: telegrafID
          schema:
            type: string
          required: true
          description: The Telegraf config ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /scrapers:
    get:
      operationId: GetScrapers
      tags:
        - ScraperTargets
      summary: Get all scraper targets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: name
          description: Specifies the name of the scraper target.
          schema:
            type: string
        - in: query
          name: id
          description: List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: Specifies the organization ID of the scraper target.
          schema:
            type: string
        - in: query
          name: org
          description: Specifies the organization name of the scraper target.
          schema:
            type: string
      responses:
        "200":
          description: All scraper targets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScraperTargetResponses"
    post:
      operationId: PostScrapers
      summary: Create a scraper target
      tags:
        - ScraperTargets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Scraper target to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScraperTargetRequest"
      responses:
        "201":
          description: Scraper target created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScraperTargetResponse"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}":
    get:
      operationId: GetScrapersID
      tags:
        - ScraperTargets
      summary: Get a scraper target by ID
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The scraper target ID.
      responses:
        "200":
          description: Scraper target updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScraperTargetResponse"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteScrapersID
      tags:
        - ScraperTargets
      summary: Delete a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The scraper target ID.
      responses:
        "204":
          description: Scraper target deleted
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchScrapersID
      summary: Update a scraper target
      tags:
        - ScraperTargets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          required: true
          schema:
            type: string
          description: The scraper target ID.
      requestBody:
        description: Scraper target update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ScraperTargetRequest"
      responses:
        "200":
          description: Scraper target updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScraperTargetResponse"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/labels":
    get:
      operationId: GetScrapersIDLabels
      tags:
        - ScraperTargets
      summary: List all labels for a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        "200":
          description: A list of all labels for a scraper target
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostScrapersIDLabels
      tags:
        - ScraperTargets
      summary: Add a label to a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The newly added label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/labels/{labelID}":
    delete:
      operationId: DeleteScrapersIDLabelsID
      tags:
        - ScraperTargets
      summary: Delete a label from a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Scraper target not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/members":
    get:
      operationId: GetScrapersIDMembers
      tags:
        - Users
        - ScraperTargets
      summary: List all users with member privileges for a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        "200":
          description: A list of scraper target members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostScrapersIDMembers
      tags:
        - Users
        - ScraperTargets
      summary: Add a member to a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Member added to scraper targets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/members/{userID}":
    delete:
      operationId: DeleteScrapersIDMembersID
      tags:
        - Users
        - ScraperTargets
      summary: Remove a member from a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of member to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/owners":
    get:
      operationId: GetScrapersIDOwners
      tags:
        - Users
        - ScraperTargets
      summary: List all owners of a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        "200":
          description: A list of scraper target owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostScrapersIDOwners
      tags:
        - Users
        - ScraperTargets
      summary: Add an owner to a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Scraper target owner added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/scrapers/{scraperTargetID}/owners/{userID}":
    delete:
      operationId: DeleteScrapersIDOwnersID
      tags:
        - Users
        - ScraperTargets
      summary: Remove an owner from a scraper target
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of owner to remove.
        - in: path
          name: scraperTargetID
          schema:
            type: string
          required: true
          description: The scraper target ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /variables:
    get:
      operationId: GetVariables
      tags:
        - Variables
      summary: Get all variables
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
      responses:
        "200":
          description: All variables for an organization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variables"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostVariables
      summary: Create a variable
      tags:
        - Variables
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Variable to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Variable"
      responses:
        "201":
          description: Variable created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variable"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/variables/{variableID}":
    get:
      operationId: GetVariablesID
      tags:
        - Variables
      summary: Get a variable
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        "200":
          description: Variable found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variable"
        "404":
          description: Variable not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteVariablesID
      tags:
        - Variables
      summary: Delete a variable
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      responses:
        "204":
          description: Variable deleted
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchVariablesID
      summary: Update a variable
      tags:
        - Variables
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Variable"
      responses:
        "200":
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variable"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutVariablesID
      summary: Replace a variable
      tags:
        - Variables
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          required: true
          schema:
            type: string
          description: The variable ID.
      requestBody:
        description: Variable to replace
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Variable"
      responses:
        "200":
          description: Variable updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Variable"
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/variables/{variableID}/labels":
    get:
      operationId: GetVariablesIDLabels
      tags:
        - Variables
      summary: List all labels for a variable
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          schema:
            type: string
          required: true
          description: The variable ID.
      responses:
        "200":
          description: A list of all labels for a variable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostVariablesIDLabels
      tags:
        - Variables
      summary: Add a label to a variable
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          schema:
            type: string
          required: true
          description: The variable ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The newly added label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/variables/{variableID}/labels/{labelID}":
    delete:
      operationId: DeleteVariablesIDLabelsID
      tags:
        - Variables
      summary: Delete a label from a variable
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: variableID
          schema:
            type: string
          required: true
          description: The variable ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Variable not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /write:
    post:
      operationId: PostWrite
      tags:
        - Write
      summary: Write time series data into InfluxDB
      requestBody:
        description: Line protocol body
        required: true
        content:
          text/plain:
            schema:
              type: string
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: header
          name: Content-Encoding
          description: When present, its value indicates to the database that compression is applied to the line-protocol body.
          schema:
            type: string
            description: Specifies that the line protocol in the body is encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          description: Content-Type is used to indicate the format of the data sent to the server.
          schema:
            type: string
            description: Text/plain specifies the text line protocol; charset is assumed to be utf-8.
            default: text/plain; charset=utf-8
            enum:
              - text/plain
              - text/plain; charset=utf-8
              - application/vnd.influx.arrow
        - in: header
          name: Content-Length
          description: Content-Length is an entity header is indicating the size of the entity-body, in bytes, sent to the database. If the length is greater than the database max body configuration option, a 413 response is sent.
          schema:
            type: integer
            description: The length in decimal number of octets.
        - in: header
          name: Accept
          description: Specifies the return content format.
          schema:
            type: string
            description: The return format for errors.
            default: application/json
            enum:
              - application/json
        - in: query
          name: org
          description: Specifies the destination organization for writes. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.
          required: true
          schema:
            type: string
            description: All points within batch are written to this organization.
        - in: query
          name: orgID
          description: Specifies the ID of the destination organization for writes. If both `orgID` and `org` are specified, `org` takes precedence.
          schema:
            type: string
        - in: query
          name: bucket
          description: The destination bucket for writes.
          required: true
          schema:
            type: string
            description: All points within batch are written to this bucket.
        - in: query
          name: precision
          description: The precision for the unix timestamps within the body line-protocol.
          schema:
            $ref: "#/components/schemas/WritePrecision"
      responses:
        "204":
          description: Write data is correctly formatted and accepted for writing to the bucket.
        "400":
          description: Line protocol poorly formed and no points were written.  Response can be used to determine the first malformed line in the body line-protocol. All data in body was rejected and not written.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineProtocolError"
        "401":
          description: Token does not have sufficient permissions to write to this organization and bucket or the organization and bucket do not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: No token was sent and they are required.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "413":
          description: Write has been rejected because the payload is too large. Error message returns max size supported. All data in body was rejected and not written.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LineProtocolLengthError"
        "429":
          description: Token is temporarily over quota. The Retry-After header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        "503":
          description: Server is temporarily unavailable to accept writes.  The Retry-After header describes when to try the write again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delete:
    post:
      operationId: PostDelete
      summary: Delete time series data from InfluxDB
      requestBody:
        description: Predicate delete request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePredicateRequest"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: org
          description: Specifies the organization to delete data from.
          schema:
            type: string
            description: Only points from this organization are deleted.
        - in: query
          name: bucket
          description: Specifies the bucket to delete data from.
          schema:
            type: string
            description: Only points from this bucket are deleted.
        - in: query
          name: orgID
          description: Specifies the organization ID of the resource.
          schema:
            type: string
        - in: query
          name: bucketID
          description: Specifies the bucket ID to delete data from.
          schema:
            type: string
            description: Only points from this bucket ID are deleted.
      responses:
        "204":
          description: delete has been accepted
        "400":
          description: invalid request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: the bucket or organization is not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: no token was sent or does not have sufficient permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ready:
    servers:
      - url: /
    get:
      operationId: GetReady
      tags:
        - Ready
      summary: Get the readiness of an instance at startup
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: The instance is ready
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ready"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /health:
    servers:
      - url: /
    get:
      operationId: GetHealth
      tags:
        - Health
      summary: Get the health of an instance
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: The instance is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: The instance is unhealthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sources:
    post:
      operationId: PostSources
      tags:
        - Sources
      summary: Create a source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Source to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Source"
      responses:
        "201":
          description: Created Source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: GetSources
      tags:
        - Sources
      summary: Get all sources
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
      responses:
        "200":
          description: All sources
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Sources"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sources/{sourceID}:
    delete:
      operationId: DeleteSourcesID
      tags:
        - Sources
      summary: Delete a source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: View not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchSourcesID
      tags:
        - Sources
      summary: Update a Source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      requestBody:
        description: Source update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Source"
      responses:
        "200":
          description: Created Source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "404":
          description: Source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: GetSourcesID
      tags:
        - Sources
      summary: Get a source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        "200":
          description: A source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Source"
        "404":
          description: Source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sources/{sourceID}/health:
    get:
      operationId: GetSourcesIDHealth
      tags:
        - Sources
      summary: Get the health of a source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
      responses:
        "200":
          description: The source is healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        "503":
          description: The source is not healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthCheck"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /sources/{sourceID}/buckets:
    get:
      operationId: GetSourcesIDBuckets
      tags:
        - Sources
        - Buckets
      summary: Get buckets in a source
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: sourceID
          schema:
            type: string
          required: true
          description: The source ID.
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
      responses:
        "200":
          description: A source
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Buckets"
        "404":
          description: Source not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /labels:
    post:
      operationId: PostLabels
      tags:
        - Labels
      summary: Create a label
      requestBody:
        description: Label to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelCreateRequest"
      responses:
        "201":
          description: Added label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: GetLabels
      tags:
        - Labels
      summary: Get all labels
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
      responses:
        "200":
          description: All labels
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /labels/{labelID}:
    get:
      operationId: GetLabelsID
      tags:
        - Labels
      summary: Get a label
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to update.
      responses:
        "200":
          description: A label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchLabelsID
      tags:
        - Labels
      summary: Update a label
      requestBody:
        description: Label update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelUpdate"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to update.
      responses:
        "200":
          description: Updated label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        "404":
          description: Label not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteLabelsID
      tags:
        - Labels
      summary: Delete a label
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Label not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dashboards:
    post:
      operationId: PostDashboards
      tags:
        - Dashboards
      summary: Create a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Dashboard to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDashboardRequest"
      responses:
        "201":
          description: Added dashboard
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Dashboard"
                  - $ref: "#/components/schemas/DashboardWithViewProperties"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      operationId: GetDashboards
      tags:
        - Dashboards
      summary: Get all dashboards
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Descending"
        - in: query
          name: owner
          description: The owner ID.
          schema:
            type: string
        - in: query
          name: sortBy
          description: The column to sort by.
          schema:
            type: string
            enum:
              - "ID"
              - "CreatedAt"
              - "UpdatedAt"
        - in: query
          name: id
          description: List of dashboard IDs to return. If both `id` and `owner` are specified, only `id` is used.
          schema:
            type: array
            items:
              type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
      responses:
        "200":
          description: All dashboards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboards"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}":
    get:
      operationId: GetDashboardsID
      tags:
        - Dashboards
      summary: Get a Dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
        - in: query
          name: include
          required: false
          schema:
            type: string
            enum:
              - properties
          description: Includes the cell view properties in the response if set to `properties`
      responses:
        "200":
          description: Get a single dashboard
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Dashboard"
                  - $ref: "#/components/schemas/DashboardWithViewProperties"
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchDashboardsID
      tags:
        - Dashboards
      summary: Update a dashboard
      requestBody:
        description: Patching of a dashboard
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: optional, when provided will replace the name
                  type: string
                description:
                  description: optional, when provided will replace the description
                  type: string
                cells:
                  description: optional, when provided will replace all existing cells with the cells provided
                  $ref: "#/components/schemas/CellWithViewProperties"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
      responses:
        "200":
          description: Updated dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteDashboardsID
      tags:
        - Dashboards
      summary: Delete a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/cells":
    put:
      operationId: PutDashboardsIDCells
      tags:
        - Cells
        - Dashboards
      summary: Replace cells in a dashboard
      description: Replaces all cells in a dashboard. This is used primarily to update the positional information of all cells.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cells"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
      responses:
        "201":
          description: Replaced dashboard cells
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDashboardsIDCells
      tags:
        - Cells
        - Dashboards
      summary: Create a dashboard cell
      requestBody:
        description: Cell that will be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCell"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
      responses:
        "201":
          description: Cell successfully added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/cells/{cellID}":
    patch:
      operationId: PatchDashboardsIDCellsID
      tags:
        - Cells
        - Dashboards
      summary: Update the non-positional information related to a cell
      description: Updates the non positional information related to a cell. Updates to a single cell's positional data could cause grid conflicts.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CellUpdate"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: The ID of the cell to update.
      responses:
        "200":
          description: Updated dashboard cell
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cell"
        "404":
          description: Cell or dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteDashboardsIDCellsID
      tags:
        - Cells
        - Dashboards
      summary: Delete a dashboard cell
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to delete.
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: The ID of the cell to delete.
      responses:
        "204":
          description: Cell successfully deleted
        "404":
          description: Cell or dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/cells/{cellID}/view":
    get:
      operationId: GetDashboardsIDCellsIDView
      tags:
        - Cells
        - Dashboards
        - Views
      summary: Retrieve the view for a cell
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: The cell ID.
      responses:
        "200":
          description: A dashboard cells view
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        "404":
          description: Cell or dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchDashboardsIDCellsIDView
      tags:
        - Cells
        - Dashboards
        - Views
      summary: Update the view for a cell
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/View"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The ID of the dashboard to update.
        - in: path
          name: cellID
          schema:
            type: string
          required: true
          description: The ID of the cell to update.
      responses:
        "200":
          description: Updated cell view
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/View"
        "404":
          description: Cell or dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/labels":
    get:
      operationId: GetDashboardsIDLabels
      tags:
        - Dashboards
      summary: List all labels for a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      responses:
        "200":
          description: A list of all labels for a dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDashboardsIDLabels
      tags:
        - Dashboards
      summary: Add a label to a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label added to the dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/labels/{labelID}":
    delete:
      operationId: DeleteDashboardsIDLabelsID
      tags:
        - Dashboards
      summary: Delete a label from a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Dashboard not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/members":
    get:
      operationId: GetDashboardsIDMembers
      tags:
        - Users
        - Dashboards
      summary: List all dashboard members
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      responses:
        "200":
          description: A list of users who have member privileges for a dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDashboardsIDMembers
      tags:
        - Users
        - Dashboards
      summary: Add a member to a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Added to dashboard members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/members/{userID}":
    delete:
      operationId: DeleteDashboardsIDMembersID
      tags:
        - Users
        - Dashboards
      summary: Remove a member from a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/owners":
    get:
      operationId: GetDashboardsIDOwners
      tags:
        - Users
        - Dashboards
      summary: List all dashboard owners
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      responses:
        "200":
          description: A list of users who have owner privileges for a dashboard
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostDashboardsIDOwners
      tags:
        - Users
        - Dashboards
      summary: Add an owner to a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Added to dashboard owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/dashboards/{dashboardID}/owners/{userID}":
    delete:
      operationId: DeleteDashboardsIDOwnersID
      tags:
        - Users
        - Dashboards
      summary: Remove an owner from a dashboard
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the owner to remove.
        - in: path
          name: dashboardID
          schema:
            type: string
          required: true
          description: The dashboard ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /query/ast:
    post:
      operationId: PostQueryAst
      description: Analyzes flux query and generates a query specification.
      tags:
        - Query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
      requestBody:
        description: Analyzed Flux query to generate abstract syntax tree.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageRequest"
      responses:
        "200":
          description: Abstract syntax tree of flux query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ASTResponse"
        default:
          description: Any response other than 200 is an internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /query/suggestions:
    get:
      operationId: GetQuerySuggestions
      tags:
        - Query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: Suggestions for next functions in call chain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FluxSuggestions"
        default:
          description: Any response other than 200 is an internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/query/suggestions/{name}":
    get:
      operationId: GetQuerySuggestionsName
      tags:
        - Query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: The name of the branching suggestion.
      responses:
        "200":
          description: Suggestions for next functions in call chain
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FluxSuggestion"
        default:
          description: Any response other than 200 is an internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /authorizations:
    get:
      operationId: GetAuthorizations
      tags:
        - Authorizations
      summary: List all authorizations
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: userID
          schema:
            type: string
          description: Only show authorizations that belong to a user ID.
        - in: query
          name: user
          schema:
            type: string
          description: Only show authorizations that belong to a user name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Only show authorizations that belong to an organization ID.
        - in: query
          name: org
          schema:
            type: string
          description: Only show authorizations that belong to a organization name.
      responses:
        "200":
          description: A list of authorizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorizations"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostAuthorizations
      tags:
        - Authorizations
      summary: Create an authorization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Authorization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Authorization"
      responses:
        "201":
          description: Authorization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /authorizations/{authID}:
    get:
      operationId: GetAuthorizationsID
      tags:
        - Authorizations
      summary: Retrieve an authorization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to get.
      responses:
        "200":
          description: Authorization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchAuthorizationsID
      tags:
        - Authorizations
      summary: Update an authorization to be active or inactive
      requestBody:
        description: Authorization to update
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizationUpdateRequest"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to update.
      responses:
        "200":
          description: The active or inactie authorization
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Authorization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteAuthorizationsID
      tags:
        - Authorizations
      summary: Delete an authorization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: authID
          schema:
            type: string
          required: true
          description: The ID of the authorization to delete.
      responses:
        "204":
          description: Authorization deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /query/analyze:
    post:
      operationId: PostQueryAnalyze
      tags:
        - Query
      summary: Analyze an InfluxQL or Flux query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
      requestBody:
        description: Flux or InfluxQL query to analyze
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        "200":
          description: Query analyze results. Errors will be empty if the query is valid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnalyzeQueryResponse"
        default:
          description: Internal server error
          headers:
            X-Influx-Error:
              description: Error string describing the problem
              schema:
                type: string
            X-Influx-Reference:
              description: Reference code unique to the error type
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /query:
    post:
      operationId: PostQuery
      tags:
        - Query
      summary: Query InfluxDB
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: header
          name: Accept-Encoding
          description: The Accept-Encoding request HTTP header advertises which content encoding, usually a compression algorithm, the client is able to understand.
          schema:
            type: string
            description: Specifies that the query response in the body should be encoded with gzip or not encoded with identity.
            default: identity
            enum:
              - gzip
              - identity
        - in: header
          name: Content-Type
          schema:
            type: string
            enum:
              - application/json
              - application/vnd.flux
        - in: query
          name: org
          description: Specifies the name of the organization executing the query. Takes either the ID or Name interchangeably. If both `orgID` and `org` are specified, `org` takes precedence.
          schema:
            type: string
        - in: query
          name: orgID
          description: Specifies the ID of the organization executing the query. If both `orgID` and `org` are specified, `org` takes precedence.
          schema:
            type: string
      requestBody:
        description: Flux query or specification to execute
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/Query"
                - $ref: "#/components/schemas/InfluxQLQuery"
          application/vnd.flux:
            schema:
              type: string
      responses:
        "200":
          description: Query results
          headers:
            Content-Encoding:
              description: The Content-Encoding entity header is used to compress the media-type.  When present, its value indicates which encodings were applied to the entity-body
              schema:
                type: string
                description: Specifies that the response in the body is encoded with gzip or not encoded with identity.
                default: identity
                enum:
                  - gzip
                  - identity
            Trace-Id:
              description: The Trace-Id header reports the request's trace ID, if one was generated.
              schema:
                type: string
                description: Specifies the request's trace ID.
          content:
            text/csv:
              schema:
                type: string
                example: >
                  result,table,_start,_stop,_time,region,host,_value
                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:00Z,east,A,15.43
                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:20Z,east,B,59.25
                  mean,0,2018-05-08T20:50:00Z,2018-05-08T20:51:00Z,2018-05-08T20:50:40Z,east,C,52.62
            application/vnd.influx.arrow:
              schema:
                type: string
                format: binary
        "429":
          description: Token is temporarily over quota. The Retry-After header describes when to try the read again.
          headers:
            Retry-After:
              description: A non-negative decimal integer indicating the seconds to delay after the response is received.
              schema:
                type: integer
                format: int32
        default:
          description: Error processing query
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /buckets:
    get:
      operationId: GetBuckets
      tags:
        - Buckets
      summary: List all buckets
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/After"
        - in: query
          name: org
          description: The organization name.
          schema:
            type: string
        - in: query
          name: orgID
          description: The organization ID.
          schema:
            type: string
        - in: query
          name: name
          description: Only returns buckets with a specific name.
          schema:
            type: string
      responses:
        "200":
          description: A list of buckets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Buckets"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostBuckets
      tags:
        - Buckets
      summary: Create a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Bucket to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostBucketRequest"
      responses:
        "201":
          description: Bucket created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        422:
          description: Request body failed validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}":
    get:
      operationId: GetBucketsID
      tags:
        - Buckets
      summary: Retrieve a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "200":
          description: Bucket details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchBucketsID
      tags:
        - Buckets
      summary: Update a bucket
      requestBody:
        description: Bucket update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bucket"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "200":
          description: An updated bucket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Bucket"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteBucketsID
      tags:
        - Buckets
      summary: Delete a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The ID of the bucket to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/labels":
    get:
      operationId: GetBucketsIDLabels
      tags:
        - Buckets
      summary: List all labels for a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "200":
          description: A list of all labels for a bucket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostBucketsIDLabels
      tags:
        - Buckets
      summary: Add a label to a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The newly added label
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/labels/{labelID}":
    delete:
      operationId: DeleteBucketsIDLabelsID
      tags:
        - Buckets
      summary: Delete a label from a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Bucket not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/members":
    get:
      operationId: GetBucketsIDMembers
      tags:
        - Users
        - Buckets
      summary: List all users with member privileges for a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "200":
          description: A list of bucket members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostBucketsIDMembers
      tags:
        - Users
        - Buckets
      summary: Add a member to a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Member added to bucket
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/members/{userID}":
    delete:
      operationId: DeleteBucketsIDMembersID
      tags:
        - Users
        - Buckets
      summary: Remove a member from a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/owners":
    get:
      operationId: GetBucketsIDOwners
      tags:
        - Users
        - Buckets
      summary: List all owners of a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "200":
          description: A list of bucket owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostBucketsIDOwners
      tags:
        - Users
        - Buckets
      summary: Add an owner to a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Bucket owner added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/buckets/{bucketID}/owners/{userID}":
    delete:
      operationId: DeleteBucketsIDOwnersID
      tags:
        - Users
        - Buckets
      summary: Remove an owner from a bucket
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the owner to remove.
        - in: path
          name: bucketID
          schema:
            type: string
          required: true
          description: The bucket ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /orgs:
    get:
      operationId: GetOrgs
      tags:
        - Organizations
      summary: List all organizations
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - $ref: "#/components/parameters/Descending"
        - in: query
          name: org
          schema:
            type: string
          description: Filter organizations to a specific organization name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Filter organizations to a specific organization ID.
        - in: query
          name: userID
          schema:
            type: string
          description: Filter organizations to a specific user ID.
      responses:
        "200":
          description: A list of organizations
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organizations"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostOrgs
      tags:
        - Organizations
      summary: Create an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Organization to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      responses:
        "201":
          description: Organization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}":
    get:
      operationId: GetOrgsID
      tags:
        - Organizations
      summary: Retrieve an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to get.
      responses:
        "200":
          description: Organization details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchOrgsID
      tags:
        - Organizations
      summary: Update an organization
      requestBody:
        description: Organization update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Organization"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to get.
      responses:
        "200":
          description: Organization updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteOrgsID
      tags:
        - Organizations
      summary: Delete an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The ID of the organization to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/secrets":
    get:
      operationId: GetOrgsIDSecrets
      tags:
        - Secrets
        - Organizations
      summary: List all secret keys for an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        "200":
          description: A list of all secret keys
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretKeysResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchOrgsIDSecrets
      tags:
        - Secrets
        - Organizations
      summary: Update secrets in an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      requestBody:
        description: Secret key value pairs to update/add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Secrets"
      responses:
        "204":
          description: Keys successfully patched
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/secrets/delete": # had to make this because swagger wouldn't let me have a request body with a DELETE
    post:
      operationId: PostOrgsIDSecrets
      tags:
        - Secrets
        - Organizations
      summary: Delete secrets from an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      requestBody:
        description: Secret key to delete
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretKeys"
      responses:
        "204":
          description: Keys successfully patched
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/members":
    get:
      operationId: GetOrgsIDMembers
      tags:
        - Users
        - Organizations
      summary: List all members of an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        "200":
          description: A list of organization members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostOrgsIDMembers
      tags:
        - Users
        - Organizations
      summary: Add a member to an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Added to organization created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/members/{userID}":
    delete:
      operationId: DeleteOrgsIDMembersID
      tags:
        - Users
        - Organizations
      summary: Remove a member from an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/owners":
    get:
      operationId: GetOrgsIDOwners
      tags:
        - Users
        - Organizations
      summary: List all owners of an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        "200":
          description: A list of organization owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        "404":
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostOrgsIDOwners
      tags:
        - Users
        - Organizations
      summary: Add an owner to an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Organization owner added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/orgs/{orgID}/owners/{userID}":
    delete:
      operationId: DeleteOrgsIDOwnersID
      tags:
        - Users
        - Organizations
      summary: Remove an owner from an organization
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the owner to remove.
        - in: path
          name: orgID
          schema:
            type: string
          required: true
          description: The organization ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stacks:
    get:
      operationId: ListStacks
      tags:
        - InfluxDB Templates
      summary: Grab a list of installed InfluxDB Templates
      parameters:
        - in: query
          name: orgID
          required: true
          schema:
            type: string
          description: The organization id of the stacks
        - in: query
          name: name
          schema:
            type: string
          description: A collection of names to filter the list by.
        - in: query
          name: stackID
          schema:
            type: string
          description: A collection of stackIDs to filter the list by.
      responses:
        "200":
          description: Influx stacks found
          content:
            application/json:
              schema:
                type: object
                properties:
                  stacks:
                    type: array
                    items:
                      $ref: "#/components/schemas/Stack"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: CreateStack
      tags:
        - InfluxDB Templates
      summary: Create a new stack
      requestBody:
        description: Stack to create.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orgID:
                  type: string
                name:
                  type: string
                description:
                  type: string
                urls:
                  type: array
                  items:
                    type: string
      responses:
        "201":
          description: InfluxDB Stack created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stacks/{stack_id}:
    get:
      operationId: ReadStack
      tags:
        - InfluxDB Templates
      summary: Grab a stack by its ID
      parameters:
        - in: path
          name: stack_id
          required: true
          schema:
            type: string
          description: The stack id
      responses:
        "200":
          description: Read an influx stack by ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: UpdateStack
      tags:
        - InfluxDB Templates
      summary: Update an InfluxDB Stack
      parameters:
        - in: path
          name: stack_id
          required: true
          schema:
            type: string
          description: The stack id
      requestBody:
        description: Influx stack to update.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                templateURLs:
                  type: array
                  items:
                    type: string
                  nullable: true
                additionalResources:
                  type: array
                  items:
                    type: object
                    properties:
                      resourceID:
                        type: string
                      kind:
                        type: string
                      templateMetaName:
                        type: string
                    required: ["kind", "resourceID"]
      responses:
        "200":
          description: Influx stack updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteStack
      tags:
        - InfluxDB Templates
      summary: Delete a stack and remove all its associated resources
      parameters:
        - in: path
          name: stack_id
          required: true
          schema:
            type: string
          description: The stack id
        - in: query
          name: orgID
          required: true
          schema:
            type: string
          description: The organization id of the user
      responses:
        "204":
          description: Stack and all its associated resources are deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /stacks/{stack_id}/uninstall:
    post:
      operationId: UninstallStack
      tags:
        - InfluxDB Templates
      summary: Uninstall an InfluxDB Stack
      parameters:
        - in: path
          name: stack_id
          required: true
          schema:
            type: string
          description: The stack id
      responses:
        "200":
          description: Influx stack uninstalled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stack"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /templates/apply:
    post:
      operationId: ApplyTemplate
      tags:
        - InfluxDB Templates
      summary: Apply or dry-run an InfluxDB Template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TemplateApply"
          application/x-jsonnet:
            schema:
              $ref: "#/components/schemas/TemplateApply"
          text/yml:
            schema:
              $ref: "#/components/schemas/TemplateApply"
      responses:
        "200":
          description: >
            Influx package dry-run successful, no new resources created.
            The provided diff and summary will not have IDs for resources
            that do not exist at the time of the dry run.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateSummary"
        "201":
          description: >
            Influx package applied successfully. Newly created resources created
            available in summary. The diff compares the state of the world before
            the package is applied with the changes the application will impose.
            This corresponds to `"dryRun": true`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TemplateSummary"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /templates/export:
    post:
      operationId: ExportTemplate
      tags:
        - InfluxDB Templates
      summary: Export a new Influx Template
      requestBody:
        description: Export resources as an InfluxDB template.
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/TemplateExportByID"
                - $ref: "#/components/schemas/TemplateExportByName"
      responses:
        "200":
          description: InfluxDB template created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
            application/x-yaml:
              schema:
                $ref: "#/components/schemas/Template"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /tasks:
    get:
      operationId: GetTasks
      tags:
        - Tasks
      summary: List all tasks
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: query
          name: name
          description: Returns task with a specific name.
          schema:
            type: string
        - in: query
          name: after
          schema:
            type: string
          description: Return tasks after a specified ID.
        - in: query
          name: user
          schema:
            type: string
          description: Filter tasks to a specific user ID.
        - in: query
          name: org
          schema:
            type: string
          description: Filter tasks to a specific organization name.
        - in: query
          name: orgID
          schema:
            type: string
          description: Filter tasks to a specific organization ID.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - inactive
          description: Filter tasks by a status--"inactive" or "active".
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: The number of tasks to return
      responses:
        "200":
          description: A list of tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTasks
      tags:
        - Tasks
      summary: Create a new task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: Task to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreateRequest"
      responses:
        "201":
          description: Task created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}":
    get:
      operationId: GetTasksID
      tags:
        - Tasks
      summary: Retrieve a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchTasksID
      tags:
        - Tasks
      summary: Update a task
      description: Update a task. This will cancel all queued runs.
      requestBody:
        description: Task update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskUpdateRequest"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: Task updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteTasksID
      tags:
        - Tasks
      summary: Delete a task
      description: Deletes a task and all associated records
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The ID of the task to delete.
      responses:
        "204":
          description: Task deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/runs":
    get:
      operationId: GetTasksIDRuns
      tags:
        - Tasks
      summary: List runs for a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The ID of the task to get runs for.
        - in: query
          name: after
          schema:
            type: string
          description: Returns runs after a specific ID.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 500
            default: 100
          description: The number of runs to return
        - in: query
          name: afterTime
          schema:
            type: string
            format: date-time
          description: Filter runs to those scheduled after this time, RFC3339
        - in: query
          name: beforeTime
          schema:
            type: string
            format: date-time
          description: Filter runs to those scheduled before this time, RFC3339
      responses:
        "200":
          description: A list of task runs
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Runs"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTasksIDRuns
      tags:
        - Tasks
      summary: Manually start a task run, overriding the current schedule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RunManually"
      responses:
        "201":
          description: Run scheduled to start
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/runs/{runID}":
    get:
      operationId: GetTasksIDRunsID
      tags:
        - Tasks
      summary: Retrieve a single run for a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
        - in: path
          name: runID
          schema:
            type: string
          required: true
          description: The run ID.
      responses:
        "200":
          description: The run record
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteTasksIDRunsID
      tags:
        - Tasks
      summary: Cancel a running task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
        - in: path
          name: runID
          schema:
            type: string
          required: true
          description: The run ID.
      responses:
        "204":
          description: Delete has been accepted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/runs/{runID}/retry":
    post:
      operationId: PostTasksIDRunsIDRetry
      tags:
        - Tasks
      summary: Retry a task run
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
        - in: path
          name: runID
          schema:
            type: string
          required: true
          description: The run ID.
      responses:
        "200":
          description: Run that has been queued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Run"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/logs":
    get:
      operationId: GetTasksIDLogs
      tags:
        - Tasks
      summary: Retrieve all logs for a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: All logs for a task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/runs/{runID}/logs":
    get:
      operationId: GetTasksIDRunsIDLogs
      tags:
        - Tasks
      summary: Retrieve all logs for a run
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: ID of task to get logs for.
        - in: path
          name: runID
          schema:
            type: string
          required: true
          description: ID of run to get logs for.
      responses:
        "200":
          description: All logs for a run
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/labels":
    get:
      operationId: GetTasksIDLabels
      tags:
        - Tasks
      summary: List all labels for a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: A list of all labels for a task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTasksIDLabels
      tags:
        - Tasks
      summary: Add a label to a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: A list of all labels for a task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/labels/{labelID}":
    delete:
      operationId: DeleteTasksIDLabelsID
      tags:
        - Tasks
      summary: Delete a label from a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The label ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Task not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /flags:
    get:
      operationId: GetFlags
      tags:
        - Users
      summary: Return the feature flags for the currently authenticated user
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: Feature flags for the currently authenticated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flags"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /me:
    get:
      operationId: GetMe
      tags:
        - Users
      summary: Return the current authenticated user
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: Currently authenticated user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /me/password:
    put:
      operationId: PutMePassword
      tags:
        - Users
      summary: Update a password
      security:
        - BasicAuth: []
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetBody"
      responses:
        "204":
          description: Password successfully updated
        default:
          description: Unsuccessful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/members":
    get:
      operationId: GetTasksIDMembers
      tags:
        - Users
        - Tasks
      summary: List all task members
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: A list of users who have member privileges for a task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMembers"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTasksIDMembers
      tags:
        - Users
        - Tasks
      summary: Add a member to a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      requestBody:
        description: User to add as member
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Added to task members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceMember"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/members/{userID}":
    delete:
      operationId: DeleteTasksIDMembersID
      tags:
        - Users
        - Tasks
      summary: Remove a member from a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the member to remove.
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "204":
          description: Member removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/owners":
    get:
      operationId: GetTasksIDOwners
      tags:
        - Users
        - Tasks
      summary: List all owners of a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "200":
          description: A list of users who have owner privileges for a task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwners"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostTasksIDOwners
      tags:
        - Users
        - Tasks
      summary: Add an owner to a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      requestBody:
        description: User to add as owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddResourceMemberRequestBody"
      responses:
        "201":
          description: Added to task owners
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceOwner"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/tasks/{taskID}/owners/{userID}":
    delete:
      operationId: DeleteTasksIDOwnersID
      tags:
        - Users
        - Tasks
      summary: Remove an owner from a task
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the owner to remove.
        - in: path
          name: taskID
          schema:
            type: string
          required: true
          description: The task ID.
      responses:
        "204":
          description: Owner removed
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users:
    get:
      operationId: GetUsers
      tags:
        - Users
      summary: List all users
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostUsers
      tags:
        - Users
      summary: Create a user
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userID}":
    get:
      operationId: GetUsersID
      tags:
        - Users
      summary: Retrieve a user
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The user ID.
      responses:
        "200":
          description: User details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchUsersID
      tags:
        - Users
      summary: Update a user
      requestBody:
        description: User update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to update.
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteUsersID
      tags:
        - Users
      summary: Delete a user
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The ID of the user to delete.
      responses:
        "204":
          description: User deleted
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{userID}/password":
    post:
      operationId: PostUsersIDPassword
      tags:
        - Users
      summary: Update a password
      security:
        - BasicAuth: []
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: userID
          schema:
            type: string
          required: true
          description: The user ID.
      requestBody:
        description: New password
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetBody"
      responses:
        "204":
          description: Password successfully updated
        default:
          description: Unsuccessful authentication
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /checks:
    get:
      operationId: GetChecks
      tags:
        - Checks
      summary: Get all checks
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - in: query
          name: orgID
          required: true
          description: Only show checks that belong to a specific organization ID.
          schema:
            type: string
      responses:
        "200":
          description: A list of checks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Checks"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: CreateCheck
      tags:
        - Checks
      summary: Add new check
      requestBody:
        description: Check to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostCheck"
      responses:
        "201":
          description: Check created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/checks/{checkID}":
    get:
      operationId: GetChecksID
      tags:
        - Checks
      summary: Get a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "200":
          description: The check requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutChecksID
      tags:
        - Checks
      summary: Update a check
      requestBody:
        description: Check update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Check"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "200":
          description: An updated check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        "404":
          description: The check was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchChecksID
      tags:
        - Checks
      summary: Update a check
      requestBody:
        description: Check update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckPatch"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "200":
          description: An updated check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Check"
        "404":
          description: The check was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteChecksID
      tags:
        - Checks
      summary: Delete a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: The check was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/checks/{checkID}/labels":
    get:
      operationId: GetChecksIDLabels
      tags:
        - Checks
      summary: List all labels for a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "200":
          description: A list of all labels for a check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostChecksIDLabels
      tags:
        - Checks
      summary: Add a label to a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label was added to the check
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/checks/{checkID}/labels/{labelID}":
    delete:
      operationId: DeleteChecksIDLabelsID
      tags:
        - Checks
      summary: Delete label from a check
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Check or label not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /notificationRules:
    get:
      operationId: GetNotificationRules
      tags:
        - NotificationRules
      summary: Get all notification rules
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - in: query
          name: orgID
          required: true
          description: Only show notification rules that belong to a specific organization ID.
          schema:
            type: string
        - in: query
          name: checkID
          description: Only show notifications that belong to the specific check ID.
          schema:
            type: string
        - in: query
          name: tag
          description: Only return notification rules that "would match" statuses which contain the tag key value pairs provided.
          schema:
            type: string
            pattern: ^[a-zA-Z0-9_]+:[a-zA-Z0-9_]+$
            example: env:prod
      responses:
        "200":
          description: A list of notification rules
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRules"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: CreateNotificationRule
      tags:
        - NotificationRules
      summary: Add a notification rule
      requestBody:
        description: Notification rule to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostNotificationRule"
      responses:
        "201":
          description: Notification rule created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRule"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/checks/{checkID}/query":
    get:
      operationId: GetChecksIDQuery
      tags:
        - Checks
      summary: Get a check query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: checkID
          schema:
            type: string
          required: true
          description: The check ID.
      responses:
        "200":
          description: The check query requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FluxResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Check not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationRules/{ruleID}":
    get:
      operationId: GetNotificationRulesID
      tags:
        - NotificationRules
      summary: Get a notification rule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "200":
          description: The notification rule requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRule"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutNotificationRulesID
      tags:
        - NotificationRules
      summary: Update a notification rule
      requestBody:
        description: Notification rule update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRule"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "200":
          description: An updated notification rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRule"
        "404":
          description: The notification rule was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchNotificationRulesID
      tags:
        - NotificationRules
      summary: Update a notification rule
      requestBody:
        description: Notification rule update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationRuleUpdate"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "200":
          description: An updated notification rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationRule"
        "404":
          description: The notification rule was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteNotificationRulesID
      tags:
        - NotificationRules
      summary: Delete a notification rule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: The check was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationRules/{ruleID}/labels":
    get:
      operationId: GetNotificationRulesIDLabels
      tags:
        - NotificationRules
      summary: List all labels for a notification rule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "200":
          description: A list of all labels for a notification rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostNotificationRuleIDLabels
      tags:
        - NotificationRules
      summary: Add a label to a notification rule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label was added to the notification rule
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationRules/{ruleID}/labels/{labelID}":
    delete:
      operationId: DeleteNotificationRulesIDLabelsID
      tags:
        - NotificationRules
      summary: Delete label from a notification rule
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Rule or label not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationRules/{ruleID}/query":
    get:
      operationId: GetNotificationRulesIDQuery
      tags:
        - Rules
      summary: Get a notification rule query
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: ruleID
          schema:
            type: string
          required: true
          description: The notification rule ID.
      responses:
        "200":
          description: The notification rule query requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FluxResponse"
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Notification rule not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /notificationEndpoints:
    get:
      operationId: GetNotificationEndpoints
      tags:
        - NotificationEndpoints
      summary: Get all notification endpoints
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
        - in: query
          name: orgID
          required: true
          description: Only show notification endpoints that belong to specific organization ID.
          schema:
            type: string
      responses:
        "200":
          description: A list of notification endpoints
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoints"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: CreateNotificationEndpoint
      tags:
        - NotificationEndpoints
      summary: Add a notification endpoint
      requestBody:
        description: Notification endpoint to create
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostNotificationEndpoint"
      responses:
        "201":
          description: Notification endpoint created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoint"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationEndpoints/{endpointID}":
    get:
      operationId: GetNotificationEndpointsID
      tags:
        - NotificationEndpoints
      summary: Get a notification endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      responses:
        "200":
          description: The notification endpoint requested
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoint"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      operationId: PutNotificationEndpointsID
      tags:
        - NotificationEndpoints
      summary: Update a notification endpoint
      requestBody:
        description: A new notification endpoint to replace the existing endpoint with
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationEndpoint"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      responses:
        "200":
          description: An updated notification endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoint"
        "404":
          description: The notification endpoint was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    patch:
      operationId: PatchNotificationEndpointsID
      tags:
        - NotificationEndpoints
      summary: Update a notification endpoint
      requestBody:
        description: Check update to apply
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NotificationEndpointUpdate"
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      responses:
        "200":
          description: An updated notification endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationEndpoint"
        "404":
          description: The notification endpoint was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      operationId: DeleteNotificationEndpointsID
      tags:
        - NotificationEndpoints
      summary: Delete a notification endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: The endpoint was not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationEndpoints/{endpointID}/labels":
    get:
      operationId: GetNotificationEndpointsIDLabels
      tags:
        - NotificationEndpoints
      summary: List all labels for a notification endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      responses:
        "200":
          description: A list of all labels for a notification endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelsResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      operationId: PostNotificationEndpointIDLabels
      tags:
        - NotificationEndpoints
      summary: Add a label to a notification endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
      requestBody:
        description: Label to add
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LabelMapping"
      responses:
        "201":
          description: The label was added to the notification endpoint
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelResponse"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/notificationEndpoints/{endpointID}/labels/{labelID}":
    delete:
      operationId: DeleteNotificationEndpointsIDLabelsID
      tags:
        - NotificationEndpoints
      summary: Delete a label from a notification endpoint
      parameters:
        - $ref: "#/components/parameters/TraceSpan"
        - in: path
          name: endpointID
          schema:
            type: string
          required: true
          description: The notification endpoint ID.
        - in: path
          name: labelID
          schema:
            type: string
          required: true
          description: The ID of the label to delete.
      responses:
        "204":
          description: Delete has been accepted
        "404":
          description: Endpoint or label not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  parameters:
    TraceSpan:
      $ref: "./swagger/components/parameters/TraceSpan.yml"
    Offset:
      $ref: "./swagger/components/parameters/Offset.yml"
    Limit:
      $ref: "./swagger/components/parameters/Limit.yml"
    Descending:
      $ref: "./swagger/components/parameters/Descending.yml"
    SortBy:
      $ref: "./swagger/components/parameters/SortBy.yml"
    After:
      $ref: "./swagger/components/parameters/After.yml"
  schemas:
    LanguageRequest:
      $ref: "./swagger/components/schemas/LanguageRequest.yml"
    Query:
      $ref: "./swagger/components/schemas/Query.yml"
    InfluxQLQuery:
      $ref: "./swagger/components/schemas/InfluxQLQuery.yml"
    Package:
      $ref: "./swagger/components/schemas/Package.yml"
    File:
      $ref: "./swagger/components/schemas/File.yml"
    PackageClause:
      $ref: "./swagger/components/schemas/PackageClause.yml"
    ImportDeclaration:
      $ref: "./swagger/components/schemas/ImportDeclaration.yml"
    DeletePredicateRequest:
      $ref: "./swagger/components/schemas/DeletePredicateRequest.yml"
    Node:
      $ref: "./swagger/components/schemas/Node.yml"
    Block:
      $ref: "./swagger/components/schemas/Block.yml"
    Statement:
      $ref: "./swagger/components/schemas/Statement.yml"
    BadStatement:
      $ref: "./swagger/components/schemas/BadStatement.yml"
    VariableAssignment:
      $ref: "./swagger/components/schemas/VariableAssignment.yml"
    MemberAssignment:
      $ref: "./swagger/components/schemas/MemberAssignment.yml"
    ExpressionStatement:
      $ref: "./swagger/components/schemas/ExpressionStatement.yml"
    ReturnStatement:
      $ref: "./swagger/components/schemas/ReturnStatement.yml"
    OptionStatement:
      $ref: "./swagger/components/schemas/OptionStatement.yml"
    BuiltinStatement:
      $ref: "./swagger/components/schemas/BuiltinStatement.yml"
    TestStatement:
      $ref: "./swagger/components/schemas/TestStatement.yml"
    Expression:
      $ref: "./swagger/components/schemas/Expression.yml"
    ArrayExpression:
      $ref: "./swagger/components/schemas/ArrayExpression.yml"
    DictExpression:
      $ref: "./swagger/components/schemas/DictExpression.yml"
    DictItem:
      $ref: "./swagger/components/schemas/DictItem.yml"
    FunctionExpression:
      $ref: "./swagger/components/schemas/FunctionExpression.yml"
    BinaryExpression:
      $ref: "./swagger/components/schemas/BinaryExpression.yml"
    CallExpression:
      $ref: "./swagger/components/schemas/CallExpression.yml"
    ConditionalExpression:
      $ref: "./swagger/components/schemas/ConditionalExpression.yml"
    LogicalExpression:
      $ref: "./swagger/components/schemas/LogicalExpression.yml"
    MemberExpression:
      $ref: "./swagger/components/schemas/MemberExpression.yml"
    IndexExpression:
      $ref: "./swagger/components/schemas/IndexExpression.yml"
    ObjectExpression:
      $ref: "./swagger/components/schemas/ObjectExpression.yml"
    ParenExpression:
      $ref: "./swagger/components/schemas/ParenExpression.yml"
    PipeExpression:
      $ref: "./swagger/components/schemas/PipeExpression.yml"
    UnaryExpression:
      $ref: "./swagger/components/schemas/UnaryExpression.yml"
    BooleanLiteral:
      $ref: "./swagger/components/schemas/BooleanLiteral.yml"
    DateTimeLiteral:
      $ref: "./swagger/components/schemas/DateTimeLiteral.yml"
    DurationLiteral:
      $ref: "./swagger/components/schemas/DurationLiteral.yml"
    FloatLiteral:
      $ref: "./swagger/components/schemas/FloatLiteral.yml"
    IntegerLiteral:
      $ref: "./swagger/components/schemas/IntegerLiteral.yml"
    PipeLiteral:
      $ref: "./swagger/components/schemas/PipeLiteral.yml"
    RegexpLiteral:
      $ref: "./swagger/components/schemas/RegexpLiteral.yml"
    StringLiteral:
      $ref: "./swagger/components/schemas/StringLiteral.yml"
    UnsignedIntegerLiteral:
      $ref: "./swagger/components/schemas/UnsignedIntegerLiteral.yml"
    Duration:
      $ref: "./swagger/components/schemas/Duration.yml"
    Property:
      $ref: "./swagger/components/schemas/Property.yml"
    PropertyKey:
      $ref: "./swagger/components/schemas/PropertyKey.yml"
    Identifier:
      $ref: "./swagger/components/schemas/Identifier.yml"
    NodeType:
      $ref: "./swagger/components/schemas/NodeType.yml"
    Dialect:
      $ref: "./swagger/components/schemas/Dialect.yml"
    Permission:
      $ref: "./swagger/components/schemas/Permission.yml"
    Resource:
      $ref: "./swagger/components/schemas/Resource.yml"
    AuthorizationUpdateRequest:
      $ref: "./swagger/components/schemas/AuthorizationUpdateRequest.yml"
    Authorization:
      $ref: "./swagger/components/schemas/Authorization.yml"
    Authorizations:
      $ref: "./swagger/components/schemas/Authorizations.yml"
    PostBucketRequest:
      $ref: "./swagger/components/schemas/PostBucketRequest.yml"
    Bucket:
      $ref: "./swagger/components/schemas/Bucket.yml"
    Buckets:
      $ref: "./swagger/components/schemas/Buckets.yml"
    RetentionRules:
      $ref: "./swagger/components/schemas/RetentionRules.yml"
    RetentionRule:
      $ref: "./swagger/components/schemas/RetentionRule.yml"
    Link:
      $ref: "./swagger/components/schemas/Link.yml"
    Links:
      $ref: "./swagger/components/schemas/Links.yml"
    Logs:
      $ref: "./swagger/components/schemas/Logs.yml"
    LogEvent:
      $ref: "./swagger/components/schemas/LogEvent.yml"
    Organization:
      $ref: "./swagger/components/schemas/Organization.yml"
    Organizations:
      $ref: "./swagger/components/schemas/Organizations.yml"
    TemplateApply:
      $ref: "./swagger/components/schemas/TemplateApply.yml"
    TemplateKind:
      $ref: "./swagger/components/schemas/TemplateKind.yml"
    TemplateExportByID:
      $ref: "./swagger/components/schemas/TemplateExportByID.yml"
    TemplateExportByName:
      $ref: "./swagger/components/schemas/TemplateExportByName.yml"
    Template:
      $ref: "./swagger/components/schemas/Template.yml"
    TemplateEnvReferences:
      $ref: "./swagger/components/schemas/TemplateEnvReferences.yml"
    TemplateSummary:
      $ref: "./swagger/components/schemas/TemplateSummary.yml"
    TemplateSummaryLabel:
      $ref: "./swagger/components/schemas/TemplateSummaryLabel.yml"
    TemplateChart:
      $ref: "./swagger/components/schemas/TemplateChart.yml"
    Stack:
      $ref: "./swagger/components/schemas/Stack.yml"
    Runs:
      $ref: "./swagger/components/schemas/Runs.yml"
    Run:
      $ref: "./swagger/components/schemas/Run.yml"
    RunManually:
      $ref: "./swagger/components/schemas/RunManually.yml"
    Tasks:
      $ref: "./swagger/components/schemas/Tasks.yml"
    Task:
      $ref: "./swagger/components/schemas/Task.yml"
    TaskStatusType:
      $ref: "./swagger/components/schemas/TaskStatusType.yml"
    User:
      $ref: "./swagger/components/schemas/User.yml"
    Users:
      $ref: "./swagger/components/schemas/Users.yml"
    Flags:
      $ref: "./swagger/components/schemas/Flags.yml"
    ResourceMember:
      $ref: "./swagger/components/schemas/ResourceMember.yml"
    ResourceMembers:
      $ref: "./swagger/components/schemas/ResourceMembers.yml"
    ResourceOwner:
      $ref: "./swagger/components/schemas/ResourceOwner.yml"
    ResourceOwners:
      $ref: "./swagger/components/schemas/ResourceOwners.yml"
    FluxSuggestions:
      $ref: "./swagger/components/schemas/FluxSuggestions.yml"
    FluxSuggestion:
      $ref: "./swagger/components/schemas/FluxSuggestion.yml"
    Routes:
      $ref: "./swagger/components/schemas/Routes.yml"
    Error:
      $ref: "./swagger/components/schemas/Error.yml"
    LineProtocolError:
      $ref: "./swagger/components/schemas/LineProtocolError.yml"
    LineProtocolLengthError:
      $ref: "./swagger/components/schemas/LineProtocolLengthError.yml"
    Field:
      $ref: "./swagger/components/schemas/Field.yml"
    BuilderConfig:
      $ref: "./swagger/components/schemas/BuilderConfig.yml"
    BuilderTagsType:
      $ref: "./swagger/components/schemas/BuilderTagsType.yml"
    BuilderAggregateFunctionType:
      $ref: "./swagger/components/schemas/BuilderAggregateFunctionType.yml"
    BuilderFunctionsType:
      $ref: "./swagger/components/schemas/BuilderFunctionsType.yml"
    DashboardQuery:
      $ref: "./swagger/components/schemas/DashboardQuery.yml"
    QueryEditMode:
      $ref: "./swagger/components/schemas/QueryEditMode.yml"
    Axis:
      $ref: "./swagger/components/schemas/Axis.yml"
    AxisScale:
      $ref: "./swagger/components/schemas/AxisScale.yml"
    DashboardColor:
      $ref: "./swagger/components/schemas/DashboardColor.yml"
    RenamableField:
      $ref: "./swagger/components/schemas/RenamableField.yml"
    XYViewProperties:
      $ref: "./swagger/components/schemas/XYViewProperties.yml"
    XYGeom:
      $ref: "./swagger/components/schemas/XYGeom.yml"
    BandViewProperties:
      $ref: "./swagger/components/schemas/BandViewProperties.yml"
    LinePlusSingleStatProperties:
      $ref: "./swagger/components/schemas/LinePlusSingleStatProperties.yml"
    MosaicViewProperties:
      $ref: "./swagger/components/schemas/MosaicViewProperties.yml"
    ScatterViewProperties:
      $ref: "./swagger/components/schemas/ScatterViewProperties.yml"
    HeatmapViewProperties:
      $ref: "./swagger/components/schemas/HeatmapViewProperties.yml"
    SingleStatViewProperties:
      $ref: "./swagger/components/schemas/SingleStatViewProperties.yml"
    HistogramViewProperties:
      $ref: "./swagger/components/schemas/HistogramViewProperties.yml"
    GaugeViewProperties:
      $ref: "./swagger/components/schemas/GaugeViewProperties.yml"
    TableViewProperties:
      $ref: "./swagger/components/schemas/TableViewProperties.yml"
    MarkdownViewProperties:
      $ref: "./swagger/components/schemas/MarkdownViewProperties.yml"
    CheckViewProperties:
      $ref: "./swagger/components/schemas/CheckViewProperties.yml"
    GeoViewLayer:
      $ref: "./swagger/components/schemas/GeoViewLayer.yml"
    GeoViewLayerProperties:
      $ref: "./swagger/components/schemas/GeoViewLayerProperties.yml"
    GeoCircleViewLayer:
      $ref: "./swagger/components/schemas/GeoCircleViewLayer.yml"
    GeoPointMapViewLayer:
      $ref: "./swagger/components/schemas/GeoPointMapViewLayer.yml"
    GeoTrackMapViewLayer:
      $ref: "./swagger/components/schemas/GeoTrackMapViewLayer.yml"
    GeoHeatMapViewLayer:
      $ref: "./swagger/components/schemas/GeoHeatMapViewLayer.yml"
    GeoViewProperties:
      $ref: "./swagger/components/schemas/GeoViewProperties.yml"
    Axes:
      $ref: "./swagger/components/schemas/Axes.yml"
    Legend:
      $ref: "./swagger/components/schemas/Legend.yml"
    DecimalPlaces:
      $ref: "./swagger/components/schemas/DecimalPlaces.yml"
    ConstantVariableProperties:
      $ref: "./swagger/components/schemas/ConstantVariableProperties.yml"
    MapVariableProperties:
      $ref: "./swagger/components/schemas/MapVariableProperties.yml"
    QueryVariableProperties:
      $ref: "./swagger/components/schemas/QueryVariableProperties.yml"
    Variable:
      $ref: "./swagger/components/schemas/Variable.yml"
    Variables:
      $ref: "./swagger/components/schemas/Variables.yml"
    VariableProperties:
      $ref: "./swagger/components/schemas/VariableProperties.yml"
    ViewProperties:
      $ref: "./swagger/components/schemas/ViewProperties.yml"
    View:
      $ref: "./swagger/components/schemas/View.yml"
    Views:
      $ref: "./swagger/components/schemas/Views.yml"
    CellUpdate:
      $ref: "./swagger/components/schemas/CellUpdate.yml"
    CreateCell:
      $ref: "./swagger/components/schemas/CreateCell.yml"
    AnalyzeQueryResponse:
      $ref: "./swagger/components/schemas/AnalyzeQueryResponse.yml"
    CellWithViewProperties:
      $ref: "./swagger/components/schemas/CellWithViewProperties.yml"
    Cell:
      $ref: "./swagger/components/schemas/Cell.yml"
    CellsWithViewProperties:
      $ref: "./swagger/components/schemas/CellsWithViewProperties.yml"
    Cells:
      $ref: "./swagger/components/schemas/Cells.yml"
    Secrets:
      $ref: "./swagger/components/schemas/Secrets.yml"
    SecretKeys:
      $ref: "./swagger/components/schemas/SecretKeys.yml"
    SecretKeysResponse:
      $ref: "./swagger/components/schemas/SecretKeysResponse.yml"
    CreateDashboardRequest:
      $ref: "./swagger/components/schemas/CreateDashboardRequest.yml"
    DashboardWithViewProperties:
      $ref: "./swagger/components/schemas/DashboardWithViewProperties.yml"
    Dashboard:
      $ref: "./swagger/components/schemas/Dashboard.yml"
    Dashboards:
      $ref: "./swagger/components/schemas/Dashboards.yml"
    Source:
      $ref: "./swagger/components/schemas/Source.yml"
    Sources:
      $ref: "./swagger/components/schemas/Sources.yml"
    ScraperTargetRequest:
      $ref: "./swagger/components/schemas/ScraperTargetRequest.yml"
    ScraperTargetResponse:
      $ref: "./swagger/components/schemas/ScraperTargetResponse.yml"
    ScraperTargetResponses:
      $ref: "./swagger/components/schemas/ScraperTargetResponses.yml"
    DocumentMeta:
      $ref: "./swagger/components/schemas/DocumentMeta.yml"
    Document:
      $ref: "./swagger/components/schemas/Document.yml"
    DocumentCreate:
      $ref: "./swagger/components/schemas/DocumentCreate.yml"
    DocumentUpdate:
      $ref: "./swagger/components/schemas/DocumentUpdate.yml"
    DocumentListEntry:
      $ref: "./swagger/components/schemas/DocumentListEntry.yml"
    Documents:
      $ref: "./swagger/components/schemas/Documents.yml"
    TelegrafRequest:
      $ref: "./swagger/components/schemas/TelegrafRequest.yml"
    TelegrafRequestPlugin:
      $ref: "./swagger/components/schemas/TelegrafRequestPlugin.yml"
    TelegrafPluginInputCpu:
      $ref: "./swagger/components/schemas/TelegrafPluginInputCpu.yml"
    TelegrafPluginInputDisk:
      $ref: "./swagger/components/schemas/TelegrafPluginInputDisk.yml"
    TelegrafPluginInputDiskio:
      $ref: "./swagger/components/schemas/TelegrafPluginInputDiskio.yml"
    TelegrafPluginInputDocker:
      $ref: "./swagger/components/schemas/TelegrafPluginInputDocker.yml"
    TelegrafPluginInputFile:
      $ref: "./swagger/components/schemas/TelegrafPluginInputFile.yml"
    TelegrafPluginInputKernel:
      $ref: "./swagger/components/schemas/TelegrafPluginInputKernel.yml"
    TelegrafPluginInputKubernetes:
      $ref: "./swagger/components/schemas/TelegrafPluginInputKubernetes.yml"
    TelegrafPluginInputLogParser:
      $ref: "./swagger/components/schemas/TelegrafPluginInputLogParser.yml"
    TelegrafPluginInputMem:
      $ref: "./swagger/components/schemas/TelegrafPluginInputMem.yml"
    TelegrafPluginInputNetResponse:
      $ref: "./swagger/components/schemas/TelegrafPluginInputNetResponse.yml"
    TelegrafPluginInputNet:
      $ref: "./swagger/components/schemas/TelegrafPluginInputNet.yml"
    TelegrafPluginInputNginx:
      $ref: "./swagger/components/schemas/TelegrafPluginInputNginx.yml"
    TelegrafPluginInputProcesses:
      $ref: "./swagger/components/schemas/TelegrafPluginInputProcesses.yml"
    TelegrafPluginInputProcstat:
      $ref: "./swagger/components/schemas/TelegrafPluginInputProcstat.yml"
    TelegrafPluginInputPrometheus:
      $ref: "./swagger/components/schemas/TelegrafPluginInputPrometheus.yml"
    TelegrafPluginInputRedis:
      $ref: "./swagger/components/schemas/TelegrafPluginInputRedis.yml"
    TelegrafPluginInputSyslog:
      $ref: "./swagger/components/schemas/TelegrafPluginInputSyslog.yml"
    TelegrafPluginInputSwap:
      $ref: "./swagger/components/schemas/TelegrafPluginInputSwap.yml"
    TelegrafPluginInputSystem:
      $ref: "./swagger/components/schemas/TelegrafPluginInputSystem.yml"
    TelegrafPluginInputTail:
      $ref: "./swagger/components/schemas/TelegrafPluginInputTail.yml"
    TelegrafPluginOutputFile:
      $ref: "./swagger/components/schemas/TelegrafPluginOutputFile.yml"
    TelegrafPluginOutputInfluxDBV2:
      $ref: "./swagger/components/schemas/TelegrafPluginOutputInfluxDBV2.yml"
    Telegraf:
      $ref: "./swagger/components/schemas/Telegraf.yml"
    Telegrafs:
      $ref: "./swagger/components/schemas/Telegrafs.yml"
    TelegrafPlugin:
      $ref: "./swagger/components/schemas/TelegrafPlugin.yml"
    TelegrafPlugins:
      $ref: "./swagger/components/schemas/TelegrafPlugins.yml"
    TelegrafPluginInputDockerConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputDockerConfig.yml"
    TelegrafPluginInputFileConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputFileConfig.yml"
    TelegrafPluginInputKubernetesConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputKubernetesConfig.yml"
    TelegrafPluginInputLogParserConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputLogParserConfig.yml"
    TelegrafPluginInputProcstatConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputProcstatConfig.yml"
    TelegrafPluginInputPrometheusConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputPrometheusConfig.yml"
    TelegrafPluginInputRedisConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputRedisConfig.yml"
    TelegrafPluginInputSyslogConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginInputSyslogConfig.yml"
    TelegrafPluginOutputFileConfig:
      $ref: "./swagger/components/schemas/TelegrafPluginOutputFileConfig.yml"
    TelegrafPluginOutputInfluxDBV2Config:
      $ref: "./swagger/components/schemas/TelegrafPluginOutputInfluxDBV2Config.yml"
    IsOnboarding:
      $ref: "./swagger/components/schemas/IsOnboarding.yml"
    OnboardingRequest:
      $ref: "./swagger/components/schemas/OnboardingRequest.yml"
    OnboardingResponse:
      $ref: "./swagger/components/schemas/OnboardingResponse.yml"
    PasswordResetBody:
      $ref: "./swagger/components/schemas/PasswordResetBody.yml"
    AddResourceMemberRequestBody:
      $ref: "./swagger/components/schemas/AddResourceMemberRequestBody.yml"
    Ready:
      $ref: "./swagger/components/schemas/Ready.yml"
    HealthCheck:
      $ref: "./swagger/components/schemas/HealthCheck.yml"
    Labels:
      $ref: "./swagger/components/schemas/Labels.yml"
    Label:
      $ref: "./swagger/components/schemas/Label.yml"
    LabelCreateRequest:
      $ref: "./swagger/components/schemas/LabelCreateRequest.yml"
    LabelUpdate:
      $ref: "./swagger/components/schemas/LabelUpdate.yml"
    LabelMapping:
      $ref: "./swagger/components/schemas/LabelMapping.yml"
    LabelsResponse:
      $ref: "./swagger/components/schemas/LabelsResponse.yml"
    LabelResponse:
      $ref: "./swagger/components/schemas/LabelResponse.yml"
    ASTResponse:
      $ref: "./swagger/components/schemas/ASTResponse.yml"
    WritePrecision:
      $ref: "./swagger/components/schemas/WritePrecision.yml"
    TaskCreateRequest:
      $ref: "./swagger/components/schemas/TaskCreateRequest.yml"
    TaskUpdateRequest:
      $ref: "./swagger/components/schemas/TaskUpdateRequest.yml"
    FluxResponse:
      $ref: "./swagger/components/schemas/FluxResponse.yml"
    CheckPatch:
      $ref: "./swagger/components/schemas/CheckPatch.yml"
    CheckDiscriminator:
      $ref: "./swagger/components/schemas/CheckDiscriminator.yml"
    Check:
      $ref: "./swagger/components/schemas/Check.yml"
    PostCheck:
      $ref: "./swagger/components/schemas/PostCheck.yml"
    Checks:
      $ref: "./swagger/components/schemas/Checks.yml"
    CheckBase:
      $ref: "./swagger/components/schemas/CheckBase.yml"
    ThresholdCheck:
      $ref: "./swagger/components/schemas/ThresholdCheck.yml"
    Threshold:
      $ref: "./swagger/components/schemas/Threshold.yml"
    DeadmanCheck:
      $ref: "./swagger/components/schemas/DeadmanCheck.yml"
    CustomCheck:
      $ref: "./swagger/components/schemas/CustomCheck.yml"
    ThresholdBase:
      $ref: "./swagger/components/schemas/ThresholdBase.yml"
    GreaterThreshold:
      $ref: "./swagger/components/schemas/GreaterThreshold.yml"
    LesserThreshold:
      $ref: "./swagger/components/schemas/LesserThreshold.yml"
    RangeThreshold:
      $ref: "./swagger/components/schemas/RangeThreshold.yml"
    CheckStatusLevel:
      $ref: "./swagger/components/schemas/CheckStatusLevel.yml"
    RuleStatusLevel:
      $ref: "./swagger/components/schemas/RuleStatusLevel.yml"
    NotificationRuleUpdate:
      $ref: "./swagger/components/schemas/NotificationRuleUpdate.yml"
    NotificationRuleDiscriminator:
      $ref: "./swagger/components/schemas/NotificationRuleDiscriminator.yml"
    NotificationRule:
      $ref: "./swagger/components/schemas/NotificationRule.yml"
    PostNotificationRule:
      $ref: "./swagger/components/schemas/PostNotificationRule.yml"
    NotificationRules:
      $ref: "./swagger/components/schemas/NotificationRules.yml"
    NotificationRuleBase:
      $ref: "./swagger/components/schemas/NotificationRuleBase.yml"
    TagRule:
      $ref: "./swagger/components/schemas/TagRule.yml"
    StatusRule:
      $ref: "./swagger/components/schemas/StatusRule.yml"
    HTTPNotificationRuleBase:
      $ref: "./swagger/components/schemas/HTTPNotificationRuleBase.yml"
    HTTPNotificationRule:
      $ref: "./swagger/components/schemas/HTTPNotificationRule.yml"
    SlackNotificationRuleBase:
      $ref: "./swagger/components/schemas/SlackNotificationRuleBase.yml"
    SlackNotificationRule:
      $ref: "./swagger/components/schemas/SlackNotificationRule.yml"
    SMTPNotificationRule:
      $ref: "./swagger/components/schemas/SMTPNotificationRule.yml"
    SMTPNotificationRuleBase:
      $ref: "./swagger/components/schemas/SMTPNotificationRuleBase.yml"
    PagerDutyNotificationRule:
      $ref: "./swagger/components/schemas/PagerDutyNotificationRule.yml"
    PagerDutyNotificationRuleBase:
      $ref: "./swagger/components/schemas/PagerDutyNotificationRuleBase.yml"
    TelegramNotificationRule:
      $ref: "./swagger/components/schemas/TelegramNotificationRule.yml"
    TelegramNotificationRuleBase:
      $ref: "./swagger/components/schemas/TelegramNotificationRuleBase.yml"
    NotificationEndpointUpdate:
      $ref: "./swagger/components/schemas/NotificationEndpointUpdate.yml"
    NotificationEndpointDiscrimator:
      $ref: "./swagger/components/schemas/NotificationEndpointDiscrimator.yml"
    NotificationEndpoint:
      $ref: "./swagger/components/schemas/NotificationEndpoint.yml"
    PostNotificationEndpoint:
      $ref: "./swagger/components/schemas/PostNotificationEndpoint.yml"
    NotificationEndpoints:
      $ref: "./swagger/components/schemas/NotificationEndpoints.yml"
    NotificationEndpointBase:
      $ref: "./swagger/components/schemas/NotificationEndpointBase.yml"
    SlackNotificationEndpoint:
      $ref: "./swagger/components/schemas/SlackNotificationEndpoint.yml"
    PagerDutyNotificationEndpoint:
      $ref: "./swagger/components/schemas/PagerDutyNotificationEndpoint.yml"
    HTTPNotificationEndpoint:
      $ref: "./swagger/components/schemas/HTTPNotificationEndpoint.yml"
    TelegramNotificationEndpoint:
      $ref: "./swagger/components/schemas/TelegramNotificationEndpoint.yml"
    NotificationEndpointType:
      $ref: "./swagger/components/schemas/NotificationEndpointType.yml"
    DBRP:
      $ref: "./swagger/components/schemas/DBRP.yml"
    DBRPs:
      $ref: "./swagger/components/schemas/DBRPs.yml"
    DBRPUpdate:
      $ref: "./swagger/components/schemas/DBRPUpdate.yml"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
