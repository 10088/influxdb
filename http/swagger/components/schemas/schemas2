cat > LanguageRequest.yml <<-"EOF"
description: Flux query to be analyzed.
type: object
required:
  - query
properties:
  query:
    description: Flux query script to be analyzed
    type: string
EOF

cat > Query.yml <<-"EOF"
description: Query influx using the Flux language
type: object
required:
  - query
properties:
  extern:
    $ref: "#/components/schemas/File"
  query:
    description: Query script to execute.
    type: string
  type:
    description: The type of query. Must be "flux".
    type: string
    enum:
      - flux
  dialect:
    $ref: "#/components/schemas/Dialect"
  now:
    description: Specifies the time that should be reported as "now" in the query. Default is the server's now time.
    type: string
    format: date-time
EOF

cat > InfluxQLQuery.yml <<-"EOF"
description: Query influx using the InfluxQL language
type: object
required:
  - query
properties:
  query:
    description: InfluxQL query execute.
    type: string
  type:
    description: The type of query. Must be "influxql".
    type: string
    enum:
      - influxql
  bucket:
    description: Bucket is to be used instead of the database and retention policy specified in the InfluxQL query.
    type: string
EOF

cat > Package.yml <<-"EOF"
description: Represents a complete package source tree.
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  path:
    description: Package import path
    type: string
  package:
    description: Package name
    type: string
  files:
    description: Package files
    type: array
    items:
      $ref: "#/components/schemas/File"
EOF

cat > File.yml <<-"EOF"
description: Represents a source from a single file
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  name:
    description: The name of the file.
    type: string
  package:
    $ref: "#/components/schemas/PackageClause"
  imports:
    description: A list of package imports
    type: array
    items:
      $ref: "#/components/schemas/ImportDeclaration"
  body:
    description: List of Flux statements
    type: array
    items:
      $ref: "#/components/schemas/Statement"
EOF

cat > PackageClause.yml <<-"EOF"
description: Defines a package identifier
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  name:
    $ref: "#/components/schemas/Identifier"
EOF

cat > ImportDeclaration.yml <<-"EOF"
description: Declares a package import
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  as:
    $ref: "#/components/schemas/Identifier"
  path:
    $ref: "#/components/schemas/StringLiteral"
EOF

cat > DeletePredicateRequest.yml <<-"EOF"
description: The delete predicate request.
type: object
required: [start, stop]
properties:
  start:
    description: RFC3339Nano
    type: string
    format: date-time
  stop:
    description: RFC3339Nano
    type: string
    format: date-time
  predicate:
    description: InfluxQL-like delete statement
    example: tag1="value1" and (tag2="value2" and tag3!="value3")
    type: string
EOF

cat > Node.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/Expression"
  - $ref: "#/components/schemas/Block"
EOF

cat > Block.yml <<-"EOF"
description: A set of statements
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  body:
    description: Block body
    type: array
    items:
      $ref: "#/components/schemas/Statement"
EOF

cat > Statement.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/BadStatement"
  - $ref: "#/components/schemas/VariableAssignment"
  - $ref: "#/components/schemas/MemberAssignment"
  - $ref: "#/components/schemas/ExpressionStatement"
  - $ref: "#/components/schemas/ReturnStatement"
  - $ref: "#/components/schemas/OptionStatement"
  - $ref: "#/components/schemas/BuiltinStatement"
  - $ref: "#/components/schemas/TestStatement"
EOF

cat > BadStatement.yml <<-"EOF"
description: A placeholder for statements for which no correct statement nodes can be created
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  text:
    description: Raw source text
    type: string
EOF

cat > VariableAssignment.yml <<-"EOF"
description: Represents the declaration of a variable
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  id:
    $ref: "#/components/schemas/Identifier"
  init:
    $ref: "#/components/schemas/Expression"
EOF

cat > MemberAssignment.yml <<-"EOF"
description: Object property assignment
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  member:
    $ref: "#/components/schemas/MemberExpression"
  init:
    $ref: "#/components/schemas/Expression"
EOF

cat > ExpressionStatement.yml <<-"EOF"
description: May consist of an expression that does not return a value and is executed solely for its side-effects
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  expression:
    $ref: "#/components/schemas/Expression"
EOF

cat > ReturnStatement.yml <<-"EOF"
description: Defines an expression to return
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  argument:
    $ref: "#/components/schemas/Expression"
EOF

cat > OptionStatement.yml <<-"EOF"
description: A single variable declaration
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  assignment:
    oneOf:
      - $ref: "#/components/schemas/VariableAssignment"
      - $ref: "#/components/schemas/MemberAssignment"
EOF

cat > BuiltinStatement.yml <<-"EOF"
description: Declares a builtin identifier and its type
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  id:
    $ref: "#/components/schemas/Identifier"
EOF

cat > TestStatement.yml <<-"EOF"
description: Declares a Flux test case
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  assignment:
    $ref: "#/components/schemas/VariableAssignment"
EOF

cat > Expression.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/ArrayExpression"
  - $ref: "#/components/schemas/DictExpression"
  - $ref: "#/components/schemas/FunctionExpression"
  - $ref: "#/components/schemas/BinaryExpression"
  - $ref: "#/components/schemas/CallExpression"
  - $ref: "#/components/schemas/ConditionalExpression"
  - $ref: "#/components/schemas/LogicalExpression"
  - $ref: "#/components/schemas/MemberExpression"
  - $ref: "#/components/schemas/IndexExpression"
  - $ref: "#/components/schemas/ObjectExpression"
  - $ref: "#/components/schemas/ParenExpression"
  - $ref: "#/components/schemas/PipeExpression"
  - $ref: "#/components/schemas/UnaryExpression"
  - $ref: "#/components/schemas/BooleanLiteral"
  - $ref: "#/components/schemas/DateTimeLiteral"
  - $ref: "#/components/schemas/DurationLiteral"
  - $ref: "#/components/schemas/FloatLiteral"
  - $ref: "#/components/schemas/IntegerLiteral"
  - $ref: "#/components/schemas/PipeLiteral"
  - $ref: "#/components/schemas/RegexpLiteral"
  - $ref: "#/components/schemas/StringLiteral"
  - $ref: "#/components/schemas/UnsignedIntegerLiteral"
  - $ref: "#/components/schemas/Identifier"
EOF

cat > ArrayExpression.yml <<-"EOF"
description: Used to create and directly specify the elements of an array object
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  elements:
    description: Elements of the array
    type: array
    items:
      $ref: "#/components/schemas/Expression"
EOF

cat > DictExpression.yml <<-"EOF"
description: Used to create and directly specify the elements of a dictionary
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  elements:
    description: Elements of the dictionary
    type: array
    items:
      $ref: "#/components/schemas/DictItem"
EOF

cat > DictItem.yml <<-"EOF"
description: A key/value pair in a dictionary
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  key:
    $ref: "#/components/schemas/Expression"
  val:
    $ref: "#/components/schemas/Expression"
EOF

cat > FunctionExpression.yml <<-"EOF"
description: Function expression
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  params:
    description: Function parameters
    type: array
    items:
      $ref: "#/components/schemas/Property"
  body:
    $ref: "#/components/schemas/Node"
EOF

cat > BinaryExpression.yml <<-"EOF"
description: uses binary operators to act on two operands in an expression
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  operator:
    type: string
  left:
    $ref: "#/components/schemas/Expression"
  right:
    $ref: "#/components/schemas/Expression"
EOF

cat > CallExpression.yml <<-"EOF"
description: Represents a function call
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  callee:
    $ref: "#/components/schemas/Expression"
  arguments:
    description: Function arguments
    type: array
    items:
      $ref: "#/components/schemas/Expression"
EOF

cat > ConditionalExpression.yml <<-"EOF"
description: Selects one of two expressions, `Alternate` or `Consequent`, depending on a third boolean expression, `Test`
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  test:
    $ref: "#/components/schemas/Expression"
  alternate:
    $ref: "#/components/schemas/Expression"
  consequent:
    $ref: "#/components/schemas/Expression"
EOF

cat > LogicalExpression.yml <<-"EOF"
description: Represents the rule conditions that collectively evaluate to either true or false
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  operator:
    type: string
  left:
    $ref: "#/components/schemas/Expression"
  right:
    $ref: "#/components/schemas/Expression"
EOF

cat > MemberExpression.yml <<-"EOF"
description: Represents accessing a property of an object
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  object:
    $ref: "#/components/schemas/Expression"
  property:
    $ref: "#/components/schemas/PropertyKey"
EOF

cat > IndexExpression.yml <<-"EOF"
description: Represents indexing into an array
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  array:
    $ref: "#/components/schemas/Expression"
  index:
    $ref: "#/components/schemas/Expression"
EOF

cat > ObjectExpression.yml <<-"EOF"
description: Allows the declaration of an anonymous object within a declaration
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  properties:
    description: Object properties
    type: array
    items:
      $ref: "#/components/schemas/Property"
EOF

cat > ParenExpression.yml <<-"EOF"
description: Represents an expression wrapped in parenthesis
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  expression:
    $ref: "#/components/schemas/Expression"
EOF

cat > PipeExpression.yml <<-"EOF"
description: Call expression with pipe argument
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  argument:
    $ref: "#/components/schemas/Expression"
  call:
    $ref: "#/components/schemas/CallExpression"
EOF

cat > UnaryExpression.yml <<-"EOF"
description: Uses operators to act on a single operand in an expression
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  operator:
    type: string
  argument:
    $ref: "#/components/schemas/Expression"
EOF

cat > BooleanLiteral.yml <<-"EOF"
description: Represents boolean values
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: boolean
EOF

cat > DateTimeLiteral.yml <<-"EOF"
description: Represents an instant in time with nanosecond precision using the syntax of golang's RFC3339 Nanosecond variant
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: string
EOF

cat > DurationLiteral.yml <<-"EOF"
description: Represents the elapsed time between two instants as an int64 nanosecond count with syntax of golang's time.Duration
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  values:
    description: Duration values
    type: array
    items:
      $ref: "#/components/schemas/Duration"
EOF

cat > FloatLiteral.yml <<-"EOF"
description: Represents floating point numbers according to the double representations defined by the IEEE-754-1985
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: number
EOF

cat > IntegerLiteral.yml <<-"EOF"
description: Represents integer numbers
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: string
EOF

cat > PipeLiteral.yml <<-"EOF"
description: Represents a specialized literal value, indicating the left hand value of a pipe expression
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
EOF

cat > RegexpLiteral.yml <<-"EOF"
description: Expressions begin and end with `/` and are regular expressions with syntax accepted by RE2
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: string
EOF

cat > StringLiteral.yml <<-"EOF"
description: Expressions begin and end with double quote marks
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: string
EOF

cat > UnsignedIntegerLiteral.yml <<-"EOF"
description: Represents integer numbers
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  value:
    type: string
EOF

cat > Duration.yml <<-"EOF"
description: A pair consisting of length of time and the unit of time measured. It is the atomic unit from which all duration literals are composed.
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  magnitude:
    type: integer
  unit:
    type: string
EOF

cat > Property.yml <<-"EOF"
description: The value associated with a key
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  key:
    $ref: "#/components/schemas/PropertyKey"
  value:
    $ref: "#/components/schemas/Expression"
EOF

cat > PropertyKey.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/Identifier"
  - $ref: "#/components/schemas/StringLiteral"
EOF

cat > Identifier.yml <<-"EOF"
description: A valid Flux identifier
type: object
properties:
  type:
    $ref: "#/components/schemas/NodeType"
  name:
    type: string
EOF

cat > NodeType.yml <<-"EOF"
description: Type of AST node
type: string
EOF

cat > Dialect.yml <<-"EOF"
description: Dialect are options to change the default CSV output format; https://www.w3.org/TR/2015/REC-tabular-metadata-20151217/#dialect-descriptions
type: object
properties:
  header:
    description: If true, the results will contain a header row
    type: boolean
    default: true
  delimiter:
    description: Separator between cells; the default is ,
    type: string
    default: ","
    maxLength: 1
    minLength: 1
  annotations:
    description: https://www.w3.org/TR/2015/REC-tabular-data-model-20151217/#columns
    type: array
    uniqueItems: true
    items:
      type: string
      enum:
        - "group"
        - "datatype"
        - "default"
  commentPrefix:
    description: Character prefixed to comment strings
    type: string
    default: "#"
    maxLength: 1
    minLength: 0
  dateTimeFormat:
    description: Format of timestamps
    type: string
    default: "RFC3339"
    enum:
      - RFC3339
      - RFC3339Nano
EOF

cat > Permission.yml <<-"EOF"
required: [action, resource]
properties:
  action:
    type: string
    enum:
      - read
      - write
  resource:
    $ref: "#/components/schemas/Resource"
EOF

cat > Resource.yml <<-"EOF"
type: object
required: [type]
properties:
  type:
    type: string
    enum:
      - authorizations
      - buckets
      - dashboards
      - orgs
      - sources
      - tasks
      - telegrafs
      - users
      - variables
      - scrapers
      - secrets
      - labels
      - views
      - documents
      - notificationRules
      - notificationEndpoints
      - checks
      - dbrp
  id:
    type: string
    nullable: true
    description: If ID is set that is a permission for a specific resource. if it is not set it is a permission for all resources of that resource type.
  name:
    type: string
    nullable: true
    description: Optional name of the resource if the resource has a name field.
  orgID:
    type: string
    nullable: true
    description: If orgID is set that is a permission for all resources owned my that org. if it is not set it is a permission for all resources of that resource type.
  org:
    type: string
    nullable: true
    description: Optional name of the organization of the organization with orgID.
EOF

cat > AuthorizationUpdateRequest.yml <<-"EOF"
properties:
  status:
    description: If inactive the token is inactive and requests using the token will be rejected.
    default: active
    type: string
    enum:
      - active
      - inactive
  description:
    type: string
    description: A description of the token.
EOF

cat > Authorization.yml <<-"EOF"
required: [orgID, permissions]
allOf:
  - $ref: "#/components/schemas/AuthorizationUpdateRequest"
  - type: object
    properties:
      createdAt:
        type: string
        format: date-time
        readOnly: true
      updatedAt:
        type: string
        format: date-time
        readOnly: true
      orgID:
        type: string
        description: ID of org that authorization is scoped to.
      permissions:
        type: array
        minItems: 1
        description: List of permissions for an auth.  An auth must have at least one Permission.
        items:
          $ref: "#/components/schemas/Permission"
      id:
        readOnly: true
        type: string
      token:
        readOnly: true
        type: string
        description: Passed via the Authorization Header and Token Authentication type.
      userID:
        readOnly: true
        type: string
        description: ID of user that created and owns the token.
      user:
        readOnly: true
        type: string
        description: Name of user that created and owns the token.
      org:
        readOnly: true
        type: string
        description: Name of the org token is scoped to.
      links:
        type: object
        readOnly: true
        example:
          self: "/api/v2/authorizations/1"
          user: "/api/v2/users/12"
        properties:
          self:
            readOnly: true
            $ref: "#/components/schemas/Link"
          user:
            readOnly: true
            $ref: "#/components/schemas/Link"
EOF

cat > Authorizations.yml <<-"EOF"
type: object
properties:
  links:
    readOnly: true
    $ref: "#/components/schemas/Links"
  authorizations:
    type: array
    items:
      $ref: "#/components/schemas/Authorization"
EOF

cat > PostBucketRequest.yml <<-"EOF"
properties:
  orgID:
    type: string
  name:
    type: string
  description:
    type: string
  rp:
    type: string
  retentionRules:
    $ref: "#/components/schemas/RetentionRules"
required: [orgID, name, retentionRules]
EOF

cat > Bucket.yml <<-"EOF"
properties:
  links:
    type: object
    readOnly: true
    example:
      labels: "/api/v2/buckets/1/labels"
      members: "/api/v2/buckets/1/members"
      org: "/api/v2/orgs/2"
      owners: "/api/v2/buckets/1/owners"
      self: "/api/v2/buckets/1"
      write: "/api/v2/write?org=2&bucket=1"
    properties:
      labels:
        description: URL to retrieve labels for this bucket
        $ref: "#/components/schemas/Link"
      members:
        description: URL to retrieve members that can read this bucket
        $ref: "#/components/schemas/Link"
      org:
        description: URL to retrieve parent organization for this bucket
        $ref: "#/components/schemas/Link"
      owners:
        description: URL to retrieve owners that can read and write to this bucket.
        $ref: "#/components/schemas/Link"
      self:
        description: URL for this bucket
        $ref: "#/components/schemas/Link"
      write:
        description: URL to write line protocol for this bucket
        $ref: "#/components/schemas/Link"
  id:
    readOnly: true
    type: string
  type:
    readOnly: true
    type: string
    default: user
    enum:
      - user
      - system
  name:
    type: string
  description:
    type: string
  orgID:
    type: string
  rp:
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  retentionRules:
    $ref: "#/components/schemas/RetentionRules"
  labels:
    $ref: "#/components/schemas/Labels"
required: [name, retentionRules]
EOF

cat > Buckets.yml <<-"EOF"
type: object
properties:
  links:
    readOnly: true
    $ref: "#/components/schemas/Links"
  buckets:
    type: array
    items:
      $ref: "#/components/schemas/Bucket"
EOF

cat > RetentionRules.yml <<-"EOF"
type: array
description: Rules to expire or retain data.  No rules means data never expires.
items:
  $ref: "#/components/schemas/RetentionRule"
EOF

cat > RetentionRule.yml <<-"EOF"
type: object
properties:
  type:
    type: string
    default: expire
    enum:
      - expire
  everySeconds:
    type: integer
    description: Duration in seconds for how long data will be kept in the database.
    example: 86400
    minimum: 1
required: [type, everySeconds]
EOF

cat > Link.yml <<-"EOF"
type: string
format: uri
readOnly: true
description: URI of resource.
EOF

cat > Links.yml <<-"EOF"
type: object
properties:
  next:
    $ref: "#/components/schemas/Link"
  self:
    $ref: "#/components/schemas/Link"
  prev:
    $ref: "#/components/schemas/Link"
required: [self]
EOF

cat > Logs.yml <<-"EOF"
type: object
properties:
  events:
    readOnly: true
    type: array
    items:
      $ref: "#/components/schemas/LogEvent"
EOF

cat > LogEvent.yml <<-"EOF"
type: object
properties:
  time:
    readOnly: true
    description: Time event occurred, RFC3339Nano.
    type: string
    format: date-time
  message:
    readOnly: true
    description: A description of the event that occurred.
    type: string
    example: Halt and catch fire
EOF

cat > Organization.yml <<-"EOF"
properties:
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/orgs/1"
      members: "/api/v2/orgs/1/members"
      owners: "/api/v2/orgs/1/owners"
      labels: "/api/v2/orgs/1/labels"
      secrets: "/api/v2/orgs/1/secrets"
      buckets: "/api/v2/buckets?org=myorg"
      tasks: "/api/v2/tasks?org=myorg"
      dashboards: "/api/v2/dashboards?org=myorg"
    properties:
      self:
        $ref: "#/components/schemas/Link"
      members:
        $ref: "#/components/schemas/Link"
      owners:
        $ref: "#/components/schemas/Link"
      labels:
        $ref: "#/components/schemas/Link"
      secrets:
        $ref: "#/components/schemas/Link"
      buckets:
        $ref: "#/components/schemas/Link"
      tasks:
        $ref: "#/components/schemas/Link"
      dashboards:
        $ref: "#/components/schemas/Link"
  id:
    readOnly: true
    type: string
  name:
    type: string
  description:
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  status:
    description: If inactive the organization is inactive.
    default: active
    type: string
    enum:
      - active
      - inactive
required: [name]
EOF

cat > Organizations.yml <<-"EOF"
type: object
properties:
  links:
    $ref: "#/components/schemas/Links"
  orgs:
    type: array
    items:
      $ref: "#/components/schemas/Organization"
EOF

cat > TemplateApply.yml <<-"EOF"
type: object
properties:
  dryRun:
    type: boolean
  orgID:
    type: string
  stackID:
    type: string
  template:
    type: object
    properties:
      contentType:
        type: string
      sources:
        type: array
        items:
          type: string
      contents:
        $ref: "#/components/schemas/Template"
  templates:
    type: array
    items:
      type: object
      properties:
        contentType:
          type: string
        sources:
          type: array
          items:
            type: string
        contents:
          $ref: "#/components/schemas/Template"
  envRefs:
    type: object
    additionalProperties:
      oneOf:
        - type: string
        - type: integer
        - type: number
        - type: boolean
  secrets:
    type: object
    additionalProperties:
      type: string
  remotes:
    type: array
    items:
      type: object
      properties:
        url:
          type: string
        contentType:
          type: string
      required: ["url"]
  actions:
    type: array
    items:
      oneOf:
        - type: object
          properties:
            action:
              type: string
              enum: ["skipKind"]
            properties:
              type: object
              properties:
                kind:
                  $ref: "#/components/schemas/TemplateKind"
              required: ["kind"]
        - type: object
          properties:
            action:
              type: string
              enum: ["skipResource"]
            properties:
              type: object
              properties:
                kind:
                  $ref: "#/components/schemas/TemplateKind"
                resourceTemplateName:
                  type: string
              required: ["kind", "resourceTemplateName"]
EOF

cat > TemplateKind.yml <<-"EOF"
type: string
enum:
  - Bucket
  - Check
  - CheckDeadman
  - CheckThreshold
  - Dashboard
  - Label
  - NotificationEndpoint
  - NotificationEndpointHTTP
  - NotificationEndpointPagerDuty
  - NotificationEndpointSlack
  - NotificationRule
  - Task
  - Telegraf
  - Variable
EOF

cat > TemplateExportByID.yml <<-"EOF"
type: object
properties:
  stackID:
    type: string
  orgIDs:
    type: array
    items:
      type: object
      properties:
        orgID:
          type: string
        resourceFilters:
          type: object
          properties:
            byLabel:
              type: array
              items:
                type: string
            byResourceKind:
              type: array
              items:
                $ref: "#/components/schemas/TemplateKind"
  resources:
    type: object
    properties:
      id:
        type: string
      kind:
        $ref: "#/components/schemas/TemplateKind"
      name:
        type: string
        description: "if defined with id, name is used for resource exported by id. if defined independently, resources strictly matching name are exported"
    required: [id, kind]
EOF

cat > TemplateExportByName.yml <<-"EOF"
type: object
properties:
  stackID:
    type: string
  orgIDs:
    type: array
    items:
      type: object
      properties:
        orgID:
          type: string
        resourceFilters:
          type: object
          properties:
            byLabel:
              type: array
              items:
                type: string
            byResourceKind:
              type: array
              items:
                $ref: "#/components/schemas/TemplateKind"
  resources:
    type: object
    properties:
      kind:
        $ref: "#/components/schemas/TemplateKind"
      name:
        type: string
    required: [name, kind]
EOF

cat > Template.yml <<-"EOF"
type: array
items:
  type: object
  properties:
    apiVersion:
      type: string
    kind:
      $ref: "#/components/schemas/TemplateKind"
    meta:
      type: object
      properties:
        name:
          type: string
    spec:
      type: object
EOF

cat > TemplateEnvReferences.yml <<-"EOF"
type: array
items:
  type: object
  properties:
    resourceField:
      type: string
      description: Field the environment reference corresponds too
    envRefKey:
      type: string
      description: Key identified as environment reference and is the key identified in the template
    value:
      description: Value provided to fulfill reference
      nullable: true
      oneOf:
        - type: string
        - type: integer
        - type: number
        - type: boolean
    defaultValue:
      description: Default value that will be provided for the reference when no value is provided
      nullable: true
      oneOf:
        - type: string
        - type: integer
        - type: number
        - type: boolean
  required: [resourceField, envRefKey]
EOF

cat > TemplateSummary.yml <<-"EOF"
type: object
properties:
  sources:
    type: array
    items:
      type: string
  stackID:
    type: string
  summary:
    type: object
    properties:
      buckets:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            orgID:
              type: string
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            name:
              type: string
            description:
              type: string
            retentionPeriod:
              type: integer
            labelAssociations:
              type: array
              items:
                $ref: "#/components/schemas/TemplateSummaryLabel"
            envReferences:
              $ref: "#/components/schemas/TemplateEnvReferences"
      checks:
        type: array
        items:
          allOf:
            - $ref: "#/components/schemas/CheckDiscriminator"
            - type: object
              properties:
                kind:
                  $ref: "#/components/schemas/TemplateKind"
                templateMetaName:
                  type: string
                labelAssociations:
                  type: array
                  items:
                    $ref: "#/components/schemas/TemplateSummaryLabel"
                envReferences:
                  $ref: "#/components/schemas/TemplateEnvReferences"
      dashboards:
        type: array
        items:
          type: object
          properties:
            id:
              type: "string"
            orgID:
              type: "string"
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            name:
              type: "string"
            description:
              type: "string"
            labelAssociations:
              type: array
              items:
                $ref: "#/components/schemas/TemplateSummaryLabel"
            charts:
              type: array
              items:
                $ref: "#/components/schemas/TemplateChart"
            envReferences:
              $ref: "#/components/schemas/TemplateEnvReferences"
      labels:
        type: array
        items:
          $ref: "#/components/schemas/TemplateSummaryLabel"
      labelMappings:
        type: array
        items:
          type: object
          properties:
            status:
              type: string
            resourceTemplateMetaName:
              type: string
            resourceName:
              type: string
            resourceID:
              type: string
            resourceType:
              type: string
            labelTemplateMetaName:
              type: string
            labelName:
              type: string
            labelID:
              type: string
      missingEnvRefs:
        type: array
        items:
          type: string
      missingSecrets:
        type: array
        items:
          type: string
      notificationEndpoints:
        type: array
        items:
          allOf:
            - $ref: "#/components/schemas/NotificationEndpointDiscrimator"
            - type: object
              properties:
                kind:
                  $ref: "#/components/schemas/TemplateKind"
                templateMetaName:
                  type: string
                labelAssociations:
                  type: array
                  items:
                    $ref: "#/components/schemas/TemplateSummaryLabel"
                envReferences:
                  $ref: "#/components/schemas/TemplateEnvReferences"
      notificationRules:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            name:
              type: string
            description:
              type: string
            endpointTemplateMetaName:
              type: string
            endpointID:
              type: string
            endpointType:
              type: string
            every:
              type: string
            offset:
              type: string
            messageTemplate:
              type: string
            status:
              type: string
            statusRules:
              type: array
              items:
                type: object
                properties:
                  currentLevel:
                    type: string
                  previousLevel:
                    type: string
            tagRules:
              type: array
              items:
                type: object
                properties:
                  key:
                    type: string
                  value:
                    type: string
                  operator:
                    type: string
            labelAssociations:
              type: array
              items:
                $ref: "#/components/schemas/TemplateSummaryLabel"
            envReferences:
              $ref: "#/components/schemas/TemplateEnvReferences"
      tasks:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            id:
              type: string
            name:
              type: string
            cron:
              type: string
            description:
              type: string
            every:
              type: string
            offset:
              type: string
            query:
              type: string
            status:
              type: string
            envReferences:
              $ref: "#/components/schemas/TemplateEnvReferences"
      telegrafConfigs:
        type: array
        items:
          allOf:
            - $ref: "#/components/schemas/TelegrafRequest"
            - type: object
              properties:
                kind:
                  $ref: "#/components/schemas/TemplateKind"
                templateMetaName:
                  type: string
                labelAssociations:
                  type: array
                  items:
                    $ref: "#/components/schemas/TemplateSummaryLabel"
                envReferences:
                  $ref: "#/components/schemas/TemplateEnvReferences"
      variables:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            id:
              type: string
            orgID:
              type: string
            name:
              type: string
            description:
              type: string
            arguments:
              $ref: "#/components/schemas/VariableProperties"
            labelAssociations:
              type: array
              items:
                $ref: "#/components/schemas/TemplateSummaryLabel"
            envReferences:
              $ref: "#/components/schemas/TemplateEnvReferences"
  diff:
    type: object
    properties:
      buckets:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                retentionRules:
                  $ref: "#/components/schemas/RetentionRules"
            old:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                retentionRules:
                  $ref: "#/components/schemas/RetentionRules"
      checks:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              $ref: "#/components/schemas/CheckDiscriminator"
            old:
              $ref: "#/components/schemas/CheckDiscriminator"
      dashboards:
        type: array
        items:
          type: object
          properties:
            stateStatus:
              type: string
            id:
              type: string
            kind:
              $ref: "#/components/schemas/TemplateKind"
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                charts:
                  type: array
                  items:
                    $ref: "#/components/schemas/TemplateChart"
            old:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                charts:
                  type: array
                  items:
                    $ref: "#/components/schemas/TemplateChart"
      labels:
        type: array
        items:
          type: object
          properties:
            stateStatus:
              type: string
            kind:
              $ref: "#/components/schemas/TemplateKind"
            id:
              type: string
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                description:
                  type: string
            old:
              type: object
              properties:
                name:
                  type: string
                color:
                  type: string
                description:
                  type: string
      labelMappings:
        type: array
        items:
          type: object
          properties:
            status:
              type: string
            resourceType:
              type: string
            resourceID:
              type: string
            resourceTemplateMetaName:
              type: string
            resourceName:
              type: string
            labelID:
              type: string
            labelTemplateMetaName:
              type: string
            labelName:
              type: string
      notificationEndpoints:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              $ref: "#/components/schemas/NotificationEndpointDiscrimator"
            old:
              $ref: "#/components/schemas/NotificationEndpointDiscrimator"
      notificationRules:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                endpointName:
                  type: string
                endpointID:
                  type: string
                endpointType:
                  type: string
                every:
                  type: string
                offset:
                  type: string
                messageTemplate:
                  type: string
                status:
                  type: string
                statusRules:
                  type: array
                  items:
                    type: object
                    properties:
                      currentLevel:
                        type: string
                      previousLevel:
                        type: string
                tagRules:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                      operator:
                        type: string
            old:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                endpointName:
                  type: string
                endpointID:
                  type: string
                endpointType:
                  type: string
                every:
                  type: string
                offset:
                  type: string
                messageTemplate:
                  type: string
                status:
                  type: string
                statusRules:
                  type: array
                  items:
                    type: object
                    properties:
                      currentLevel:
                        type: string
                      previousLevel:
                        type: string
                tagRules:
                  type: array
                  items:
                    type: object
                    properties:
                      key:
                        type: string
                      value:
                        type: string
                      operator:
                        type: string
      tasks:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                cron:
                  type: string
                description:
                  type: string
                every:
                  type: string
                offset:
                  type: string
                query:
                  type: string
                status:
                  type: string
            old:
              type: object
              properties:
                name:
                  type: string
                cron:
                  type: string
                description:
                  type: string
                every:
                  type: string
                offset:
                  type: string
                query:
                  type: string
                status:
                  type: string
      telegrafConfigs:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              $ref: "#/components/schemas/TelegrafRequest"
            old:
              $ref: "#/components/schemas/TelegrafRequest"
      variables:
        type: array
        items:
          type: object
          properties:
            kind:
              $ref: "#/components/schemas/TemplateKind"
            stateStatus:
              type: string
            id:
              type: string
            templateMetaName:
              type: string
            new:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                args:
                  $ref: "#/components/schemas/VariableProperties"
            old:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                args:
                  $ref: "#/components/schemas/VariableProperties"
  errors:
    type: array
    items:
      type: object
      properties:
        kind:
          $ref: "#/components/schemas/TemplateKind"
        reason:
          type: string
        fields:
          type: array
          items:
            type: string
        indexes:
          type: array
          items:
            type: integer
EOF

cat > TemplateSummaryLabel.yml <<-"EOF"
type: object
properties:
  id:
    type: string
  orgID:
    type: string
  kind:
    $ref: "#/components/schemas/TemplateKind"
  templateMetaName:
    type: string
  name:
    type: string
  properties:
    type: object
    properties:
      color:
        type: string
      description:
        type: string
  envReferences:
    $ref: "#/components/schemas/TemplateEnvReferences"
EOF

cat > TemplateChart.yml <<-"EOF"
type: object
properties:
  xPos:
    type: integer
  yPos:
    type: integer
  height:
    type: integer
  width:
    type: integer
  properties: # field name is properties
    $ref: "#/components/schemas/ViewProperties"
EOF

cat > Stack.yml <<-"EOF"
type: object
properties:
  id:
    type: string
  orgID:
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  events:
    type: array
    items:
      type: object
      properties:
        eventType:
          type: string
        name:
          type: string
        description:
          type: string
        sources:
          type: array
          items:
            type: string
        resources:
          type: array
          items:
            type: object
            properties:
              apiVersion:
                type: string
              resourceID:
                type: string
              kind:
                $ref: "#/components/schemas/TemplateKind"
              templateMetaName:
                type: string
              associations:
                type: array
                items:
                  type: object
                  properties:
                    kind:
                      $ref: "#/components/schemas/TemplateKind"
                    metaName:
                      type: string
              links:
                type: object
                properties:
                  self:
                    type: string
        urls:
          type: array
          items:
            type: string
        updatedAt:
          type: string
          format: date-time
          readOnly: true
EOF

cat > Runs.yml <<-"EOF"
type: object
properties:
  links:
    $ref: "#/components/schemas/Links"
  runs:
    type: array
    items:
      $ref: "#/components/schemas/Run"
EOF

cat > Run.yml <<-"EOF"
properties:
  id:
    readOnly: true
    type: string
  taskID:
    readOnly: true
    type: string
  status:
    readOnly: true
    type: string
    enum:
      - scheduled
      - started
      - failed
      - success
      - canceled
  scheduledFor:
    description: Time used for run's "now" option, RFC3339.
    type: string
    format: date-time
  log:
    description: An array of logs associated with the run.
    type: array
    readOnly: true
    items:
      type: object
      properties:
        runID:
          type: string
        time:
          type: string
        message:
          type: string
  startedAt:
    readOnly: true
    description: Time run started executing, RFC3339Nano.
    type: string
    format: date-time
  finishedAt:
    readOnly: true
    description: Time run finished executing, RFC3339Nano.
    type: string
    format: date-time
  requestedAt:
    readOnly: true
    description: Time run was manually requested, RFC3339Nano.
    type: string
    format: date-time
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/tasks/1/runs/1"
      task: "/api/v2/tasks/1"
      retry: "/api/v2/tasks/1/runs/1/retry"
    properties:
      self:
        type: string
        format: uri
      task:
        type: string
        format: uri
      retry:
        type: string
        format: uri
EOF

cat > RunManually.yml <<-"EOF"
properties:
  scheduledFor:
    nullable: true
    description: Time used for run's "now" option, RFC3339.  Default is the server's now time.
    type: string
    format: date-time
EOF

cat > Tasks.yml <<-"EOF"
type: object
properties:
  links:
    readOnly: true
    $ref: "#/components/schemas/Links"
  tasks:
    type: array
    items:
      $ref: "#/components/schemas/Task"
EOF

cat > Task.yml <<-"EOF"
type: object
properties:
  id:
    readOnly: true
    type: string
  type:
    description: The type of task, this can be used for filtering tasks on list actions.
    type: string
  orgID:
    description: The ID of the organization that owns this Task.
    type: string
  org:
    description: The name of the organization that owns this Task.
    type: string
  name:
    description: The name of the task.
    type: string
  description:
    description: An optional description of the task.
    type: string
  status:
    $ref: "#/components/schemas/TaskStatusType"
  labels:
    $ref: "#/components/schemas/Labels"
  authorizationID:
    description: The ID of the authorization used when this task communicates with the query engine.
    type: string
  flux:
    description: The Flux script to run for this task.
    type: string
  every:
    description: A simple task repetition schedule; parsed from Flux.
    type: string
  cron:
    description: A task repetition schedule in the form '* * * * * *'; parsed from Flux.
    type: string
  offset:
    description: Duration to delay after the schedule, before executing the task; parsed from flux, if set to zero it will remove this option and use 0 as the default.
    type: string
  latestCompleted:
    description: Timestamp of latest scheduled, completed run, RFC3339.
    type: string
    format: date-time
    readOnly: true
  lastRunStatus:
    readOnly: true
    type: string
    enum:
      - failed
      - success
      - canceled
  lastRunError:
    readOnly: true
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/tasks/1"
      owners: "/api/v2/tasks/1/owners"
      members: "/api/v2/tasks/1/members"
      labels: "/api/v2/tasks/1/labels"
      runs: "/api/v2/tasks/1/runs"
      logs: "/api/v2/tasks/1/logs"
    properties:
      self:
        $ref: "#/components/schemas/Link"
      owners:
        $ref: "#/components/schemas/Link"
      members:
        $ref: "#/components/schemas/Link"
      runs:
        $ref: "#/components/schemas/Link"
      logs:
        $ref: "#/components/schemas/Link"
      labels:
        $ref: "#/components/schemas/Link"
required: [id, name, orgID, flux]
EOF

cat > TaskStatusType.yml <<-"EOF"
type: string
enum: [active, inactive]
EOF

cat > User.yml <<-"EOF"
properties:
  id:
    readOnly: true
    type: string
  oauthID:
    type: string
  name:
    type: string
  status:
    description: If inactive the user is inactive.
    default: active
    type: string
    enum:
      - active
      - inactive
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/users/1"
    properties:
      self:
        type: string
        format: uri
required: [name]
EOF

cat > Users.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
        format: uri
  users:
    type: array
    items:
      $ref: "#/components/schemas/User"
EOF

cat > Flags.yml <<-"EOF"
type: object
additionalProperties: true
EOF

cat > ResourceMember.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/User"
  - type: object
    properties:
      role:
        type: string
        default: member
        enum:
          - member
EOF

cat > ResourceMembers.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
        format: uri
  users:
    type: array
    items:
      $ref: "#/components/schemas/ResourceMember"
EOF

cat > ResourceOwner.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/User"
  - type: object
    properties:
      role:
        type: string
        default: owner
        enum:
          - owner
EOF

cat > ResourceOwners.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
        format: uri
  users:
    type: array
    items:
      $ref: "#/components/schemas/ResourceOwner"
EOF

cat > FluxSuggestions.yml <<-"EOF"
type: object
properties:
  funcs:
    type: array
    items:
      $ref: "#/components/schemas/FluxSuggestion"
EOF

cat > FluxSuggestion.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  params:
    type: object
    additionalProperties:
      type: string
EOF

cat > Routes.yml <<-"EOF"
properties:
  authorizations:
    type: string
    format: uri
  buckets:
    type: string
    format: uri
  dashboards:
    type: string
    format: uri
  external:
    type: object
    properties:
      statusFeed:
        type: string
        format: uri
  variables:
    type: string
    format: uri
  me:
    type: string
    format: uri
  flags:
    type: string
    format: uri
  orgs:
    type: string
    format: uri
  query:
    type: object
    properties:
      self:
        type: string
        format: uri
      ast:
        type: string
        format: uri
      analyze:
        type: string
        format: uri
      suggestions:
        type: string
        format: uri
  setup:
    type: string
    format: uri
  signin:
    type: string
    format: uri
  signout:
    type: string
    format: uri
  sources:
    type: string
    format: uri
  system:
    type: object
    properties:
      metrics:
        type: string
        format: uri
      debug:
        type: string
        format: uri
      health:
        type: string
        format: uri
  tasks:
    type: string
    format: uri
  telegrafs:
    type: string
    format: uri
  users:
    type: string
    format: uri
  write:
    type: string
    format: uri
EOF

cat > Error.yml <<-"EOF"
$ref: "#/components/schemas/swagger/components/schemas/Error"
EOF

cat > LineProtocolError.yml <<-"EOF"
properties:
  code:
    description: Code is the machine-readable error code.
    readOnly: true
    type: string
    enum:
      - internal error
      - not found
      - conflict
      - invalid
      - empty value
      - unavailable
  message:
    readOnly: true
    description: Message is a human-readable message.
    type: string
  op:
    readOnly: true
    description: Op describes the logical code operation during error. Useful for debugging.
    type: string
  err:
    readOnly: true
    description: Err is a stack of errors that occurred during processing of the request. Useful for debugging.
    type: string
  line:
    readOnly: true
    description: First line within sent body containing malformed data
    type: integer
    format: int32
required: [code, message, op, err]
EOF

cat > LineProtocolLengthError.yml <<-"EOF"
properties:
  code:
    description: Code is the machine-readable error code.
    readOnly: true
    type: string
    enum:
      - invalid
  message:
    readOnly: true
    description: Message is a human-readable message.
    type: string
  maxLength:
    readOnly: true
    description: Max length in bytes for a body of line-protocol.
    type: integer
    format: int32
required: [code, message, maxLength]
EOF

cat > Field.yml <<-"EOF"
type: object
properties:
  value:
    description: >-
      value is the value of the field.  Meaning of the value is implied by
      the `type` key
    type: string
  type:
    description: >-
      `type` describes the field type. `func` is a function. `field` is a field reference.
    type: string
    enum:
      - func
      - field
      - integer
      - number
      - regex
      - wildcard
  alias:
    description: >-
      Alias overrides the field name in the returned response.  Applies only
      if type is `func`
    type: string
  args:
    description: Args are the arguments to the function
    type: array
    items:
      $ref: "#/components/schemas/Field"
EOF

cat > BuilderConfig.yml <<-"EOF"
type: object
properties:
  buckets:
    type: array
    items:
      type: string
  tags:
    type: array
    items:
      $ref: "#/components/schemas/BuilderTagsType"
  functions:
    type: array
    items:
      $ref: "#/components/schemas/BuilderFunctionsType"
  aggregateWindow:
    type: object
    properties:
      period:
        type: string
      fillValues:
        type: boolean
EOF

cat > BuilderTagsType.yml <<-"EOF"
type: object
properties:
  key:
    type: string
  values:
    type: array
    items:
      type: string
  aggregateFunctionType:
    $ref: "#/components/schemas/BuilderAggregateFunctionType"
EOF

cat > BuilderAggregateFunctionType.yml <<-"EOF"
type: string
enum: ["filter", "group"]
EOF

cat > BuilderFunctionsType.yml <<-"EOF"
type: object
properties:
  name:
    type: string
EOF

cat > DashboardQuery.yml <<-"EOF"
type: object
properties:
  text:
    type: string
    description: The text of the Flux query.
  editMode:
    $ref: "#/components/schemas/QueryEditMode"
  name:
    type: string
  builderConfig:
    $ref: "#/components/schemas/BuilderConfig"
EOF

cat > QueryEditMode.yml <<-"EOF"
type: string
enum: ["builder", "advanced"]
EOF

cat > Axis.yml <<-"EOF"
type: object
description: The description of a particular axis for a visualization.
properties:
  bounds:
    type: array
    minItems: 0
    maxItems: 2
    description: >-
      The extents of an axis in the form [lower, upper]. Clients determine
      whether bounds are to be inclusive or exclusive of their limits
    items:
      type: string
  label:
    description: Label is a description of this Axis
    type: string
  prefix:
    description: Prefix represents a label prefix for formatting axis values.
    type: string
  suffix:
    description: Suffix represents a label suffix for formatting axis values.
    type: string
  base:
    description: Base represents the radix for formatting axis values.
    type: string
    enum: ["", "2", "10"]
  scale:
    $ref: "#/components/schemas/AxisScale"
EOF

cat > AxisScale.yml <<-"EOF"
description: 'Scale is the axis formatting scale. Supported: "log", "linear"'
type: string
enum: ["log", "linear"]
EOF

cat > DashboardColor.yml <<-"EOF"
type: object
description: Defines an encoding of data value into color space.
required: [id, type, hex, name, value]
properties:
  id:
    description: The unique ID of the view color.
    type: string
  type:
    description: Type is how the color is used.
    type: string
    enum:
      - min
      - max
      - threshold
      - scale
      - text
      - background
  hex:
    description: The hex number of the color
    type: string
    maxLength: 7
    minLength: 7
  name:
    description: The user-facing name of the hex color.
    type: string
  value:
    description: The data value mapped to this color.
    type: number
    format: float
EOF

cat > RenamableField.yml <<-"EOF"
description: Describes a field that can be renamed and made visible or invisible.
type: object
properties:
  internalName:
    description: The calculated name of a field.
    readOnly: true
    type: string
  displayName:
    description: The name that a field is renamed to by the user.
    type: string
  visible:
    description: Indicates whether this field should be visible on the table.
    type: boolean
EOF

cat > XYViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - geom
  - queries
  - shape
  - axes
  - colors
  - legend
  - note
  - showNoteWhenEmpty
  - position
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [xy]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  axes:
    $ref: "#/components/schemas/Axes"
  legend:
    $ref: "#/components/schemas/Legend"
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yColumn:
    type: string
  generateYAxisTicks:
    type: array
    items:
      type: string
  yTotalTicks:
    type: integer
  yTickStart:
    type: number
    format: float
  yTickStep:
    type: number
    format: float
  shadeBelow:
    type: boolean
  hoverDimension:
    type: string
    enum: [auto, x, y, xy]
  position:
    type: string
    enum: [overlaid, stacked]
  geom:
    $ref: "#/components/schemas/XYGeom"
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > XYGeom.yml <<-"EOF"
type: string
enum: [line, step, stacked, bar, monotoneX]
EOF

cat > BandViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - geom
  - queries
  - shape
  - axes
  - colors
  - legend
  - note
  - showNoteWhenEmpty
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [band]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  axes:
    $ref: "#/components/schemas/Axes"
  legend:
    $ref: "#/components/schemas/Legend"
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yColumn:
    type: string
  generateYAxisTicks:
    type: array
    items:
      type: string
  yTotalTicks:
    type: integer
  yTickStart:
    type: number
    format: float
  yTickStep:
    type: number
    format: float
  upperColumn:
    type: string
  mainColumn:
    type: string
  lowerColumn:
    type: string
  hoverDimension:
    type: string
    enum: [auto, x, y, xy]
  geom:
    $ref: "#/components/schemas/XYGeom"
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > LinePlusSingleStatProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - shape
  - axes
  - colors
  - legend
  - note
  - showNoteWhenEmpty
  - prefix
  - suffix
  - decimalPlaces
  - position
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [line-plus-single-stat]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  axes:
    $ref: "#/components/schemas/Axes"
  legend:
    $ref: "#/components/schemas/Legend"
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yColumn:
    type: string
  generateYAxisTicks:
    type: array
    items:
      type: string
  yTotalTicks:
    type: integer
  yTickStart:
    type: number
    format: float
  yTickStep:
    type: number
    format: float
  shadeBelow:
    type: boolean
  hoverDimension:
    type: string
    enum: [auto, x, y, xy]
  position:
    type: string
    enum: [overlaid, stacked]
  prefix:
    type: string
  suffix:
    type: string
  decimalPlaces:
    $ref: "#/components/schemas/DecimalPlaces"
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > MosaicViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - xColumn
  - ySeriesColumns
  - fillColumns
  - xDomain
  - yDomain
  - xAxisLabel
  - yAxisLabel
  - xPrefix
  - yPrefix
  - xSuffix
  - ySuffix
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [mosaic]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      type: string
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yLabelColumnSeparator:
    type: string
  yLabelColumns:
    type: array
    items:
      type: string
  ySeriesColumns:
    type: array
    items:
      type: string
  fillColumns:
    type: array
    items:
      type: string
  xDomain:
    type: array
    items:
      type: number
    maxItems: 2
  yDomain:
    type: array
    items:
      type: number
    maxItems: 2
  xAxisLabel:
    type: string
  yAxisLabel:
    type: string
  xPrefix:
    type: string
  xSuffix:
    type: string
  yPrefix:
    type: string
  ySuffix:
    type: string
  hoverDimension:
    type: string
    enum: [auto, x, y, xy]
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > ScatterViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - xColumn
  - yColumn
  - fillColumns
  - symbolColumns
  - xDomain
  - yDomain
  - xAxisLabel
  - yAxisLabel
  - xPrefix
  - yPrefix
  - xSuffix
  - ySuffix
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [scatter]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      type: string
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yColumn:
    type: string
  generateYAxisTicks:
    type: array
    items:
      type: string
  yTotalTicks:
    type: integer
  yTickStart:
    type: number
    format: float
  yTickStep:
    type: number
    format: float
  fillColumns:
    type: array
    items:
      type: string
  symbolColumns:
    type: array
    items:
      type: string
  xDomain:
    type: array
    items:
      type: number
    maxItems: 2
  yDomain:
    type: array
    items:
      type: number
    maxItems: 2
  xAxisLabel:
    type: string
  yAxisLabel:
    type: string
  xPrefix:
    type: string
  xSuffix:
    type: string
  yPrefix:
    type: string
  ySuffix:
    type: string
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > HeatmapViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - xColumn
  - yColumn
  - xDomain
  - yDomain
  - xAxisLabel
  - yAxisLabel
  - xPrefix
  - yPrefix
  - xSuffix
  - ySuffix
  - binSize
properties:
  timeFormat:
    type: string
  type:
    type: string
    enum: [heatmap]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      type: string
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  xColumn:
    type: string
  generateXAxisTicks:
    type: array
    items:
      type: string
  xTotalTicks:
    type: integer
  xTickStart:
    type: number
    format: float
  xTickStep:
    type: number
    format: float
  yColumn:
    type: string
  generateYAxisTicks:
    type: array
    items:
      type: string
  yTotalTicks:
    type: integer
  yTickStart:
    type: number
    format: float
  yTickStep:
    type: number
    format: float
  xDomain:
    type: array
    items:
      type: number
    maxItems: 2
  yDomain:
    type: array
    items:
      type: number
    maxItems: 2
  xAxisLabel:
    type: string
  yAxisLabel:
    type: string
  xPrefix:
    type: string
  xSuffix:
    type: string
  yPrefix:
    type: string
  ySuffix:
    type: string
  binSize:
    type: number
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > SingleStatViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - prefix
  - tickPrefix
  - suffix
  - tickSuffix
  - legend
  - decimalPlaces
properties:
  type:
    type: string
    enum: [single-stat]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  prefix:
    type: string
  tickPrefix:
    type: string
  suffix:
    type: string
  tickSuffix:
    type: string
  legend:
    $ref: "#/components/schemas/Legend"
  decimalPlaces:
    $ref: "#/components/schemas/DecimalPlaces"
EOF

cat > HistogramViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - xColumn
  - fillColumns
  - xDomain
  - xAxisLabel
  - position
  - binCount
properties:
  type:
    type: string
    enum: [histogram]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  xColumn:
    type: string
  fillColumns:
    type: array
    items:
      type: string
  xDomain:
    type: array
    items:
      type: number
      format: float
  xAxisLabel:
    type: string
  position:
    type: string
    enum: [overlaid, stacked]
  binCount:
    type: integer
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > GaugeViewProperties.yml <<-"EOF"
type: object
required:
  [
    type,
    queries,
    colors,
    shape,
    note,
    showNoteWhenEmpty,
    prefix,
    tickPrefix,
    suffix,
    tickSuffix,
    legend,
    decimalPlaces,
  ]
properties:
  type:
    type: string
    enum: [gauge]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  prefix:
    type: string
  tickPrefix:
    type: string
  suffix:
    type: string
  tickSuffix:
    type: string
  legend:
    $ref: "#/components/schemas/Legend"
  decimalPlaces:
    $ref: "#/components/schemas/DecimalPlaces"
EOF

cat > TableViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - queries
  - colors
  - shape
  - note
  - showNoteWhenEmpty
  - tableOptions
  - fieldOptions
  - timeFormat
  - decimalPlaces
properties:
  type:
    type: string
    enum: [table]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  tableOptions:
    properties:
      verticalTimeAxis:
        description: >-
          verticalTimeAxis describes the orientation of the table by
          indicating whether the time axis will be displayed vertically
        type: boolean
      sortBy:
        $ref: "#/components/schemas/RenamableField"
      wrapping:
        description: Wrapping describes the text wrapping style to be used in table views
        type: string
        enum:
          - truncate
          - wrap
          - single-line
      fixFirstColumn:
        description: >-
          fixFirstColumn indicates whether the first column of the table
          should be locked
        type: boolean
  fieldOptions:
    description: >-
      fieldOptions represent the fields retrieved by the query with
      customization options
    type: array
    items:
      $ref: "#/components/schemas/RenamableField"
  timeFormat:
    description: >-
      timeFormat describes the display format for time values according to
      moment.js date formatting
    type: string
  decimalPlaces:
    $ref: "#/components/schemas/DecimalPlaces"
EOF

cat > MarkdownViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - shape
  - note
properties:
  type:
    type: string
    enum: [markdown]
  shape:
    type: string
    enum: ["chronograf-v2"]
  note:
    type: string
EOF

cat > CheckViewProperties.yml <<-"EOF"
type: object
required:
  - type
  - shape
  - checkID
  - queries
  - colors
properties:
  type:
    type: string
    enum: [check]
  shape:
    type: string
    enum: ["chronograf-v2"]
  checkID:
    type: string
  check:
    $ref: "#/components/schemas/Check"
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  legendColorizeRows:
    type: boolean
  legendOpacity:
    type: number
    format: float
  legendOrientationThreshold:
    type: integer
EOF

cat > GeoViewLayer.yml <<-"EOF"
type: object
oneOf:
  - $ref: "#/components/schemas/GeoCircleViewLayer"
  - $ref: "#/components/schemas/GeoHeatMapViewLayer"
  - $ref: "#/components/schemas/GeoPointMapViewLayer"
  - $ref: "#/components/schemas/GeoTrackMapViewLayer"
EOF

cat > GeoViewLayerProperties.yml <<-"EOF"
type: object
required: [type]
properties:
  type:
    type: string
    enum: [heatmap, circleMap, pointMap, trackMap]
EOF

cat > GeoCircleViewLayer.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/GeoViewLayerProperties"
  - type: object
    required: [radiusField, radiusDimension, colorField, colorDimension, colors]
    properties:
      radiusField:
        type: string
        description: Radius field
      radiusDimension:
        $ref: '#/components/schemas/Axis'
      colorField:
        type: string
        description: Circle color field
      colorDimension:
        $ref: '#/components/schemas/Axis'
      colors:
        description: Colors define color encoding of data into a visualization
        type: array
        items:
          $ref: "#/components/schemas/DashboardColor"
      radius:
        description: Maximum radius size in pixels
        type: integer
      interpolateColors:
        description: Interpolate circle color based on displayed value
        type: boolean
EOF

cat > GeoPointMapViewLayer.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/GeoViewLayerProperties"
  - type: object
    required: [colorField, colorDimension, colors]
    properties:
      colorField:
        type: string
        description: Marker color field
      colorDimension:
        $ref: '#/components/schemas/Axis'
      colors:
        description: Colors define color encoding of data into a visualization
        type: array
        items:
          $ref: "#/components/schemas/DashboardColor"
      isClustered:
        description: Cluster close markers together
        type: boolean
EOF

cat > GeoTrackMapViewLayer.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/GeoViewLayerProperties"
  - type: object
    required: [trackWidth, speed, randomColors, trackPointVisualization]
properties:
  trackWidth:
    description: Width of the track
    type: integer
  speed:
    description: Speed of the track animation
    type: integer
  randomColors:
    description: Assign different colors to different tracks
    type: boolean
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
        $ref: "#/components/schemas/DashboardColor"
EOF

cat > GeoHeatMapViewLayer.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/GeoViewLayerProperties"
  - type: object
    required: [intensityField, intensityDimension, radius, blur, colors]
    properties:
      intensityField:
        type: string
        description: Intensity field
      intensityDimension:
        $ref: '#/components/schemas/Axis'
      radius:
        description: Radius size in pixels
        type: integer
      blur:
        description: Blur for heatmap points
        type: integer
      colors:
        description: Colors define color encoding of data into a visualization
        type: array
        items:
          $ref: "#/components/schemas/DashboardColor"
EOF

cat > GeoViewProperties.yml <<-"EOF"
type: object
required: [type, shape, queries, note, showNoteWhenEmpty, center, zoom, allowPanAndZoom, detectCoordinateFields, layers]
properties:
  type:
    type: string
    enum: [geo]
  queries:
    type: array
    items:
      $ref: "#/components/schemas/DashboardQuery"
  shape:
    type: string
    enum: ['chronograf-v2']
  center:
    description: Coordinates of the center of the map
    type: object
    required: [lat, lon]
    properties:
      lat:
        description: Latitude of the center of the map
        type: number
        format: double
      lon:
        description: Longitude of the center of the map
        type: number
        format: double
  zoom:
    description: Zoom level used for initial display of the map
    type: number
    format: double
    minimum: 1
    maximum: 28
  allowPanAndZoom:
    description: If true, map zoom and pan controls are enabled on the dashboard view
    type: boolean
    default: true
  detectCoordinateFields:
    description: If true, search results get automatically regroupped so that lon,lat and value are treated as columns
    type: boolean
    default: true
  mapStyle:
    description: Define map type - regular, satellite etc.
    type: string
  note:
    type: string
  showNoteWhenEmpty:
    description: If true, will display note when empty
    type: boolean
  colors:
    description: Colors define color encoding of data into a visualization
    type: array
    items:
      $ref: "#/components/schemas/DashboardColor"
  layers:
    description: List of individual layers shown in the map
    type: array
    items:
      $ref: "#/components/schemas/GeoViewLayer"
EOF

cat > Axes.yml <<-"EOF"
description: The viewport for a View's visualizations
type: object
required: ["x", "y"]
properties:
  x:
    $ref: "#/components/schemas/Axis"
  "y": # Quoted to prevent YAML parser from interpreting y as shorthand for true.
    $ref: "#/components/schemas/Axis"
EOF

cat > Legend.yml <<-"EOF"
description: Legend define encoding of data into a view's legend
type: object
properties:
  type:
    description: The style of the legend.
    type: string
    enum:
      - static
  orientation:
    description: >-
      orientation is the location of the legend with respect to the view
      graph
    type: string
    enum:
      - top
      - bottom
      - left
      - right
EOF

cat > DecimalPlaces.yml <<-"EOF"
description: Indicates whether decimal places should be enforced, and how many digits it should show.
type: object
properties:
  isEnforced:
    description: Indicates whether decimal point setting should be enforced
    type: boolean
  digits:
    description: The number of digits after decimal to display
    type: integer
    format: int32
EOF

cat > ConstantVariableProperties.yml <<-"EOF"
properties:
  type:
    type: string
    enum: [constant]
  values:
    type: array
    items:
      type: string
EOF

cat > MapVariableProperties.yml <<-"EOF"
properties:
  type:
    type: string
    enum: [map]
  values:
    type: object
    additionalProperties:
      type: string
EOF

cat > QueryVariableProperties.yml <<-"EOF"
properties:
  type:
    type: string
    enum: [query]
  values:
    type: object
    properties:
      query:
        type: string
      language:
        type: string
EOF

cat > Variable.yml <<-"EOF"
type: object
required:
  - name
  - orgID
  - arguments
properties:
  links:
    type: object
    readOnly: true
    properties:
      self:
        type: string
        format: uri
      org:
        type: string
        format: uri
      labels:
        type: string
        format: uri
  id:
    readOnly: true
    type: string
  orgID:
    type: string
  name:
    type: string
  description:
    type: string
  selected:
    type: array
    items:
      type: string
  labels:
    $ref: "#/components/schemas/Labels"
  arguments:
    $ref: "#/components/schemas/VariableProperties"
  createdAt:
    type: string
    format: date-time
  updatedAt:
    type: string
    format: date-time
EOF

cat > Variables.yml <<-"EOF"
type: object
example:
  variables:
    - id: "1221432"
      name: ":ok:"
      selected:
        - hello
      arguments:
        type: constant
        values:
          - howdy
          - hello
          - hi
          - yo
          - oy
    - id: "1221432"
      name: ":ok:"
      selected:
        - c
      arguments:
        type: map
        values:
          a: fdjaklfdjkldsfjlkjdsa
          b: dfaksjfkljekfajekdljfas
          c: fdjksajfdkfeawfeea
    - id: "1221432"
      name: ":ok:"
      selected:
        - host
      arguments:
        type: query
        query: 'from(bucket: "foo") |> showMeasurements()'
        language: flux
properties:
  variables:
    type: array
    items:
      $ref: "#/components/schemas/Variable"
EOF

cat > VariableProperties.yml <<-"EOF"
type: object
oneOf:
  - $ref: "#/components/schemas/QueryVariableProperties"
  - $ref: "#/components/schemas/ConstantVariableProperties"
  - $ref: "#/components/schemas/MapVariableProperties"
EOF

cat > ViewProperties.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/LinePlusSingleStatProperties"
  - $ref: "#/components/schemas/XYViewProperties"
  - $ref: "#/components/schemas/SingleStatViewProperties"
  - $ref: "#/components/schemas/HistogramViewProperties"
  - $ref: "#/components/schemas/GaugeViewProperties"
  - $ref: "#/components/schemas/TableViewProperties"
  - $ref: "#/components/schemas/MarkdownViewProperties"
  - $ref: "#/components/schemas/CheckViewProperties"
  - $ref: "#/components/schemas/ScatterViewProperties"
  - $ref: "#/components/schemas/HeatmapViewProperties"
  - $ref: "#/components/schemas/MosaicViewProperties"
  - $ref: "#/components/schemas/BandViewProperties"
  - $ref: "#/components/schemas/GeoViewProperties"
EOF

cat > View.yml <<-"EOF"
required:
  - name
  - properties
properties:
  links:
    type: object
    readOnly: true
    properties:
      self:
        type: string
  id:
    readOnly: true
    type: string
  name:
    type: string
  properties:
    $ref: "#/components/schemas/ViewProperties"
EOF

cat > Views.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
  views:
    type: array
    items:
      $ref: "#/components/schemas/View"
EOF

cat > CellUpdate.yml <<-"EOF"
type: object
properties:
  x:
    type: integer
    format: int32
  "y": # Quoted to prevent YAML parser from interpreting y as shorthand for true.
    type: integer
    format: int32
  w:
    type: integer
    format: int32
  h:
    type: integer
    format: int32
EOF

cat > CreateCell.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  x:
    type: integer
    format: int32
  "y": # Quoted to prevent YAML parser from interpreting y as shorthand for true.
    type: integer
    format: int32
  w:
    type: integer
    format: int32
  h:
    type: integer
    format: int32
  usingView:
    type: string
    description: Makes a copy of the provided view.
EOF

cat > AnalyzeQueryResponse.yml <<-"EOF"
type: object
properties:
  errors:
    type: array
    items:
      type: object
      properties:
        line:
          type: integer
        column:
          type: integer
        character:
          type: integer
        message:
          type: string
EOF

cat > CellWithViewProperties.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/Cell"
  - type: object
    properties:
      name:
        type: string
      properties:
        $ref: "#/components/schemas/ViewProperties"
EOF

cat > Cell.yml <<-"EOF"
type: object
properties:
  id:
    type: string
  links:
    type: object
    properties:
      self:
        type: string
      view:
        type: string
  x:
    type: integer
    format: int32
  "y": # Quoted to prevent YAML parser from interpreting y as shorthand for true.
    type: integer
    format: int32
  w:
    type: integer
    format: int32
  h:
    type: integer
    format: int32
  viewID:
    type: string
    description: The reference to a view from the views API.
EOF

cat > CellsWithViewProperties.yml <<-"EOF"
type: array
items:
  $ref: "#/components/schemas/CellWithViewProperties"
EOF

cat > Cells.yml <<-"EOF"
type: array
items:
  $ref: "#/components/schemas/Cell"
EOF

cat > Secrets.yml <<-"EOF"
additionalProperties:
  type: string
example:
  apikey: abc123xyz
EOF

cat > SecretKeys.yml <<-"EOF"
type: object
properties:
  secrets:
    type: array
    items:
      type: string
EOF

cat > SecretKeysResponse.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/SecretKeys"
  - type: object
    properties:
      links:
        readOnly: true
        type: object
        properties:
          self:
            type: string
          org:
            type: string
EOF

cat > CreateDashboardRequest.yml <<-"EOF"
properties:
  orgID:
    type: string
    description: The ID of the organization that owns the dashboard.
  name:
    type: string
    description: The user-facing name of the dashboard.
  description:
    type: string
    description: The user-facing description of the dashboard.
required:
  - orgID
  - name
EOF

cat > DashboardWithViewProperties.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/CreateDashboardRequest"
  - type: object
    properties:
      links:
        type: object
        example:
          self: "/api/v2/dashboards/1"
          cells: "/api/v2/dashboards/1/cells"
          owners: "/api/v2/dashboards/1/owners"
          members: "/api/v2/dashboards/1/members"
          labels: "/api/v2/dashboards/1/labels"
          org: "/api/v2/labels/1"
        properties:
          self:
            $ref: "#/components/schemas/Link"
          cells:
            $ref: "#/components/schemas/Link"
          members:
            $ref: "#/components/schemas/Link"
          owners:
            $ref: "#/components/schemas/Link"
          labels:
            $ref: "#/components/schemas/Link"
          org:
            $ref: "#/components/schemas/Link"
      id:
        readOnly: true
        type: string
      meta:
        type: object
        properties:
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
      cells:
        $ref: "#/components/schemas/CellsWithViewProperties"
      labels:
        $ref: "#/components/schemas/Labels"
EOF

cat > Dashboard.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/CreateDashboardRequest"
  - type: object
    properties:
      links:
        type: object
        example:
          self: "/api/v2/dashboards/1"
          cells: "/api/v2/dashboards/1/cells"
          owners: "/api/v2/dashboards/1/owners"
          members: "/api/v2/dashboards/1/members"
          labels: "/api/v2/dashboards/1/labels"
          org: "/api/v2/labels/1"
        properties:
          self:
            $ref: "#/components/schemas/Link"
          cells:
            $ref: "#/components/schemas/Link"
          members:
            $ref: "#/components/schemas/Link"
          owners:
            $ref: "#/components/schemas/Link"
          labels:
            $ref: "#/components/schemas/Link"
          org:
            $ref: "#/components/schemas/Link"
      id:
        readOnly: true
        type: string
      meta:
        type: object
        properties:
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
      cells:
        $ref: "#/components/schemas/Cells"
      labels:
        $ref: "#/components/schemas/Labels"
EOF

cat > Dashboards.yml <<-"EOF"
type: object
properties:
  links:
    $ref: "#/components/schemas/Links"
  dashboards:
    type: array
    items:
      $ref: "#/components/schemas/Dashboard"
EOF

cat > Source.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
      query:
        type: string
      health:
        type: string
      buckets:
        type: string
  id:
    type: string
  orgID:
    type: string
  default:
    type: boolean
  name:
    type: string
  type:
    type: string
    enum: ["v1", "v2", "self"]
  url:
    type: string
    format: uri
  insecureSkipVerify:
    type: boolean
  telegraf:
    type: string
  token:
    type: string
  username:
    type: string
  password:
    type: string
  sharedSecret:
    type: string
  metaUrl:
    type: string
    format: uri
  defaultRP:
    type: string
  languages:
    type: array
    readOnly: true
    items:
      type: string
      enum:
        - flux
        - influxql
EOF

cat > Sources.yml <<-"EOF"
type: object
properties:
  links:
    type: object
    properties:
      self:
        type: string
        format: uri
  sources:
    type: array
    items:
      $ref: "#/components/schemas/Source"
EOF

cat > ScraperTargetRequest.yml <<-"EOF"
type: object
properties:
  name:
    type: string
    description: The name of the scraper target.
  type:
    type: string
    description: The type of the metrics to be parsed.
    enum: [prometheus]
  url:
    type: string
    description: The URL of the metrics endpoint.
    example: http://localhost:9090/metrics
  orgID:
    type: string
    description: The organization ID.
  bucketID:
    type: string
    description: The ID of the bucket to write to.
  allowInsecure:
    type: boolean
    description: Skip TLS verification on endpoint.
    default: false
EOF

cat > ScraperTargetResponse.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/ScraperTargetRequest"
  - type: object
    properties:
      id:
        type: string
        readOnly: true
      org:
        type: string
        description: The organization name.
      bucket:
        type: string
        description: The bucket name.
      links:
        type: object
        readOnly: true
        example:
          self: "/api/v2/scrapers/1"
          owners: "/api/v2/scrapers/1/owners"
          members: "/api/v2/scrapers/1/members"
          bucket: "/api/v2/buckets/1"
          organization: "/api/v2/orgs/1"
        properties:
          self:
            $ref: "#/components/schemas/Link"
          members:
            $ref: "#/components/schemas/Link"
          owners:
            $ref: "#/components/schemas/Link"
          bucket:
            $ref: "#/components/schemas/Link"
          organization:
            $ref: "#/components/schemas/Link"
EOF

cat > ScraperTargetResponses.yml <<-"EOF"
type: object
properties:
  configurations:
    type: array
    items:
      $ref: "#/components/schemas/ScraperTargetResponse"
EOF

cat > DocumentMeta.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  type:
    type: string
  templateID:
    type: string
  description:
    type: string
  version:
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
required:
  - name
  - version
EOF

cat > Document.yml <<-"EOF"
type: object
properties:
  id:
    type: string
    readOnly: true
  meta:
    $ref: "#/components/schemas/DocumentMeta"
  content:
    type: object
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/documents/templates/1"
    properties:
      self:
        description: The document URL.
        $ref: "#/components/schemas/Link"
required:
  - id
  - meta
  - content
EOF

cat > DocumentCreate.yml <<-"EOF"
type: object
properties:
  meta:
    $ref: "#/components/schemas/DocumentMeta"
  content:
    type: object
  org:
    type: string
    description: The organization Name. Specify either `orgID` or `org`.
  orgID:
    type: string
    description: The organization Name. Specify either `orgID` or `org`.
  labels:
    type: array
    description: An array of label IDs to be added as labels to the document.
    items:
      type: string
required:
  - meta
  - content
EOF

cat > DocumentUpdate.yml <<-"EOF"
type: object
properties:
  meta:
    $ref: "#/components/schemas/DocumentMeta"
  content:
    type: object
EOF

cat > DocumentListEntry.yml <<-"EOF"
type: object
properties:
  id:
    type: string
    readOnly: true
  meta:
    $ref: "#/components/schemas/DocumentMeta"
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/documents/templates/1"
    properties:
      self:
        description: The document URL.
        $ref: "#/components/schemas/Link"
required:
  - id
  - meta
EOF

cat > Documents.yml <<-"EOF"
type: object
properties:
  documents:
    type: array
    items:
      $ref: "#/components/schemas/DocumentListEntry"
EOF

cat > TelegrafRequest.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  description:
    type: string
  metadata:
    type: object
    properties:
      buckets:
        type: array
        items:
          type: string
  config:
    type: string
  orgID:
    type: string
EOF

cat > TelegrafRequestPlugin.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/TelegrafPluginInputCpu"
  - $ref: "#/components/schemas/TelegrafPluginInputDisk"
  - $ref: "#/components/schemas/TelegrafPluginInputDiskio"
  - $ref: "#/components/schemas/TelegrafPluginInputDocker"
  - $ref: "#/components/schemas/TelegrafPluginInputFile"
  - $ref: "#/components/schemas/TelegrafPluginInputKubernetes"
  - $ref: "#/components/schemas/TelegrafPluginInputLogParser"
  - $ref: "#/components/schemas/TelegrafPluginInputProcstat"
  - $ref: "#/components/schemas/TelegrafPluginInputPrometheus"
  - $ref: "#/components/schemas/TelegrafPluginInputRedis"
  - $ref: "#/components/schemas/TelegrafPluginInputSyslog"
  - $ref: "#/components/schemas/TelegrafPluginOutputFile"
  - $ref: "#/components/schemas/TelegrafPluginOutputInfluxDBV2"
EOF

cat > TelegrafPluginInputCpu.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["cpu"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputDisk.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["disk"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputDiskio.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["diskio"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputDocker.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["docker"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputDockerConfig"
EOF

cat > TelegrafPluginInputFile.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["file"]
  type:
    type: string
    enum: [input]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputFileConfig"
EOF

cat > TelegrafPluginInputKernel.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["kernel"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputKubernetes.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["kubernetes"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputKubernetesConfig"
EOF

cat > TelegrafPluginInputLogParser.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["logparser"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputLogParserConfig"
EOF

cat > TelegrafPluginInputMem.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["mem"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputNetResponse.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["net_response"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputNet.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["net"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputNginx.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["nginx"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputProcesses.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["processes"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputProcstat.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["procstat"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputProcstatConfig"
EOF

cat > TelegrafPluginInputPrometheus.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["prometheus"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputPrometheusConfig"
EOF

cat > TelegrafPluginInputRedis.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["redis"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputRedisConfig"
EOF

cat > TelegrafPluginInputSyslog.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["syslog"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginInputSyslogConfig"
EOF

cat > TelegrafPluginInputSwap.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["swap"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputSystem.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["system"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginInputTail.yml <<-"EOF"
type: object
required:
  - name
  - type
properties:
  name:
    type: string
    enum: ["tail"]
  type:
    type: string
    enum: ["input"]
  comment:
    type: string
EOF

cat > TelegrafPluginOutputFile.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["file"]
  type:
    type: string
    enum: ["output"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginOutputFileConfig"
EOF

cat > TelegrafPluginOutputInfluxDBV2.yml <<-"EOF"
type: object
required:
  - name
  - type
  - config
properties:
  name:
    type: string
    enum: ["influxdb_v2"]
  type:
    type: string
    enum: ["output"]
  comment:
    type: string
  config:
    $ref: "#/components/schemas/TelegrafPluginOutputInfluxDBV2Config"
EOF

cat > Telegraf.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/TelegrafRequest"
  - type: object
    properties:
      id:
        type: string
        readOnly: true
      links:
        type: object
        readOnly: true
        example:
          self: "/api/v2/telegrafs/1"
          lables: "/api/v2/telegrafs/1/labels"
          owners: "/api/v2/telegrafs/1/owners"
          members: "/api/v2/telegrafs/1/members"
        properties:
          self:
            $ref: "#/components/schemas/Link"
          labels:
            $ref: "#/components/schemas/Link"
          members:
            $ref: "#/components/schemas/Link"
          owners:
            $ref: "#/components/schemas/Link"
      labels:
        readOnly: true
        $ref: "#/components/schemas/Labels"
EOF

cat > Telegrafs.yml <<-"EOF"
type: object
properties:
  configurations:
    type: array
    items:
      $ref: "#/components/schemas/Telegraf"
EOF

cat > TelegrafPlugin.yml <<-"EOF"
type: object
properties:
  type:
    type: string
  name:
    type: string
  description:
    type: string
  config:
    type: string
EOF

cat > TelegrafPlugins.yml <<-"EOF"
type: object
properties:
  version:
    type: string
  os:
    type: string
  plugins:
    type: array
    items:
      $ref: "#/components/schemas/TelegrafPlugin"
EOF

cat > TelegrafPluginInputDockerConfig.yml <<-"EOF"
type: object
required:
  - endpoint
properties:
  endpoint:
    type: string
EOF

cat > TelegrafPluginInputFileConfig.yml <<-"EOF"
type: object
properties:
  files:
    type: array
    items:
      type: string
EOF

cat > TelegrafPluginInputKubernetesConfig.yml <<-"EOF"
type: object
properties:
  url:
    type: string
    format: uri
EOF

cat > TelegrafPluginInputLogParserConfig.yml <<-"EOF"
type: object
properties:
  files:
    type: array
    items:
      type: string
EOF

cat > TelegrafPluginInputProcstatConfig.yml <<-"EOF"
type: object
properties:
  exe:
    type: string
EOF

cat > TelegrafPluginInputPrometheusConfig.yml <<-"EOF"
type: object
properties:
  urls:
    type: array
    items:
      type: string
      format: uri
EOF

cat > TelegrafPluginInputRedisConfig.yml <<-"EOF"
type: object
properties:
  servers:
    type: array
    items:
      type: string
  password:
    type: string
EOF

cat > TelegrafPluginInputSyslogConfig.yml <<-"EOF"
type: object
properties:
  server:
    type: string
EOF

cat > TelegrafPluginOutputFileConfig.yml <<-"EOF"
type: object
required:
  - files
properties:
  files:
    type: array
    items:
      type: object
      properties:
        type:
          type: string
          enum: [stdout, path]
        path:
          type: string
EOF

cat > TelegrafPluginOutputInfluxDBV2Config.yml <<-"EOF"
type: object
required:
  - urls
  - token
  - organization
  - bucket
properties:
  urls:
    type: array
    items:
      type: string
      format: uri
  token:
    type: string
  organization:
    type: string
  bucket:
    type: string
EOF

cat > IsOnboarding.yml <<-"EOF"
type: object
properties:
  allowed:
    description: True means that the influxdb instance has NOT had initial setup; false means that the database has been setup.
    type: boolean
EOF

cat > OnboardingRequest.yml <<-"EOF"
type: object
properties:
  username:
    type: string
  password:
    type: string
  org:
    type: string
  bucket:
    type: string
  retentionPeriodHrs:
    type: integer
required:
  - username
  - org
  - bucket
EOF

cat > OnboardingResponse.yml <<-"EOF"
type: object
properties:
  user:
    $ref: "#/components/schemas/User"
  org:
    $ref: "#/components/schemas/Organization"
  bucket:
    $ref: "#/components/schemas/Bucket"
  auth:
    $ref: "#/components/schemas/Authorization"
EOF

cat > PasswordResetBody.yml <<-"EOF"
properties:
  password:
    type: string
required:
  - password
EOF

cat > AddResourceMemberRequestBody.yml <<-"EOF"
type: object
properties:
  id:
    type: string
  name:
    type: string
required:
  - id
EOF

cat > Ready.yml <<-"EOF"
type: object
properties:
  status:
    type: string
    enum:
      - ready
  started:
    type: string
    format: date-time
    example: "2019-03-13T10:09:33.891196-04:00"
  up:
    type: string
    example: "14m45.911966424s"
EOF

cat > HealthCheck.yml <<-"EOF"
type: object
required:
  - name
  - status
properties:
  name:
    type: string
  message:
    type: string
  checks:
    type: array
    items:
      $ref: "#/components/schemas/HealthCheck"
  status:
    type: string
    enum:
      - pass
      - fail
  version:
    type: string
  commit:
    type: string
EOF

cat > Labels.yml <<-"EOF"
type: array
items:
  $ref: "#/components/schemas/Label"
EOF

cat > Label.yml <<-"EOF"
type: object
properties:
  id:
    readOnly: true
    type: string
  orgID:
    readOnly: true
    type: string
  name:
    type: string
  properties:
    type: object
    additionalProperties:
      type: string
    description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
    example: { "color": "ffb3b3", "description": "this is a description" }
EOF

cat > LabelCreateRequest.yml <<-"EOF"
type: object
required: [orgID, name]
properties:
  orgID:
    type: string
  name:
    type: string
  properties:
    type: object
    additionalProperties:
      type: string
    description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
    example: { "color": "ffb3b3", "description": "this is a description" }
EOF

cat > LabelUpdate.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  properties:
    type: object
    additionalProperties:
      type: string
    description: Key/Value pairs associated with this label. Keys can be removed by sending an update with an empty value.
    example: { "color": "ffb3b3", "description": "this is a description" }
EOF

cat > LabelMapping.yml <<-"EOF"
type: object
properties:
  labelID:
    type: string
EOF

cat > LabelsResponse.yml <<-"EOF"
type: object
properties:
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    $ref: "#/components/schemas/Links"
EOF

cat > LabelResponse.yml <<-"EOF"
type: object
properties:
  label:
    $ref: "#/components/schemas/Label"
  links:
    $ref: "#/components/schemas/Links"
EOF

cat > ASTResponse.yml <<-"EOF"
description: Contains the AST for the supplied Flux query
type: object
properties:
  ast:
    $ref: "#/components/schemas/Package"
EOF

cat > WritePrecision.yml <<-"EOF"
type: string
enum:
  - ms
  - s
  - us
  - ns
EOF

cat > TaskCreateRequest.yml <<-"EOF"
type: object
properties:
  orgID:
    description: The ID of the organization that owns this Task.
    type: string
  org:
    description: The name of the organization that owns this Task.
    type: string
  status:
    $ref: "#/components/schemas/TaskStatusType"
  flux:
    description: The Flux script to run for this task.
    type: string
  description:
    description: An optional description of the task.
    type: string
required: [flux]
EOF

cat > TaskUpdateRequest.yml <<-"EOF"
type: object
properties:
  status:
    $ref: "#/components/schemas/TaskStatusType"
  flux:
    description: The Flux script to run for this task.
    type: string
  name:
    description: Override the 'name' option in the flux script.
    type: string
  every:
    description: Override the 'every' option in the flux script.
    type: string
  cron:
    description: Override the 'cron' option in the flux script.
    type: string
  offset:
    description: Override the 'offset' option in the flux script.
    type: string
  description:
    description: An optional description of the task.
    type: string
EOF

cat > FluxResponse.yml <<-"EOF"
description: Rendered flux that backs the check or notification.
properties:
  flux:
    type: string
EOF

cat > CheckPatch.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  description:
    type: string
  status:
    type: string
    enum:
      - active
      - inactive
EOF

cat > CheckDiscriminator.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/DeadmanCheck"
  - $ref: "#/components/schemas/ThresholdCheck"
  - $ref: "#/components/schemas/CustomCheck"
discriminator:
  propertyName: type
  mapping:
    deadman: "#/components/schemas/DeadmanCheck"
    threshold: "#/components/schemas/ThresholdCheck"
    custom: "#/components/schemas/CustomCheck"
EOF

cat > Check.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/CheckDiscriminator"
EOF

cat > PostCheck.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/CheckDiscriminator"
EOF

cat > Checks.yml <<-"EOF"
properties:
  checks:
    type: array
    items:
      $ref: "#/components/schemas/Check"
  links:
    $ref: "#/components/schemas/Links"
EOF

cat > CheckBase.yml <<-"EOF"
properties:
  id:
    readOnly: true
    type: string
  name:
    type: string
  orgID:
    description: The ID of the organization that owns this check.
    type: string
  ownerID:
    description: The ID of creator used to create this check.
    type: string
    readOnly: true
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  query:
    $ref: "#/components/schemas/DashboardQuery"
  status:
    $ref: "#/components/schemas/TaskStatusType"
  description:
    description: An optional description of the check.
    type: string
  latestCompleted:
    description: Timestamp of latest scheduled, completed run, RFC3339.
    type: string
    format: date-time
    readOnly: true
  lastRunStatus:
    readOnly: true
    type: string
    enum:
      - failed
      - success
      - canceled
  lastRunError:
    readOnly: true
    type: string
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/checks/1"
      labels: "/api/v2/checks/1/labels"
      members: "/api/v2/checks/1/members"
      owners: "/api/v2/checks/1/owners"
      query: "/api/v2/checks/1/query"
    properties:
      self:
        description: URL for this check
        $ref: "#/components/schemas/Link"
      labels:
        description: URL to retrieve labels for this check
        $ref: "#/components/schemas/Link"
      members:
        description: URL to retrieve members for this check
        $ref: "#/components/schemas/Link"
      owners:
        description: URL to retrieve owners for this check
        $ref: "#/components/schemas/Link"
      query:
        description: URL to retrieve flux script for this check
        $ref: "#/components/schemas/Link"
required: [name, orgID, query]
EOF

cat > ThresholdCheck.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/CheckBase"
  - type: object
    required: [type]
    properties:
      type:
        type: string
        enum: [threshold]
      thresholds:
        type: array
        items:
          $ref: "#/components/schemas/Threshold"
      every:
        description: Check repetition interval.
        type: string
      offset:
        description: Duration to delay after the schedule, before executing check.
        type: string
      tags:
        description: List of tags to write to each status.
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
      statusMessageTemplate:
        description: The template used to generate and write a status message.
        type: string
EOF

cat > Threshold.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/GreaterThreshold"
  - $ref: "#/components/schemas/LesserThreshold"
  - $ref: "#/components/schemas/RangeThreshold"
discriminator:
  propertyName: type
  mapping:
    greater: "#/components/schemas/GreaterThreshold"
    lesser: "#/components/schemas/LesserThreshold"
    range: "#/components/schemas/RangeThreshold"
EOF

cat > DeadmanCheck.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/CheckBase"
  - type: object
    required: [type]
    properties:
      type:
        type: string
        enum: [deadman]
      timeSince:
        description: String duration before deadman triggers.
        type: string
      staleTime:
        description: String duration for time that a series is considered stale and should not trigger deadman.
        type: string
      reportZero:
        description: If only zero values reported since time, trigger an alert
        type: boolean
      level:
        $ref: "#/components/schemas/CheckStatusLevel"
      every:
        description: Check repetition interval.
        type: string
      offset:
        description: Duration to delay after the schedule, before executing check.
        type: string
      tags:
        description: List of tags to write to each status.
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
      statusMessageTemplate:
        description: The template used to generate and write a status message.
        type: string
EOF

cat > CustomCheck.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/CheckBase"
  - type: object
    properties:
      type:
        type: string
        enum: [custom]
    required: [type]
EOF

cat > ThresholdBase.yml <<-"EOF"
properties:
  level:
    $ref: "#/components/schemas/CheckStatusLevel"
  allValues:
    description: If true, only alert if all values meet threshold.
    type: boolean
EOF

cat > GreaterThreshold.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/ThresholdBase"
  - type: object
    required: [type, value]
    properties:
      type:
        type: string
        enum: [greater]
      value:
        type: number
        format: float
EOF

cat > LesserThreshold.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/ThresholdBase"
  - type: object
    required: [type, value]
    properties:
      type:
        type: string
        enum: [lesser]
      value:
        type: number
        format: float
EOF

cat > RangeThreshold.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/ThresholdBase"
  - type: object
    required: [type, min, max, within]
    properties:
      type:
        type: string
        enum: [range]
      min:
        type: number
        format: float
      max:
        type: number
        format: float
      within:
        type: boolean
EOF

cat > CheckStatusLevel.yml <<-"EOF"
description: The state to record if check matches a criteria.
type: string
enum: ["UNKNOWN", "OK", "INFO", "CRIT", "WARN"]
EOF

cat > RuleStatusLevel.yml <<-"EOF"
description: The state to record if check matches a criteria.
type: string
enum: ["UNKNOWN", "OK", "INFO", "CRIT", "WARN", "ANY"]
EOF

cat > NotificationRuleUpdate.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  description:
    type: string
  status:
    type: string
    enum:
      - active
      - inactive
EOF

cat > NotificationRuleDiscriminator.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/SlackNotificationRule"
  - $ref: "#/components/schemas/SMTPNotificationRule"
  - $ref: "#/components/schemas/PagerDutyNotificationRule"
  - $ref: "#/components/schemas/HTTPNotificationRule"
  - $ref: "#/components/schemas/TelegramNotificationRule"
discriminator:
  propertyName: type
  mapping:
    slack: "#/components/schemas/SlackNotificationRule"
    smtp: "#/components/schemas/SMTPNotificationRule"
    pagerduty: "#/components/schemas/PagerDutyNotificationRule"
    http: "#/components/schemas/HTTPNotificationRule"
    telegram: "#/components/schemas/TelegramNotificationRule"
EOF

cat > NotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleDiscriminator"
EOF

cat > PostNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleDiscriminator"
EOF

cat > NotificationRules.yml <<-"EOF"
properties:
  notificationRules:
    type: array
    items:
      $ref: "#/components/schemas/NotificationRule"
  links:
    $ref: "#/components/schemas/Links"
EOF

cat > NotificationRuleBase.yml <<-"EOF"
type: object
required:
  - id
  - orgID
  - status
  - name
  - tagRules
  - statusRules
  - endpointID
properties:
  latestCompleted:
    description: Timestamp of latest scheduled, completed run, RFC3339.
    type: string
    format: date-time
    readOnly: true
  lastRunStatus:
    readOnly: true
    type: string
    enum:
      - failed
      - success
      - canceled
  lastRunError:
    readOnly: true
    type: string
  id:
    readOnly: true
    type: string
  endpointID:
    type: string
  orgID:
    description: The ID of the organization that owns this notification rule.
    type: string
  ownerID:
    description: The ID of creator used to create this notification rule.
    type: string
    readOnly: true
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  status:
    $ref: "#/components/schemas/TaskStatusType"
  name:
    description: Human-readable name describing the notification rule.
    type: string
  sleepUntil:
    type: string
  every:
    description: The notification repetition interval.
    type: string
  offset:
    description: Duration to delay after the schedule, before executing check.
    type: string
  runbookLink:
    type: string
  limitEvery:
    description: Don't notify me more than <limit> times every <limitEvery> seconds. If set, limit cannot be empty.
    type: integer
  limit:
    description: Don't notify me more than <limit> times every <limitEvery> seconds. If set, limitEvery cannot be empty.
    type: integer
  tagRules:
    description: List of tag rules the notification rule attempts to match.
    type: array
    items:
      $ref: "#/components/schemas/TagRule"
  description:
    description: An optional description of the notification rule.
    type: string
  statusRules:
    description: List of status rules the notification rule attempts to match.
    type: array
    minItems: 1
    items:
      $ref: "#/components/schemas/StatusRule"
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/notificationRules/1"
      labels: "/api/v2/notificationRules/1/labels"
      members: "/api/v2/notificationRules/1/members"
      owners: "/api/v2/notificationRules/1/owners"
      query: "/api/v2/notificationRules/1/query"
    properties:
      self:
        description: URL for this endpoint.
        $ref: "#/components/schemas/Link"
      labels:
        description: URL to retrieve labels for this notification rule.
        $ref: "#/components/schemas/Link"
      members:
        description: URL to retrieve members for this notification rule.
        $ref: "#/components/schemas/Link"
      owners:
        description: URL to retrieve owners for this notification rule.
        $ref: "#/components/schemas/Link"
      query:
        description: URL to retrieve flux script for this notification rule.
        $ref: "#/components/schemas/Link"
EOF

cat > TagRule.yml <<-"EOF"
type: object
properties:
  key:
    type: string
  value:
    type: string
  operator:
    type: string
    enum: ["equal", "notequal", "equalregex", "notequalregex"]
EOF

cat > StatusRule.yml <<-"EOF"
type: object
properties:
  currentLevel:
    $ref: "#/components/schemas/RuleStatusLevel"
  previousLevel:
    $ref: "#/components/schemas/RuleStatusLevel"
  count:
    type: integer
  period:
    type: string
EOF

cat > HTTPNotificationRuleBase.yml <<-"EOF"
type: object
required: [type]
properties:
  type:
    type: string
    enum: [http]
  url:
    type: string
EOF

cat > HTTPNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleBase"
  - $ref: "#/components/schemas/HTTPNotificationRuleBase"
EOF

cat > SlackNotificationRuleBase.yml <<-"EOF"
type: object
required: [type, messageTemplate]
properties:
  type:
    type: string
    enum: [slack]
  channel:
    type: string
  messageTemplate:
    type: string
EOF

cat > SlackNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleBase"
  - $ref: "#/components/schemas/SlackNotificationRuleBase"
EOF

cat > SMTPNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleBase"
  - $ref: "#/components/schemas/SMTPNotificationRuleBase"
EOF

cat > SMTPNotificationRuleBase.yml <<-"EOF"
type: object
required: [type, subjectTemplate, to]
properties:
  type:
    type: string
    enum: [smtp]
  subjectTemplate:
    type: string
  bodyTemplate:
    type: string
  to:
    type: string
EOF

cat > PagerDutyNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleBase"
  - $ref: "#/components/schemas/PagerDutyNotificationRuleBase"
EOF

cat > PagerDutyNotificationRuleBase.yml <<-"EOF"
type: object
required: [type, messageTemplate]
properties:
  type:
    type: string
    enum: [pagerduty]
  messageTemplate:
    type: string
EOF

cat > TelegramNotificationRule.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationRuleBase"
  - $ref: "#/components/schemas/TelegramNotificationRuleBase"
EOF

cat > TelegramNotificationRuleBase.yml <<-"EOF"
type: object
required: [type, messageTemplate, channel]
properties:
  type:
    description: The discriminator between other types of notification rules is "telegram".
    type: string
    enum: [telegram]
  messageTemplate:
    description: The message template as a flux interpolated string.
    type: string
  parseMode:
    description: Parse mode of the message text per https://core.telegram.org/bots/api#formatting-options . Defaults to "MarkdownV2" .
    type: string
    enum:
      - MarkdownV2
      - HTML
      - Markdown
  disableWebPagePreview:
    description: Disables preview of web links in the sent messages when "true". Defaults to "false" .
    type: boolean
EOF

cat > NotificationEndpointUpdate.yml <<-"EOF"
type: object
properties:
  name:
    type: string
  description:
    type: string
  status:
    type: string
    enum:
      - active
      - inactive
EOF

cat > NotificationEndpointDiscrimator.yml <<-"EOF"
oneOf:
  - $ref: "#/components/schemas/SlackNotificationEndpoint"
  - $ref: "#/components/schemas/PagerDutyNotificationEndpoint"
  - $ref: "#/components/schemas/HTTPNotificationEndpoint"
  - $ref: "#/components/schemas/TelegramNotificationEndpoint"
discriminator:
  propertyName: type
  mapping:
    slack: "#/components/schemas/SlackNotificationEndpoint"
    pagerduty: "#/components/schemas/PagerDutyNotificationEndpoint"
    http: "#/components/schemas/HTTPNotificationEndpoint"
    telegram: "#/components/schemas/TelegramNotificationEndpoint"
EOF

cat > NotificationEndpoint.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationEndpointDiscrimator"
EOF

cat > PostNotificationEndpoint.yml <<-"EOF"
allOf:
  - $ref: "#/components/schemas/NotificationEndpointDiscrimator"
EOF

cat > NotificationEndpoints.yml <<-"EOF"
properties:
  notificationEndpoints:
    type: array
    items:
      $ref: "#/components/schemas/NotificationEndpoint"
  links:
    $ref: "#/components/schemas/Links"
EOF

cat > NotificationEndpointBase.yml <<-"EOF"
type: object
required: [type, name]
properties:
  id:
    type: string
  orgID:
    type: string
  userID:
    type: string
  createdAt:
    type: string
    format: date-time
    readOnly: true
  updatedAt:
    type: string
    format: date-time
    readOnly: true
  description:
    description: An optional description of the notification endpoint.
    type: string
  name:
    type: string
  status:
    description: The status of the endpoint.
    default: active
    type: string
    enum: ["active", "inactive"]
  labels:
    $ref: "#/components/schemas/Labels"
  links:
    type: object
    readOnly: true
    example:
      self: "/api/v2/notificationEndpoints/1"
      labels: "/api/v2/notificationEndpoints/1/labels"
      members: "/api/v2/notificationEndpoints/1/members"
      owners: "/api/v2/notificationEndpoints/1/owners"
    properties:
      self:
        description: URL for this endpoint.
        $ref: "#/components/schemas/Link"
      labels:
        description: URL to retrieve labels for this endpoint.
        $ref: "#/components/schemas/Link"
      members:
        description: URL to retrieve members for this endpoint.
        $ref: "#/components/schemas/Link"
      owners:
        description: URL to retrieve owners for this endpoint.
        $ref: "#/components/schemas/Link"
  type:
    $ref: "#/components/schemas/NotificationEndpointType"
EOF

cat > SlackNotificationEndpoint.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/NotificationEndpointBase"
  - type: object
    properties:
      url:
        description: Specifies the URL of the Slack endpoint. Specify either `URL` or `Token`.
        type: string
      token:
        description: Specifies the API token string. Specify either `URL` or `Token`.
        type: string
EOF

cat > PagerDutyNotificationEndpoint.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/NotificationEndpointBase"
  - type: object
    required: [routingKey]
    properties:
      clientURL:
        type: string
      routingKey:
        type: string
EOF

cat > HTTPNotificationEndpoint.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/NotificationEndpointBase"
  - type: object
    required: [url, authMethod, method]
    properties:
      url:
        type: string
      username:
        type: string
      password:
        type: string
      token:
        type: string
      method:
        type: string
        enum: ["POST", "GET", "PUT"]
      authMethod:
        type: string
        enum: ["none", "basic", "bearer"]
      contentTemplate:
        type: string
      headers:
        type: object
        description: Customized headers.
        additionalProperties:
          type: string
EOF

cat > TelegramNotificationEndpoint.yml <<-"EOF"
type: object
allOf:
  - $ref: "#/components/schemas/NotificationEndpointBase"
  - type: object
    required: [token, channel]
    properties:
      token:
        description: Specifies the Telegram bot token. See https://core.telegram.org/bots#creating-a-new-bot .
        type: string
      channel:
        description: ID of the telegram channel, a chat_id in https://core.telegram.org/bots/api#sendmessage .
        type: string
EOF

cat > NotificationEndpointType.yml <<-"EOF"
type: string
enum: ["slack", "pagerduty", "http", "telegram"]
EOF

cat > DBRP.yml <<-"EOF"
type: object
properties:
  id:
    type: string
    description: the mapping identifier
    readOnly: true
  orgID:
    type: string
    description: the organization ID that owns this mapping.
  org:
    type: string
    description: the organization that owns this mapping.
  bucketID:
    type: string
    description: the bucket ID used as target for the translation.
  database:
    type: string
    description: InfluxDB v1 database
  retention_policy:
    type: string
    description: InfluxDB v1 retention policy
  default:
    type: boolean
    description: Specify if this mapping represents the default retention policy for the database specificed.
  links:
    $ref: "#/components/schemas/Links"
oneOf:
  - required:
    - orgID
    - bucketID
    - database
    - retention_policy
  - required:
    - org
    - bucketID
    - database
    - retention_policy
EOF

cat > DBRPs.yml <<-"EOF"
properties:
  content:
    type: array
    items:
      $ref: "#/components/schemas/DBRP"
EOF

cat > DBRPUpdate.yml <<-"EOF"
properties:
  database:
    type: string
    description: InfluxDB v1 database
  retention_policy:
    type: string
    description: InfluxDB v1 retention policy
  default:
    type: boolean
  links:
    $ref: "#/components/schemas/Links"
EOF

