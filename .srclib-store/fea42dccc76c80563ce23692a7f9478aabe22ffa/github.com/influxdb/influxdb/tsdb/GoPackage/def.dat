
*$engine/$engine15/optionsoptionsvar"tsdb/engine.go(À0‡@Rå{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$engine/$engine15/options°
*$engine/$engine15/pathpathvar"tsdb/engine.go(Æ0π@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$engine/$engine15/path™
*$engine/$engine15/walPathwalPathvar"tsdb/engine.go(ª0…@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$engine/$engine15/walPathÑ
*$executor/$executor21/inputinputvar"tsdb/executor.go(…â0›â@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$executor/$executor21/input°
*$mapper/$mapper29/timetimevar"tsdb/mapper.go(íè0úè@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$mapper/$mapper29/time∞
*$mapper/$mapper29/valuevaluevar"tsdb/mapper.go(ûè0Øè@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./$mapper/$mapper29/value«
'*%$query_executor/$query_executor0/namenamevar"tsdb/query_executor.go(»0”@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./$query_executor/$query_executor0/name“
-*+$query_executor/$query_executor10/chunkSize	chunkSizevar"tsdb/query_executor.go(£
0∞
@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./$query_executor/$query_executor10/chunkSizeè
)*'$query_executor/$query_executor10/shardshardvar"tsdb/query_executor.go(Ù	0à
@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./$query_executor/$query_executor10/shard˘
(*&$query_executor/$query_executor10/stmtstmtvar"tsdb/query_executor.go(ä
0°
@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./$query_executor/$query_executor10/stmt«
'*%$query_executor/$query_executor2/namenamevar"tsdb/query_executor.go(£0Æ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./$query_executor/$query_executor2/name”
+*)$query_executor/$query_executor4/passwordpasswordvar"tsdb/query_executor.go(˘0í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./$query_executor/$query_executor4/password”
+*)$query_executor/$query_executor4/usernameusernamevar"tsdb/query_executor.go(˘0í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./$query_executor/$query_executor4/username”
+*)$query_executor/$query_executor5/databasedatabasevar"tsdb/query_executor.go(æ0”@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./$query_executor/$query_executor5/database÷
&*$$query_executor/$query_executor5/errerrvar"tsdb/query_executor.go(ı0˛@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./$query_executor/$query_executor5/err«
'*%$query_executor/$query_executor5/namenamevar"tsdb/query_executor.go(æ0”@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./$query_executor/$query_executor5/name§
&*$$query_executor/$query_executor5/rpirpivar"tsdb/query_executor.go(÷0Û@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./$query_executor/$query_executor5/rpiñ
$*"$query_executor/$query_executor7/aavar"tsdb/query_executor.go(‚0˘@Rû{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./$query_executor/$query_executor7/a”
+*)$query_executor/$query_executor7/databasedatabasevar"tsdb/query_executor.go(¥0À@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./$query_executor/$query_executor7/database÷
&*$$query_executor/$query_executor7/errerrvar"tsdb/query_executor.go(˚0Ñ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./$query_executor/$query_executor7/errÚ
&*$$query_executor/$query_executor7/maxmaxvar"tsdb/query_executor.go(Õ0ﬂ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./$query_executor/$query_executor7/maxÚ
&*$$query_executor/$query_executor7/minminvar"tsdb/query_executor.go(Õ0ﬂ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./$query_executor/$query_executor7/minÕ
)*'$query_executor/$query_executor7/policypolicyvar"tsdb/query_executor.go(¥0À@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./$query_executor/$query_executor7/policy˜
'*%$query_executor/$query_executor9/stmtstmtvar"tsdb/query_executor.go(Å	0ò	@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./$query_executor/$query_executor9/stmtü
*.tsdbpackage"tsdb8R¥{
        "Exported": true,
        "PkgName": "tsdb",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZF

text/plain8Package tsdb implements a durable time series database.
ä.™
#*!AdminUserExists$query_executor714AdminUserExistsfunc"tsdb/query_executor.go( 0È@R•{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func() (bool, error)",
        "UnderlyingTypeString": "func() (bool, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./AdminUserExists$query_executor714Ø	
 *Authenticate$query_executor748Authenticatefunc"tsdb/query_executor.go(Ï0´@R≥{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "UnderlyingTypeString": "func(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Authenticate$query_executor748Ì
*
ByteSlices
ByteSlicestype"tsdb/engine.go(ÿ0Î8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ByteSlices",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlicesÚ
*ByteSlices/LenLenfunc"tsdb/engine.go(Ì0¶8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "ByteSlices",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Len∫
*ByteSlices/Len/aavar"tsdb/engine.go(Û0ˇ@RÓ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ByteSlices",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Len/aè
*ByteSlices/LessLessfunc"tsdb/engine.go(Î0Ω 8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "ByteSlices",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Lessº
*ByteSlices/Less/aavar"tsdb/engine.go(Ò0˝@RÓ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ByteSlices",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Less/aé
*ByteSlices/Less/iivar"tsdb/engine.go(Ñ 0å @R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Less/ié
*ByteSlices/Less/jjvar"tsdb/engine.go(Ñ 0å @R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Less/jÖ
*ByteSlices/SwapSwapfunc"tsdb/engine.go(ß0Í8R∑{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "ByteSlices",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Swapº
*ByteSlices/Swap/aavar"tsdb/engine.go(≠0π@RÓ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ByteSlices",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Swap/aé
*ByteSlices/Swap/iivar"tsdb/engine.go(¿0»@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Swap/ié
*ByteSlices/Swap/jjvar"tsdb/engine.go(¿0»@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ByteSlices/Swap/j⁄
*ConfigConfigtype"tsdb/config.go(¨0Ä8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Config",
        "UnderlyingTypeString": "struct{Dir string \"toml:\\\"dir\\\"\"; MaxWALSize int \"toml:\\\"max-wal-size\\\"\"; WALFlushInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-interval\\\"\"; WALPartitionFlushDelay github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-partition-flush-delay\\\"\"; WALDir string \"toml:\\\"wal-dir\\\"\"; WALEnableLogging bool \"toml:\\\"wal-enable-logging\\\"\"; WALReadySeriesSize int \"toml:\\\"wal-ready-series-size\\\"\"; WALCompactionThreshold float64 \"toml:\\\"wal-compaction-threshold\\\"\"; WALMaxSeriesSize int \"toml:\\\"wal-max-series-size\\\"\"; WALFlushColdInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-cold-interval\\\"\"; WALPartitionSizeThreshold uint64 \"toml:\\\"wal-partition-size-threshold\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config„
*
Config/DirDirfield"tsdb/config.go(Ω0‘8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/Dir≤
*Config/MaxWALSize
MaxWALSizefield"tsdb/config.go(ã0≈8Rô{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0WAL config options for b1 (introduced in 0.9.2)
ä./Config/MaxWALSizeû
*Config/WALCompactionThresholdWALCompactionThresholdfield"tsdb/config.go(÷0ü8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALCompactionThreshold¥
*Config/WALDirWALDirfield"tsdb/config.go(è0«8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZF

text/plain8WAL configuration options for bz1 (introduced in 0.9.3)
ä./Config/WALDirÜ
*Config/WALEnableLoggingWALEnableLoggingfield"tsdb/config.go(…0å8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALEnableLoggingπ
*Config/WALFlushColdIntervalWALFlushColdIntervalfield"tsdb/config.go(Á0Ø8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALFlushColdInterval≠
*Config/WALFlushIntervalWALFlushIntervalfield"tsdb/config.go(«0á8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALFlushIntervalÑ
*Config/WALMaxSeriesSizeWALMaxSeriesSizefield"tsdb/config.go(°0Â8Rô{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALMaxSeriesSizeø
*Config/WALPartitionFlushDelayWALPartitionFlushDelayfield"tsdb/config.go(â0–8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALPartitionFlushDelay•
"* Config/WALPartitionSizeThresholdWALPartitionSizeThresholdfield"tsdb/config.go(±0˛8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Config/WALPartitionSizeThresholdä
*Config/WALReadySeriesSizeWALReadySeriesSizefield"tsdb/config.go(é0‘8Rô{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Config",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Config/WALReadySeriesSizeŒ
!*CreateMapper$query_executor1255CreateMapperfunc"tsdb/query_executor.go(Á	0¡
@R–{
        "PkgName": "tsdb",
        "Receiver": "interface{CreateMapper(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (Mapper, error)}",
        "TypeString": "func(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)",
        "UnderlyingTypeString": "func(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./CreateMapper$query_executor1255Ï
*CursorCursortype"tsdb/engine.go(∫0ë8RÒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z;

text/plain-Cursor represents an iterator over a series.
ä./Cursoró
*Cursor/NextNextfunc"tsdb/engine.go(ı0è8R—{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Cursor",
        "TypeString": "func() (key []byte, value []byte)",
        "UnderlyingTypeString": "func() (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Nextí
*Cursor/Next/keykeyvar"tsdb/engine.go(˝0é@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Next/keyò
*Cursor/Next/valuevaluevar"tsdb/engine.go(˝0é@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Next/value≠
*Cursor/SeekSeekfunc"tsdb/engine.go(Œ0Û8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Cursor",
        "TypeString": "func(seek []byte) (key []byte, value []byte)",
        "UnderlyingTypeString": "func(seek []byte) (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Seekí
*Cursor/Seek/keykeyvar"tsdb/engine.go(·0Ú@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Seek/keyï
*Cursor/Seek/seekseekvar"tsdb/engine.go(”0ﬁ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Seek/seekò
*Cursor/Seek/valuevaluevar"tsdb/engine.go(·0Ú@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Cursor/Seek/valueÅ	
*Database$query_executor575Databasefunc"tsdb/query_executor.go(ø0@Rë{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Database$query_executor575Ç
*DatabaseIndexDatabaseIndextype"tsdb/meta.go(â0ã8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; measurements map[string]*github.com/influxdb/influxdb/tsdb.Measurement; series map[string]*github.com/influxdb/influxdb/tsdb.Series; lastID uint64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÂ

text/plain÷DatabaseIndex is the in memory index of a collection of measurements, time series, and their tags.
Exported functions are goroutine safe while un-exported functions assume the caller will use the appropriate locks
ä./DatabaseIndexµ
1*/DatabaseIndex/CreateMeasurementIndexIfNotExists!CreateMeasurementIndexIfNotExistsfunc"tsdb/meta.go(˜0€8Ró{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zs

text/plaineCreateMeasurementIndexIfNotExists creates or retrieves an in memory index object for the measurement
ä1./DatabaseIndex/CreateMeasurementIndexIfNotExists¢
3*1DatabaseIndex/CreateMeasurementIndexIfNotExists/mmvar"tsdb/meta.go(Î0Ñ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./DatabaseIndex/CreateMeasurementIndexIfNotExists/m€
6*4DatabaseIndex/CreateMeasurementIndexIfNotExists/namenamevar"tsdb/meta.go(±0º@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./DatabaseIndex/CreateMeasurementIndexIfNotExists/name¶
3*1DatabaseIndex/CreateMeasurementIndexIfNotExists/ssvar"tsdb/meta.go(˝0ç@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./DatabaseIndex/CreateMeasurementIndexIfNotExists/sΩ
,**DatabaseIndex/CreateSeriesIndexIfNotExistsCreateSeriesIndexIfNotExistsfunc"tsdb/meta.go(ˇ0ç8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(measurementName string, series *github.com/influxdb/influxdb/tsdb.Series) *github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "func(measurementName string, series *github.com/influxdb/influxdb/tsdb.Series) *github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zô

text/plainäCreateSeriesIndexIfNotExists adds the series for the given measurement to the index and sets its ID or returns the existing series object
ä,./DatabaseIndex/CreateSeriesIndexIfNotExistsò
.*,DatabaseIndex/CreateSeriesIndexIfNotExists/mmvar"tsdb/meta.go(é0«@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../DatabaseIndex/CreateSeriesIndexIfNotExists/mÚ
<*:DatabaseIndex/CreateSeriesIndexIfNotExists/measurementNamemeasurementNamevar"tsdb/meta.go(¥0 @R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./DatabaseIndex/CreateSeriesIndexIfNotExists/measurementNameú
.*,DatabaseIndex/CreateSeriesIndexIfNotExists/ssvar"tsdb/meta.go(Ö0ï@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../DatabaseIndex/CreateSeriesIndexIfNotExists/sù
3*1DatabaseIndex/CreateSeriesIndexIfNotExists/seriesseriesvar"tsdb/meta.go(Ã0⁄@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./DatabaseIndex/CreateSeriesIndexIfNotExists/seriesë
/*-DatabaseIndex/CreateSeriesIndexIfNotExists/ssssvar"tsdb/meta.go(™0ƒ@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./DatabaseIndex/CreateSeriesIndexIfNotExists/ssù
*DatabaseIndex/DropMeasurementDropMeasurementfunc"tsdb/meta.go(î70â98Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(name string)",
        "UnderlyingTypeString": "func(name string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zo

text/plainaDropMeasurement removes the measurement and all of its underlying series from the database index
ä./DatabaseIndex/DropMeasurementÇ
(*&DatabaseIndex/DropMeasurement/$meta1/ssvar"tsdb/meta.go(î70â9@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./DatabaseIndex/DropMeasurement/$meta1/sÖ
"* DatabaseIndex/DropMeasurement/dbdbvar"tsdb/meta.go(ö70´7@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./DatabaseIndex/DropMeasurement/db˛
!*DatabaseIndex/DropMeasurement/mmvar"tsdb/meta.go(Ú70å8@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./DatabaseIndex/DropMeasurement/m∑
$*"DatabaseIndex/DropMeasurement/namenamevar"tsdb/meta.go(Ω70»7@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./DatabaseIndex/DropMeasurement/nameÚ
*DatabaseIndex/DropSeries
DropSeriesfunc"tsdb/meta.go(œ90∆;8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(keys []string)",
        "UnderlyingTypeString": "func(keys []string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZO

text/plainADropSeries removes the series keys and their tags from the index
ä./DatabaseIndex/DropSeriesï
/*-DatabaseIndex/DropSeries/$meta0/$meta0/seriesseriesvar"tsdb/meta.go(ƒ:0⁄:@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./DatabaseIndex/DropSeries/$meta0/$meta0/series≤
#*!DatabaseIndex/DropSeries/$meta0/kkvar"tsdb/meta.go(œ90∆;@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./DatabaseIndex/DropSeries/$meta0/k˚
*DatabaseIndex/DropSeries/dbdbvar"tsdb/meta.go(’90Ê9@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/DropSeries/db±
*DatabaseIndex/DropSeries/keyskeysvar"tsdb/meta.go(Û90Ä:@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/DropSeries/keys‘
*DatabaseIndex/MeasurementMeasurementfunc"tsdb/meta.go(ô0õ8Ró{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZT

text/plainFMeasurement returns the measurement object from the index by the name
ä./DatabaseIndex/Measurement˙
*DatabaseIndex/Measurement/ddvar"tsdb/meta.go(ü0Ø@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/Measurement/dØ
 *DatabaseIndex/Measurement/namenamevar"tsdb/meta.go(Ω0»@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./DatabaseIndex/Measurement/nameê
'*%DatabaseIndex/MeasurementSeriesCountsMeasurementSeriesCountsfunc"tsdb/meta.go(±08RÂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func() (nMeasurements int, nSeries int)",
        "UnderlyingTypeString": "func() (nMeasurements int, nSeries int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zù

text/plainéMeasurementSeriesCounts returns the number of measurements and series currently indexed by the database.
Useful for reporting and monitoring.
ä'./DatabaseIndex/MeasurementSeriesCountsí
)*'DatabaseIndex/MeasurementSeriesCounts/ddvar"tsdb/meta.go(∑0«@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./DatabaseIndex/MeasurementSeriesCounts/d‹
5*3DatabaseIndex/MeasurementSeriesCounts/nMeasurementsnMeasurementsvar"tsdb/meta.go(‰0ı@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./DatabaseIndex/MeasurementSeriesCounts/nMeasurements 
/*-DatabaseIndex/MeasurementSeriesCounts/nSeriesnSeriesvar"tsdb/meta.go(˜0Ç@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./DatabaseIndex/MeasurementSeriesCounts/nSeries¨
*DatabaseIndex/MeasurementsMeasurementsfunc"tsdb/meta.go(”40Æ68RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Measurements",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z?

text/plain1Measurements returns a list of all measurements.
ä./DatabaseIndex/MeasurementsÜ
%*#DatabaseIndex/Measurements/$meta0/mmvar"tsdb/meta.go(”40Æ6@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./DatabaseIndex/Measurements/$meta0/mˇ
*DatabaseIndex/Measurements/dbdbvar"tsdb/meta.go(Ÿ40Í4@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/Measurements/dbõ
)*'DatabaseIndex/Measurements/measurementsmeasurementsvar"tsdb/meta.go(ã50∆5@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./DatabaseIndex/Measurements/measurementsì
*DatabaseIndex/SeriesSeriesfunc"tsdb/meta.go(–0¿	8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(key string) *github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "func(key string) *github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z.

text/plain Series returns a series by key.
ä./DatabaseIndex/Series
*DatabaseIndex/Series/ddvar"tsdb/meta.go(÷0Ê@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/Series/d¢
*DatabaseIndex/Series/keykeyvar"tsdb/meta.go(Ô0˘@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/Series/keyº
*DatabaseIndex/SeriesNSeriesNfunc"tsdb/meta.go(Î	0Œ
8R´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z4

text/plain&SeriesN returns the number of series.
ä./DatabaseIndex/SeriesNÚ
*DatabaseIndex/SeriesN/ddvar"tsdb/meta.go(Ò	0Å
@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/SeriesN/dì
*DatabaseIndex/TagsForSeriesTagsForSeriesfunc"tsdb/meta.go(õ0À8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(key string) map[string]string",
        "UnderlyingTypeString": "func(key string) map[string]string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;TagsForSeries returns the tag map for the passed in series
ä./DatabaseIndex/TagsForSeries∞
!*DatabaseIndex/TagsForSeries/keykeyvar"tsdb/meta.go(¡0À@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./DatabaseIndex/TagsForSeries/key˛
*DatabaseIndex/TagsForSeries/ssvar"tsdb/meta.go(°0±@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/TagsForSeries/sÛ
 *DatabaseIndex/TagsForSeries/ssssvar"tsdb/meta.go(Ü0ô@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./DatabaseIndex/TagsForSeries/ss„
*DatabaseIndex/lastIDlastIDfield"tsdb/meta.go(ß0∫Rå{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "DatabaseIndex",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/lastID€
*DatabaseIndex/measurementsmeasurementsfield"tsdb/meta.go(å0∞RÚ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "DatabaseIndex",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/measurementsÀ
"* DatabaseIndex/measurementsByExprmeasurementsByExprfunc"tsdb/meta.go(Ω0∞$R◊{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.Measurements, error)",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.Measurements, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zx

text/plainjmeasurementsByExpr takes and expression containing only tags and returns
a list of matching *Measurement.
ä"./DatabaseIndex/measurementsByExprá
O*MDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta0/okokvar"tsdb/meta.go(è0∑@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta0/okÂ
O*MDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta0/rerevar"tsdb/meta.go(è0∑@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.RegexLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.RegexLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta0/reá
O*MDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta1/okokvar"tsdb/meta.go(œ0˜@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta1/ok‰
N*LDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta1/ssvar"tsdb/meta.go(œ0˜@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äN./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/$meta1/$meta1/sÎ
A*?DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/okokvar"tsdb/meta.go(¶0…@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/ok¿
B*@DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/tagtagvar"tsdb/meta.go(¶0…@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/tagª
A*?DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/tftfvar"tsdb/meta.go(±0Ë@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.TagFilter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.TagFilter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta0/tfÑ
B*@DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/errerrvar"tsdb/meta.go(‰ 0è!@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/errÕ
E*CDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/lhsIDslhsIDsvar"tsdb/meta.go(‰ 0è!@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/lhsIDsÕ
E*CDatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/rhsIDsrhsIDsvar"tsdb/meta.go(¿!0Î!@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./DatabaseIndex/measurementsByExpr/$meta0/$meta0/$meta0/$meta1/rhsIDsã
%*#DatabaseIndex/measurementsByExpr/dbdbvar"tsdb/meta.go(√0‘@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./DatabaseIndex/measurementsByExpr/dbò
'*%DatabaseIndex/measurementsByExpr/exprexprvar"tsdb/meta.go(È0˚@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./DatabaseIndex/measurementsByExpr/exprŸ
#*!DatabaseIndex/measurementsByRegexmeasurementsByRegexfunc"tsdb/meta.go(π20ù4Râ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(re *regexp.Regexp) github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "func(re *regexp.Regexp) github.com/influxdb/influxdb/tsdb.Measurements",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZQ

text/plainCmeasurementsByRegex returns the measurements that match the regex.
ä#./DatabaseIndex/measurementsByRegexî
,**DatabaseIndex/measurementsByRegex/$meta0/mmvar"tsdb/meta.go(π20ù4@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./DatabaseIndex/measurementsByRegex/$meta0/mç
&*$DatabaseIndex/measurementsByRegex/dbdbvar"tsdb/meta.go(ø20–2@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./DatabaseIndex/measurementsByRegex/dbö
+*)DatabaseIndex/measurementsByRegex/matchesmatchesvar"tsdb/meta.go(ç30°3@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./DatabaseIndex/measurementsByRegex/matches…
&*$DatabaseIndex/measurementsByRegex/rerevar"tsdb/meta.go(Ê20˜2@R÷{
        "PkgName": "tsdb",
        "TypeString": "*regexp.Regexp",
        "UnderlyingTypeString": "*regexp.Regexp",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./DatabaseIndex/measurementsByRegex/re≈
(*&DatabaseIndex/measurementsByTagFiltersmeasurementsByTagFiltersfunc"tsdb/meta.go(ã%0Ò1R”{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*DatabaseIndex",
        "TypeString": "func(filters []*github.com/influxdb/influxdb/tsdb.TagFilter) github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "func(filters []*github.com/influxdb/influxdb/tsdb.TagFilter) github.com/influxdb/influxdb/tsdb.Measurements",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zd

text/plainVmeasurementsByTagFilters returns the measurements matching the filters on tag values.
ä(./DatabaseIndex/measurementsByTagFilters∫
?*=DatabaseIndex/measurementsByTagFilters/$meta0/$meta0/$meta0/mmvar"tsdb/meta.go(ã%0Ò1@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./DatabaseIndex/measurementsByTagFilters/$meta0/$meta0/$meta0/mœ
C*ADatabaseIndex/measurementsByTagFilters/$meta0/$meta0/measurementsmeasurementsvar"tsdb/meta.go(≠&0Ë&@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./DatabaseIndex/measurementsByTagFilters/$meta0/$meta0/measurements°
\*ZDatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/okokvar"tsdb/meta.go(ﬂ+0¯+@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä\./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/ok±
`*^DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/tagValtagValvar"tsdb/meta.go(ã%0Ò1@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/tagVal˝
I*GDatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/isEQisEQvar"tsdb/meta.go(î.0Õ.@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/isEQ˜
G*EDatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/okokvar"tsdb/meta.go(Ä*0´*@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/okÍ
L*JDatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/tagValstagValsvar"tsdb/meta.go(Ä*0´*@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/$meta0/tagVals∂
?*=DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/ffvar"tsdb/meta.go(ã%0Ò1@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.TagFilter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.TagFilter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./DatabaseIndex/measurementsByTagFilters/$meta1/$meta0/$meta0/fû
1*/DatabaseIndex/measurementsByTagFilters/$meta1/mmvar"tsdb/meta.go(ã%0Ò1@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./DatabaseIndex/measurementsByTagFilters/$meta1/mó
+*)DatabaseIndex/measurementsByTagFilters/dbdbvar"tsdb/meta.go(ë%0¢%@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./DatabaseIndex/measurementsByTagFilters/db¢
0*.DatabaseIndex/measurementsByTagFilters/filtersfiltersvar"tsdb/meta.go(Ω%0—%@Rñ{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.TagFilter",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.TagFilter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./DatabaseIndex/measurementsByTagFilters/filtersˆ
5*3DatabaseIndex/measurementsByTagFilters/measurementsmeasurementsvar"tsdb/meta.go(ì(0¨(@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZA

text/plain3Build a list of measurements matching the filters.
ä5./DatabaseIndex/measurementsByTagFilters/measurements—
1*/DatabaseIndex/measurementsByTagFilters/tagMatchtagMatchvar"tsdb/meta.go(≤(0ø(@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./DatabaseIndex/measurementsByTagFilters/tagMatchê
*DatabaseIndex/mumufield"tsdb/meta.go(Ò0äRÈ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "DatabaseIndex",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLin memory metadata index, built on load and updated when new series come in
ä./DatabaseIndex/muø
*DatabaseIndex/seriesseriesfield"tsdb/meta.go(⁄0˘RË{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "DatabaseIndex",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DatabaseIndex/series
*Databases$query_executor627	Databasesfunc"tsdb/query_executor.go(Û0õ@R˝{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Databases$query_executor627«
*DedupeEntriesDedupeEntriesfunc"tsdb/engine.go(Ÿ0—8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(a [][]byte) [][]byte",
        "UnderlyingTypeString": "func(a [][]byte) [][]byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZQ

text/plainCDedupeEntries returns slices with unique keys (the first 8 bytes).
ä./DedupeEntries¢
*DedupeEntries/$engine0/bbvar"tsdb/engine.go(Ÿ0—@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DedupeEntries/$engine0/b¢
*DedupeEntries/$engine1/vvvar"tsdb/engine.go(Ÿ0—@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DedupeEntries/$engine1/vî
*DedupeEntries/aavar"tsdb/engine.go(Ï0ˆ@R {
        "PkgName": "tsdb",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DedupeEntries/a¶
*DedupeEntries/mmvar"tsdb/engine.go(∑0”@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string][]byte",
        "UnderlyingTypeString": "map[string][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DedupeEntries/m†
*DedupeEntries/otherothervar"tsdb/engine.go(∏0⁄@R {
        "PkgName": "tsdb",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./DedupeEntries/other˛
*DefaultCompactionThresholdDefaultCompactionThresholdconst"tsdb/config.go(É0£8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped float",
        "UnderlyingTypeString": "untyped float",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zw

text/plainiDefaultCompactionThreshold flush and compact a partition once this ratio of keys are over the flush size
ä./DefaultCompactionThresholdπ
*DefaultEngineDefaultEngineconst"tsdb/engine.go( 0ﬂ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZW

text/plainIDefaultEngine is the default engine used by the shard when initializing.
ä./DefaultEngineå
*DefaultFlushColdIntervalDefaultFlushColdIntervalconst"tsdb/config.go(¨0÷8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zí

text/plainÉDefaultFlushColdInterval specifies how long after a partition has been cold
for writes that a full flush and compaction are forced
ä./DefaultFlushColdInterval—
*DefaultMaxSeriesSizeDefaultMaxSeriesSizeconst"tsdb/config.go(¸0û8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z`

text/plainRDefaultMaxSeriesSize specifies the size at which a series will be forced to flush
ä./DefaultMaxSeriesSizeΩ
*DefaultMaxWALSizeDefaultMaxWALSizeconst"tsdb/config.go(ú0¡8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZU

text/plainGDefaultMaxWALSize is the default size of the WAL before it is flushed.
ä./DefaultMaxWALSizeí
*DefaultPartitionSizeThresholdDefaultPartitionSizeThresholdconst"tsdb/config.go(Î0õ8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÖ

text/plainˆDefaultParititionSizeThreshold specifies when a partition gets to this size in
memory, we should slow down writes until it gets a chance to compact.
This will force clients to get backpressure if they're writing too fast. We need
this because the WAL can take writes much faster than the index. So eventually
we'll need to create backpressure, otherwise we'll fill up the memory and die.
This number multiplied by the parition count is roughly the max possible memory
size for the in-memory WAL cache.
ä./DefaultPartitionSizeThreshold÷
*DefaultReadySeriesSizeDefaultReadySeriesSizeconst"tsdb/config.go(Ò0ì8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z_

text/plainQDefaultReadySeriesSize of 32KB specifies when a series is eligible to be flushed
ä./DefaultReadySeriesSizeÓ
*DefaultWALFlushIntervalDefaultWALFlushIntervalconst"tsdb/config.go(ø0È8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zx

text/plainjDefaultWALFlushInterval is the frequency the WAL will get flushed if
it doesn't reach its size threshold.
ä./DefaultWALFlushIntervalÂ
*DefaultWALPartitionFlushDelayDefaultWALPartitionFlushDelayconst"tsdb/config.go(ø0Ó8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z]

text/plainODefaultWALPartitionFlushDelay is the sleep time between WAL partition flushes.
ä./DefaultWALPartitionFlushDelay®
*EngineEnginetype"tsdb/engine.go(•0Ì8Rû{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Engine",
        "UnderlyingTypeString": "interface{Begin(writable bool) (github.com/influxdb/influxdb/tsdb.Tx, error); Close() error; DeleteMeasurement(name string, seriesKeys []string) error; DeleteSeries(keys []string) error; LoadMetadataIndex(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error; Open() error; SeriesCount() (n int, err error); SetLogOutput(io.Writer); WritePoints(points []github.com/influxdb/influxdb/tsdb.Point, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZJ

text/plain<Engine represents a swappable storage engine for the shard.
ä./Engine⁄
*Engine/BeginBeginfunc"tsdb/engine.go(—0Ò8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(writable bool) (github.com/influxdb/influxdb/tsdb.Tx, error)",
        "UnderlyingTypeString": "func(writable bool) (github.com/influxdb/influxdb/tsdb.Tx, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/Beginü
*Engine/Begin/writablewritablevar"tsdb/engine.go(◊0‰@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/Begin/writable
*Engine/CloseClosefunc"tsdb/engine.go(«0‘8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/Close‘
*Engine/DeleteMeasurementDeleteMeasurementfunc"tsdb/engine.go(ê0…8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(name string, seriesKeys []string) error",
        "UnderlyingTypeString": "func(name string, seriesKeys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/DeleteMeasurementØ
*Engine/DeleteMeasurement/namenamevar"tsdb/engine.go(¢0≠@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/DeleteMeasurement/name≈
%*#Engine/DeleteMeasurement/seriesKeys
seriesKeysvar"tsdb/engine.go(Ø0¬@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Engine/DeleteMeasurement/seriesKeysü
*Engine/DeleteSeriesDeleteSeriesfunc"tsdb/engine.go(Ì0é8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(keys []string) error",
        "UnderlyingTypeString": "func(keys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/DeleteSeries©
*Engine/DeleteSeries/keyskeysvar"tsdb/engine.go(˙0á@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/DeleteSeries/keys¶
*Engine/LoadMetadataIndexLoadMetadataIndexfunc"tsdb/engine.go(0Œ8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error",
        "UnderlyingTypeString": "func(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/LoadMetadataIndexÜ
 *Engine/LoadMetadataIndex/indexindexvar"tsdb/engine.go(Ç0ñ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Engine/LoadMetadataIndex/index»
,**Engine/LoadMetadataIndex/measurementFieldsmeasurementFieldsvar"tsdb/engine.go(ò0«@R∏{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Engine/LoadMetadataIndex/measurementFieldsÌ
*Engine/OpenOpenfunc"tsdb/engine.go(π0≈8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/Openú
*Engine/SeriesCountSeriesCountfunc"tsdb/engine.go(À0Î8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func() (n int, err error)",
        "UnderlyingTypeString": "func() (n int, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/SeriesCount≤
*Engine/SeriesCount/errerrvar"tsdb/engine.go(·0Í@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/SeriesCount/errî
*Engine/SeriesCount/nnvar"tsdb/engine.go(⁄0ﬂ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/SeriesCount/nã
*Engine/SetLogOutputSetLogOutputfunc"tsdb/engine.go(◊0Ó8R≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(io.Writer)",
        "UnderlyingTypeString": "func(io.Writer)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/SetLogOutputò
*Engine/WritePointsWritePointsfunc"tsdb/engine.go(Û0Î8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Engine",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/WritePointsŒ
,**Engine/WritePoints/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine.go(è0ƒ@R∏{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Engine/WritePoints/measurementFieldsToSaveÔ
*Engine/WritePoints/pointspointsvar"tsdb/engine.go(ˇ0ç@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Engine/WritePoints/pointsó
#*!Engine/WritePoints/seriesToCreateseriesToCreatevar"tsdb/engine.go(∆0‰@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Engine/WritePoints/seriesToCreateË
*EngineOptionsEngineOptionstype"tsdb/engine.go(‚0ë8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZR

text/plainDEngineOptions represents the options used to initialize the engine.
ä./EngineOptions¢	
*EngineOptions/ConfigConfigfield"tsdb/engine.go(Ç0è8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "EngineOptions",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Config",
        "UnderlyingTypeString": "struct{Dir string \"toml:\\\"dir\\\"\"; MaxWALSize int \"toml:\\\"max-wal-size\\\"\"; WALFlushInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-interval\\\"\"; WALPartitionFlushDelay github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-partition-flush-delay\\\"\"; WALDir string \"toml:\\\"wal-dir\\\"\"; WALEnableLogging bool \"toml:\\\"wal-enable-logging\\\"\"; WALReadySeriesSize int \"toml:\\\"wal-ready-series-size\\\"\"; WALCompactionThreshold float64 \"toml:\\\"wal-compaction-threshold\\\"\"; WALMaxSeriesSize int \"toml:\\\"wal-max-series-size\\\"\"; WALFlushColdInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-cold-interval\\\"\"; WALPartitionSizeThreshold uint64 \"toml:\\\"wal-partition-size-threshold\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./EngineOptions/Configñ
*EngineOptions/EngineVersionEngineVersionfield"tsdb/engine.go(˙0ó8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "EngineOptions",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./EngineOptions/EngineVersioná
*EngineOptions/MaxWALSize
MaxWALSizefield"tsdb/engine.go(ô0≥8R†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "EngineOptions",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./EngineOptions/MaxWALSize•
 *EngineOptions/WALFlushIntervalWALFlushIntervalfield"tsdb/engine.go(µ0Ÿ8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "EngineOptions",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./EngineOptions/WALFlushInterval∑
&*$EngineOptions/WALPartitionFlushDelayWALPartitionFlushDelayfield"tsdb/engine.go(€0ˇ8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "EngineOptions",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./EngineOptions/WALPartitionFlushDelay”
*ErrAuthorizeErrAuthorizetype"tsdb/query_executor.go(‡»0›…8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ErrAuthorize",
        "UnderlyingTypeString": "struct{q *github.com/influxdb/influxdb/tsdb.QueryExecutor; query *github.com/influxdb/influxdb/influxql.Query; user string; database string; message string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0ErrAuthorize represents an authorization error.
ä./ErrAuthorize√
*ErrAuthorize/ErrorErrorfunc"tsdb/query_executor.go(”Ã0¬Œ8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "ErrAuthorize",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z3

text/plain%Error returns the text of the error.
ä./ErrAuthorize/Error‚
*ErrAuthorize/Error/eevar"tsdb/query_executor.go(ŸÃ0ÁÃ@RÑ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ErrAuthorize",
        "UnderlyingTypeString": "struct{q *github.com/influxdb/influxdb/tsdb.QueryExecutor; query *github.com/influxdb/influxdb/influxql.Query; user string; database string; message string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/Error/eÚ
*ErrAuthorize/databasedatabasefield"tsdb/query_executor.go(ª…0 …Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ErrAuthorize",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/databaseÔ
*ErrAuthorize/messagemessagefield"tsdb/query_executor.go(Ã…0€…Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ErrAuthorize",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/message±
*ErrAuthorize/qqfield"tsdb/query_executor.go(˜»0é…Rﬂ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ErrAuthorize",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/qµ
*ErrAuthorize/queryqueryfield"tsdb/query_executor.go(ê…0®…R◊{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ErrAuthorize",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/queryÊ
*ErrAuthorize/useruserfield"tsdb/query_executor.go(™…0π…Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ErrAuthorize",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrAuthorize/userå
*ErrDatabaseNotFoundErrDatabaseNotFoundfunc"tsdb/query_executor.go(à—0È—8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrDatabaseNotFoundØ
*ErrDatabaseNotFound/namenamevar"tsdb/query_executor.go(°—0¨—@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrDatabaseNotFound/name±
*ErrFieldNotFoundErrFieldNotFoundvar"tsdb/shard.go(„0ì8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;ErrFieldNotFound is returned when a field cannot be found.
ä./ErrFieldNotFound∆
*ErrFieldOverflowErrFieldOverflowvar"tsdb/shard.go(€0ä8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z^

text/plainPErrFieldOverflow is returned when too many fields are created on a measurement.
ä./ErrFieldOverflow⁄
*ErrFieldTypeConflictErrFieldTypeConflictvar"tsdb/shard.go(È0°8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zf

text/plainXErrFieldTypeConflict is returned when a new field already exists with a different type.
ä./ErrFieldTypeConflictÚ
*ErrFieldUnmappedIDErrFieldUnmappedIDvar"tsdb/shard.go(ì0…8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÉ

text/plainuErrFieldUnmappedID is returned when the system is presented, during decode, with a field ID
there is no mapping for.
ä./ErrFieldUnmappedID∆
*ErrFormatNotFoundErrFormatNotFoundvar"tsdb/engine.go(¬0Ù8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLErrFormatNotFound is returned when no format can be determined from a path.
ä./ErrFormatNotFound¿
*ErrInvalidQueryErrInvalidQueryvar"tsdb/query_executor.go(ëœ0æœ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZP

text/plainBErrInvalidQuery is returned when executing an unknown query type.
ä./ErrInvalidQueryï
*ErrMeasurementNotFoundErrMeasurementNotFoundfunc"tsdb/query_executor.go(Î—0““8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrMeasurementNotFoundµ
*ErrMeasurementNotFound/namenamevar"tsdb/query_executor.go(á“0í“@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrMeasurementNotFound/nameç
*ErrNotExecutedErrNotExecutedvar"tsdb/query_executor.go(Ÿ–0Ñ—8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zü

text/plainêErrNotExecuted is returned when a statement is not executed in a query.
This can occur when a previous statement in the same query has errored.
ä./ErrNotExecutedÊ
*ErrShardNotFoundErrShardNotFoundvar"tsdb/store.go(˚0´8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ErrShardNotFoundÆ
%*#ExecuteStatement$query_executor1136ExecuteStatementfunc"tsdb/query_executor.go(0™	@R§{
        "PkgName": "tsdb",
        "Receiver": "interface{ExecuteStatement(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result}",
        "TypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./ExecuteStatement$query_executor1136È

*ExecutorExecutortype"tsdb/executor.go(ã0¡8R‰{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Executor",
        "UnderlyingTypeString": "interface{Execute() \u003c-chan *github.com/influxdb/influxdb/influxql.Row}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z=

text/plain/Executor is an interface for a query executor.
ä
./Executor‡
*Executor/ExecuteExecutefunc"tsdb/executor.go(°0ø8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Executor",
        "TypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Executor/Execute±
*FieldFieldtype"tsdb/shard.go(◊a0ıb8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "struct{ID uint8 \"json:\\\"id,omitempty\\\"\"; Name string \"json:\\\"name,omitempty\\\"\"; Type github.com/influxdb/influxdb/influxql.DataType \"json:\\\"type,omitempty\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z/

text/plain!Field represents a series field.
ä./Field⁄

*Field/IDIDfield"tsdb/shard.go(Áa0ìb8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Field",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./Field/ID‚
*
Field/NameNamefield"tsdb/shard.go(ïb0√b8Rû{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Field",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Field/Nameá
*
Field/TypeTypefield"tsdb/shard.go(≈b0Ûb8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Field",
        "TypeString": "github.com/influxdb/influxdb/influxql.DataType",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Field/TypeÃ
*
FieldCodec
FieldCodectype"tsdb/shard.go(ﬂf0≥g8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "struct{fieldsByID map[uint8]*github.com/influxdb/influxdb/tsdb.Field; fieldsByName map[string]*github.com/influxdb/influxdb/tsdb.Field}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zﬁ

text/plainœFieldCodec provides encoding and decoding functionality for the fields of a given
Measurement. It is a distinct type to avoid locking writes on this node while
potentially long-running queries are executing.

It is not affected by changes to the Measurement object after codec creation.
TODO: this shouldn't be exported. nothing outside the shard should know about field encodings.
      However, this is here until tx.go and the engine get refactored into tsdb.
ä./FieldCodecê
*FieldCodec/DecodeByID
DecodeByIDfunc"tsdb/shard.go(Ωã0‡ñ8R˙{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(targetID uint8, b []byte) (interface{}, error)",
        "UnderlyingTypeString": "func(targetID uint8, b []byte) (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z≤

text/plain£DecodeByID scans a byte slice for a field with the given ID, converts it to its
expected type, and return that value.
TODO: shouldn't be exported. refactor engine
ä./FieldCodec/DecodeByIDÍ
<*:FieldCodec/DecodeByID/$shard1/$shard0/$shard2/$shard3/sizesizevar"tsdb/shard.go(±î0ÿî@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint16",
        "UnderlyingTypeString": "uint16",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./FieldCodec/DecodeByID/$shard1/$shard0/$shard2/$shard3/sizeë
-*+FieldCodec/DecodeByID/$shard1/$shard0/fieldfieldvar"tsdb/shard.go(˛å0ùç@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./FieldCodec/DecodeByID/$shard1/$shard0/field¿
**(FieldCodec/DecodeByID/$shard1/$shard0/okokvar"tsdb/shard.go(˛å0ùç@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./FieldCodec/DecodeByID/$shard1/$shard0/ok◊
-*+FieldCodec/DecodeByID/$shard1/$shard0/valuevaluevar"tsdb/shard.go(ëë0¢ë@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./FieldCodec/DecodeByID/$shard1/$shard0/value°
*FieldCodec/DecodeByID/bbvar"tsdb/shard.go(Ìã0ıã@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByID/bÔ
*FieldCodec/DecodeByID/ffvar"tsdb/shard.go(√ã0–ã@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByID/f¥
 *FieldCodec/DecodeByID/targetIDtargetIDvar"tsdb/shard.go(›ã0Îã@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./FieldCodec/DecodeByID/targetIDÊ
*FieldCodec/DecodeByNameDecodeByNamefunc"tsdb/shard.go(‚ó0ùô8RÙ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(name string, b []byte) (interface{}, error)",
        "UnderlyingTypeString": "func(name string, b []byte) (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zà

text/plainzDecodeByName scans a byte slice for a field with the given name, converts it to its
expected type, and return that value.
ä./FieldCodec/DecodeByName•
*FieldCodec/DecodeByName/bbvar"tsdb/shard.go(ëò0ôò@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByName/bÛ
*FieldCodec/DecodeByName/ffvar"tsdb/shard.go(Ëó0ıó@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByName/fÏ
*FieldCodec/DecodeByName/fifivar"tsdb/shard.go(≥ò0Ãò@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByName/fiÆ
*FieldCodec/DecodeByName/namenamevar"tsdb/shard.go(Ñò0èò@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeByName/name™
*FieldCodec/DecodeFieldsDecodeFieldsfunc"tsdb/shard.go(ó}0œÜ8RÓ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(b []byte) (map[uint8]interface{}, error)",
        "UnderlyingTypeString": "func(b []byte) (map[uint8]interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZT

text/plainFDecodeFields decodes a byte slice into a set of field ids and values.
ä./FieldCodec/DecodeFieldsÓ
>*<FieldCodec/DecodeFields/$shard1/$shard0/$shard2/$shard3/sizesizevar"tsdb/shard.go(∂Ñ0›Ñ@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint16",
        "UnderlyingTypeString": "uint16",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./FieldCodec/DecodeFields/$shard1/$shard0/$shard2/$shard3/sizeì
/*-FieldCodec/DecodeFields/$shard1/$shard0/fieldfieldvar"tsdb/shard.go(€0˘@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./FieldCodec/DecodeFields/$shard1/$shard0/field—
1*/FieldCodec/DecodeFields/$shard1/$shard0/fieldIDfieldIDvar"tsdb/shard.go(…0ÿ@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./FieldCodec/DecodeFields/$shard1/$shard0/fieldID€
/*-FieldCodec/DecodeFields/$shard1/$shard0/valuevaluevar"tsdb/shard.go(¸Ä0çÅ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./FieldCodec/DecodeFields/$shard1/$shard0/value£
*FieldCodec/DecodeFields/bbvar"tsdb/shard.go(π}0¡}@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeFields/bÒ
*FieldCodec/DecodeFields/ffvar"tsdb/shard.go(ù}0™}@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/DecodeFields/f–
 *FieldCodec/DecodeFields/valuesvaluesvar"tsdb/shard.go(∏~0‡~@R‰{
        "PkgName": "tsdb",
        "TypeString": "map[uint8]interface{}",
        "UnderlyingTypeString": "map[uint8]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./FieldCodec/DecodeFields/valuesÄ
"* FieldCodec/DecodeFieldsWithNamesDecodeFieldsWithNamesfunc"tsdb/shard.go(‘á0èä8R{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(b []byte) (map[string]interface{}, error)",
        "UnderlyingTypeString": "func(b []byte) (map[string]interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zã

text/plain}DecodeFieldsWithNames decodes a byte slice into a set of field names and values
TODO: shouldn't be exported. refactor engine
ä"./FieldCodec/DecodeFieldsWithNamesß
8*6FieldCodec/DecodeFieldsWithNames/$shard1/$shard0/fieldfieldvar"tsdb/shard.go(µâ0Œâ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./FieldCodec/DecodeFieldsWithNames/$shard1/$shard0/field»
-*+FieldCodec/DecodeFieldsWithNames/$shard1/ididvar"tsdb/shard.go(‘á0èä@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./FieldCodec/DecodeFieldsWithNames/$shard1/id—
,**FieldCodec/DecodeFieldsWithNames/$shard1/vvvar"tsdb/shard.go(‘á0èä@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./FieldCodec/DecodeFieldsWithNames/$shard1/v∑
$*"FieldCodec/DecodeFieldsWithNames/bbvar"tsdb/shard.go(ˇá0áà@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./FieldCodec/DecodeFieldsWithNames/bœ
&*$FieldCodec/DecodeFieldsWithNames/errerrvar"tsdb/shard.go(¨à0Ãà@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./FieldCodec/DecodeFieldsWithNames/errÖ
$*"FieldCodec/DecodeFieldsWithNames/ffvar"tsdb/shard.go(⁄á0Áá@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./FieldCodec/DecodeFieldsWithNames/f‰
)*'FieldCodec/DecodeFieldsWithNames/fieldsfieldsvar"tsdb/shard.go(¨à0Ãà@R‰{
        "PkgName": "tsdb",
        "TypeString": "map[uint8]interface{}",
        "UnderlyingTypeString": "map[uint8]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./FieldCodec/DecodeFieldsWithNames/fields◊
$*"FieldCodec/DecodeFieldsWithNames/mmvar"tsdb/shard.go(Ùà0ïâ@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./FieldCodec/DecodeFieldsWithNames/mﬁ
*FieldCodec/EncodeFieldsEncodeFieldsfunc"tsdb/shard.go(Ôl0—z8R˙{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(values map[string]interface{}) ([]byte, error)",
        "UnderlyingTypeString": "func(values map[string]interface{}) ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z¸

text/plainÌEncodeFields converts a map of values with string keys to a byte slice of field
IDs and values.

If a field exists in the codec, but its type is different, an error is returned. If
a field is not present in the codec, the system panics.
ä./FieldCodec/EncodeFieldsÒ
?*=FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard0/valuevaluevar"tsdb/shard.go(”p0Áp@R»{
        "PkgName": "tsdb",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard0/valueÔ
?*=FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard1/valuevaluevar"tsdb/shard.go(‚q0Óq@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard1/valueÎ
?*=FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard2/valuevaluevar"tsdb/shard.go(≤t0√t@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard2/valueÔ
C*AFieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/$shard1/ccvar"tsdb/shard.go(Ôl0—z@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/$shard1/cÌ
C*AFieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/$shard1/iivar"tsdb/shard.go(Ôl0—z@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/$shard1/iÔ
?*=FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/valuevaluevar"tsdb/shard.go(«u0⁄u@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./FieldCodec/EncodeFields/$shard0/$shard0/$shard1/$shard3/value…
-*+FieldCodec/EncodeFields/$shard0/$shard0/bufbufvar"tsdb/shard.go(óp0°p@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./FieldCodec/EncodeFields/$shard0/$shard0/bufì
/*-FieldCodec/EncodeFields/$shard0/$shard0/fieldfieldvar"tsdb/shard.go(ìn0≠n@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./FieldCodec/EncodeFields/$shard0/$shard0/field≥
#*!FieldCodec/EncodeFields/$shard0/kkvar"tsdb/shard.go(Ôl0—z@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./FieldCodec/EncodeFields/$shard0/kΩ
#*!FieldCodec/EncodeFields/$shard0/vvvar"tsdb/shard.go(Ôl0—z@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./FieldCodec/EncodeFields/$shard0/v£
*FieldCodec/EncodeFields/bbvar"tsdb/shard.go(€m0Ûm@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/EncodeFields/bÒ
*FieldCodec/EncodeFields/ffvar"tsdb/shard.go(ıl0Çm@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/EncodeFields/f“
 *FieldCodec/EncodeFields/valuesvaluesvar"tsdb/shard.go(ëm0Æm@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./FieldCodec/EncodeFields/values°
*FieldCodec/FieldIDByNameFieldIDByNamefunc"tsdb/shard.go(±{0Ã|8RŒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(s string) (uint8, error)",
        "UnderlyingTypeString": "func(s string) (uint8, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zi

text/plain[TODO: this shouldn't be exported. remove when tx.go and engine.go get refactored into tsdb
ä./FieldCodec/FieldIDByNameÛ
*FieldCodec/FieldIDByName/ffvar"tsdb/shard.go(∑{0ƒ{@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/FieldIDByName/fÏ
*FieldCodec/FieldIDByName/fifivar"tsdb/shard.go({0á|@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/FieldIDByName/fi•
*FieldCodec/FieldIDByName/ssvar"tsdb/shard.go(‘{0‹{@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/FieldIDByName/s≠
*FieldCodec/fieldByNamefieldByNamefunc"tsdb/shard.go(Ôô0ƒöRÓ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*FieldCodec",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z[

text/plainMFieldByName returns the field by its name. It will return a nil if not found
ä./FieldCodec/fieldByNameÒ
*FieldCodec/fieldByName/ffvar"tsdb/shard.go(ıô0Çö@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/fieldByName/f¨
*FieldCodec/fieldByName/namenamevar"tsdb/shard.go(êö0õö@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/fieldByName/nameø
*FieldCodec/fieldsByID
fieldsByIDfield"tsdb/shard.go(Ùf0ëgR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "FieldCodec",
        "TypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/fieldsByID«
*FieldCodec/fieldsByNamefieldsByNamefield"tsdb/shard.go(ìg0±gR„{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "FieldCodec",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCodec/fieldsByNameÑ
*FieldCreateFieldCreatetype"tsdb/shard.go(ƒ0Ç8RÊ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.FieldCreate",
        "UnderlyingTypeString": "struct{Measurement string; Field *github.com/influxdb/influxdb/tsdb.Field}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZP

text/plainBstruct to hold information for a field to create on a measurement
ä./FieldCreateª
*FieldCreate/FieldFieldfield"tsdb/shard.go(Ó0Ä8RË{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "FieldCreate",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCreate/Fieldâ
*FieldCreate/MeasurementMeasurementfield"tsdb/shard.go(⁄0Ï8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "FieldCreate",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldCreate/MeasurementÌ
*FieldsFieldstype"tsdb/points.go(Øÿ0Ãÿ8R≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./FieldsÈ
*Fields/MarshalBinaryMarshalBinaryfunc"tsdb/points.go(»Ë0Ö˜8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Fields",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z⁄

text/plainÀMarshalBinary encodes all the fields to their proper type and returns the binary
represenation
NOTE: uint64 is specifically not supported due to potential overflow when we decode
again later to an int64
ä./Fields/MarshalBinary≤
!*Fields/MarshalBinary/$points0/kkvar"tsdb/points.go(»Ë0Ö˜@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Fields/MarshalBinary/$points0/k
?*=Fields/MarshalBinary/$points1/$points0/$points0/$points10/valvalvar"tsdb/points.go(…Ú0˚Ú@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./Fields/MarshalBinary/$points1/$points0/$points0/$points10/valÓ
>*<Fields/MarshalBinary/$points1/$points0/$points0/$points9/valvalvar"tsdb/points.go(·Ò0úÚ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./Fields/MarshalBinary/$points1/$points0/$points0/$points9/valŒ
**(Fields/MarshalBinary/$points1/$points0/vvvar"tsdb/points.go(äÍ0ìÍ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Fields/MarshalBinary/$points1/$points0/v≤
!*Fields/MarshalBinary/$points1/kkvar"tsdb/points.go(»Ë0Ö˜@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Fields/MarshalBinary/$points1/k†
*Fields/MarshalBinary/bbvar"tsdb/points.go(ÚË0ˇË@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Fields/MarshalBinary/bö
*Fields/MarshalBinary/iivar"tsdb/points.go(°È0ßÈ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Fields/MarshalBinary/i≠
*Fields/MarshalBinary/keyskeysvar"tsdb/points.go(ÅÈ0üÈ@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Fields/MarshalBinary/keys“
*Fields/MarshalBinary/ppvar"tsdb/points.go(ŒË0÷Ë@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Fields/MarshalBinary/p·
*IgnoredChunkSizeIgnoredChunkSizeconst"tsdb/executor.go(º0–8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zz

text/plainlIgnoredChunkSize is what gets passed into Mapper.Begin for aggregate queries as they don't chunk points out
ä./IgnoredChunkSizeº
*IsRetryableIsRetryablefunc"tsdb/store.go(∑<0ÿ=8Ró{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(err error) bool",
        "UnderlyingTypeString": "func(err error) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZW

text/plainIIsRetryable returns true if this error is temporary and could be retried
ä./IsRetryable£
*IsRetryable/errerrvar"tsdb/store.go(»<0—<@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./IsRetryable/errº
	*MakeKeyMakeKeyfunc"tsdb/points.go(“¿0Ã¬8R˘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name []byte, tags github.com/influxdb/influxdb/tsdb.Tags) []byte",
        "UnderlyingTypeString": "func(name []byte, tags github.com/influxdb/influxdb/tsdb.Tags) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä	./MakeKeyè
*MakeKey/namenamevar"tsdb/points.go(ﬂ¿0Í¿@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MakeKey/name∫
*MakeKey/tagstagsvar"tsdb/points.go(Ï¿0ı¿@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MakeKey/tags∆
*MapperMappertype"tsdb/executor.go(Ñ0ì8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZG

text/plain9Mapper is the interface all Mapper types must implement.
ä./MapperÊ
*Mapper/CloseClosefunc"tsdb/executor.go(ä0ë8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/Close˚
*Mapper/FieldsFieldsfunc"tsdb/executor.go(’0Ê8R≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/Fieldsú
*Mapper/NextChunk	NextChunkfunc"tsdb/executor.go(Ë0à8R≈{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/NextChunkÔ
*Mapper/OpenOpenfunc"tsdb/executor.go(ò0§8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/Open“
*Mapper/SetRemote	SetRemotefunc"tsdb/executor.go(¶0ø8R˚{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func(m github.com/influxdb/influxdb/tsdb.Mapper) error",
        "UnderlyingTypeString": "func(m github.com/influxdb/influxdb/tsdb.Mapper) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/SetRemote⁄
*Mapper/SetRemote/mmvar"tsdb/executor.go(∞0∏@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/SetRemote/m˛
*Mapper/TagSetsTagSetsfunc"tsdb/executor.go(¡0”8R≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Mapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Mapper/TagSets¯
*MapperOutputMapperOutputtype"tsdb/mapper.go(€0Ñ8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name,omitempty\\\"\"; Tags map[string]string \"json:\\\"tags,omitempty\\\"\"; Fields []string \"json:\\\"fields,omitempty\\\"\"; Values []*github.com/influxdb/influxdb/tsdb.MapperValue \"json:\\\"values,omitempty\\\"\"; cursorKey string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutputÇ
*MapperOutput/FieldsFieldsfield"tsdb/mapper.go(‹0ë	8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperOutput",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/Fields¯
*MapperOutput/NameNamefield"tsdb/mapper.go(Ú0•8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperOutput",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/Nameé
*MapperOutput/TagsTagsfield"tsdb/mapper.go(ß0⁄8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperOutput",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/Tags“
*MapperOutput/ValuesValuesfield"tsdb/mapper.go(¥	0È	8R˘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperOutput",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/ValuesÎ
*MapperOutput/cursorKey	cursorKeyfield"tsdb/mapper.go(ú
0¨
Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperOutput",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/cursorKey„
*MapperOutput/keykeyfunc"tsdb/mapper.go(Ü0√Rñ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*MapperOutput",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/keyÎ
*MapperOutput/key/momovar"tsdb/mapper.go(å0ú@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperOutput/key/moÆ
*MapperValueMapperValuetype"tsdb/mapper.go(ƒ0‰8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "struct{Time int64 \"json:\\\"time,omitempty\\\"\"; Value interface{} \"json:\\\"value,omitempty\\\"\"; Tags map[string]string \"json:\\\"tags,omitempty\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z§

text/plainïMapperValue is a complex type, which can encapsulate data from both raw and aggregate
mappers. This currently allows marshalling and network system to remain simpler. For
aggregate output Time is ignored, and actual Time-Value pairs are contained soley
within the Value field.
ä./MapperValueã
*MapperValue/TagsTagsfield"tsdb/mapper.go(ô0»8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperValue",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValue/TagsÛ
*MapperValue/TimeTimefield"tsdb/mapper.go(⁄0â8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperValue",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValue/TimeÇ
*MapperValue/ValueValuefield"tsdb/mapper.go(≠0›8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MapperValue",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValue/Valueù
*MapperValuesMapperValuestype"tsdb/mapper.go(Î0Ü8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperValues",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues¯
*MapperValues/LenLenfunc"tsdb/mapper.go(à0√8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "MapperValues",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/LenË
*MapperValues/Len/aavar"tsdb/mapper.go(é0ú@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperValues",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Len/aï
*MapperValues/LessLessfunc"tsdb/mapper.go(ƒ0é8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "MapperValues",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/LessÍ
*MapperValues/Less/aavar"tsdb/mapper.go( 0ÿ@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperValues",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Less/aí
*MapperValues/Less/iivar"tsdb/mapper.go(ﬂ0Á@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Less/ií
*MapperValues/Less/jjvar"tsdb/mapper.go(ﬂ0Á@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Less/jã
*MapperValues/SwapSwapfunc"tsdb/mapper.go(è0‘8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "MapperValues",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/SwapÍ
*MapperValues/Swap/aavar"tsdb/mapper.go(ï0£@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MapperValues",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Swap/aí
*MapperValues/Swap/iivar"tsdb/mapper.go(™0≤@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Swap/ií
*MapperValues/Swap/jjvar"tsdb/mapper.go(™0≤@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MapperValues/Swap/jœ
*MarshalTagsMarshalTagsfunc"tsdb/meta.go(Òˇ0ÒÑ8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(tags map[string]string) []byte",
        "UnderlyingTypeString": "func(tags map[string]string) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZK

text/plain=used to convert the tag set to bytes for use as a lookup key
ä./MarshalTagsö
*MarshalTags/$meta1/kkvar"tsdb/meta.go(Òˇ0ÒÑ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta1/kö
*MarshalTags/$meta1/vvvar"tsdb/meta.go(Òˇ0ÒÑ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta1/vö
*MarshalTags/$meta2/kkvar"tsdb/meta.go(Òˇ0ÒÑ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta2/k®
*MarshalTags/$meta3/$meta0/vvvar"tsdb/meta.go(ˇÉ0ãÑ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta3/$meta0/vî
*MarshalTags/$meta3/iivar"tsdb/meta.go(Òˇ0ÒÑ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta3/iö
*MarshalTags/$meta3/kkvar"tsdb/meta.go(Òˇ0ÒÑ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/$meta3/kå
*MarshalTags/bbvar"tsdb/meta.go(ÏÇ0ÅÉ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/bí
*MarshalTags/bufbufvar"tsdb/meta.go(ÉÉ0ãÉ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/bufô
*MarshalTags/keyskeysvar"tsdb/meta.go(≈Å0ÈÅ@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/keysâ
*MarshalTags/szszvar"tsdb/meta.go(úÅ0µÅ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/sz´
*MarshalTags/tagstagsvar"tsdb/meta.go(ÇÄ0òÄ@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MarshalTags/tags®
*MaxGroupByPointsMaxGroupByPointsconst"tsdb/executor.go(•0æ8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z¿

text/plain±Return an error if the user is trying to select more than this number of points in a group by statement.
Most likely they specified a group by interval without time boundaries.
ä./MaxGroupByPointsé
*MeasurementMeasurementtype"tsdb/meta.go(ƒ=0∫A8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; Name string \"json:\\\"name,omitempty\\\"\"; fieldNames map[string]struct{}; index *github.com/influxdb/influxdb/tsdb.DatabaseIndex; seriesByID map[uint64]*github.com/influxdb/influxdb/tsdb.Series; measurement *github.com/influxdb/influxdb/tsdb.Measurement; seriesByTagKeyValue map[string]map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs; seriesIDs github.com/influxdb/influxdb/tsdb.SeriesIDs}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z˝

text/plainÓMeasurement represents a collection of time series in a database. It also contains in memory
structures for indexing tags. Exported functions are goroutine safe while un-exported functions
assume the caller will use the appropriate locks
ä./Measurementƒ
*Measurement/AddSeries	AddSeriesfunc"tsdb/meta.go(∏P0¢X8RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(s *github.com/influxdb/influxdb/tsdb.Series) bool",
        "UnderlyingTypeString": "func(s *github.com/influxdb/influxdb/tsdb.Series) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zd

text/plainVAddSeries will add a series to the measurementIndex. Returns false if already present
ä./Measurement/AddSeries´
!*Measurement/AddSeries/$meta0/okokvar"tsdb/meta.go(ëQ0¨Q@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/AddSeries/$meta0/okÁ
)*'Measurement/AddSeries/$meta2/$meta0/idsidsvar"tsdb/meta.go(ÚU0ÑV@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./Measurement/AddSeries/$meta2/$meta0/idsØ
.*,Measurement/AddSeries/$meta2/$meta0/valueMapvalueMapvar"tsdb/meta.go(‡T0ÑU@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../Measurement/AddSeries/$meta2/$meta0/valueMap¨
 *Measurement/AddSeries/$meta2/kkvar"tsdb/meta.go(∏P0¢X@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Measurement/AddSeries/$meta2/k¨
 *Measurement/AddSeries/$meta2/vvvar"tsdb/meta.go(∏P0¢X@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Measurement/AddSeries/$meta2/vÓ
*Measurement/AddSeries/mmvar"tsdb/meta.go(æP0ÃP@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/AddSeries/m‰
*Measurement/AddSeries/ssvar"tsdb/meta.go(ÿP0·P@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/AddSeries/sÍ
*Measurement/DropSeries
DropSeriesfunc"tsdb/meta.go(‚X0û`8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(seriesID uint64)",
        "UnderlyingTypeString": "func(seriesID uint64)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;DropSeries will remove a series from the measurementIndex.
ä./Measurement/DropSeries≠
"* Measurement/DropSeries/$meta0/okokvar"tsdb/meta.go(ΩY0‹Y@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/DropSeries/$meta0/ok±
"* Measurement/DropSeries/$meta1/ididvar"tsdb/meta.go(‚X0û`@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/DropSeries/$meta1/idÈ
>*<Measurement/DropSeries/$meta2/$meta0/$meta0/$meta0/$meta0/ididvar"tsdb/meta.go(‚X0û`@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./Measurement/DropSeries/$meta2/$meta0/$meta0/$meta0/$meta0/id‚
8*6Measurement/DropSeries/$meta2/$meta0/$meta0/$meta0/idsidsvar"tsdb/meta.go(Ù\0Ä]@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./Measurement/DropSeries/$meta2/$meta0/$meta0/$meta0/idsÕ
0*.Measurement/DropSeries/$meta2/$meta0/$meta0/kkkkvar"tsdb/meta.go(‚X0û`@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./Measurement/DropSeries/$meta2/$meta0/$meta0/kkÙ
0*.Measurement/DropSeries/$meta2/$meta0/$meta0/vvvvvar"tsdb/meta.go(‚X0û`@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./Measurement/DropSeries/$meta2/$meta0/$meta0/vv´
-*+Measurement/DropSeries/$meta2/$meta0/valuesvaluesvar"tsdb/meta.go(¬\0Õ\@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Measurement/DropSeries/$meta2/$meta0/valuesÆ
!*Measurement/DropSeries/$meta2/kkvar"tsdb/meta.go(‚X0û`@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/DropSeries/$meta2/ké
!*Measurement/DropSeries/$meta2/vvvar"tsdb/meta.go(‚X0û`@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/DropSeries/$meta2/v™
*Measurement/DropSeries/idsidsvar"tsdb/meta.go(ñZ0¢Z@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/DropSeries/ids
*Measurement/DropSeries/mmvar"tsdb/meta.go(ËX0ˆX@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/DropSeries/mµ
!*Measurement/DropSeries/seriesIDseriesIDvar"tsdb/meta.go(ÉY0íY@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/DropSeries/seriesIDË
*Measurement/FieldNames
FieldNamesfunc"tsdb/meta.go(’ä0Ìã8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func() (a []string)",
        "UnderlyingTypeString": "func() (a []string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;FieldNames returns a list of the measurement's field names
ä./Measurement/FieldNames∞
!*Measurement/FieldNames/$meta0/nnvar"tsdb/meta.go(’ä0Ìã@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/FieldNames/$meta0/n¶
*Measurement/FieldNames/aavar"tsdb/meta.go(˘ä0Éã@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/FieldNames/aÚ
*Measurement/FieldNames/mmvar"tsdb/meta.go(€ä0Èä@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/FieldNames/mÚ
*Measurement/HasFieldHasFieldfunc"tsdb/meta.go(êE0úF8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(name string) bool",
        "UnderlyingTypeString": "func(name string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZU

text/plainGHasField returns true if the measurement has a field by the given name
ä./Measurement/HasField≠
*Measurement/HasField/hasFieldhasFieldvar"tsdb/meta.go(ËE0âF@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasField/hasFieldÏ
*Measurement/HasField/mmvar"tsdb/meta.go(ñE0§E@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasField/m•
*Measurement/HasField/namenamevar"tsdb/meta.go(ØE0∫E@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasField/name‰
*Measurement/HasSeries	HasSeriesfunc"tsdb/meta.go(ÒN0›O8R´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLHasSeries returns true if there is at least 1 series under this measurement
ä./Measurement/HasSeriesÓ
*Measurement/HasSeries/mmvar"tsdb/meta.go(˜N0ÖO@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasSeries/mò
*Measurement/HasTagKey	HasTagKeyfunc"tsdb/meta.go(îM0†N8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(k string) bool",
        "UnderlyingTypeString": "func(k string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z~

text/plainpHasTagKey returns true if at least one series in this measurement has written a value for the passed in tag key
ä./Measurement/HasTagKey©
*Measurement/HasTagKey/hasTaghasTagvar"tsdb/meta.go(ÍM0èN@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasTagKey/hasTagû
*Measurement/HasTagKey/kkvar"tsdb/meta.go(¥M0ºM@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasTagKey/kÓ
*Measurement/HasTagKey/mmvar"tsdb/meta.go(öM0®M@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/HasTagKey/mÛ
*Measurement/NameNamefield"tsdb/meta.go(Û=0ú>8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/Name¢
*Measurement/SeriesByID
SeriesByIDfunc"tsdb/meta.go(ÃF0¿G8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(id uint64) *github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "func(id uint64) *github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z9

text/plain+SeriesByID returns a series by identifier.
ä./Measurement/SeriesByID£
*Measurement/SeriesByID/ididvar"tsdb/meta.go(ÌF0ˆF@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SeriesByID/id
*Measurement/SeriesByID/mmvar"tsdb/meta.go(“F0‡F@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SeriesByID/m„
*Measurement/SeriesKeys
SeriesKeysfunc"tsdb/meta.go(ÖH0∫I8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZN

text/plain@SeriesKeys returns the keys of every series in this measurement
ä./Measurement/SeriesKeysÙ
!*Measurement/SeriesKeys/$meta0/ssvar"tsdb/meta.go(ÖH0∫I@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/SeriesKeys/$meta0/s≠
*Measurement/SeriesKeys/keyskeysvar"tsdb/meta.go(‹H0ÈH@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SeriesKeys/keys
*Measurement/SeriesKeys/mmvar"tsdb/meta.go(ãH0ôH@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SeriesKeys/m‰
*Measurement/SetFieldNameSetFieldNamefunc"tsdb/meta.go(•â0ïä8R∑{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(name string)",
        "UnderlyingTypeString": "func(name string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZC

text/plain5SetFieldName adds the field name to the measurement.
ä./Measurement/SetFieldNameˆ
*Measurement/SetFieldName/mmvar"tsdb/meta.go(´â0πâ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SetFieldName/mØ
*Measurement/SetFieldName/namenamevar"tsdb/meta.go(»â0”â@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/SetFieldName/name”
*Measurement/TagKeysTagKeysfunc"tsdb/meta.go(ˇÜ0Îà8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZE

text/plain7TagKeys returns a list of the measurement's tag names.
ä./Measurement/TagKeys™
*Measurement/TagKeys/$meta0/kkvar"tsdb/meta.go(ˇÜ0Îà@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagKeys/$meta0/k©
*Measurement/TagKeys/keyskeysvar"tsdb/meta.go(œá0Ñà@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagKeys/keysÏ
*Measurement/TagKeys/mmvar"tsdb/meta.go(Öá0ìá@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagKeys/mÙ	
*Measurement/TagSetsTagSetsfunc"tsdb/meta.go(÷l0ä|8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, dimensions []string) ([]*github.com/influxdb/influxdb/influxql.TagSet, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, dimensions []string) ([]*github.com/influxdb/influxdb/influxql.TagSet, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÁ

text/plainÿtagSets returns the unique tag sets that exist for the given tag keys. This is used to determine
what composite series will be created by a group by. i.e. "group by region" should return:
{"region":"uswest"}, {"region":"useast"}
or region, service returns
{"region": "uswest", "service": "redis"}, {"region": "uswest", "service": "mysql"}, etc...
This will also populate the TagSet objects with the series IDs that match each tagset and any
influx filter expression that goes with the series
TODO: this shouldn't be exported. However, until tx.go and the engine get refactored into tsdb, we need it.
ä./Measurement/TagSets 
.*,Measurement/TagSets/$meta1/$meta0/$meta0/dimdimvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../Measurement/TagSets/$meta1/$meta0/$meta0/dim‡
:*8Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/$meta0/kkvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/$meta0/k‡
:*8Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/$meta0/vvvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/$meta0/vÉ
<*:Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/tagsForSet
tagsForSetvar"tsdb/meta.go(”u0¯u@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./Measurement/TagSets/$meta1/$meta0/$meta1/$meta0/tagsForSetµ
&*$Measurement/TagSets/$meta1/$meta0/okokvar"tsdb/meta.go(–t0t@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/TagSets/$meta1/$meta0/ok¸
%*#Measurement/TagSets/$meta1/$meta0/ssvar"tsdb/meta.go(ìr0®r@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Measurement/TagSets/$meta1/$meta0/sì
**(Measurement/TagSets/$meta1/$meta0/tagSettagSetvar"tsdb/meta.go(–t0t@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Measurement/TagSets/$meta1/$meta0/tagSet’
(*&Measurement/TagSets/$meta1/$meta0/tagstagsvar"tsdb/meta.go(´r0 r@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Measurement/TagSets/$meta1/$meta0/tagsŒ
-*+Measurement/TagSets/$meta1/$meta0/tagsAsKey	tagsAsKeyvar"tsdb/meta.go(ßt0Õt@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Measurement/TagSets/$meta1/$meta0/tagsAsKeyí
#*!Measurement/TagSets/$meta1/filterfiltervar"tsdb/meta.go(÷l0ä|@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Measurement/TagSets/$meta1/filter´
*Measurement/TagSets/$meta1/ididvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/$meta1/id®
*Measurement/TagSets/$meta2/kkvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/$meta2/k®
*Measurement/TagSets/$meta3/kkvar"tsdb/meta.go(÷l0ä|@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/$meta3/kπ
 *Measurement/TagSets/dimensions
dimensionsvar"tsdb/meta.go(îm0ßm@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Measurement/TagSets/dimensions≤
*Measurement/TagSets/errerrvar"tsdb/meta.go(Òn0êo@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/errä
*Measurement/TagSets/filtersfiltersvar"tsdb/meta.go(Òn0êo@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/filtersÍ
*Measurement/TagSets/mmvar"tsdb/meta.go(‹l0Íl@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/mÀ
&*$Measurement/TagSets/sortedTagSetKeyssortedTagSetKeysvar"tsdb/meta.go(°y0‘y@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/TagSets/sortedTagSetKeysì
$*"Measurement/TagSets/sortedTagsSetssortedTagsSetsvar"tsdb/meta.go(»z0å{@Rò{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./Measurement/TagSets/sortedTagsSetsÉ
*Measurement/TagSets/stmtstmtvar"tsdb/meta.go(Ùl0ím@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/stmtê
*Measurement/TagSets/tagSetstagSetsvar"tsdb/meta.go(¡q0Ìq@R™{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/TagSets/tagSets‹
*Measurement/ValidateGroupByValidateGroupByfunc"tsdb/meta.go(˘I0üL8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZH

text/plain:ValidateGroupBy ensures that the GROUP BY is not a field.
ä./Measurement/ValidateGroupByå
&*$Measurement/ValidateGroupBy/$meta0/ddvar"tsdb/meta.go(˘I0üL@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Dimension",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Dimension",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/ValidateGroupBy/$meta0/d˙
*Measurement/ValidateGroupBy/mmvar"tsdb/meta.go(ˇI0çJ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/ValidateGroupBy/mì
"* Measurement/ValidateGroupBy/stmtstmtvar"tsdb/meta.go(üJ0ΩJ@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/ValidateGroupBy/stmtá
*Measurement/expandExpr
expandExprfunc"tsdb/meta.go(µ±0˚µR√{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) []github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) []github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zb

text/plainTexpandExpr returns a list of expressions expanded by all possible tag combinations.
ä./Measurement/expandExpr∂
#*!Measurement/expandExpr/$meta0/keykeyvar"tsdb/meta.go(µ±0˚µ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Measurement/expandExpr/$meta0/key™
!*Measurement/expandExpr/$meta1/iivar"tsdb/meta.go(µ±0˚µ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/expandExpr/$meta1/i∂
#*!Measurement/expandExpr/$meta1/keykeyvar"tsdb/meta.go(µ±0˚µ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Measurement/expandExpr/$meta1/keyÜ
*Measurement/expandExpr/exprexprvar"tsdb/meta.go(÷±0Ë±@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/expandExpr/exprØ
*Measurement/expandExpr/keyskeysvar"tsdb/meta.go(Û≤0°≥@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/expandExpr/keysÚ
*Measurement/expandExpr/mmvar"tsdb/meta.go(ª±0…±@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/expandExpr/mº
 *Measurement/expandExpr/uniquesuniquesvar"tsdb/meta.go(ì¥0π¥@RŒ{
        "PkgName": "tsdb",
        "TypeString": "[][]string",
        "UnderlyingTypeString": "[][]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Measurement/expandExpr/uniques„
'*%Measurement/expandExpr/valuesByTagKeyvaluesByTagKeyvar"tsdb/meta.go(´≤0‘≤@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string][]string",
        "UnderlyingTypeString": "map[string][]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./Measurement/expandExpr/valuesByTagKeyÉ
*Measurement/fieldNames
fieldNamesfield"tsdb/meta.go(û>0º>R§{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/fieldNamesê
*Measurement/filtersfiltersfunc"tsdb/meta.go(‘a0‰gR˚{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (map[uint64]github.com/influxdb/influxdb/influxql.Expr, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (map[uint64]github.com/influxdb/influxdb/influxql.Expr, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZΩ

text/plainÆfilters walks the where clause of a select statement and returns a map with all series ids
matching the where clause and any filter expression that should be applied to each
ä./Measurement/filters«
-*+Measurement/filters/$meta0/$meta0/$meta0/ididvar"tsdb/meta.go(‘a0‰g@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Measurement/filters/$meta0/$meta0/$meta0/idæ
3*1Measurement/filters/$meta0/$meta0/seriesIdsToExprseriesIdsToExprvar"tsdb/meta.go(Òb0¢c@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./Measurement/filters/$meta0/$meta0/seriesIdsToExpr∞
3*1Measurement/filters/$meta2/$meta0/$meta0/$meta1/bbvar"tsdb/meta.go(Íf0íg@R§{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./Measurement/filters/$meta2/$meta0/$meta0/$meta1/b—
4*2Measurement/filters/$meta2/$meta0/$meta0/$meta1/okokvar"tsdb/meta.go(Íf0íg@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./Measurement/filters/$meta2/$meta0/$meta0/$meta1/ok®
/*-Measurement/filters/$meta2/$meta0/$meta0/exprexprvar"tsdb/meta.go(öf0πf@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./Measurement/filters/$meta2/$meta0/$meta0/expr√
-*+Measurement/filters/$meta2/$meta0/$meta0/okokvar"tsdb/meta.go(öf0πf@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Measurement/filters/$meta2/$meta0/$meta0/ok´
*Measurement/filters/$meta2/ididvar"tsdb/meta.go(‘a0‰g@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/filters/$meta2/id≤
*Measurement/filters/errerrvar"tsdb/meta.go(äd0Œd@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/filters/err«
*Measurement/filters/idsidsvar"tsdb/meta.go(äd0Œd@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/filters/idsÍ
*Measurement/filters/mmvar"tsdb/meta.go(⁄a0Ëa@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/filters/m¢
%*#Measurement/filters/seriesIdsToExprseriesIdsToExprvar"tsdb/meta.go(äd0Œd@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Measurement/filters/seriesIdsToExprÉ
*Measurement/filters/stmtstmtvar"tsdb/meta.go(Úa0êb@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/filters/stmt£
*Measurement/idsForExpr
idsForExprfunc"tsdb/meta.go(üï0ã£RØ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(n *github.com/influxdb/influxdb/influxql.BinaryExpr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, github.com/influxdb/influxdb/influxql.Expr, error)",
        "UnderlyingTypeString": "func(n *github.com/influxdb/influxdb/influxql.BinaryExpr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, github.com/influxdb/influxdb/influxql.Expr, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zë

text/plainÇidsForExpr will return a collection of series ids and a filter expression that should
be used to filter points from those series.
ä./Measurement/idsForExprØ
"* Measurement/idsForExpr/$meta1/okokvar"tsdb/meta.go(ïò0ªò@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/idsForExpr/$meta1/okÎ
**(Measurement/idsForExpr/$meta4/$meta0/idsidsvar"tsdb/meta.go(ïú0¢ú@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Measurement/idsForExpr/$meta4/$meta0/idsØ
"* Measurement/idsForExpr/$meta4/okokvar"tsdb/meta.go(ﬁõ0àú@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/idsForExpr/$meta4/okí
#*!Measurement/idsForExpr/$meta4/strstrvar"tsdb/meta.go(ﬁõ0àú@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Measurement/idsForExpr/$meta4/str‚
:*8Measurement/idsForExpr/$meta5/$meta0/$meta1/$meta0/matchmatchvar"tsdb/meta.go(Û†0ë°@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Measurement/idsForExpr/$meta5/$meta0/$meta1/$meta0/matchÃ
/*-Measurement/idsForExpr/$meta5/$meta0/$meta1/kkvar"tsdb/meta.go(üï0ã£@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./Measurement/idsForExpr/$meta5/$meta0/$meta1/kÎ
**(Measurement/idsForExpr/$meta5/$meta0/idsidsvar"tsdb/meta.go(üü0¨ü@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Measurement/idsForExpr/$meta5/$meta0/idsØ
"* Measurement/idsForExpr/$meta5/okokvar"tsdb/meta.go(Íû0íü@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/idsForExpr/$meta5/okç
"* Measurement/idsForExpr/$meta5/rerevar"tsdb/meta.go(Íû0íü@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.RegexLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.RegexLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/idsForExpr/$meta5/reÚ
*Measurement/idsForExpr/mmvar"tsdb/meta.go(•ï0≥ï@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/idsForExpr/m¯
*Measurement/idsForExpr/nnvar"tsdb/meta.go(¿ï0÷ï@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.BinaryExpr",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.BinaryExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/idsForExpr/n˘
*Measurement/idsForExpr/namenamevar"tsdb/meta.go(˝ï0°ñ@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/idsForExpr/name°
*Measurement/idsForExpr/okokvar"tsdb/meta.go(˝ï0°ñ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/idsForExpr/okî
 *Measurement/idsForExpr/tagValstagValsvar"tsdb/meta.go(Ãö0˙ö@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Measurement/idsForExpr/tagValsâ
*Measurement/idsForExpr/valuevaluevar"tsdb/meta.go(£ñ0±ñ@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/idsForExpr/valueÆ
*Measurement/indexindexfield"tsdb/meta.go(æ>0◊>Rﬁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/indexº
*Measurement/measurementmeasurementfield"tsdb/meta.go(ƒ?0‰?R⁄{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/measurementÆ
*Measurement/mumufield"tsdb/meta.go(⁄=0Ò=RÁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/muÏ
*Measurement/seriesByID
seriesByIDfield"tsdb/meta.go(ı>0õ?RÊ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "map[uint64]*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "map[uint64]*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z%

text/plainin-memory index fields
ä./Measurement/seriesByID˙
!*Measurement/seriesByTagKeyValueseriesByTagKeyValuefield"tsdb/meta.go(Ê?0ô@RÄ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "map[string]map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "map[string]map[string]github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/seriesByTagKeyValueç
*Measurement/seriesIDs	seriesIDsfield"tsdb/meta.go(‘@0Ò@R±{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Measurement",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/seriesIDsÌ
"* Measurement/seriesIDsAllOrByExprseriesIDsAllOrByExprfunc"tsdb/meta.go(Ù¿0πƒRœ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, error)",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zù

text/plainéseriesIDsAllOrByExpr walks an expressions for matching series IDs
or, if no expressions is given, returns all series IDs for the measurement.
ä"./Measurement/seriesIDsAllOrByExprŒ
&*$Measurement/seriesIDsAllOrByExpr/errerrvar"tsdb/meta.go(”√0ˇ√@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/seriesIDsAllOrByExpr/errö
'*%Measurement/seriesIDsAllOrByExpr/exprexprvar"tsdb/meta.go(ü¡0±¡@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./Measurement/seriesIDsAllOrByExpr/expr„
&*$Measurement/seriesIDsAllOrByExpr/idsidsvar"tsdb/meta.go(”√0ˇ√@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/seriesIDsAllOrByExpr/idsÜ
$*"Measurement/seriesIDsAllOrByExpr/mmvar"tsdb/meta.go(˙¿0à¡@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./Measurement/seriesIDsAllOrByExpr/mÑ
'*%Measurement/tagValuesByKeyAndSeriesIDtagValuesByKeyAndSeriesIDfunc"tsdb/meta.go(Ôã0∑íR˜{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(tagKeys []string, ids github.com/influxdb/influxdb/tsdb.SeriesIDs) map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "func(tagKeys []string, ids github.com/influxdb/influxdb/tsdb.SeriesIDs) map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./Measurement/tagValuesByKeyAndSeriesIDÍ
>*<Measurement/tagValuesByKeyAndSeriesID/$meta0/$meta0/$meta0/kkvar"tsdb/meta.go(Ôã0∑í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./Measurement/tagValuesByKeyAndSeriesID/$meta0/$meta0/$meta0/kÖ
M*KMeasurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/$meta0/$meta0/okokvar"tsdb/meta.go(¸ê0òë@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äM./Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/$meta0/$meta0/okï
Q*OMeasurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/$meta0/$meta0/tagValtagValvar"tsdb/meta.go(¸ê0òë@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äQ./Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/$meta0/$meta0/tagVal˘
C*AMeasurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/tagKeytagKeyvar"tsdb/meta.go(Ôã0∑í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/$meta1/tagKey€
8*6Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/okokvar"tsdb/meta.go(∂è0œè@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/ok¢
7*5Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/ssvar"tsdb/meta.go(∂è0œè@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./Measurement/tagValuesByKeyAndSeriesID/$meta1/$meta0/s—
1*/Measurement/tagValuesByKeyAndSeriesID/$meta1/ididvar"tsdb/meta.go(Ôã0∑í@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./Measurement/tagValuesByKeyAndSeriesID/$meta1/idÌ
+*)Measurement/tagValuesByKeyAndSeriesID/idsidsvar"tsdb/meta.go(±å0æå@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./Measurement/tagValuesByKeyAndSeriesID/idsê
)*'Measurement/tagValuesByKeyAndSeriesID/mmvar"tsdb/meta.go(ıã0Éå@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./Measurement/tagValuesByKeyAndSeriesID/m÷
/*-Measurement/tagValuesByKeyAndSeriesID/tagKeystagKeysvar"tsdb/meta.go(üå0Øå@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./Measurement/tagValuesByKeyAndSeriesID/tagKeys∏
1*/Measurement/tagValuesByKeyAndSeriesID/tagValues	tagValuesvar"tsdb/meta.go(¿é0Íé@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./Measurement/tagValuesByKeyAndSeriesID/tagValues◊
*Measurement/uniqueTagValuesuniqueTagValuesfunc"tsdb/meta.go(æÀ0»‘Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) map[string][]string",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) map[string][]string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZY

text/plainKuniqueTagValues returns a list of unique tag values used in an expression.
ä./Measurement/uniqueTagValuesˇ
J*HMeasurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/okokvar"tsdb/meta.go(’œ0ˇœ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/ok‚
K*IMeasurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/rhsrhsvar"tsdb/meta.go(’œ0ˇœ@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.StringLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äK./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta0/$meta0/rhsˇ
J*HMeasurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/okokvar"tsdb/meta.go(◊–0˙–@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/ok‘
K*IMeasurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/rhsrhsvar"tsdb/meta.go(◊–0˙–@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.VarRef",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äK./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/$meta1/$meta1/$meta0/rhså
6*4Measurement/uniqueTagValues/$meta0/$meta0/$meta0/keykeyvar"tsdb/meta.go(Çœ0ìœ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z.

text/plain Extract ref and string literal.
ä6./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/keyí
8*6Measurement/uniqueTagValues/$meta0/$meta0/$meta0/valuevaluevar"tsdb/meta.go(Çœ0ìœ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z.

text/plain Extract ref and string literal.
ä8./Measurement/uniqueTagValues/$meta0/$meta0/$meta0/value˙
&*$Measurement/uniqueTagValues/$meta0/nnvar"tsdb/meta.go(±Õ0¿Õ@RÜ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Node",
        "UnderlyingTypeString": "interface{String() string; node()}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/uniqueTagValues/$meta0/n÷
4*2Measurement/uniqueTagValues/$meta1/$meta0/$meta0/vvvar"tsdb/meta.go(æÀ0»‘@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./Measurement/uniqueTagValues/$meta1/$meta0/$meta0/v∫
&*$Measurement/uniqueTagValues/$meta1/kkvar"tsdb/meta.go(æÀ0»‘@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Measurement/uniqueTagValues/$meta1/k„
+*)Measurement/uniqueTagValues/$meta1/valuesvaluesvar"tsdb/meta.go(æÀ0»‘@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./Measurement/uniqueTagValues/$meta1/valuesê
"* Measurement/uniqueTagValues/exprexprvar"tsdb/meta.go(‰À0ˆÀ@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/uniqueTagValues/expr¸
*Measurement/uniqueTagValues/mmvar"tsdb/meta.go(ƒÀ0“À@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurement/uniqueTagValues/mÃ
!*Measurement/uniqueTagValues/outoutvar"tsdb/meta.go(˚“0õ”@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string][]string",
        "UnderlyingTypeString": "map[string][]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Measurement/uniqueTagValues/outÂ
"* Measurement/uniqueTagValues/tagstagsvar"tsdb/meta.go(ØÃ0€Ã@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "map[string]map[string]struct{}",
        "UnderlyingTypeString": "map[string]map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Measurement/uniqueTagValues/tags∞
#*!Measurement/walkWhereForSeriesIdswalkWhereForSeriesIdsfunc"tsdb/meta.go(ˆ§0‹∞RΩ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Measurement",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, map[uint64]github.com/influxdb/influxdb/influxql.Expr, error)",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, map[uint64]github.com/influxdb/influxdb/influxql.Expr, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÔ

text/plain‡walkWhereForSeriesIds recursively walks the WHERE clause and returns an ordered set of series IDs and
a map from those series IDs to filter expressions that should be used to limit points returned in
the final query result.
ä#./Measurement/walkWhereForSeriesIdsÅ
I*GMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/$meta1/ididvar"tsdb/meta.go(ˆ§0‹∞@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/$meta1/idà
C*AMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/errerrvar"tsdb/meta.go(¸ß0ù®@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/err‘
D*BMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/exprexprvar"tsdb/meta.go(¸ß0ù®@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/expr‡
G*EMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/filtersfiltersvar"tsdb/meta.go(”®0¯®@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/filtersù
C*AMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/idsidsvar"tsdb/meta.go(¸ß0ù®@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta0/idsà
C*AMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/errerrvar"tsdb/meta.go(∞™0Â™@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/err‡
G*EMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/filtersfiltersvar"tsdb/meta.go(øÆ0ÄØ@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/filters⁄
C*AMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/idsidsvar"tsdb/meta.go(˙¨0á≠@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z;

text/plain-Combine the series IDs from the LHS and RHS.
äC./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/ids„
H*FMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/lfilterslfiltersvar"tsdb/meta.go(∞™0Â™@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/lfilters†
D*BMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/lidslidsvar"tsdb/meta.go(∞™0Â™@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/lids„
H*FMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/rfiltersrfiltersvar"tsdb/meta.go(ÿ´0ç¨@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/rfilters†
D*BMeasurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/ridsridsvar"tsdb/meta.go(ÿ´0ç¨@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./Measurement/walkWhereForSeriesIds/$meta0/$meta0/$meta0/$meta1/ridsÏ
5*3Measurement/walkWhereForSeriesIds/$meta0/$meta0/errerrvar"tsdb/meta.go(•Ø0√Ø@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./Measurement/walkWhereForSeriesIds/$meta0/$meta0/errÅ
5*3Measurement/walkWhereForSeriesIds/$meta0/$meta0/idsidsvar"tsdb/meta.go(•Ø0√Ø@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./Measurement/walkWhereForSeriesIds/$meta0/$meta0/idsú
(*&Measurement/walkWhereForSeriesIds/exprexprvar"tsdb/meta.go(¢•0¥•@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Measurement/walkWhereForSeriesIds/exprà
%*#Measurement/walkWhereForSeriesIds/mmvar"tsdb/meta.go(¸§0ä•@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Measurement/walkWhereForSeriesIds/mè
*MeasurementFieldsMeasurementFieldstype"tsdb/shard.go(ΩT0óU8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "struct{Fields map[string]*github.com/influxdb/influxdb/tsdb.Field \"json:\\\"fields\\\"\"; Codec *github.com/influxdb/influxdb/tsdb.FieldCodec}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFields◊
*MeasurementFields/CodecCodecfield"tsdb/shard.go(ÉU0ïU8R¯{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MeasurementFields",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFields/Codecú
**(MeasurementFields/CreateFieldIfNotExistsCreateFieldIfNotExistsfunc"tsdb/shard.go(Ù\0¨a8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*MeasurementFields",
        "TypeString": "func(name string, typ github.com/influxdb/influxdb/influxql.DataType) error",
        "UnderlyingTypeString": "func(name string, typ github.com/influxdb/influxdb/influxql.DataType) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z◊

text/plain»CreateFieldIfNotExists creates a new field with an autoincrementing ID.
Returns an error if 255 fields have already been created on the measurement or
the fields already exists with a different type.
ä*./MeasurementFields/CreateFieldIfNotExistsô
4*2MeasurementFields/CreateFieldIfNotExists/$shard0/ffvar"tsdb/shard.go(ˇ]0í^@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./MeasurementFields/CreateFieldIfNotExists/$shard0/fâ
,**MeasurementFields/CreateFieldIfNotExists/ffvar"tsdb/shard.go(ö`0Ê`@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./MeasurementFields/CreateFieldIfNotExists/f°
,**MeasurementFields/CreateFieldIfNotExists/mmvar"tsdb/shard.go(˙\0é]@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./MeasurementFields/CreateFieldIfNotExists/mŒ
/*-MeasurementFields/CreateFieldIfNotExists/namenamevar"tsdb/shard.go(ß]0≤]@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./MeasurementFields/CreateFieldIfNotExists/name
.*,MeasurementFields/CreateFieldIfNotExists/typtypvar"tsdb/shard.go(¥]0…]@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.DataType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../MeasurementFields/CreateFieldIfNotExists/typÊ
*MeasurementFields/FieldsFieldsfield"tsdb/shard.go(ŸT0ÅU8RÑ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "MeasurementFields",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFields/FieldsÇ
!*MeasurementFields/MarshalBinaryMarshalBinaryfunc"tsdb/shard.go(—U0˙W8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*MeasurementFields",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZC

text/plain5MarshalBinary encodes the object to a binary format.
ä!./MeasurementFields/MarshalBinary‘
4*2MeasurementFields/MarshalBinary/$shard0/$shard0/ididvar"tsdb/shard.go(“V0„V@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int32",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./MeasurementFields/MarshalBinary/$shard0/$shard0/id‹
6*4MeasurementFields/MarshalBinary/$shard0/$shard0/namenamevar"tsdb/shard.go(ÊV0ÙV@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./MeasurementFields/MarshalBinary/$shard0/$shard0/name—
3*1MeasurementFields/MarshalBinary/$shard0/$shard0/ttvar"tsdb/shard.go(˜V0âW@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int32",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./MeasurementFields/MarshalBinary/$shard0/$shard0/tá
+*)MeasurementFields/MarshalBinary/$shard0/ffvar"tsdb/shard.go(—U0˙W@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./MeasurementFields/MarshalBinary/$shard0/fè
#*!MeasurementFields/MarshalBinary/mmvar"tsdb/shard.go(◊U0ÎU@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./MeasurementFields/MarshalBinary/mì
$*"MeasurementFields/MarshalBinary/pbpbvar"tsdb/shard.go(îV0±V@R£{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb/internal.MeasurementFields",
        "UnderlyingTypeString": "struct{Fields []*github.com/influxdb/influxdb/tsdb/internal.Field \"protobuf:\\\"bytes,1,rep\\\" json:\\\"Fields,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./MeasurementFields/MarshalBinary/pbå
#*!MeasurementFields/UnmarshalBinaryUnmarshalBinaryfunc"tsdb/shard.go(∏X0°[8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*MeasurementFields",
        "TypeString": "func(buf []byte) error",
        "UnderlyingTypeString": "func(buf []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZG

text/plain9UnmarshalBinary decodes the object from a binary format.
ä#./MeasurementFields/UnmarshalBinaryﬂ
/*-MeasurementFields/UnmarshalBinary/$shard0/errerrvar"tsdb/shard.go(üY0øY@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./MeasurementFields/UnmarshalBinary/$shard0/errù
-*+MeasurementFields/UnmarshalBinary/$shard1/ffvar"tsdb/shard.go(∏X0°[@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/internal.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/internal.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./MeasurementFields/UnmarshalBinary/$shard1/fΩ
'*%MeasurementFields/UnmarshalBinary/bufbufvar"tsdb/shard.go(‰X0ÓX@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./MeasurementFields/UnmarshalBinary/bufì
%*#MeasurementFields/UnmarshalBinary/mmvar"tsdb/shard.go(æX0“X@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./MeasurementFields/UnmarshalBinary/mó
&*$MeasurementFields/UnmarshalBinary/pbpbvar"tsdb/shard.go(˝X0öY@R£{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb/internal.MeasurementFields",
        "UnderlyingTypeString": "struct{Fields []*github.com/influxdb/influxdb/tsdb/internal.Field \"protobuf:\\\"bytes,1,rep\\\" json:\\\"Fields,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./MeasurementFields/UnmarshalBinary/pbë
*MeasurementFromSeriesKeyMeasurementFromSeriesKeyfunc"tsdb/meta.go(÷õ0ú8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(key string) string",
        "UnderlyingTypeString": "func(key string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFromSeriesKey¶
*MeasurementFromSeriesKey/idxidxvar"tsdb/meta.go(äú0®ú@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFromSeriesKey/idx¨
*MeasurementFromSeriesKey/keykeyvar"tsdb/meta.go(Ùõ0˛õ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MeasurementFromSeriesKey/key›
*MeasurementsMeasurementstype"tsdb/meta.go(Ç’0ù’8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0Measurements represents a list of *Measurement.
ä./Measurements¯
*Measurements/LenLenfunc"tsdb/meta.go(ü’0⁄’8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Measurements",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/LenË
*Measurements/Len/aavar"tsdb/meta.go(•’0≥’@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Len/aï
*Measurements/LessLessfunc"tsdb/meta.go(€’0•÷8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Measurements",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/LessÍ
*Measurements/Less/aavar"tsdb/meta.go(·’0Ô’@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Less/aí
*Measurements/Less/iivar"tsdb/meta.go(ˆ’0˛’@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Less/ií
*Measurements/Less/jjvar"tsdb/meta.go(ˆ’0˛’@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Less/jã
*Measurements/SwapSwapfunc"tsdb/meta.go(¶÷0Î÷8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Measurements",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/SwapÍ
*Measurements/Swap/aavar"tsdb/meta.go(¨÷0∫÷@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Swap/aí
*Measurements/Swap/iivar"tsdb/meta.go(¡÷0…÷@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Swap/ií
*Measurements/Swap/jjvar"tsdb/meta.go(¡÷0…÷@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/Swap/j¨
*Measurements/intersect	intersectfunc"tsdb/meta.go(Ì÷0∫€RÕ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Measurements",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.Measurements) github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.Measurements) github.com/influxdb/influxdb/tsdb.Measurements",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersectÙ
*Measurements/intersect/aavar"tsdb/meta.go(Û÷0Å◊@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersect/a∂
*Measurements/intersect/iivar"tsdb/meta.go(≈Ÿ0ÕŸ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zó

text/plainàthey're in sorted order so advance the counter as needed.
That is, don't run comparisons against lower values that we've already passed
ä./Measurements/intersect/i∂
*Measurements/intersect/jjvar"tsdb/meta.go(≈Ÿ0ÕŸ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zó

text/plainàthey're in sorted order so advance the counter as needed.
That is, don't run comparisons against lower values that we've already passed
ä./Measurements/intersect/jÙ
*Measurements/intersect/llvar"tsdb/meta.go(±◊0∑◊@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersect/lÄ
*Measurements/intersect/otherothervar"tsdb/meta.go(ç◊0ü◊@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersect/otherÙ
*Measurements/intersect/rrvar"tsdb/meta.go(π◊0√◊@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersect/rÉ
*Measurements/intersect/resultresultvar"tsdb/meta.go(–Ÿ0˜Ÿ@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/intersect/result†
*Measurements/unionunionfunc"tsdb/meta.go(º€0ÎﬂRÕ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Measurements",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.Measurements) github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.Measurements) github.com/influxdb/influxdb/tsdb.Measurements",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/unionÏ
*Measurements/union/aavar"tsdb/meta.go(¬€0–€@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/union/aî
*Measurements/union/iivar"tsdb/meta.go(¥‹0º‹@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/union/iî
*Measurements/union/jjvar"tsdb/meta.go(¥‹0º‹@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/union/j¯
*Measurements/union/otherothervar"tsdb/meta.go(ÿ€0Í€@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/union/other˚
*Measurements/union/resultresultvar"tsdb/meta.go(¸€0Æ‹@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Measurements/union/resultØ
	*MonitorMonitortype"tsdb/monitor.go(D0i8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Monitor",
        "UnderlyingTypeString": "struct{Store interface{}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z<

text/plain.Monitor represents a TSDB monitoring service.
ä	./Monitorı
*Monitor/CloseClosefunc"tsdb/monitor.go(ö0»8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Monitor",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Monitor/CloseŸ
*Monitor/Close/mmvar"tsdb/monitor.go(†0™@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Monitor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Monitor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Monitor/Close/mÒ
*Monitor/OpenOpenfunc"tsdb/monitor.go(k0ô8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Monitor",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Monitor/Open’
*Monitor/Open/mmvar"tsdb/monitor.go(q0{@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Monitor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Monitor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Monitor/Open/mı
*Monitor/StoreStorefield"tsdb/monitor.go(V0g8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Monitor",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Monitor/Storeé
*MultiCursorMultiCursorfunc"tsdb/cursor.go(ø0î8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(cursors ...github.com/influxdb/influxdb/tsdb.Cursor) github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "func(cursors ...github.com/influxdb/influxdb/tsdb.Cursor) github.com/influxdb/influxdb/tsdb.Cursor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zã

text/plain¸MultiCursor returns a single cursor that combines the results of all cursors in order.

If the same key is returned from multiple cursors then the first cursor
specified will take precendence. A key will only be returned once from the
returned cursor.
ä./MultiCursorÊ
*MultiCursor/cursorscursorsvar"tsdb/cursor.go(–0·@Ré{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Cursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./MultiCursor/cursorsî
*	NewConfig	NewConfigfunc"tsdb/config.go(Ç0Æ8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Config",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Config",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewConfig∑
*NewDatabaseIndexNewDatabaseIndexfunc"tsdb/meta.go(ç0´8R›{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func() *github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewDatabaseIndex⁄
*	NewEngine	NewEnginefunc"tsdb/engine.go(Ã0î8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) (github.com/influxdb/influxdb/tsdb.Engine, error)",
        "UnderlyingTypeString": "func(path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) (github.com/influxdb/influxdb/tsdb.Engine, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zâ

text/plain{NewEngine returns an instance of an engine based on its format.
If the path does not exist then the DefaultFormat is used.
ä./NewEngine≤
*NewEngine/$engine0/errerrvar"tsdb/engine.go(Ω0‘@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/$engine0/errÓ
(*&NewEngine/$engine1/$engine0/$engine1/bbvar"tsdb/engine.go(ê0Æ@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/boltdb/bolt.Bucket",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.Bucket",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./NewEngine/$engine1/$engine0/$engine1/bÈ
)*'NewEngine/$engine1/$engine0/$engine1/txtxvar"tsdb/engine.go(ÿ0„@RÓ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/boltdb/bolt.Tx",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.Tx",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./NewEngine/$engine1/$engine0/$engine1/tx◊
 *NewEngine/$engine1/$engine0/dbdbvar"tsdb/engine.go(¿0â@RÓ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/boltdb/bolt.DB",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.DB",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./NewEngine/$engine1/$engine0/dbƒ
!*NewEngine/$engine1/$engine0/errerrvar"tsdb/engine.go(¿0â@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./NewEngine/$engine1/$engine0/err≤
*NewEngine/$engine1/errerrvar"tsdb/engine.go(®0π@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/$engine1/err±
*NewEngine/fnfnvar"tsdb/engine.go(¸0ò@RÏ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.NewEngineFunc",
        "UnderlyingTypeString": "func(path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) github.com/influxdb/influxdb/tsdb.Engine",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/fn˘
*NewEngine/formatformatvar"tsdb/engine.go(ñ0£@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z`

text/plainROnly bolt-based backends are currently supported so open it and check the format.
ä./NewEngine/format‡
*NewEngine/optionsoptionsvar"tsdb/engine.go(¯0ç@Rå{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/optionsë
*NewEngine/pathpathvar"tsdb/engine.go(€0Ê@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/pathö
*NewEngine/walPathwalPathvar"tsdb/engine.go(Ë0ˆ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewEngine/walPath®
*NewEngineFuncNewEngineFunctype"tsdb/engine.go(õ0Ë8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.NewEngineFunc",
        "UnderlyingTypeString": "func(path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) github.com/influxdb/influxdb/tsdb.Engine",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z2

text/plain$NewEngineFunc creates a new engine.
ä./NewEngineFuncı
*NewEngineOptionsNewEngineOptionsfunc"tsdb/engine.go(ƒ08R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.EngineOptions",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z<

text/plain.NewEngineOptions returns the default options.
ä./NewEngineOptionsñ
*NewErrAuthorizeNewErrAuthorizefunc"tsdb/query_executor.go(ÇÀ0©Ã8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(qe *github.com/influxdb/influxdb/tsdb.QueryExecutor, q *github.com/influxdb/influxdb/influxql.Query, u string, db string, m string) *github.com/influxdb/influxdb/tsdb.ErrAuthorize",
        "UnderlyingTypeString": "func(qe *github.com/influxdb/influxdb/tsdb.QueryExecutor, q *github.com/influxdb/influxdb/influxql.Query, u string, db string, m string) *github.com/influxdb/influxdb/tsdb.ErrAuthorize",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZR

text/plainDnewAuthorizationError returns a new instance of AuthorizationError.
ä./NewErrAuthorize°
*NewErrAuthorize/dbdbvar"tsdb/query_executor.go(ΩÀ0ÃÀ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewErrAuthorize/dbû
*NewErrAuthorize/mmvar"tsdb/query_executor.go(ΩÀ0ÃÀ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewErrAuthorize/mÍ
*NewErrAuthorize/qqvar"tsdb/query_executor.go(™À0ªÀ@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewErrAuthorize/qı
*NewErrAuthorize/qeqevar"tsdb/query_executor.go(óÀ0®À@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewErrAuthorize/qeû
*NewErrAuthorize/uuvar"tsdb/query_executor.go(ΩÀ0ÃÀ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewErrAuthorize/uß
*NewFieldCodecNewFieldCodecfunc"tsdb/shard.go(¥h0Új8RÀ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(fields map[string]*github.com/influxdb/influxdb/tsdb.Field) *github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "func(fields map[string]*github.com/influxdb/influxdb/tsdb.Field) *github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zá

text/plainyNewFieldCodec returns a FieldCodec for the given Measurement. Must be called with
a RLock that protects the Measurement.
ä./NewFieldCodec„
*NewFieldCodec/$shard0/ffvar"tsdb/shard.go(¥h0Új@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewFieldCodec/$shard0/f¯
*NewFieldCodec/fieldsfieldsvar"tsdb/shard.go(«h0ﬂh@R†{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewFieldCodec/fieldsÇ
*NewFieldCodec/fieldsByID
fieldsByIDvar"tsdb/shard.go(h0°i@Rû{
        "PkgName": "tsdb",
        "TypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewFieldCodec/fieldsByIDä
*NewFieldCodec/fieldsByNamefieldsByNamevar"tsdb/shard.go(£i0◊i@R†{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewFieldCodec/fieldsByName˚
*NewMeasurementNewMeasurementfunc"tsdb/meta.go(˚A0ƒD8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string, idx *github.com/influxdb/influxdb/tsdb.DatabaseIndex) *github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "func(name string, idx *github.com/influxdb/influxdb/tsdb.DatabaseIndex) *github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZJ

text/plain<NewMeasurement allocates and initializes a new Measurement.
ä./NewMeasurementÍ
*NewMeasurement/idxidxvar"tsdb/meta.go(úB0ÆB@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewMeasurement/idxô
*NewMeasurement/namenamevar"tsdb/meta.go(èB0öB@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewMeasurement/nameÏ

*NewPointNewPointfunc"tsdb/points.go(çµ0«∂8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string, tags github.com/influxdb/influxdb/tsdb.Tags, fields github.com/influxdb/influxdb/tsdb.Fields, time time.Time) github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func(name string, tags github.com/influxdb/influxdb/tsdb.Tags, fields github.com/influxdb/influxdb/tsdb.Fields, time time.Time) github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zg

text/plainYNewPoint returns a new point with the given measurement name, tags, fields and timestamp
ä
./NewPoint…
*NewPoint/fieldsfieldsvar"tsdb/points.go(≥µ0¿µ@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPoint/fieldsë
*NewPoint/namenamevar"tsdb/points.go(õµ0¶µ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPoint/nameº
*NewPoint/tagstagsvar"tsdb/points.go(®µ0±µ@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPoint/tagsø
*NewPoint/timetimevar"tsdb/points.go(¬µ0–µ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPoint/timeü
*NewPointBatcherNewPointBatcherfunc"tsdb/batcher.go(¬0∫8Râ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(sz int, d time.Duration) *github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "func(sz int, d time.Duration) *github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,NewPointBatcher returns a new PointBatcher.
ä./NewPointBatcherõ
*NewPointBatcher/ddvar"tsdb/batcher.go(ﬂ0Ó@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPointBatcher/dí
*NewPointBatcher/szszvar"tsdb/batcher.go(◊0›@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewPointBatcher/sz„
*NewQueryExecutorNewQueryExecutorfunc"tsdb/query_executor.go(æ0Ÿ8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(store *github.com/influxdb/influxdb/tsdb.Store) *github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "func(store *github.com/influxdb/influxdb/tsdb.Store) *github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZD

text/plain6NewQueryExecutor returns an initialized QueryExecutor
ä./NewQueryExecutorÓ
*NewQueryExecutor/storestorevar"tsdb/query_executor.go(‘0‡@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewQueryExecutor/store¸
*NewSelectExecutorNewSelectExecutorfunc"tsdb/executor.go(™0í8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, mappers []github.com/influxdb/influxdb/tsdb.Mapper, chunkSize int) *github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, mappers []github.com/influxdb/influxdb/tsdb.Mapper, chunkSize int) *github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0NewSelectExecutor returns a new SelectExecutor.
ä./NewSelectExecutorÚ
 *NewSelectExecutor/$executor0/mmvar"tsdb/executor.go(™0í@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./NewSelectExecutor/$executor0/mÙ
*NewSelectExecutor/aavar"tsdb/executor.go(ï0≠@R†{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectExecutor/a¨
*NewSelectExecutor/chunkSize	chunkSizevar"tsdb/executor.go(Û0Ä@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectExecutor/chunkSizeÙ
*NewSelectExecutor/mappersmappersvar"tsdb/executor.go(·0Ò@Ré{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectExecutor/mappersÉ
*NewSelectExecutor/stmtstmtvar"tsdb/executor.go(¡0ﬂ@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectExecutor/stmtë
*NewSelectMapperNewSelectMapperfunc"tsdb/mapper.go(ñ0Ú8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(shard *github.com/influxdb/influxdb/tsdb.Shard, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) *github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "func(shard *github.com/influxdb/influxdb/tsdb.Shard, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) *github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zu

text/plaingNewSelectMapper returns a mapper for the given shard, which will return data for the SELECT statement.
ä./NewSelectMapper¶
*NewSelectMapper/chunkSize	chunkSizevar"tsdb/mapper.go(“0ﬂ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectMapper/chunkSize‰
*NewSelectMapper/shardshardvar"tsdb/mapper.go(´0∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectMapper/shardÕ
*NewSelectMapper/stmtstmtvar"tsdb/mapper.go(π0–@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSelectMapper/stmtô
*	NewSeries	NewSeriesfunc"tsdb/meta.go(°‚0π„8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(key string, tags map[string]string) *github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "func(key string, tags map[string]string) *github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z=

text/plain/NewSeries returns an initialized series struct
ä./NewSeriesé
*NewSeries/keykeyvar"tsdb/meta.go(∞‚0∫‚@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSeries/keyß
*NewSeries/tagstagsvar"tsdb/meta.go(º‚0“‚@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSeries/tags£

*NewShardNewShardfunc"tsdb/shard.go(ª0ö8R˚{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(id uint64, index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) *github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "func(id uint64, index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) *github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zc

text/plainUNewShard returns a new initialized Shard. walPath doesn't apply to the b1 type index
ä
./NewShardà
*NewShard/ididvar"tsdb/shard.go(…0“@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewShard/idÂ
*NewShard/indexindexvar"tsdb/shard.go(‘0Ë@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewShard/index›
*NewShard/optionsoptionsvar"tsdb/shard.go(á0ú@Rå{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewShard/optionsé
*NewShard/pathpathvar"tsdb/shard.go(Í0ı@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewShard/pathó
*NewShard/walPathwalPathvar"tsdb/shard.go(˜0Ö@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewShard/walPathﬂ
*NewShowMeasurementsExecutorNewShowMeasurementsExecutorfunc"tsdb/show_measurements.go(à0¯8RÉ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, mappers []github.com/influxdb/influxdb/tsdb.Mapper, chunkSize int) *github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, mappers []github.com/influxdb/influxdb/tsdb.Mapper, chunkSize int) *github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZR

text/plainDNewShowMeasurementsExecutor returns a new ShowMeasurementsExecutor.
ä./NewShowMeasurementsExecutor…
'*%NewShowMeasurementsExecutor/chunkSize	chunkSizevar"tsdb/show_measurements.go(Â0Ú@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./NewShowMeasurementsExecutor/chunkSizeë
%*#NewShowMeasurementsExecutor/mappersmappersvar"tsdb/show_measurements.go(”0„@Ré{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./NewShowMeasurementsExecutor/mappers¥
"* NewShowMeasurementsExecutor/stmtstmtvar"tsdb/show_measurements.go(©0—@R∫{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./NewShowMeasurementsExecutor/stmt¯
*NewShowMeasurementsMapperNewShowMeasurementsMapperfunc"tsdb/show_measurements.go(¡0•8R˜{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(shard *github.com/influxdb/influxdb/tsdb.Shard, stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, chunkSize int) *github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "func(shard *github.com/influxdb/influxdb/tsdb.Shard, stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, chunkSize int) *github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z}

text/plainoNewShowMeasurementsMapper returns a mapper for the given shard, which will return data for the meta statement.
ä./NewShowMeasurementsMapper≈
%*#NewShowMeasurementsMapper/chunkSize	chunkSizevar"tsdb/show_measurements.go(ò0•@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./NewShowMeasurementsMapper/chunkSizeÉ
!*NewShowMeasurementsMapper/shardshardvar"tsdb/show_measurements.go(‡0Ï@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./NewShowMeasurementsMapper/shard∞
 *NewShowMeasurementsMapper/stmtstmtvar"tsdb/show_measurements.go(Ó0ñ@R∫{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./NewShowMeasurementsMapper/stmt∆
*NewSnapshotWriterNewSnapshotWriterfunc"tsdb/snapshot_writer.go(à0ñ8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(meta []byte, store *github.com/influxdb/influxdb/tsdb.Store) (*github.com/influxdb/influxdb/snapshot.Writer, error)",
        "UnderlyingTypeString": "func(meta []byte, store *github.com/influxdb/influxdb/tsdb.Store) (*github.com/influxdb/influxdb/snapshot.Writer, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z}

text/plainoNewSnapshotWriter returns a new snapshot.Writer that will write
metadata and the store's shards to an archive.
ä./NewSnapshotWriter•
M*KNewSnapshotWriter/$snapshot_writer0/$snapshot_writer0/$snapshot_writer0/errerrvar"tsdb/snapshot_writer.go(√0Ì@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äM./NewSnapshotWriter/$snapshot_writer0/$snapshot_writer0/$snapshot_writer0/err≥
9*7NewSnapshotWriter/$snapshot_writer0/$snapshot_writer0/ffvar"tsdb/snapshot_writer.go(¡0£@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./NewSnapshotWriter/$snapshot_writer0/$snapshot_writer0/f›
)*'NewSnapshotWriter/$snapshot_writer0/errerrvar"tsdb/snapshot_writer.go(í0œ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./NewSnapshotWriter/$snapshot_writer0/err™
*NewSnapshotWriter/metametavar"tsdb/snapshot_writer.go(ü0™@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSnapshotWriter/metaÒ
*NewSnapshotWriter/storestorevar"tsdb/snapshot_writer.go(¨0∏@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSnapshotWriter/storeÚ
*NewSnapshotWriter/swswvar"tsdb/snapshot_writer.go(Û0ç@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewSnapshotWriter/sw¶

*NewStoreNewStorefunc"tsdb/store.go(î0Ú8R„{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(path string) *github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "func(path string) *github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./NewStore‘
*NewStore/optsoptsvar"tsdb/store.go(π0”@Rå{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewStore/optsé
*NewStore/pathpathvar"tsdb/store.go(¢0≠@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NewStore/pathÉ
*NodeID$query_executor1032NodeIDfunc"tsdb/query_executor.go(à0ó@Ró{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NodeID$query_executor1032ë
*NopWriteToCloserNopWriteToCloserfunc"tsdb/snapshot_writer.go(‘0ø8RŸ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(w io.WriterTo) interface{io.Closer; io.WriterTo}",
        "UnderlyingTypeString": "func(w io.WriterTo) interface{io.Closer; io.WriterTo}",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZQ

text/plainCNopWriteToCloser returns an io.WriterTo that implements io.Closer.
ä./NopWriteToCloser“
*NopWriteToCloser/wwvar"tsdb/snapshot_writer.go(Í0˜@R˘{
        "PkgName": "tsdb",
        "TypeString": "io.WriterTo",
        "UnderlyingTypeString": "interface{WriteTo(w io.Writer) (n int64, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./NopWriteToCloser/w∆
*ParsePointsParsePointsfunc"tsdb/points.go(ñ0Ñ8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "UnderlyingTypeString": "func(buf []byte) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÅ

text/plainsParsePoints returns a slice of Points from a text representation of a point
with each point separated by newlines.
ä./ParsePointsí
*ParsePoints/bufbufvar"tsdb/points.go(ß0±@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePoints/buf‘
*ParsePointsStringParsePointsStringfunc"tsdb/points.go(√0õ8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf string) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "UnderlyingTypeString": "func(buf string) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePointsStringû
*ParsePointsString/bufbufvar"tsdb/points.go(⁄0‰@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePointsString/bufª
*ParsePointsWithPrecisionParsePointsWithPrecisionfunc"tsdb/points.go(Ü0‡8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, defaultTime time.Time, precision string) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "UnderlyingTypeString": "func(buf []byte, defaultTime time.Time, precision string) ([]github.com/influxdb/influxdb/tsdb.Point, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePointsWithPrecision‚
0*.ParsePointsWithPrecision/$points0/$points0/errerrvar"tsdb/points.go( 0ê@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./ParsePointsWithPrecision/$points0/$points0/errÉ
/*-ParsePointsWithPrecision/$points0/$points0/ptptvar"tsdb/points.go( 0ê@R¸{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./ParsePointsWithPrecision/$points0/$points0/pt–
2*0ParsePointsWithPrecision/$points0/$points0/startstartvar"tsdb/points.go(Ø0–@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./ParsePointsWithPrecision/$points0/$points0/start≤
 *ParsePointsWithPrecision/blockblockvar"tsdb/points.go(ñ0¢@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./ParsePointsWithPrecision/block¨
*ParsePointsWithPrecision/bufbufvar"tsdb/points.go(§0Æ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePointsWithPrecision/bufÚ
&*$ParsePointsWithPrecision/defaultTimedefaultTimevar"tsdb/points.go(∞0≈@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./ParsePointsWithPrecision/defaultTime˚
!*ParsePointsWithPrecision/pointspointsvar"tsdb/points.go(Ì0Ä@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./ParsePointsWithPrecision/points¶
*ParsePointsWithPrecision/posposvar"tsdb/points.go(ä0ì@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ParsePointsWithPrecision/posæ
$*"ParsePointsWithPrecision/precision	precisionvar"tsdb/points.go(«0◊@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ParsePointsWithPrecision/precision∫
*PointPointtype"tsdb/points.go(¨0Í8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZL

text/plain>Point defines the values that will be written to the database
ä./Point¶
*Point/AddFieldAddFieldfunc"tsdb/points.go(Æ0÷8R÷{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(name string, value interface{})",
        "UnderlyingTypeString": "func(name string, value interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddFieldõ
*Point/AddField/namenamevar"tsdb/points.go(∑0¬@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddField/name®
*Point/AddField/valuevaluevar"tsdb/points.go(ƒ0’@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddField/valueî
*Point/AddTagAddTagfunc"tsdb/points.go(Ì0Ü8R {
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(key string, value string)",
        "UnderlyingTypeString": "func(key string, value string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddTagî
*Point/AddTag/keykeyvar"tsdb/points.go(Ù0Ö@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddTag/keyö
*Point/AddTag/valuevaluevar"tsdb/points.go(Ù0Ö@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/AddTag/valueÏ
*
Point/DataDatafunc"tsdb/points.go(¥0¡8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/Data∂
*Point/FieldsFieldsfunc"tsdb/points.go(ù0¨8RÏ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/FieldsÚ
*Point/HashIDHashIDfunc"tsdb/points.go(î0£8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/HashIDÈ
*	Point/KeyKeyfunc"tsdb/points.go(•0±8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/KeyÏ
*
Point/NameNamefunc"tsdb/points.go(ø0Ã8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/Name˚
*Point/SetDataSetDatafunc"tsdb/points.go(√0÷8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(buf []byte)",
        "UnderlyingTypeString": "func(buf []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetDatañ
*Point/SetData/bufbufvar"tsdb/points.go(À0’@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetData/bufÛ
*Point/SetNameSetNamefunc"tsdb/points.go(Œ0›8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(string)",
        "UnderlyingTypeString": "func(string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetNameΩ
*Point/SetTagsSetTagsfunc"tsdb/points.go(à0ö8R{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(tags github.com/influxdb/influxdb/tsdb.Tags)",
        "UnderlyingTypeString": "func(tags github.com/influxdb/influxdb/tsdb.Tags)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetTagsƒ
*Point/SetTags/tagstagsvar"tsdb/points.go(ê0ô@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetTags/tags˝
*Point/SetTimeSetTimefunc"tsdb/points.go(Î0ˇ8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func(t time.Time)",
        "UnderlyingTypeString": "func(t time.Time)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetTimeæ
*Point/SetTime/ttvar"tsdb/points.go(Û0˛@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/SetTime/tÚ
*Point/StringStringfunc"tsdb/points.go(Ÿ0Ë8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/String¨
*
Point/TagsTagsfunc"tsdb/points.go(‡0Î8RË{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Tags",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/TagsÚ
*
Point/TimeTimefunc"tsdb/points.go(Ÿ0È8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() time.Time",
        "UnderlyingTypeString": "func() time.Time",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/Timeˆ
*Point/UnixNanoUnixNanofunc"tsdb/points.go(Å0ë8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Point",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Point/UnixNanoï
*PointBatcherPointBatchertype"tsdb/batcher.go(‘0ë8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "struct{stats github.com/influxdb/influxdb/tsdb.PointBatcherStats; size int; duration time.Duration; stop chan struct{}; in chan github.com/influxdb/influxdb/tsdb.Point; out chan []github.com/influxdb/influxdb/tsdb.Point; flush chan struct{}; wg *sync.WaitGroup}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zü

text/plainêPointBatcher accepts Points and will emit a batch of those points when either
a) the batch reaches a certain size, or b) a certain time passes.
ä./PointBatcherú
*PointBatcher/FlushFlushfunc"tsdb/batcher.go(ä0√8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z°

text/plainíFlush instructs the batcher to emit any pending points in a batch, regardless of batch size.
If there are no pending points, no batch is emitted.
ä./PointBatcher/FlushÌ
*PointBatcher/Flush/bbvar"tsdb/batcher.go(ê0ü@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Flush/b°
*PointBatcher/InInfunc"tsdb/batcher.go(∫0Û8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func() chan\u003c- github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func() chan\u003c- github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZH

text/plain:In returns the channel to which points should be written.
ä./PointBatcher/InÁ
*PointBatcher/In/bbvar"tsdb/batcher.go(¿0œ@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/In/b©
*PointBatcher/OutOutfunc"tsdb/batcher.go(≥08Ré{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func() \u003c-chan []github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func() \u003c-chan []github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;Out returns the channel from which batches should be read.
ä./PointBatcher/OutÈ
*PointBatcher/Out/bbvar"tsdb/batcher.go(π0»@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Out/bˆ
*PointBatcher/StartStartfunc"tsdb/batcher.go(Ü	0¯8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z|

text/plainnStart starts the batching process. Returns the in and out channels for points
and point-batches respectively.
ä./PointBatcher/Startµ
H*FPointBatcher/Start/$batcher2/$batcher0/$batcher0/$batcher0/$batcher1/ppvar"tsdb/batcher.go(√0Œ@R¸{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./PointBatcher/Start/$batcher2/$batcher0/$batcher0/$batcher0/$batcher1/pÌ
*PointBatcher/Start/bbvar"tsdb/batcher.go(å	0õ	@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Start/bÌ
*PointBatcher/Start/batchbatchvar"tsdb/batcher.go(˜	0Ñ
@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Start/batch§
*PointBatcher/Start/emitemitvar"tsdb/batcher.go(•
0Ç@R∆{
        "PkgName": "tsdb",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Start/emit±
*PointBatcher/Start/timertimervar"tsdb/batcher.go(‡	0Ò	@R–{
        "PkgName": "tsdb",
        "TypeString": "*time.Timer",
        "UnderlyingTypeString": "*time.Timer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Start/timerÀ
*PointBatcher/Start/timerChtimerChvar"tsdb/batcher.go(ä
0¢
@R‰{
        "PkgName": "tsdb",
        "TypeString": "\u003c-chan time.Time",
        "UnderlyingTypeString": "\u003c-chan time.Time",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Start/timerChö
*PointBatcher/StatsStatsfunc"tsdb/batcher.go(Ò0¡8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func() *github.com/influxdb/influxdb/tsdb.PointBatcherStats",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/tsdb.PointBatcherStats",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zµ

text/plain¶Stats returns a PointBatcherStats object for the PointBatcher. While the each statistic should be
closely correlated with each other statistic, it is not guaranteed.
ä./PointBatcher/StatsÌ
*PointBatcher/Stats/bbvar"tsdb/batcher.go(˜0Ü@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Stats/b°
*PointBatcher/Stats/statsstatsvar"tsdb/batcher.go(¶0¬@R¿{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.PointBatcherStats",
        "UnderlyingTypeString": "struct{BatchTotal uint64; PointTotal uint64; SizeTotal uint64; TimeoutTotal uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Stats/statsı
*PointBatcher/StopStopfunc"tsdb/batcher.go(˙0˚8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*PointBatcher",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/StopÎ
*PointBatcher/Stop/bbvar"tsdb/batcher.go(Ä0è@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/Stop/bÔ
*PointBatcher/durationdurationfield"tsdb/batcher.go(ì0©Rë{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/durationÓ
*PointBatcher/flushflushfield"tsdb/batcher.go(Á0˙Rô{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/flush£
*PointBatcher/ininfield"tsdb/batcher.go(¡0—R◊{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "chan github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "chan github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/in™
*PointBatcher/outoutfield"tsdb/batcher.go(”0ÂR€{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "chan []github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "chan []github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/out◊
*PointBatcher/sizesizefield"tsdb/batcher.go(Ö0ëRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/size⁄
*PointBatcher/statsstatsfield"tsdb/batcher.go(Î0ÇRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "github.com/influxdb/influxdb/tsdb.PointBatcherStats",
        "UnderlyingTypeString": "struct{BatchTotal uint64; PointTotal uint64; SizeTotal uint64; TimeoutTotal uint64}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/statsÎ
*PointBatcher/stopstopfield"tsdb/batcher.go(¨0øRô{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/stopÈ
*PointBatcher/wgwgfield"tsdb/batcher.go(˝0èRù{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcher",
        "TypeString": "*sync.WaitGroup",
        "UnderlyingTypeString": "*sync.WaitGroup",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcher/wgü
*PointBatcherStatsPointBatcherStatstype"tsdb/batcher.go(˛0ê8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.PointBatcherStats",
        "UnderlyingTypeString": "struct{BatchTotal uint64; PointTotal uint64; SizeTotal uint64; TimeoutTotal uint64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZH

text/plain:PointBatcherStats are the statistics each batcher tracks.
ä./PointBatcherStatsö
*PointBatcherStats/BatchTotal
BatchTotalfield"tsdb/batcher.go(ö0≠8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcherStats",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcherStats/BatchTotalö
*PointBatcherStats/PointTotal
PointTotalfield"tsdb/batcher.go(÷0È8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcherStats",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcherStats/PointTotaló
*PointBatcherStats/SizeTotal	SizeTotalfield"tsdb/batcher.go(è0¢8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcherStats",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./PointBatcherStats/SizeTotal†
 *PointBatcherStats/TimeoutTotalTimeoutTotalfield"tsdb/batcher.go(÷0È8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "PointBatcherStats",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./PointBatcherStats/TimeoutTotal»
*PointsPointstype"tsdb/points.go(Æ0º8R¿{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Points",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZH

text/plain:Points represents a sortable list of points by timestamp.
ä./PointsÊ
*
Points/LenLenfunc"tsdb/points.go(æ0Û8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Points",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Lenœ
*Points/Len/aavar"tsdb/points.go(ƒ0Ã@Rã{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Points",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Len/aÉ
*Points/LessLessfunc"tsdb/points.go(Ù0¬8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Points",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Less—
*Points/Less/aavar"tsdb/points.go(˙0Ç@Rã{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Points",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Less/aÜ
*Points/Less/iivar"tsdb/points.go(â0ë@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Less/iÜ
*Points/Less/jjvar"tsdb/points.go(â0ë@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Less/j˘
*Points/SwapSwapfunc"tsdb/points.go(√0Ç8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Points",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Swap—
*Points/Swap/aavar"tsdb/points.go(…0—@Rã{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Points",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Swap/aÜ
*Points/Swap/iivar"tsdb/points.go(ÿ0‡@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Swap/iÜ
*Points/Swap/jjvar"tsdb/points.go(ÿ0‡@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Points/Swap/jÈ
*Process$executor17601Processfunc"tsdb/executor.go(¡â0Ìâ@Rà{
        "PkgName": "tsdb",
        "Receiver": "interface{Process(input []*MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue}",
        "TypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Process$executor17601˝
*ProcessAggregateDerivativeProcessAggregateDerivativefunc"tsdb/executor.go(∆≈0Ò—8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(results [][]interface{}, isNonNegative bool, interval time.Duration) [][]interface{}",
        "UnderlyingTypeString": "func(results [][]interface{}, isNonNegative bool, interval time.Duration) [][]interface{}",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z\

text/plainNProcessAggregateDerivative returns the derivatives of an aggregate result set
ä./ProcessAggregateDerivativeÓ
6*4ProcessAggregateDerivative/$executor4/$executor0/curcurvar"tsdb/executor.go(ÌÕ0˛Õ@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./ProcessAggregateDerivative/$executor4/$executor0/curÂ
7*5ProcessAggregateDerivative/$executor4/$executor0/diffdiffvar"tsdb/executor.go(ÛŒ0´œ@R»{
        "PkgName": "tsdb",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./ProcessAggregateDerivative/$executor4/$executor0/diffÚ
:*8ProcessAggregateDerivative/$executor4/$executor0/elapsedelapsedvar"tsdb/executor.go(∫Œ0Œ@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./ProcessAggregateDerivative/$executor4/$executor0/elapsedÒ
7*5ProcessAggregateDerivative/$executor4/$executor0/prevprevvar"tsdb/executor.go(÷Õ0ÍÕ@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./ProcessAggregateDerivative/$executor4/$executor0/prevÓ
6*4ProcessAggregateDerivative/$executor4/$executor0/valvalvar"tsdb/executor.go(Ä—0Æ—@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./ProcessAggregateDerivative/$executor4/$executor0/valË
8*6ProcessAggregateDerivative/$executor4/$executor0/valuevaluevar"tsdb/executor.go(Æœ0∫œ@R»{
        "PkgName": "tsdb",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./ProcessAggregateDerivative/$executor4/$executor0/valueæ
)*'ProcessAggregateDerivative/$executor4/iivar"tsdb/executor.go(¥Õ0∫Õ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./ProcessAggregateDerivative/$executor4/iﬁ
(*&ProcessAggregateDerivative/derivativesderivativesvar"tsdb/executor.go(éÕ0ÆÕ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./ProcessAggregateDerivative/derivatives…
%*#ProcessAggregateDerivative/intervalintervalvar"tsdb/executor.go(ì∆0©∆@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./ProcessAggregateDerivative/intervalŒ
**(ProcessAggregateDerivative/isNonNegativeisNonNegativevar"tsdb/executor.go(ˇ≈0ë∆@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./ProcessAggregateDerivative/isNonNegative“
$*"ProcessAggregateDerivative/resultsresultsvar"tsdb/executor.go(Ê≈0˝≈@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ProcessAggregateDerivative/results¬
&*$ProcessAggregateDerivative/validType	validTypevar"tsdb/executor.go(ó 0© @R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./ProcessAggregateDerivative/validTypeÑ
*QueryExecutorQueryExecutortype"tsdb/query_executor.go(»0É8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "struct{MetaStore interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}; MetaStatementExecutor interface{ExecuteStatement(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result}; ShardMapper interface{CreateMapper(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)}; Logger *log.Logger; Store *github.com/influxdb/influxdb/tsdb.Store}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z§

text/plainïQueryExecutor executes every statement in an influxdb Query. It is responsible for
coordinating between the local tsdb.Store, the meta.Store, and the other nodes in
the cluster to run the query against their local tsdb.Stores. There should be one executor
in a running process
ä./QueryExecutorÏ
*QueryExecutor/Authorize	Authorizefunc"tsdb/query_executor.go(√0˝8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(u *github.com/influxdb/influxdb/meta.UserInfo, query *github.com/influxdb/influxdb/influxql.Query, database string) error",
        "UnderlyingTypeString": "func(u *github.com/influxdb/influxdb/meta.UserInfo, query *github.com/influxdb/influxdb/influxql.Query, database string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÎ

text/plain‹Authorize user u to execute query q on database.
database can be "" for queries that do not require a database.
If no user is provided it will return an error unless the query's first statement is to create
a root user.
ä./QueryExecutor/Authorizeü
`*^QueryExecutor/Authorize/$query_executor0/$query_executor0/$query_executor0/$query_executor0/cucuvar"tsdb/query_executor.go(Æ0Î@RÆ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.CreateUserStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.CreateUserStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/Authorize/$query_executor0/$query_executor0/$query_executor0/$query_executor0/cu≥
`*^QueryExecutor/Authorize/$query_executor0/$query_executor0/$query_executor0/$query_executor0/okokvar"tsdb/query_executor.go(Æ0Î@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/Authorize/$query_executor0/$query_executor0/$query_executor0/$query_executor0/ok‘
0*.QueryExecutor/Authorize/$query_executor0/countcountvar"tsdb/query_executor.go(œ0Ù@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/Authorize/$query_executor0/countÊ
.*,QueryExecutor/Authorize/$query_executor0/errerrvar"tsdb/query_executor.go(œ0Ù@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/Authorize/$query_executor0/errÅ
Ñ*ÅQueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/msgmsgvar"tsdb/query_executor.go(‹0†@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÉ./QueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/msgÅ
Ñ*ÅQueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/msgmsgvar"tsdb/query_executor.go(–0ß@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÉ./QueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/msg∑
`*^QueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/dbdbvar"tsdb/query_executor.go(Ò0˝@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/$query_executor0/dbò
N*LQueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/ppvar"tsdb/query_executor.go(√0˝@RÃ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.ExecutionPrivilege",
        "UnderlyingTypeString": "struct{Admin bool; Name string; Privilege github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äN./QueryExecutor/Authorize/$query_executor3/$query_executor0/$query_executor0/p„
A*?QueryExecutor/Authorize/$query_executor3/$query_executor0/privsprivsvar"tsdb/query_executor.go(–0Ú@R≠{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.ExecutionPrivileges",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.ExecutionPrivilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./QueryExecutor/Authorize/$query_executor3/$query_executor0/privsá
/*-QueryExecutor/Authorize/$query_executor3/stmtstmtvar"tsdb/query_executor.go(√0˝@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/Authorize/$query_executor3/stmt¡
"* QueryExecutor/Authorize/databasedatabasevar"tsdb/query_executor.go(é0ù@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./QueryExecutor/Authorize/databaseÄ
*QueryExecutor/Authorize/qqvar"tsdb/query_executor.go(…0Ÿ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/Authorize/qÑ
*QueryExecutor/Authorize/queryqueryvar"tsdb/query_executor.go(˜0å@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/Authorize/queryˆ
*QueryExecutor/Authorize/uuvar"tsdb/query_executor.go(Â0ı@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/Authorize/uï
*QueryExecutor/ExecuteQueryExecuteQueryfunc"tsdb/query_executor.go( 0⁄48RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(query *github.com/influxdb/influxdb/influxql.Query, database string, chunkSize int) (\u003c-chan *github.com/influxdb/influxdb/influxql.Result, error)",
        "UnderlyingTypeString": "func(query *github.com/influxdb/influxdb/influxql.Query, database string, chunkSize int) (\u003c-chan *github.com/influxdb/influxdb/influxql.Result, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z—

text/plain¬ExecuteQuery executes an InfluxQL query against the server.
It sends results down the passed in chan and closes it when done. It will close the chan
on the first statement that throws an error.
ä./QueryExecutor/ExecuteQueryÄ
Ü*ÉQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/okokvar"tsdb/query_executor.go(ø"0Í"@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÖ./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/okÑ
Ö*ÇQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/ssvar"tsdb/query_executor.go(ø"0Í"@R…{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.HasDefaultDatabase",
        "UnderlyingTypeString": "interface{DefaultDatabase() string; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÑ./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/s“
d*bQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor1/errerrvar"tsdb/query_executor.go(»#0Ù#@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äd./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor1/errô
á*ÑQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/$query_executor0/errerrvar"tsdb/query_executor.go(£%0ﬂ%@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÜ./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/$query_executor0/errô
á*ÑQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor4/$query_executor0/errerrvar"tsdb/query_executor.go(Œ)0û*@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÜ./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor4/$query_executor0/err∞
Y*WQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/defaultDB	defaultDBvar"tsdb/query_executor.go(ä"0ü"@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äY./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/defaultDBÏ
S*QQueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/resresvar"tsdb/query_executor.go(ƒ$0ÿ$@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./QueryExecutor/ExecuteQuery/$query_executor0/$query_executor0/$query_executor0/resŒ
/*-QueryExecutor/ExecuteQuery/$query_executor0/iivar"tsdb/query_executor.go(¯0˝@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/ExecuteQuery/$query_executor0/iç
2*0QueryExecutor/ExecuteQuery/$query_executor0/stmtstmtvar"tsdb/query_executor.go(Ñ 0õ @Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/ExecuteQuery/$query_executor0/stmtƒ
&*$QueryExecutor/ExecuteQuery/chunkSize	chunkSizevar"tsdb/query_executor.go(ó0§@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/ExecuteQuery/chunkSize«
%*#QueryExecutor/ExecuteQuery/databasedatabasevar"tsdb/query_executor.go(Ü0ï@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./QueryExecutor/ExecuteQuery/databaseÜ
*QueryExecutor/ExecuteQuery/qqvar"tsdb/query_executor.go(–0‡@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/ExecuteQuery/qä
"* QueryExecutor/ExecuteQuery/queryqueryvar"tsdb/query_executor.go(Ô0Ñ@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Query",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./QueryExecutor/ExecuteQuery/queryú
$*"QueryExecutor/ExecuteQuery/resultsresultsvar"tsdb/query_executor.go(æ0‰@Rû{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./QueryExecutor/ExecuteQuery/resultsì
*QueryExecutor/LoggerLoggerfield"tsdb/query_executor.go(«
0Ÿ
8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "QueryExecutor",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/Logger„
%*#QueryExecutor/MetaStatementExecutorMetaStatementExecutorfield"tsdb/query_executor.go(Ã0≠	8Rò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "QueryExecutor",
        "TypeString": "interface{ExecuteStatement(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result}",
        "UnderlyingTypeString": "interface{ExecuteStatement(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z9

text/plain+Executes statements relating to meta data.
ä%./QueryExecutor/MetaStatementExecutor©
*QueryExecutor/MetaStore	MetaStorefield"tsdb/query_executor.go(ß0ö8RÍ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "QueryExecutor",
        "TypeString": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "UnderlyingTypeString": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZQ

text/plainCThe meta store for accessing and updating cluster and schema data.
ä./QueryExecutor/MetaStoreÛ
*QueryExecutor/PlanSelect
PlanSelectfunc"tsdb/query_executor.go(µ50ì@8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Executor, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Executor, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zd

text/plainVPlan creates an execution plan for the given SelectStatement and returns an Executor.
ä./QueryExecutor/PlanSelectû
r*pQueryExecutor/PlanSelect/$query_executor2/$query_executor0/$query_executor2/$query_executor0/$query_executor0/shshvar"tsdb/query_executor.go(µ50ì@@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }är./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/$query_executor2/$query_executor0/$query_executor0/shº
O*MQueryExecutor/PlanSelect/$query_executor2/$query_executor0/$query_executor2/ggvar"tsdb/query_executor.go(µ50ì@@RÓ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/$query_executor2/gä
@*>QueryExecutor/PlanSelect/$query_executor2/$query_executor0/errerrvar"tsdb/query_executor.go(¶;0â<@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/errÕ
?*=QueryExecutor/PlanSelect/$query_executor2/$query_executor0/mmmmvar"tsdb/query_executor.go(…90Ó9@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/mmÒ
?*=QueryExecutor/PlanSelect/$query_executor2/$query_executor0/okokvar"tsdb/query_executor.go(…90Ó9@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/okË
H*FQueryExecutor/PlanSelect/$query_executor2/$query_executor0/shardGroupsshardGroupsvar"tsdb/query_executor.go(¶;0â<@Rû{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./QueryExecutor/PlanSelect/$query_executor2/$query_executor0/shardGroupsµ
/*-QueryExecutor/PlanSelect/$query_executor2/srcsrcvar"tsdb/query_executor.go(µ50ì@@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/PlanSelect/$query_executor2/srcä
@*>QueryExecutor/PlanSelect/$query_executor3/$query_executor0/errerrvar"tsdb/query_executor.go(ˆ=0Ø>@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/PlanSelect/$query_executor3/$query_executor0/err¥
>*<QueryExecutor/PlanSelect/$query_executor3/$query_executor0/mmvar"tsdb/query_executor.go(ˆ=0Ø>@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./QueryExecutor/PlanSelect/$query_executor3/$query_executor0/mñ
.*,QueryExecutor/PlanSelect/$query_executor3/shshvar"tsdb/query_executor.go(µ50ì@@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/PlanSelect/$query_executor3/sh¿
$*"QueryExecutor/PlanSelect/chunkSize	chunkSizevar"tsdb/query_executor.go(¯50Ö6@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./QueryExecutor/PlanSelect/chunkSizeô
#*!QueryExecutor/PlanSelect/executorexecutorvar"tsdb/query_executor.go(ƒ?0˚?@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./QueryExecutor/PlanSelect/executorà
"* QueryExecutor/PlanSelect/mappersmappersvar"tsdb/query_executor.go(¡=0÷=@Ré{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./QueryExecutor/PlanSelect/mappersÇ
*QueryExecutor/PlanSelect/qqvar"tsdb/query_executor.go(ª50À5@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/PlanSelect/qù
!*QueryExecutor/PlanSelect/shardsshardsvar"tsdb/query_executor.go(ú60¡6@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./QueryExecutor/PlanSelect/shardsó
*QueryExecutor/PlanSelect/stmtstmtvar"tsdb/query_executor.go(ÿ50ˆ5@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/PlanSelect/stmtÂ
*QueryExecutor/PlanSelect/tmaxtmaxvar"tsdb/query_executor.go(ñ80∆8@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/PlanSelect/tmaxÂ
*QueryExecutor/PlanSelect/tmintminvar"tsdb/query_executor.go(ñ80∆8@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/PlanSelect/tminŸ
$*"QueryExecutor/PlanShowMeasurementsPlanShowMeasurementsfunc"tsdb/query_executor.go(ﬂÇ0Êà8R’{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, database string, chunkSize int) (github.com/influxdb/influxdb/tsdb.Executor, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, database string, chunkSize int) (github.com/influxdb/influxdb/tsdb.Executor, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zt

text/plainfPlanShowMeasurements creates an execution plan for the given SelectStatement and returns an Executor.
ä$./QueryExecutor/PlanShowMeasurements†
J*HQueryExecutor/PlanShowMeasurements/$query_executor1/$query_executor0/errerrvar"tsdb/query_executor.go(øÜ0¯Ü@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./QueryExecutor/PlanShowMeasurements/$query_executor1/$query_executor0/err 
H*FQueryExecutor/PlanShowMeasurements/$query_executor1/$query_executor0/mmvar"tsdb/query_executor.go(øÜ0¯Ü@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./QueryExecutor/PlanShowMeasurements/$query_executor1/$query_executor0/m¨
8*6QueryExecutor/PlanShowMeasurements/$query_executor1/shshvar"tsdb/query_executor.go(ﬂÇ0Êà@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./QueryExecutor/PlanShowMeasurements/$query_executor1/sh÷
.*,QueryExecutor/PlanShowMeasurements/chunkSize	chunkSizevar"tsdb/query_executor.go(«É0‘É@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/PlanShowMeasurements/chunkSizeŸ
-*+QueryExecutor/PlanShowMeasurements/databasedatabasevar"tsdb/query_executor.go(∂É0≈É@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/PlanShowMeasurements/databaseô
'*%QueryExecutor/PlanShowMeasurements/didivar"tsdb/query_executor.go(ÜÑ0ØÑ@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./QueryExecutor/PlanShowMeasurements/di‹
(*&QueryExecutor/PlanShowMeasurements/errerrvar"tsdb/query_executor.go(ÜÑ0ØÑ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./QueryExecutor/PlanShowMeasurements/err√
-*+QueryExecutor/PlanShowMeasurements/executorexecutorvar"tsdb/query_executor.go(çà0Œà@R∞{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/PlanShowMeasurements/executorû
,**QueryExecutor/PlanShowMeasurements/mappersmappersvar"tsdb/query_executor.go(äÜ0üÜ@Ré{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./QueryExecutor/PlanShowMeasurements/mappersò
&*$QueryExecutor/PlanShowMeasurements/qqvar"tsdb/query_executor.go(ÂÇ0ıÇ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/PlanShowMeasurements/q°
+*)QueryExecutor/PlanShowMeasurements/shardsshardsvar"tsdb/query_executor.go(»Ö0·Ö@Rî{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./QueryExecutor/PlanShowMeasurements/shards¡
)*'QueryExecutor/PlanShowMeasurements/stmtstmtvar"tsdb/query_executor.go(åÉ0¥É@R∫{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./QueryExecutor/PlanShowMeasurements/stmt∑
*QueryExecutor/ShardMapperShardMapperfield"tsdb/query_executor.go(Õ	0ƒ
8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "QueryExecutor",
        "TypeString": "interface{CreateMapper(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)}",
        "UnderlyingTypeString": "interface{CreateMapper(shard github.com/influxdb/influxdb/meta.ShardInfo, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z'

text/plainMaps shards for queries.
ä./QueryExecutor/ShardMapperÔ
*QueryExecutor/StoreStorefield"tsdb/query_executor.go(ı
0Å8RÍ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "QueryExecutor",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z#

text/plainthe local data store
ä./QueryExecutor/StoreÏ
,**QueryExecutor/executeDropDatabaseStatementexecuteDropDatabaseStatementfunc"tsdb/query_executor.go(ÕT0ŸYRÁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z‡

text/plain—executeDropDatabaseStatement closes all local shards for the database and removes the directory. It then calls to the metastore to remove the database from there.
TODO: make this work in a cluster/distributed
ä,./QueryExecutor/executeDropDatabaseStatement¬
Ñ*ÅQueryExecutor/executeDropDatabaseStatement/$query_executor1/$query_executor0/$query_executor0/$query_executor0/$query_executor0/ssvar"tsdb/query_executor.go(ÕT0ŸY@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÉ./QueryExecutor/executeDropDatabaseStatement/$query_executor1/$query_executor0/$query_executor0/$query_executor0/$query_executor0/s„
b*`QueryExecutor/executeDropDatabaseStatement/$query_executor1/$query_executor0/$query_executor0/sgsgvar"tsdb/query_executor.go(ÕT0ŸY@RÓ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./QueryExecutor/executeDropDatabaseStatement/$query_executor1/$query_executor0/$query_executor0/sgª
@*>QueryExecutor/executeDropDatabaseStatement/$query_executor1/rprpvar"tsdb/query_executor.go(ÕT0ŸY@Rä{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/executeDropDatabaseStatement/$query_executor1/rp™
0*.QueryExecutor/executeDropDatabaseStatement/dbidbivar"tsdb/query_executor.go(ºU0ÁU@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeDropDatabaseStatement/dbiÍ
0*.QueryExecutor/executeDropDatabaseStatement/errerrvar"tsdb/query_executor.go(ºU0ÁU@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeDropDatabaseStatement/err¶
.*,QueryExecutor/executeDropDatabaseStatement/qqvar"tsdb/query_executor.go(”T0„T@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/executeDropDatabaseStatement/qÎ
5*3QueryExecutor/executeDropDatabaseStatement/shardIDsshardIDsvar"tsdb/query_executor.go(˝V0éW@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/executeDropDatabaseStatement/shardIDs«
1*/QueryExecutor/executeDropDatabaseStatement/stmtstmtvar"tsdb/query_executor.go(ÇU0¶U@R≤{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropDatabaseStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropDatabaseStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeDropDatabaseStatement/stmt∆
/*-QueryExecutor/executeDropMeasurementStatementexecuteDropMeasurementStatementfunc"tsdb/query_executor.go(ŸZ0ß_Rè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropMeasurementStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropMeasurementStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zâ

text/plain{executeDropMeasurementStatement removes the measurement and all series data from the local store for the given measurement
ä/./QueryExecutor/executeDropMeasurementStatementí
D*BQueryExecutor/executeDropMeasurementStatement/$query_executor2/errerrvar"tsdb/query_executor.go(ú^0‘^@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./QueryExecutor/executeDropMeasurementStatement/$query_executor2/errÌ
8*6QueryExecutor/executeDropMeasurementStatement/databasedatabasevar"tsdb/query_executor.go(∫[0…[@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./QueryExecutor/executeDropMeasurementStatement/databaseØ
2*0QueryExecutor/executeDropMeasurementStatement/dbdbvar"tsdb/query_executor.go(ˆ[0õ\@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeDropMeasurementStatement/db®
1*/QueryExecutor/executeDropMeasurementStatement/mmvar"tsdb/query_executor.go(Õ\0Î\@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeDropMeasurementStatement/m¨
1*/QueryExecutor/executeDropMeasurementStatement/qqvar"tsdb/query_executor.go(ﬂZ0ÔZ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeDropMeasurementStatement/q”
4*2QueryExecutor/executeDropMeasurementStatement/stmtstmtvar"tsdb/query_executor.go(ë[0∏[@R∏{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropMeasurementStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropMeasurementStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeDropMeasurementStatement/stmté
**(QueryExecutor/executeDropSeriesStatementexecuteDropSeriesStatementfunc"tsdb/query_executor.go(â`0µiRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropSeriesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.DropSeriesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zk

text/plain]executeDropSeriesStatement removes all series from the local store that match the drop query
ä*./QueryExecutor/executeDropSeriesStatement∑
`*^QueryExecutor/executeDropSeriesStatement/$query_executor3/$query_executor0/$query_executor1/ididvar"tsdb/query_executor.go(â`0µi@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/executeDropSeriesStatement/$query_executor3/$query_executor0/$query_executor1/idø
P*NQueryExecutor/executeDropSeriesStatement/$query_executor3/$query_executor0/idsidsvar"tsdb/query_executor.go(«d0‘d@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./QueryExecutor/executeDropSeriesStatement/$query_executor3/$query_executor0/ids¿
=*;QueryExecutor/executeDropSeriesStatement/$query_executor3/mmvar"tsdb/query_executor.go(â`0µi@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./QueryExecutor/executeDropSeriesStatement/$query_executor3/mà
?*=QueryExecutor/executeDropSeriesStatement/$query_executor4/errerrvar"tsdb/query_executor.go(Åh0®h@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./QueryExecutor/executeDropSeriesStatement/$query_executor4/err„
3*1QueryExecutor/executeDropSeriesStatement/databasedatabasevar"tsdb/query_executor.go(‡`0Ô`@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./QueryExecutor/executeDropSeriesStatement/database•
-*+QueryExecutor/executeDropSeriesStatement/dbdbvar"tsdb/query_executor.go(úa0¡a@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/executeDropSeriesStatement/dbÊ
.*,QueryExecutor/executeDropSeriesStatement/errerrvar"tsdb/query_executor.go(§b0—b@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/executeDropSeriesStatement/err¡
7*5QueryExecutor/executeDropSeriesStatement/measurementsmeasurementsvar"tsdb/query_executor.go(åc0Ãc@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./QueryExecutor/executeDropSeriesStatement/measurements¢
,**QueryExecutor/executeDropSeriesStatement/qqvar"tsdb/query_executor.go(è`0ü`@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./QueryExecutor/executeDropSeriesStatement/qÌ
5*3QueryExecutor/executeDropSeriesStatement/seriesKeys
seriesKeysvar"tsdb/query_executor.go(ãd0ûd@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/executeDropSeriesStatement/seriesKeysØ
2*0QueryExecutor/executeDropSeriesStatement/sourcessourcesvar"tsdb/query_executor.go(§b0—b@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeDropSeriesStatement/sourcesø
/*-QueryExecutor/executeDropSeriesStatement/stmtstmtvar"tsdb/query_executor.go(º`0ﬁ`@RÆ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropSeriesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropSeriesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeDropSeriesStatement/stmt¥
&*$QueryExecutor/executeSelectStatementexecuteSelectStatementfunc"tsdb/query_executor.go(È@0ØFR√{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(statementID int, stmt *github.com/influxdb/influxdb/influxql.SelectStatement, results chan *github.com/influxdb/influxdb/influxql.Result, chunkSize int) error",
        "UnderlyingTypeString": "func(statementID int, stmt *github.com/influxdb/influxdb/influxql.SelectStatement, results chan *github.com/influxdb/influxdb/influxql.Result, chunkSize int) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z_

text/plainQexecuteSelectStatement plans and executes a select statement against a database.
ä&./QueryExecutor/executeSelectStatement∂
;*9QueryExecutor/executeSelectStatement/$query_executor1/rowrowvar"tsdb/query_executor.go(È@0ØF@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./QueryExecutor/executeSelectStatement/$query_executor1/row©
)*'QueryExecutor/executeSelectStatement/chchvar"tsdb/query_executor.go(˚B0åC@R¶{
        "PkgName": "tsdb",
        "TypeString": "\u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "\u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./QueryExecutor/executeSelectStatement/chÿ
0*.QueryExecutor/executeSelectStatement/chunkSize	chunkSizevar"tsdb/query_executor.go(ËA0ıA@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeSelectStatement/chunkSizeØ
(*&QueryExecutor/executeSelectStatement/eevar"tsdb/query_executor.go(ûB0≈B@RØ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Executor",
        "UnderlyingTypeString": "interface{Execute() \u003c-chan *github.com/influxdb/influxdb/influxql.Row}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./QueryExecutor/executeSelectStatement/eﬁ
**(QueryExecutor/executeSelectStatement/errerrvar"tsdb/query_executor.go(ûB0≈B@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./QueryExecutor/executeSelectStatement/errö
(*&QueryExecutor/executeSelectStatement/qqvar"tsdb/query_executor.go(Ô@0ˇ@@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./QueryExecutor/executeSelectStatement/q›
1*/QueryExecutor/executeSelectStatement/resultSent
resultSentvar"tsdb/query_executor.go(ÌC0ÄD@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeSelectStatement/resultSent∞
.*,QueryExecutor/executeSelectStatement/resultsresultsvar"tsdb/query_executor.go(…A0ÊA@Rû{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/executeSelectStatement/resultsﬁ
2*0QueryExecutor/executeSelectStatement/statementIDstatementIDvar"tsdb/query_executor.go(òA0ßA@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeSelectStatement/statementIDØ
+*)QueryExecutor/executeSelectStatement/stmtstmtvar"tsdb/query_executor.go(©A0«A@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./QueryExecutor/executeSelectStatement/stmtö
/*-QueryExecutor/executeShowDiagnosticsStatementexecuteShowDiagnosticsStatementfunc"tsdb/query_executor.go(‹∆0¶»RÌ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowDiagnosticsStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowDiagnosticsStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeShowDiagnosticsStatementÆ
1*/QueryExecutor/executeShowDiagnosticsStatement/qqvar"tsdb/query_executor.go(‚∆0Ú∆@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeShowDiagnosticsStatement/q’
4*2QueryExecutor/executeShowDiagnosticsStatement/stmtstmtvar"tsdb/query_executor.go(î«0ª«@R∏{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowDiagnosticsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowDiagnosticsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeShowDiagnosticsStatement/stmt≤
-*+QueryExecutor/executeShowFieldKeysStatementexecuteShowFieldKeysStatementfunc"tsdb/query_executor.go(Ã¶0Ä∞Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowFieldKeysStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowFieldKeysStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/executeShowFieldKeysStatementË
s*qQueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/$query_executor0/$query_executor0/vvvar"tsdb/query_executor.go(‘Æ0ÁÆ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äs./QueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/$query_executor0/$query_executor0/vº
b*`QueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/$query_executor0/nnvar"tsdb/query_executor.go(Ã¶0Ä∞@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./QueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/$query_executor0/n™
U*SQueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/namesnamesvar"tsdb/query_executor.go(”≠0Í≠@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äU./QueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/names‚
Q*OQueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/rrvar"tsdb/query_executor.go(æ¨0ã≠@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äQ./QueryExecutor/executeShowFieldKeysStatement/$query_executor3/$query_executor0/r»
@*>QueryExecutor/executeShowFieldKeysStatement/$query_executor3/mmvar"tsdb/query_executor.go(Ã¶0Ä∞@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/executeShowFieldKeysStatement/$query_executor3/mÎ
6*4QueryExecutor/executeShowFieldKeysStatement/databasedatabasevar"tsdb/query_executor.go(©ß0∏ß@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./QueryExecutor/executeShowFieldKeysStatement/database≠
0*.QueryExecutor/executeShowFieldKeysStatement/dbdbvar"tsdb/query_executor.go(ıß0ö®@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeShowFieldKeysStatement/dbÓ
1*/QueryExecutor/executeShowFieldKeysStatement/errerrvar"tsdb/query_executor.go(“ß0€ß@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeShowFieldKeysStatement/err…
:*8QueryExecutor/executeShowFieldKeysStatement/measurementsmeasurementsvar"tsdb/query_executor.go(Â©0•™@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./QueryExecutor/executeShowFieldKeysStatement/measurements™
/*-QueryExecutor/executeShowFieldKeysStatement/qqvar"tsdb/query_executor.go(“¶0‚¶@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeShowFieldKeysStatement/q≥
4*2QueryExecutor/executeShowFieldKeysStatement/resultresultvar"tsdb/query_executor.go(Ò™0ƒ´@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeShowFieldKeysStatement/result∑
5*3QueryExecutor/executeShowFieldKeysStatement/sourcessourcesvar"tsdb/query_executor.go(˝®0™©@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/executeShowFieldKeysStatement/sourcesÕ
2*0QueryExecutor/executeShowFieldKeysStatement/stmtstmtvar"tsdb/query_executor.go(Çß0ßß@R¥{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowFieldKeysStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowFieldKeysStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowFieldKeysStatement/stmt©
0*.QueryExecutor/executeShowMeasurementsStatement executeShowMeasurementsStatementfunc"tsdb/query_executor.go(Ëà0ÁéR˘{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(statementID int, stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, database string, results chan *github.com/influxdb/influxdb/influxql.Result, chunkSize int) error",
        "UnderlyingTypeString": "func(statementID int, stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement, database string, results chan *github.com/influxdb/influxdb/influxql.Result, chunkSize int) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeShowMeasurementsStatementÃ
E*CQueryExecutor/executeShowMeasurementsStatement/$query_executor1/rowrowvar"tsdb/query_executor.go(Ëà0Áé@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./QueryExecutor/executeShowMeasurementsStatement/$query_executor1/rowø
3*1QueryExecutor/executeShowMeasurementsStatement/chchvar"tsdb/query_executor.go(≥ã0ƒã@R¶{
        "PkgName": "tsdb",
        "TypeString": "\u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "\u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./QueryExecutor/executeShowMeasurementsStatement/chÓ
:*8QueryExecutor/executeShowMeasurementsStatement/chunkSize	chunkSizevar"tsdb/query_executor.go(åä0ôä@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./QueryExecutor/executeShowMeasurementsStatement/chunkSizeÒ
9*7QueryExecutor/executeShowMeasurementsStatement/databasedatabasevar"tsdb/query_executor.go(‹â0Îâ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./QueryExecutor/executeShowMeasurementsStatement/database≈
2*0QueryExecutor/executeShowMeasurementsStatement/eevar"tsdb/query_executor.go(¬ä0˝ä@RØ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Executor",
        "UnderlyingTypeString": "interface{Execute() \u003c-chan *github.com/influxdb/influxdb/influxql.Row}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowMeasurementsStatement/eÙ
4*2QueryExecutor/executeShowMeasurementsStatement/errerrvar"tsdb/query_executor.go(¬ä0˝ä@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeShowMeasurementsStatement/err∞
2*0QueryExecutor/executeShowMeasurementsStatement/qqvar"tsdb/query_executor.go(Óà0˛à@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowMeasurementsStatement/qÛ
;*9QueryExecutor/executeShowMeasurementsStatement/resultSent
resultSentvar"tsdb/query_executor.go(•å0∏å@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./QueryExecutor/executeShowMeasurementsStatement/resultSent∆
8*6QueryExecutor/executeShowMeasurementsStatement/resultsresultsvar"tsdb/query_executor.go(Ìâ0ää@Rû{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./QueryExecutor/executeShowMeasurementsStatement/resultsÙ
<*:QueryExecutor/executeShowMeasurementsStatement/statementIDstatementIDvar"tsdb/query_executor.go(°â0∞â@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./QueryExecutor/executeShowMeasurementsStatement/statementIDŸ
5*3QueryExecutor/executeShowMeasurementsStatement/stmtstmtvar"tsdb/query_executor.go(≤â0⁄â@R∫{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/executeShowMeasurementsStatement/stmt°
**(QueryExecutor/executeShowSeriesStatementexecuteShowSeriesStatementfunc"tsdb/query_executor.go(∑i0ÆzRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowSeriesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowSeriesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./QueryExecutor/executeShowSeriesStatementŒ
©*¶QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/$query_executor0/$query_executor0/columncolumnvar"tsdb/query_executor.go(∑i0Æz@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä®./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/$query_executor0/$query_executor0/column∫
ò*ïQueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/$query_executor0/valuesvaluesvar"tsdb/query_executor.go(¬u0Úu@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äó./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/$query_executor0/values˙
É*ÄQueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/okokvar"tsdb/query_executor.go(ûu0∑u@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÇ./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/ok¿
Å*QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/ssvar"tsdb/query_executor.go(ûu0∑u@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÅ./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/$query_executor0/s∑
`*^QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/ididvar"tsdb/query_executor.go(∑i0Æz@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/$query_executor1/idø
P*NQueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/idsidsvar"tsdb/query_executor.go(Ûo0Äp@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/ids⁄
N*LQueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/rrvar"tsdb/query_executor.go(ˇs0√t@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äN./QueryExecutor/executeShowSeriesStatement/$query_executor3/$query_executor0/r¿
=*;QueryExecutor/executeShowSeriesStatement/$query_executor3/mmvar"tsdb/query_executor.go(∑i0Æz@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./QueryExecutor/executeShowSeriesStatement/$query_executor3/m„
3*1QueryExecutor/executeShowSeriesStatement/databasedatabasevar"tsdb/query_executor.go(éj0ùj@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./QueryExecutor/executeShowSeriesStatement/database•
-*+QueryExecutor/executeShowSeriesStatement/dbdbvar"tsdb/query_executor.go( j0Ôj@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/executeShowSeriesStatement/dbÊ
.*,QueryExecutor/executeShowSeriesStatement/errerrvar"tsdb/query_executor.go(“k0ˇk@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/executeShowSeriesStatement/err¡
7*5QueryExecutor/executeShowSeriesStatement/measurementsmeasurementsvar"tsdb/query_executor.go(l0∞m@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./QueryExecutor/executeShowSeriesStatement/measurements¢
,**QueryExecutor/executeShowSeriesStatement/qqvar"tsdb/query_executor.go(Ωi0Õi@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./QueryExecutor/executeShowSeriesStatement/q´
1*/QueryExecutor/executeShowSeriesStatement/resultresultvar"tsdb/query_executor.go(©n0¸n@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeShowSeriesStatement/resultØ
2*0QueryExecutor/executeShowSeriesStatement/sourcessourcesvar"tsdb/query_executor.go(“k0ˇk@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowSeriesStatement/sourcesø
/*-QueryExecutor/executeShowSeriesStatement/stmtstmtvar"tsdb/query_executor.go(Íi0åj@RÆ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowSeriesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowSeriesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeShowSeriesStatement/stmt®
+*)QueryExecutor/executeShowTagKeysStatementexecuteShowTagKeysStatementfunc"tsdb/query_executor.go(Èé0¯òRá{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowTagKeysStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowTagKeysStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./QueryExecutor/executeShowTagKeysStatement‰
q*oQueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/$query_executor0/$query_executor0/vvvar"tsdb/query_executor.go( ñ0›ñ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äq./QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/$query_executor0/$query_executor0/v∏
`*^QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/$query_executor0/kkvar"tsdb/query_executor.go(Èé0¯ò@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/$query_executor0/k£
R*PQueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/keyskeysvar"tsdb/query_executor.go(≠ï0¿ï@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äR./QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/keysﬁ
O*MQueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/rrvar"tsdb/query_executor.go(æó0ùò@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/r∑
T*RQueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/valuesvaluesvar"tsdb/query_executor.go(Ìï0´ñ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./QueryExecutor/executeShowTagKeysStatement/$query_executor3/$query_executor0/valuesƒ
>*<QueryExecutor/executeShowTagKeysStatement/$query_executor3/mmvar"tsdb/query_executor.go(Èé0¯ò@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./QueryExecutor/executeShowTagKeysStatement/$query_executor3/mÁ
4*2QueryExecutor/executeShowTagKeysStatement/databasedatabasevar"tsdb/query_executor.go(¬è0—è@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeShowTagKeysStatement/database©
.*,QueryExecutor/executeShowTagKeysStatement/dbdbvar"tsdb/query_executor.go(˛è0£ê@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../QueryExecutor/executeShowTagKeysStatement/dbÍ
/*-QueryExecutor/executeShowTagKeysStatement/errerrvar"tsdb/query_executor.go(Üë0≥ë@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeShowTagKeysStatement/err≈
8*6QueryExecutor/executeShowTagKeysStatement/measurementsmeasurementsvar"tsdb/query_executor.go(§í0‰í@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./QueryExecutor/executeShowTagKeysStatement/measurements¶
-*+QueryExecutor/executeShowTagKeysStatement/qqvar"tsdb/query_executor.go(Ôé0ˇé@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/executeShowTagKeysStatement/qØ
2*0QueryExecutor/executeShowTagKeysStatement/resultresultvar"tsdb/query_executor.go(∞ì0Éî@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowTagKeysStatement/result≥
3*1QueryExecutor/executeShowTagKeysStatement/sourcessourcesvar"tsdb/query_executor.go(Üë0≥ë@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./QueryExecutor/executeShowTagKeysStatement/sources≈
0*.QueryExecutor/executeShowTagKeysStatement/stmtstmtvar"tsdb/query_executor.go(ùè0¿è@R∞{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowTagKeysStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowTagKeysStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeShowTagKeysStatement/stmt≤
-*+QueryExecutor/executeShowTagValuesStatementexecuteShowTagValuesStatementfunc"tsdb/query_executor.go(˙ò0 ¶Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowTagValuesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowTagValuesStatement, database string) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/executeShowTagValuesStatement›
t*rQueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/okokvar"tsdb/query_executor.go(Ä£0ï£@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ät./QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/$query_executor0/okº
b*`QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/kkvar"tsdb/query_executor.go(˙ò0 ¶@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/kÓ
b*`QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/vvvar"tsdb/query_executor.go(˙ò0 ¶@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/$query_executor1/v«
S*QQueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/idsidsvar"tsdb/query_executor.go(ÿû0Âû@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./QueryExecutor/executeShowTagValuesStatement/$query_executor3/$query_executor0/ids»
@*>QueryExecutor/executeShowTagValuesStatement/$query_executor3/mmvar"tsdb/query_executor.go(˙ò0 ¶@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/executeShowTagValuesStatement/$query_executor3/mË
s*qQueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/$query_executor0/$query_executor0/vvvar"tsdb/query_executor.go(••0∫•@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äs./QueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/$query_executor0/$query_executor0/v¬
d*bQueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/$query_executor0/valvalvar"tsdb/query_executor.go(˙ò0 ¶@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äd./QueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/$query_executor0/val‚
Q*OQueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/rrvar"tsdb/query_executor.go(ç§0⁄§@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äQ./QueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/rß
T*RQueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/valsvalsvar"tsdb/query_executor.go(ﬁ§0Ó§@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./QueryExecutor/executeShowTagValuesStatement/$query_executor4/$query_executor0/vals¯
@*>QueryExecutor/executeShowTagValuesStatement/$query_executor4/kkvar"tsdb/query_executor.go(˙ò0 ¶@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/executeShowTagValuesStatement/$query_executor4/k™
@*>QueryExecutor/executeShowTagValuesStatement/$query_executor4/vvvar"tsdb/query_executor.go(˙ò0 ¶@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./QueryExecutor/executeShowTagValuesStatement/$query_executor4/vÎ
6*4QueryExecutor/executeShowTagValuesStatement/databasedatabasevar"tsdb/query_executor.go(◊ô0Êô@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./QueryExecutor/executeShowTagValuesStatement/database≠
0*.QueryExecutor/executeShowTagValuesStatement/dbdbvar"tsdb/query_executor.go(ìö0∏ö@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./QueryExecutor/executeShowTagValuesStatement/dbÓ
1*/QueryExecutor/executeShowTagValuesStatement/errerrvar"tsdb/query_executor.go(õõ0»õ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./QueryExecutor/executeShowTagValuesStatement/err…
:*8QueryExecutor/executeShowTagValuesStatement/measurementsmeasurementsvar"tsdb/query_executor.go(πú0˘ú@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./QueryExecutor/executeShowTagValuesStatement/measurements™
/*-QueryExecutor/executeShowTagValuesStatement/qqvar"tsdb/query_executor.go(Äô0êô@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./QueryExecutor/executeShowTagValuesStatement/q≥
4*2QueryExecutor/executeShowTagValuesStatement/resultresultvar"tsdb/query_executor.go(≈ù0Öû@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Result",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/executeShowTagValuesStatement/result∑
5*3QueryExecutor/executeShowTagValuesStatement/sourcessourcesvar"tsdb/query_executor.go(õõ0»õ@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/executeShowTagValuesStatement/sourcesÕ
2*0QueryExecutor/executeShowTagValuesStatement/stmtstmtvar"tsdb/query_executor.go(∞ô0’ô@R¥{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowTagValuesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowTagValuesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/executeShowTagValuesStatement/stmtŒ
7*5QueryExecutor/executeShowTagValuesStatement/tagValues	tagValuesvar"tsdb/query_executor.go(àû0Øû@R¶{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./QueryExecutor/executeShowTagValuesStatement/tagValuesÛ
*QueryExecutor/expandSourcesexpandSourcesfunc"tsdb/query_executor.go(¬G0ÙRR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(sources github.com/influxdb/influxdb/influxql.Sources) (github.com/influxdb/influxdb/influxql.Sources, error)",
        "UnderlyingTypeString": "func(sources github.com/influxdb/influxdb/influxql.Sources) (github.com/influxdb/influxdb/influxql.Sources, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zö

text/plainãexpandSources expands regex sources and removes duplicates.
NOTE: sources must be normalized (db and rp set) before calling this function.
ä./QueryExecutor/expandSourceså
â*ÜQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/namenamevar"tsdb/query_executor.go(˚J0èK@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äà./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/name§
ò*ïQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/$query_executor0/okokvar"tsdb/query_executor.go(≈O0◊O@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äó./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/$query_executor0/okﬁ
á*ÑQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/m2m2var"tsdb/query_executor.go(ïN0§O@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÜ./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/m2å
â*ÜQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/namenamevar"tsdb/query_executor.go(™O0ΩO@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äà./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/$query_executor0/nameÆ
t*rQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/mmvar"tsdb/query_executor.go(¬G0ÙR@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ät./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor2/mì
d*bQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/dbdbvar"tsdb/query_executor.go(ıK0ûL@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äd./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/dbØ
n*lQueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/measurementsmeasurementsvar"tsdb/query_executor.go(çM0¬M@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }än./QueryExecutor/expandSources/$query_executor0/$query_executor0/$query_executor0/$query_executor0/measurementsƒ
5*3QueryExecutor/expandSources/$query_executor0/sourcesourcevar"tsdb/query_executor.go(¬G0ÙR@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/expandSources/$query_executor0/sourceﬂ
3*1QueryExecutor/expandSources/$query_executor1/namenamevar"tsdb/query_executor.go(¬G0ÙR@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./QueryExecutor/expandSources/$query_executor1/nameò
&*$QueryExecutor/expandSources/expandedexpandedvar"tsdb/query_executor.go(‚Q0ëR@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/expandSources/expandedƒ
#*!QueryExecutor/expandSources/namesnamesvar"tsdb/query_executor.go(™I0ΩI@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./QueryExecutor/expandSources/namesà
*QueryExecutor/expandSources/qqvar"tsdb/query_executor.go(»G0ÿG@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./QueryExecutor/expandSources/qú
!*QueryExecutor/expandSources/setsetvar"tsdb/query_executor.go(ÖI0®I@R®{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./QueryExecutor/expandSources/setï
%*#QueryExecutor/expandSources/sourcessourcesvar"tsdb/query_executor.go(ËG0ÄH@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./QueryExecutor/expandSources/sources∞
&*$QueryExecutor/filterShowSeriesResultfilterShowSeriesResultfunc"tsdb/query_executor.go(€|0ÙÅRÎ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(limit int, offset int, rows github.com/influxdb/influxdb/influxql.Rows) github.com/influxdb/influxdb/influxql.Rows",
        "UnderlyingTypeString": "func(limit int, offset int, rows github.com/influxdb/influxdb/influxql.Rows) github.com/influxdb/influxdb/influxql.Rows",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z±

text/plain¢filterShowSeriesResult will limit the number of series returned based on the limit and the offset.
Unlike limit and offset on SELECT statements, the limit and offset don't apply to the number of Rows, but
to the number of total Values returned, since each Value represents a unique series.
ä&./QueryExecutor/filterShowSeriesResultª
[*YQueryExecutor/filterShowSeriesResult/$query_executor0/$query_executor0/$query_executor0/vvvar"tsdb/query_executor.go(€|0ÙÅ@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä[./QueryExecutor/filterShowSeriesResult/$query_executor0/$query_executor0/$query_executor0/v¿
V*TQueryExecutor/filterShowSeriesResult/$query_executor0/$query_executor0/currentSeriescurrentSeriesvar"tsdb/query_executor.go(ï~0≤~@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äV./QueryExecutor/filterShowSeriesResult/$query_executor0/$query_executor0/currentSeries±
9*7QueryExecutor/filterShowSeriesResult/$query_executor0/rrvar"tsdb/query_executor.go(€|0ÙÅ@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./QueryExecutor/filterShowSeriesResult/$query_executor0/r∑
5*3QueryExecutor/filterShowSeriesResult/filteredSeriesfilteredSeriesvar"tsdb/query_executor.go(∆}0‚}@Rê{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Rows",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/filterShowSeriesResult/filteredSeriesÃ
,**QueryExecutor/filterShowSeriesResult/limitlimitvar"tsdb/query_executor.go(ä}0õ}@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./QueryExecutor/filterShowSeriesResult/limitœ
-*+QueryExecutor/filterShowSeriesResult/offsetoffsetvar"tsdb/query_executor.go(ä}0õ}@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./QueryExecutor/filterShowSeriesResult/offsetö
(*&QueryExecutor/filterShowSeriesResult/qqvar"tsdb/query_executor.go(·|0Ò|@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./QueryExecutor/filterShowSeriesResult/qô
+*)QueryExecutor/filterShowSeriesResult/rowsrowsvar"tsdb/query_executor.go(ù}0Ø}@Rê{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Rows",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./QueryExecutor/filterShowSeriesResult/rowsﬁ
2*0QueryExecutor/filterShowSeriesResult/seriesCountseriesCountvar"tsdb/query_executor.go(‰}0Ù}@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/filterShowSeriesResult/seriesCountÆ
$*"QueryExecutor/normalizeMeasurementnormalizeMeasurementfunc"tsdb/query_executor.go(Úø0⁄∆R≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(m *github.com/influxdb/influxdb/influxql.Measurement, defaultDatabase string) error",
        "UnderlyingTypeString": "func(m *github.com/influxdb/influxdb/influxql.Measurement, defaultDatabase string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zs

text/plainenormalizeMeasurement inserts the default database or policy into all measurement names,
if required.
ä$./QueryExecutor/normalizeMeasurementÓ
4*2QueryExecutor/normalizeMeasurement/defaultDatabasedefaultDatabasevar"tsdb/query_executor.go(∏¿0Œ¿@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./QueryExecutor/normalizeMeasurement/defaultDatabaseô
'*%QueryExecutor/normalizeMeasurement/didivar"tsdb/query_executor.go(Ω√0Ë√@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./QueryExecutor/normalizeMeasurement/di‹
(*&QueryExecutor/normalizeMeasurement/errerrvar"tsdb/query_executor.go(Ω√0Ë√@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./QueryExecutor/normalizeMeasurement/errú
&*$QueryExecutor/normalizeMeasurement/mmvar"tsdb/query_executor.go(ü¿0∂¿@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/normalizeMeasurement/mò
&*$QueryExecutor/normalizeMeasurement/qqvar"tsdb/query_executor.go(¯ø0à¿@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/normalizeMeasurement/qß
"* QueryExecutor/normalizeStatementnormalizeStatementfunc"tsdb/query_executor.go(∞∏0ÖøRπ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*QueryExecutor",
        "TypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement, defaultDatabase string) (err error)",
        "UnderlyingTypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement, defaultDatabase string) (err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zf

text/plainXnormalizeStatement adds a default database and policy to the measurements in statement.
ä"./QueryExecutor/normalizeStatement∏
W*UQueryExecutor/normalizeStatement/$query_executor0/$query_executor1/$query_executor0/eevar"tsdb/query_executor.go(óª0∆ª@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äW./QueryExecutor/normalizeStatement/$query_executor0/$query_executor1/$query_executor0/e¢
5*3QueryExecutor/normalizeStatement/$query_executor0/nnvar"tsdb/query_executor.go(™∫0π∫@RÜ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Node",
        "UnderlyingTypeString": "interface{String() string; node()}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/normalizeStatement/$query_executor0/n»
h*fQueryExecutor/normalizeStatement/$query_executor2/$query_executor0/$query_executor0/$query_executor0/kkvar"tsdb/query_executor.go(∞∏0Öø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äh./QueryExecutor/normalizeStatement/$query_executor2/$query_executor0/$query_executor0/$query_executor0/k»
h*fQueryExecutor/normalizeStatement/$query_executor2/$query_executor0/$query_executor0/$query_executor0/vvvar"tsdb/query_executor.go(∞∏0Öø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äh./QueryExecutor/normalizeStatement/$query_executor2/$query_executor0/$query_executor0/$query_executor0/v¢
5*3QueryExecutor/normalizeStatement/$query_executor2/nnvar"tsdb/query_executor.go(ùΩ0¨Ω@RÜ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Node",
        "UnderlyingTypeString": "interface{String() string; node()}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./QueryExecutor/normalizeStatement/$query_executor2/nÍ
2*0QueryExecutor/normalizeStatement/defaultDatabasedefaultDatabasevar"tsdb/query_executor.go(Ù∏0äπ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./QueryExecutor/normalizeStatement/defaultDatabaseÿ
&*$QueryExecutor/normalizeStatement/errerrvar"tsdb/query_executor.go(çπ0ñπ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./QueryExecutor/normalizeStatement/errÎ
+*)QueryExecutor/normalizeStatement/prefixesprefixesvar"tsdb/query_executor.go(…π0Ïπ@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./QueryExecutor/normalizeStatement/prefixesî
$*"QueryExecutor/normalizeStatement/qqvar"tsdb/query_executor.go(∂∏0∆∏@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./QueryExecutor/normalizeStatement/q˘
'*%QueryExecutor/normalizeStatement/stmtstmtvar"tsdb/query_executor.go(€∏0Ú∏@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./QueryExecutor/normalizeStatement/stmt¥
*RawQueryDerivativeProcessorRawQueryDerivativeProcessortype"tsdb/executor.go(Ä∞0¬±8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.RawQueryDerivativeProcessor",
        "UnderlyingTypeString": "struct{LastValueFromPreviousChunk *github.com/influxdb/influxdb/tsdb.MapperValue; IsNonNegative bool; DerivativeInterval time.Duration}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./RawQueryDerivativeProcessorŸ
0*.RawQueryDerivativeProcessor/DerivativeIntervalDerivativeIntervalfield"tsdb/executor.go(ò±0¿±8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "RawQueryDerivativeProcessor",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./RawQueryDerivativeProcessor/DerivativeInterval¿
+*)RawQueryDerivativeProcessor/IsNonNegativeIsNonNegativefield"tsdb/executor.go(œ∞0Ó∞8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "RawQueryDerivativeProcessor",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./RawQueryDerivativeProcessor/IsNonNegativeª
8*6RawQueryDerivativeProcessor/LastValueFromPreviousChunkLastValueFromPreviousChunkfield"tsdb/executor.go(¶∞0Õ∞8RÑ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "RawQueryDerivativeProcessor",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./RawQueryDerivativeProcessor/LastValueFromPreviousChunk¸
%*#RawQueryDerivativeProcessor/ProcessProcessfunc"tsdb/executor.go(Åµ0ÁΩ8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*RawQueryDerivativeProcessor",
        "TypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./RawQueryDerivativeProcessor/Process˜
@*>RawQueryDerivativeProcessor/Process/$executor3/$executor0/diffdiffvar"tsdb/executor.go(Ãπ0£∫@R»{
        "PkgName": "tsdb",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./RawQueryDerivativeProcessor/Process/$executor3/$executor0/diff¸
C*ARawQueryDerivativeProcessor/Process/$executor3/$executor0/elapsedelapsedvar"tsdb/executor.go(ß∫0ﬂ∫@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./RawQueryDerivativeProcessor/Process/$executor3/$executor0/elapsedº
=*;RawQueryDerivativeProcessor/Process/$executor3/$executor0/vvvar"tsdb/executor.go(´∏0∏∏@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./RawQueryDerivativeProcessor/Process/$executor3/$executor0/v˙
A*?RawQueryDerivativeProcessor/Process/$executor3/$executor0/valuevaluevar"tsdb/executor.go(„∫0Ô∫@R»{
        "PkgName": "tsdb",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./RawQueryDerivativeProcessor/Process/$executor3/$executor0/value–
2*0RawQueryDerivativeProcessor/Process/$executor3/iivar"tsdb/executor.go(ã∏0ë∏@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./RawQueryDerivativeProcessor/Process/$executor3/i¡
6*4RawQueryDerivativeProcessor/Process/derivativeValuesderivativeValuesvar"tsdb/executor.go(·∑0Ö∏@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./RawQueryDerivativeProcessor/Process/derivativeValues†
+*)RawQueryDerivativeProcessor/Process/inputinputvar"tsdb/executor.go(≤µ0∆µ@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./RawQueryDerivativeProcessor/Process/inputπ
**(RawQueryDerivativeProcessor/Process/rqdprqdpvar"tsdb/executor.go(áµ0®µ@R∂{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.RawQueryDerivativeProcessor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.RawQueryDerivativeProcessor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./RawQueryDerivativeProcessor/Process/rqdpë
(*&RawQueryDerivativeProcessor/canProcess
canProcessfunc"tsdb/executor.go(ƒ±0ˇ¥Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*RawQueryDerivativeProcessor",
        "TypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) bool",
        "UnderlyingTypeString": "func(input []*github.com/influxdb/influxdb/tsdb.MapperValue) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./RawQueryDerivativeProcessor/canProcess¶
.*,RawQueryDerivativeProcessor/canProcess/inputinputvar"tsdb/executor.go(¯±0å≤@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../RawQueryDerivativeProcessor/canProcess/inputø
-*+RawQueryDerivativeProcessor/canProcess/rqdprqdpvar"tsdb/executor.go( ±0Î±@R∂{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.RawQueryDerivativeProcessor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.RawQueryDerivativeProcessor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./RawQueryDerivativeProcessor/canProcess/rqdp⁄
2*0RawQueryDerivativeProcessor/canProcess/validType	validTypevar"tsdb/executor.go(Û≥0Ö¥@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./RawQueryDerivativeProcessor/canProcess/validTypeû
*RegisterEngineRegisterEnginefunc"tsdb/engine.go(ü	0…
8R˘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string, fn github.com/influxdb/influxdb/tsdb.NewEngineFunc)",
        "UnderlyingTypeString": "func(name string, fn github.com/influxdb/influxdb/tsdb.NewEngineFunc)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZM

text/plain?RegisterEngine registers a storage engine initializer by name.
ä./RegisterEngine£
*RegisterEngine/$engine0/okokvar"tsdb/engine.go(ÿ	0ı	@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./RegisterEngine/$engine0/okª
*RegisterEngine/fnfnvar"tsdb/engine.go(¿	0–	@RÏ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.NewEngineFunc",
        "UnderlyingTypeString": "func(path string, walPath string, options github.com/influxdb/influxdb/tsdb.EngineOptions) github.com/influxdb/influxdb/tsdb.Engine",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./RegisterEngine/fnõ
*RegisterEngine/namenamevar"tsdb/engine.go(≥	0æ	@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./RegisterEngine/name÷	
#*!RetentionPolicy$query_executor814RetentionPolicyfunc"tsdb/query_executor.go(Æ0ˇ@R—{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "UnderlyingTypeString": "func(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./RetentionPolicy$query_executor814ˇ
*SelectColumnCountWithOneValueSelectColumnCountWithOneValueconst"tsdb/executor.go(®0…8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zq

text/plaincSince time is always selected, the column count when selecting only a single other value will be 2
ä./SelectColumnCountWithOneValue™
*SelectExecutorSelectExecutortype"tsdb/executor.go(£0ı8R“{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "struct{stmt *github.com/influxdb/influxdb/influxql.SelectStatement; mappers []*github.com/influxdb/influxdb/tsdb.StatefulMapper; chunkSize int; limitedTagSets map[string]struct{}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor–
*SelectExecutor/ExecuteExecutefunc"tsdb/executor.go(‰0†8Rí{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z[

text/plainMExecute begins execution of the query and returns a channel to receive rows.
ä./SelectExecutor/Execute˙
*SelectExecutor/Execute/eevar"tsdb/executor.go(Í0˚@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/Execute/e¸
*SelectExecutor/Execute/outoutvar"tsdb/executor.go(‚0Ñ@Rò{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/Execute/outÌ
*SelectExecutor/chunkSize	chunkSizefield"tsdb/executor.go(à0öRá{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectExecutor",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/chunkSize‡
*SelectExecutor/closeclosefunc"tsdb/executor.go(”|0∫}Rä{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z{

text/plainmClose closes the executor such that all resources are released. Once closed,
an executor may not be re-used.
ä./SelectExecutor/close∏
9*7SelectExecutor/close/$executor0/$executor0/$executor0/mmvar"tsdb/executor.go(”|0∫}@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./SelectExecutor/close/$executor0/$executor0/$executor0/mˆ
*SelectExecutor/close/eevar"tsdb/executor.go(Ÿ|0Í|@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/close/eÍ
!*SelectExecutor/executeAggregateexecuteAggregatefunc"tsdb/executor.go(ËJ0¡lR{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(out chan *github.com/influxdb/influxdb/influxql.Row)",
        "UnderlyingTypeString": "func(out chan *github.com/influxdb/influxdb/influxql.Row)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./SelectExecutor/executeAggregate˙
;*9SelectExecutor/executeAggregate/$executor0/$executor0/errerrvar"tsdb/executor.go(⁄N0çO@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./SelectExecutor/executeAggregate/$executor0/$executor0/err¿
B*@SelectExecutor/executeAggregate/$executor0/$executor0/reduceFunc
reduceFuncvar"tsdb/executor.go(⁄N0çO@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.ReduceFunc",
        "UnderlyingTypeString": "func([]interface{}) interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./SelectExecutor/executeAggregate/$executor0/$executor0/reduceFuncñ
.*,SelectExecutor/executeAggregate/$executor0/ccvar"tsdb/executor.go(ËJ0¡l@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor0/c∆
.*,SelectExecutor/executeAggregate/$executor0/iivar"tsdb/executor.go(ËJ0¡l@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor0/iò
.*,SelectExecutor/executeAggregate/$executor1/ffvar"tsdb/executor.go(ËJ0¡l@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor1/f∆
.*,SelectExecutor/executeAggregate/$executor1/iivar"tsdb/executor.go(ËJ0¡l@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor1/iê
F*DSelectExecutor/executeAggregate/$executor2/$executor0/$executor0/errerrvar"tsdb/executor.go(˚Q0äR@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./SelectExecutor/executeAggregate/$executor2/$executor0/$executor0/err¢
.*,SelectExecutor/executeAggregate/$executor2/mmvar"tsdb/executor.go(ËJ0¡l@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor2/m¯
D*BSelectExecutor/executeAggregate/$executor3/$executor0/$executor0/ttvar"tsdb/executor.go(ËJ0¡l@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeAggregate/$executor3/$executor0/$executor0/t¢
.*,SelectExecutor/executeAggregate/$executor3/mmvar"tsdb/executor.go(ËJ0¡l@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor3/m¢
.*,SelectExecutor/executeAggregate/$executor4/mmvar"tsdb/executor.go(ËJ0¡l@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/$executor4/mŒ
D*BSelectExecutor/executeAggregate/$executor5/$executor0/$executor0/mmvar"tsdb/executor.go(ËJ0¡l@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeAggregate/$executor5/$executor0/$executor0/mû
Z*XSelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/$executor2/iivar"tsdb/executor.go(ËJ0¡l@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äZ./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/$executor2/iÆ
Z*XSelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/$executor2/vvvar"tsdb/executor.go(ËJ0¡l@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äZ./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/$executor2/vç
P*NSelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/okokvar"tsdb/executor.go(„`0˛`@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/ok§
W*USelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/startTime	startTimevar"tsdb/executor.go(æ`0ﬂ`@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äW./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/startTime´
T*RSelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/valuesvaluesvar"tsdb/executor.go(Ça0±a@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/$executor0/values÷
H*FSelectExecutor/executeAggregate/$executor5/$executor0/$executor1/chunkchunkvar"tsdb/executor.go(ËJ0¡l@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./SelectExecutor/executeAggregate/$executor5/$executor0/$executor1/chunkˆ
D*BSelectExecutor/executeAggregate/$executor5/$executor0/$executor2/kkvar"tsdb/executor.go(ËJ0¡l@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeAggregate/$executor5/$executor0/$executor2/kﬂ
n*lSelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/$executor0/reducedVal
reducedValvar"tsdb/executor.go(“g0g@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }än./SelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/$executor0/reducedValÁ
Z*XSelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/ffvar"tsdb/executor.go(ËJ0¡l@Râ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.ReduceFunc",
        "UnderlyingTypeString": "func([]interface{}) interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äZ./SelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/fû
Z*XSelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/jjvar"tsdb/executor.go(ËJ0¡l@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äZ./SelectExecutor/executeAggregate/$executor5/$executor0/$executor3/$executor0/$executor0/jÚ
D*BSelectExecutor/executeAggregate/$executor5/$executor0/$executor3/iivar"tsdb/executor.go(ËJ0¡l@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeAggregate/$executor5/$executor0/$executor3/iˆ
D*BSelectExecutor/executeAggregate/$executor5/$executor0/$executor3/ttvar"tsdb/executor.go(ËJ0¡l@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeAggregate/$executor5/$executor0/$executor3/tö
?*=SelectExecutor/executeAggregate/$executor5/$executor0/bucketsbucketsvar"tsdb/executor.go(Î^0ë_@RÏ{
        "PkgName": "tsdb",
        "TypeString": "map[int64][][]interface{}",
        "UnderlyingTypeString": "map[int64][][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./SelectExecutor/executeAggregate/$executor5/$executor0/buckets«
>*<SelectExecutor/executeAggregate/$executor5/$executor0/chunkschunksvar"tsdb/executor.go(®X0√X@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeAggregate/$executor5/$executor0/chunks„
;*9SelectExecutor/executeAggregate/$executor5/$executor0/rowrowvar"tsdb/executor.go(ö^0´^@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z1

text/plain#Prep a row, ready for kicking out.
ä;./SelectExecutor/executeAggregate/$executor5/$executor0/rowì
=*;SelectExecutor/executeAggregate/$executor5/$executor0/tMinstMinsvar"tsdb/executor.go(÷d0˛d@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.int64arr",
        "UnderlyingTypeString": "[]int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./SelectExecutor/executeAggregate/$executor5/$executor0/tMinsÒ
>*<SelectExecutor/executeAggregate/$executor5/$executor0/tagsettagsetvar"tsdb/executor.go(áX0•X@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeAggregate/$executor5/$executor0/tagsetÉ
>*<SelectExecutor/executeAggregate/$executor5/$executor0/valuesvaluesvar"tsdb/executor.go(”e0˛e@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeAggregate/$executor5/$executor0/valuesü
,**SelectExecutor/executeAggregate/aggregates
aggregatesvar"tsdb/executor.go(÷M0˙M@Rî{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectExecutor/executeAggregate/aggregatesâ
.*,SelectExecutor/executeAggregate/availTagSetsavailTagSetsvar"tsdb/executor.go(¨S0 S@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/executeAggregate/availTagSetsÿ
-*+SelectExecutor/executeAggregate/columnNamescolumnNamesvar"tsdb/executor.go(ØP0‚P@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectExecutor/executeAggregate/columnNameså
#*!SelectExecutor/executeAggregate/eevar"tsdb/executor.go(ÓJ0ˇJ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectExecutor/executeAggregate/eÄ
%*#SelectExecutor/executeAggregate/errerrvar"tsdb/executor.go(÷T0ﬂT@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z0

text/plain"Prime each mapper's chunk buffer.
ä%./SelectExecutor/executeAggregate/erré
%*#SelectExecutor/executeAggregate/outoutvar"tsdb/executor.go(íK0®K@Rò{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./SelectExecutor/executeAggregate/out¨
-*+SelectExecutor/executeAggregate/reduceFuncsreduceFuncsvar"tsdb/executor.go(¸M0∑N@Rû{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/influxql.ReduceFunc",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.ReduceFunc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectExecutor/executeAggregate/reduceFuncsÿ
*SelectExecutor/executeRaw
executeRawfunc"tsdb/executor.go(ù 0ÊJR{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(out chan *github.com/influxdb/influxdb/influxql.Row)",
        "UnderlyingTypeString": "func(out chan *github.com/influxdb/influxdb/influxql.Row)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/executeRawÑ
@*>SelectExecutor/executeRaw/$executor0/$executor0/$executor0/errerrvar"tsdb/executor.go(Ù!0É"@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./SelectExecutor/executeRaw/$executor0/$executor0/$executor0/errñ
(*&SelectExecutor/executeRaw/$executor0/mmvar"tsdb/executor.go(ù 0ÊJ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectExecutor/executeRaw/$executor0/m¬
>*<SelectExecutor/executeRaw/$executor1/$executor0/$executor0/mmvar"tsdb/executor.go(ù 0ÊJ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeRaw/$executor1/$executor0/$executor0/mã
4*2SelectExecutor/executeRaw/$executor1/$executor0/sfsfvar"tsdb/executor.go(ª#0œ#@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./SelectExecutor/executeRaw/$executor1/$executor0/sf·
¶*£SelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/$executor0/$executor0/fieldfieldvar"tsdb/executor.go(”.0ù/@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä•./SelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/$executor0/$executor0/fieldô
ó*îSelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/$executor0/iivar"tsdb/executor.go(ù 0ÊJ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äñ./SelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/$executor0/iû
ì*êSelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/fieldKeyfieldKeyvar"tsdb/executor.go(˜-0ú.@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äí./SelectExecutor/executeRaw/$executor2/$executor0/$executor0/$executor0/$executor1/$executor0/$executor0/$executor0/$executor2/$executor0/fieldKey¬
>*<SelectExecutor/executeRaw/$executor2/$executor0/$executor0/mmvar"tsdb/executor.go(ù 0ÊJ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeRaw/$executor2/$executor0/$executor0/mí
T*RSelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/$executor2/iivar"tsdb/executor.go(ù 0ÊJ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./SelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/$executor2/iÎ
U*SSelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/$executor2/momovar"tsdb/executor.go(ù 0ÊJ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äU./SelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/$executor2/moÇ
K*ISelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/indindvar"tsdb/executor.go(õ;0Ω;@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äK./SelectExecutor/executeRaw/$executor2/$executor0/$executor3/$executor0/ind¬
>*<SelectExecutor/executeRaw/$executor2/$executor0/$executor3/mmvar"tsdb/executor.go(ù 0ÊJ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./SelectExecutor/executeRaw/$executor2/$executor0/$executor3/mö
K*ISelectExecutor/executeRaw/$executor2/$executor0/$executor5/$executor0/errerrvar"tsdb/executor.go(æF0ÈF@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äK./SelectExecutor/executeRaw/$executor2/$executor0/$executor5/$executor0/errù
P*NSelectExecutor/executeRaw/$executor2/$executor0/$executor5/$executor0/intervalintervalvar"tsdb/executor.go(æF0ÈF@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./SelectExecutor/executeRaw/$executor2/$executor0/$executor5/$executor0/interval˙
D*BSelectExecutor/executeRaw/$executor2/$executor0/$executor6/limitedlimitedvar"tsdb/executor.go(ìI0¡I@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectExecutor/executeRaw/$executor2/$executor0/$executor6/limitedµ
?*=SelectExecutor/executeRaw/$executor2/$executor0/chunkedOutputchunkedOutputvar"tsdb/executor.go(ã80¶8@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zg

text/plainYNow empty out all the chunks up to the min time. Create new output struct for this data.
ä?./SelectExecutor/executeRaw/$executor2/$executor0/chunkedOutputÊ
9*7SelectExecutor/executeRaw/$executor2/$executor0/minTimeminTimevar"tsdb/executor.go(¸60•7@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./SelectExecutor/executeRaw/$executor2/$executor0/minTimeÂ
8*6SelectExecutor/executeRaw/$executor2/$executor0/tagsettagsetvar"tsdb/executor.go(õ40π4@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./SelectExecutor/executeRaw/$executor2/$executor0/tagsetà
'*%SelectExecutor/executeRaw/aliasFieldsaliasFieldsvar"tsdb/executor.go(˚"0ù#@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,Get the distinct fields across all mappers.
ä'./SelectExecutor/executeRaw/aliasFields≈
&*$SelectExecutor/executeRaw/currTagset
currTagsetvar"tsdb/executor.go(˜%0à&@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./SelectExecutor/executeRaw/currTagsetÄ
*SelectExecutor/executeRaw/eevar"tsdb/executor.go(£ 0¥ @Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/executeRaw/e˙
*SelectExecutor/executeRaw/errerrvar"tsdb/executor.go(ª&0ƒ&@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z6

text/plain(Keep looping until all mappers drained.
ä./SelectExecutor/executeRaw/errÇ
*SelectExecutor/executeRaw/outoutvar"tsdb/executor.go(¡ 0◊ @Rò{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/executeRaw/out‘
%*#SelectExecutor/executeRaw/rowWriter	rowWritervar"tsdb/executor.go(÷%0Ò%@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z6

text/plain(Used to read ahead chunks from mappers.
ä%./SelectExecutor/executeRaw/rowWriterã
(*&SelectExecutor/executeRaw/selectFieldsselectFieldsvar"tsdb/executor.go(˚"0ù#@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,Get the distinct fields across all mappers.
ä(./SelectExecutor/executeRaw/selectFieldsÕ
*SelectExecutor/limitTagSetlimitTagSetfunc"tsdb/executor.go(Ω0õ R§{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(tagset string)",
        "UnderlyingTypeString": "func(tagset string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z<

text/plain.limitTagSet marks the given taset as LIMITed.
ä./SelectExecutor/limitTagSetÇ
*SelectExecutor/limitTagSet/eevar"tsdb/executor.go(√0‘@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/limitTagSet/eª
#*!SelectExecutor/limitTagSet/tagsettagsetvar"tsdb/executor.go(‚0Ô@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectExecutor/limitTagSet/tagsetú
*SelectExecutor/limitedTagSetslimitedTagSetsfield"tsdb/executor.go(ú0æRß{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectExecutor",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/limitedTagSets«
*SelectExecutor/mappersmappersfield"tsdb/executor.go(Ê0ÜRÁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectExecutor",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/mappersÏ
*SelectExecutor/mappersDrainedmappersDrainedfunc"tsdb/executor.go(˘0ÄRî{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zb

text/plainTmappersDrained returns whether all the executors Mappers have been drained of data.
ä./SelectExecutor/mappersDrainedû
,**SelectExecutor/mappersDrained/$executor0/mmvar"tsdb/executor.go(˘0Ä@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectExecutor/mappersDrained/$executor0/mà
!*SelectExecutor/mappersDrained/eevar"tsdb/executor.go(ˇ0ê@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./SelectExecutor/mappersDrained/e•
%*#SelectExecutor/nextMapperLowestTimenextMapperLowestTimefunc"tsdb/executor.go(‹0ÀR∞{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(tagset string) int64",
        "UnderlyingTypeString": "func(tagset string) int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zm

text/plain_nextMapperLowestTime returns the lowest minimum time across all Mappers, for the given tagset.
ä%./SelectExecutor/nextMapperLowestTimeî
S*QSelectExecutor/nextMapperLowestTime/$executor0/$executor0/$executor0/$executor0/ttvar"tsdb/executor.go( 0â@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./SelectExecutor/nextMapperLowestTime/$executor0/$executor0/$executor0/$executor0/t™
2*0SelectExecutor/nextMapperLowestTime/$executor0/mmvar"tsdb/executor.go(‹0À@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectExecutor/nextMapperLowestTime/$executor0/mî
'*%SelectExecutor/nextMapperLowestTime/eevar"tsdb/executor.go(‚0Û@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./SelectExecutor/nextMapperLowestTime/eŒ
-*+SelectExecutor/nextMapperLowestTime/minTimeminTimevar"tsdb/executor.go(¢0¡@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectExecutor/nextMapperLowestTime/minTimeÕ
,**SelectExecutor/nextMapperLowestTime/tagsettagsetvar"tsdb/executor.go(ä0ó@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectExecutor/nextMapperLowestTime/tagset
!*SelectExecutor/nextMapperTagSetnextMapperTagSetfunc"tsdb/executor.go(”0¯Rò{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z\

text/plainNnextMapperTagset returns the alphabetically lowest tagset across all Mappers.
ä!./SelectExecutor/nextMapperTagSet¢
.*,SelectExecutor/nextMapperTagSet/$executor0/mmvar"tsdb/executor.go(”0¯@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/nextMapperTagSet/$executor0/må
#*!SelectExecutor/nextMapperTagSet/eevar"tsdb/executor.go(Ÿ0Í@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectExecutor/nextMapperTagSet/e≈
(*&SelectExecutor/nextMapperTagSet/tagsettagsetvar"tsdb/executor.go(â0ï@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectExecutor/nextMapperTagSet/tagsetû
"* SelectExecutor/processDerivativeprocessDerivativefunc"tsdb/executor.go(—w0ﬁ{Rÿ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(results [][]interface{}) [][]interface{}",
        "UnderlyingTypeString": "func(results [][]interface{}) [][]interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZG

text/plain9processDerivative returns the derivatives of the results
ä"./SelectExecutor/processDerivative¸
<*:SelectExecutor/processDerivative/$executor0/$executor0/errerrvar"tsdb/executor.go(ày0≥y@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./SelectExecutor/processDerivative/$executor0/$executor0/errˇ
A*?SelectExecutor/processDerivative/$executor0/$executor0/intervalintervalvar"tsdb/executor.go(ày0≥y@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./SelectExecutor/processDerivative/$executor0/$executor0/intervalÑ
F*DSelectExecutor/processDerivative/$executor0/$executor0/isNonNegativeisNonNegativevar"tsdb/executor.go(∑z0É{@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./SelectExecutor/processDerivative/$executor0/$executor0/isNonNegativeé
$*"SelectExecutor/processDerivative/eevar"tsdb/executor.go(◊w0Ëw@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./SelectExecutor/processDerivative/e‹
**(SelectExecutor/processDerivative/resultsresultsvar"tsdb/executor.go(¸w0ìx@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./SelectExecutor/processDerivative/resultsÍ
*SelectExecutor/processFillprocessFillfunc"tsdb/executor.go(ﬁm0ìwRÿ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(results [][]interface{}) [][]interface{}",
        "UnderlyingTypeString": "func(results [][]interface{}) [][]interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z§

text/plainïprocessFill will take the results and return new results (or the same if no fill modifications are needed)
with whatever fill options the query has.
ä./SelectExecutor/processFillî
U*SSelectExecutor/processFill/$executor1/$executor0/$executor0/$executor0/$executor0/jjvar"tsdb/executor.go(≤r0∏r@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äU./SelectExecutor/processFill/$executor1/$executor0/$executor0/$executor0/$executor0/jè
O*MSelectExecutor/processFill/$executor1/$executor0/$executor0/$executor0/hasNilhasNilvar"tsdb/executor.go(„q0Úq@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äO./SelectExecutor/processFill/$executor1/$executor0/$executor0/$executor0/hasNilÖ
B*@SelectExecutor/processFill/$executor1/$executor0/$executor0/valsvalsvar"tsdb/executor.go(ﬁm0ìw@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./SelectExecutor/processFill/$executor1/$executor0/$executor0/valsÖ
=*;SelectExecutor/processFill/$executor1/$executor0/newResults
newResultsvar"tsdb/executor.go(äq0æq@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./SelectExecutor/processFill/$executor1/$executor0/newResultsË
?*=SelectExecutor/processFill/$executor2/$executor0/$executor0/jjvar"tsdb/executor.go(çu0ìu@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./SelectExecutor/processFill/$executor2/$executor0/$executor0/jº
)*'SelectExecutor/processFill/$executor2/iivar"tsdb/executor.go(ﬁm0ìw@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectExecutor/processFill/$executor2/iŸ
,**SelectExecutor/processFill/$executor2/valsvalsvar"tsdb/executor.go(ﬁm0ìw@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectExecutor/processFill/$executor2/valsÇ
*SelectExecutor/processFill/eevar"tsdb/executor.go(‰m0ım@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/processFill/e–
$*"SelectExecutor/processFill/resultsresultsvar"tsdb/executor.go(Én0ön@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./SelectExecutor/processFill/resultsÂ
!*SelectExecutor/processTopBottomprocessTopBottomfunc"tsdb/executor.go(º}0›ÑRÍ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(results [][]interface{}) ([][]interface{}, error)",
        "UnderlyingTypeString": "func(results [][]interface{}) ([][]interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./SelectExecutor/processTopBottomó
.*,SelectExecutor/processTopBottom/$executor0/ccvar"tsdb/executor.go(º}0›Ñ@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectExecutor/processTopBottom/$executor0/cö
ì*êSelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/tmtmvar"tsdb/executor.go(÷Ç0èÉ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äí./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/tm‰
á*ÑSelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/ppvar"tsdb/executor.go(º}0›Ñ@R™{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.positionPoint",
        "UnderlyingTypeString": "struct{Time int64; Value interface{}; Tags map[string]string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äÜ./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/p—
q*oSelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/okokvar"tsdb/executor.go(ÑÇ0ÆÇ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äq./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/okØ
p*nSelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/vvvar"tsdb/executor.go(ÑÇ0ÆÇ@R£{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.PositionPoints",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.positionPoint",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äp./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/$executor0/$executor0/v†
Z*XSelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/jjvar"tsdb/executor.go(‡Å0ÊÅ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äZ./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/$executor0/$executor0/jê
G*ESelectExecutor/processTopBottom/$executor2/$executor0/$executor0/valsvalsvar"tsdb/executor.go(º}0›Ñ@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./SelectExecutor/processTopBottom/$executor2/$executor0/$executor0/valsü
,**SelectExecutor/processTopBottom/aggregates
aggregatesvar"tsdb/executor.go(õ~0ø~@Rî{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectExecutor/processTopBottom/aggregateså
#*!SelectExecutor/processTopBottom/eevar"tsdb/executor.go(¬}0”}@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectExecutor/processTopBottom/eƒ
)*'SelectExecutor/processTopBottom/processprocessvar"tsdb/executor.go(¡~0—~@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectExecutor/processTopBottom/process⁄
)*'SelectExecutor/processTopBottom/resultsresultsvar"tsdb/executor.go(Ê}0˝}@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectExecutor/processTopBottom/resultsÿ
(*&SelectExecutor/processTopBottom/valuesvaluesvar"tsdb/executor.go(Ó0ÑÄ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectExecutor/processTopBottom/valuesƒ
*SelectExecutor/stmtstmtfield"tsdb/executor.go(º0‰RÌ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectExecutor",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectExecutor/stmtÅ
 *SelectExecutor/tagSetIsLimitedtagSetIsLimitedfunc"tsdb/executor.go(ú0äRÆ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectExecutor",
        "TypeString": "func(tagset string) bool",
        "UnderlyingTypeString": "func(tagset string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLtagSetIsLimited returns whether data for the given tagset has been LIMITed.
ä ./SelectExecutor/tagSetIsLimitedä
"* SelectExecutor/tagSetIsLimited/eevar"tsdb/executor.go(¢0≥@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./SelectExecutor/tagSetIsLimited/e≥
#*!SelectExecutor/tagSetIsLimited/okokvar"tsdb/executor.go(‹0˝@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectExecutor/tagSetIsLimited/ok√
'*%SelectExecutor/tagSetIsLimited/tagsettagsetvar"tsdb/executor.go(≈0“@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./SelectExecutor/tagSetIsLimited/tagset∫
*SelectMapperSelectMappertype"tsdb/mapper.go(í0™8Rï{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "struct{shard *github.com/influxdb/influxdb/tsdb.Shard; remote github.com/influxdb/influxdb/tsdb.Mapper; stmt github.com/influxdb/influxdb/influxql.Statement; selectStmt *github.com/influxdb/influxdb/influxql.SelectStatement; rawMode bool; chunkSize int; tx github.com/influxdb/influxdb/tsdb.Tx; queryTMin int64; queryTMax int64; whereFields []string; selectFields []string; selectTags []string; cursors []*github.com/influxdb/influxdb/tsdb.tagSetCursor; currCursorIndex int; queryTMinWindow int64; intervalSize int64; numIntervals int; currInterval int; mapFuncs []github.com/influxdb/influxdb/influxql.MapFunc; fieldNames []string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZS

text/plainESelectMapper is for retrieving data for a query, from a given shard.
ä./SelectMapper¢
*SelectMapper/CloseClosefunc"tsdb/mapper.go(‹å0ç8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z'

text/plainClose closes the mapper.
ä./SelectMapper/CloseÒ
*SelectMapper/Close/lmlmvar"tsdb/mapper.go(‚å0Úå@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Close/lmí
*SelectMapper/FieldsFieldsfunc"tsdb/mapper.go(©ã0æå8R¥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÅ

text/plainsFields returns any SELECT fields. If this Mapper is not processing a SELECT query
then an empty slice is returned.
ä./SelectMapper/FieldsÛ
*SelectMapper/Fields/lmlmvar"tsdb/mapper.go(Øã0øã@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Fields/lm≠
*SelectMapper/NextChunk	NextChunkfunc"tsdb/mapper.go(±C0ÜH8RÃ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/NextChunk
7*5SelectMapper/NextChunk/$mapper0/$mapper0/$mapper1/errerrvar"tsdb/mapper.go(µE0⁄E@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./SelectMapper/NextChunk/$mapper0/$mapper0/$mapper1/err–
,**SelectMapper/NextChunk/$mapper0/$mapper0/bbvar"tsdb/mapper.go(§D0√D@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./SelectMapper/NextChunk/$mapper0/$mapper0/bﬁ
.*,SelectMapper/NextChunk/$mapper0/$mapper0/errerrvar"tsdb/mapper.go(§D0√D@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../SelectMapper/NextChunk/$mapper0/$mapper0/errõ
-*+SelectMapper/NextChunk/$mapper0/$mapper0/momovar"tsdb/mapper.go(öE0ØE@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectMapper/NextChunk/$mapper0/$mapper0/mo˜
*SelectMapper/NextChunk/lmlmvar"tsdb/mapper.go(∑C0«C@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/NextChunk/lm≠
*SelectMapper/OpenOpenfunc"tsdb/mapper.go(ó0›B8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z+

text/plainOpen opens the local mapper.
ä./SelectMapper/Open‘
)*'SelectMapper/Open/$mapper2/$mapper0/errerrvar"tsdb/mapper.go(¥0›@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/Open/$mapper2/$mapper0/err•
**(SelectMapper/Open/$mapper2/$mapper0/stmtstmtvar"tsdb/mapper.go(¥0›@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./SelectMapper/Open/$mapper2/$mapper0/stmt©
*SelectMapper/Open/$mapper2/okokvar"tsdb/mapper.go(ˇ0´@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/$mapper2/okä
*SelectMapper/Open/$mapper2/ssvar"tsdb/mapper.go(ˇ0´@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/$mapper2/sÊ
2*0SelectMapper/Open/$mapper3/$mapper0/$mapper0/errerrvar"tsdb/mapper.go(™0Ã@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/Open/$mapper3/$mapper0/$mapper0/errÖ
F*DSelectMapper/Open/$mapper3/$mapper0/$mapper2/$mapper1/intervalBottomintervalBottomvar"tsdb/mapper.go(õ#0›#@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./SelectMapper/Open/$mapper3/$mapper0/$mapper2/$mapper1/intervalBottom¸
C*ASelectMapper/Open/$mapper3/$mapper0/$mapper2/$mapper1/intervalTopintervalTopvar"tsdb/mapper.go( "0ó#@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./SelectMapper/Open/$mapper3/$mapper0/$mapper2/$mapper1/intervalTop¬
'*%SelectMapper/Open/$mapper3/$mapper0/ddvar"tsdb/mapper.go(— 0˙ @RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./SelectMapper/Open/$mapper3/$mapper0/d‘
)*'SelectMapper/Open/$mapper3/$mapper0/errerrvar"tsdb/mapper.go(— 0˙ @Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/Open/$mapper3/$mapper0/errÊ
2*0SelectMapper/Open/$mapper4/$mapper0/$mapper2/errerrvar"tsdb/mapper.go(⁄/0Å0@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/Open/$mapper4/$mapper0/$mapper2/errÊ
2*0SelectMapper/Open/$mapper4/$mapper0/$mapper5/errerrvar"tsdb/mapper.go(ﬂ40Ü5@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/Open/$mapper4/$mapper0/$mapper5/err˙
K*ISelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/ccvar"tsdb/mapper.go(90Ü:@Rº{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äK./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/cŸ
L*JSelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/cmcmvar"tsdb/mapper.go(ä;0º;@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/cmµ
T*RSelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/seriesTags
seriesTagsvar"tsdb/mapper.go(÷:0Ö;@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/$mapper0/seriesTagsÏ
B*@SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/iivar"tsdb/mapper.go(ó0›B@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/i¯
D*BSelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/keykeyvar"tsdb/mapper.go(ó0›B@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äD./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper0/key¶
]*[SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/kkvar"tsdb/mapper.go(µ=0‡=@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä]./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/k¸
]*[SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/ppvar"tsdb/mapper.go(é>0Ú>@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä]./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/p®
]*[SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/vvvar"tsdb/mapper.go(µ=0‡=@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä]./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/$mapper0/vê
T*RSelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/iivar"tsdb/mapper.go(å=0í=@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/$mapper1/$mapper0/$mapper0/i»
?*=SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/cursorscursorsvar"tsdb/mapper.go(®90ƒ9@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/cursors∏
;*9SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/tsctscvar"tsdb/mapper.go(Ë;0¥<@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./SelectMapper/Open/$mapper4/$mapper0/$mapper7/$mapper0/tscú
0*.SelectMapper/Open/$mapper4/$mapper0/$mapper7/ttvar"tsdb/mapper.go(ó0›B@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./SelectMapper/Open/$mapper4/$mapper0/$mapper7/t‘
)*'SelectMapper/Open/$mapper4/$mapper0/errerrvar"tsdb/mapper.go(˚00Ø1@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/Open/$mapper4/$mapper0/errå
'*%SelectMapper/Open/$mapper4/$mapper0/mmvar"tsdb/mapper.go(Î-0ì.@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./SelectMapper/Open/$mapper4/$mapper0/mó
(*&SelectMapper/Open/$mapper4/$mapper0/mmmmvar"tsdb/mapper.go(˝,0¢-@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectMapper/Open/$mapper4/$mapper0/mmª
(*&SelectMapper/Open/$mapper4/$mapper0/okokvar"tsdb/mapper.go(˝,0¢-@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectMapper/Open/$mapper4/$mapper0/ok†
-*+SelectMapper/Open/$mapper4/$mapper0/tagSetstagSetsvar"tsdb/mapper.go(÷10Ï1@Rò{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectMapper/Open/$mapper4/$mapper0/tagSetsú
)*'SelectMapper/Open/$mapper4/$mapper0/tsftsfvar"tsdb/mapper.go(˚00Ø1@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetsAndFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetsAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/Open/$mapper4/$mapper0/tsfè
 *SelectMapper/Open/$mapper4/srcsrcvar"tsdb/mapper.go(ó0›B@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./SelectMapper/Open/$mapper4/src∞
*SelectMapper/Open/errerrvar"tsdb/mapper.go(¯0Å@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/errÌ
*SelectMapper/Open/lmlmvar"tsdb/mapper.go(ù0≠@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/lmÎ
 *SelectMapper/Open/selectFieldsselectFieldsvar"tsdb/mapper.go(√+0·+@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./SelectMapper/Open/selectFieldsÂ
*SelectMapper/Open/selectTags
selectTagsvar"tsdb/mapper.go(„+0ˇ+@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/selectTagsπ
*SelectMapper/Open/txtxvar"tsdb/mapper.go(•0Ã@R‰{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tx",
        "UnderlyingTypeString": "interface{Commit() error; Cursor(series string) github.com/influxdb/influxdb/tsdb.Cursor; Rollback() error; Size() int64; io.WriterTo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/txË
*SelectMapper/Open/whereFieldswhereFieldsvar"tsdb/mapper.go(Å,0û,@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/Open/whereFields„
*SelectMapper/SetRemote	SetRemotefunc"tsdb/mapper.go(ﬂB0ØC8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func(m github.com/influxdb/influxdb/tsdb.Mapper) error",
        "UnderlyingTypeString": "func(m github.com/influxdb/influxdb/tsdb.Mapper) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/SetRemote˜
*SelectMapper/SetRemote/lmlmvar"tsdb/mapper.go(ÂB0ıB@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/SetRemote/lm‰
*SelectMapper/SetRemote/mmvar"tsdb/mapper.go(ÅC0âC@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/SetRemote/mÂ
*SelectMapper/TagSetsTagSetsfunc"tsdb/mapper.go(†â0Æä8R¥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZR

text/plainDTagSets returns the list of TagSets for which this mapper has data.
ä./SelectMapper/TagSetsı
*SelectMapper/TagSets/lmlmvar"tsdb/mapper.go(¶â0∂â@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/TagSets/lmÂ
*SelectMapper/chunkSize	chunkSizefield"tsdb/mapper.go(æ0—RÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/chunkSize˜
*SelectMapper/currCursorIndexcurrCursorIndexfield"tsdb/mapper.go(º0œRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/currCursorIndexÓ
*SelectMapper/currIntervalcurrIntervalfield"tsdb/mapper.go(≈0ÿRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/currIntervalª
*SelectMapper/cursorscursorsfield"tsdb/mapper.go(Ç0°R·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/cursors∫
*SelectMapper/expandWildcardsexpandWildcardsfunc"tsdb/mapper.go(Ùx0◊àR˛{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/influxql.SelectStatement, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/influxql.SelectStatement, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z«

text/plain∏expandWildcards returns a new SelectStatement with wildcards expanded
If only a `SELECT *` is present, without a `GROUP BY *`, both tags and fields expand in the SELECT
If a `SELECT *` and a `GROUP BY *` are both present, then only fiels are expanded in the `SELECT` and only
tags are expanded in the `GROUP BY`
ä./SelectMapper/expandWildcards≠
`*^SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/$mapper0/okokvar"tsdb/mapper.go(ñÅ0≠Å@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/$mapper0/okí
P*NSelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper1/namenamevar"tsdb/mapper.go(Ùx0◊à@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper1/name—
r*pSelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper2/$mapper0/$mapper0/$mapper0/$mapper0/okokvar"tsdb/mapper.go(˘É0çÑ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }är./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper2/$mapper0/$mapper0/$mapper0/$mapper0/ok≠
_*]SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper2/$mapper0/$mapper0/ttvar"tsdb/mapper.go(Ùx0◊à@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä_./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper2/$mapper0/$mapper0/t—
r*pSelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper3/$mapper0/$mapper0/$mapper0/$mapper0/okokvar"tsdb/mapper.go(õÜ0≥Ü@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }är./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper3/$mapper0/$mapper0/$mapper0/$mapper0/ok≠
_*]SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper3/$mapper0/$mapper0/ttvar"tsdb/mapper.go(Ùx0◊à@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä_./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/$mapper3/$mapper0/$mapper0/t…
E*CSelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/mmmmvar"tsdb/mapper.go(ä0≤@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/$mapper0/mmº
;*9SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/mmvar"tsdb/mapper.go(Æ~0“~@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/m„
<*:SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/okokvar"tsdb/mapper.go(Æ~0“~@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./SelectMapper/expandWildcards/$mapper1/$mapper0/$mapper0/ok¶
+*)SelectMapper/expandWildcards/$mapper1/srcsrcvar"tsdb/mapper.go(Ùx0◊à@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./SelectMapper/expandWildcards/$mapper1/srcÈ
+*)SelectMapper/expandWildcards/dimensionSetdimensionSetvar"tsdb/mapper.go(£{0»{@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./SelectMapper/expandWildcards/dimensionSetü
)*'SelectMapper/expandWildcards/dimensions
dimensionsvar"tsdb/mapper.go(Í{0à|@Rú{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Dimensions",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Dimension",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/expandWildcards/dimensions›
'*%SelectMapper/expandWildcards/fieldSetfieldSetvar"tsdb/mapper.go(Ä{0°{@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./SelectMapper/expandWildcards/fieldSetã
%*#SelectMapper/expandWildcards/fieldsfieldsvar"tsdb/mapper.go(Œ{0‰{@Rî{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Fields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./SelectMapper/expandWildcards/fields„
3*1SelectMapper/expandWildcards/hasDimensionWildcardhasDimensionWildcardvar"tsdb/mapper.go(˙|0≠}@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./SelectMapper/expandWildcards/hasDimensionWildcard◊
/*-SelectMapper/expandWildcards/hasFieldWildcardhasFieldWildcardvar"tsdb/mapper.go(Õ|0¯|@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./SelectMapper/expandWildcards/hasFieldWildcardÉ
!*SelectMapper/expandWildcards/lmlmvar"tsdb/mapper.go(˙x0äy@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./SelectMapper/expandWildcards/lmó
#*!SelectMapper/expandWildcards/stmtstmtvar"tsdb/mapper.go(úy0∫y@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./SelectMapper/expandWildcards/stmtÚ
*SelectMapper/fieldNames
fieldNamesfield"tsdb/mapper.go(‹0ÙRè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/fieldNamesö
%*#SelectMapper/initializeMapFunctionsinitializeMapFunctionsfunc"tsdb/mapper.go(ıj0ìrRî{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z~

text/plainpinitializeMapFunctions initialize the mapping functions for the mapper. This only applies
to aggregate queries.
ä%./SelectMapper/initializeMapFunctionsø
C*ASelectMapper/initializeMapFunctions/$mapper0/$mapper0/$mapper1/fnfnvar"tsdb/mapper.go(„n0áo@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./SelectMapper/initializeMapFunctions/$mapper0/$mapper0/$mapper1/fnÒ
C*ASelectMapper/initializeMapFunctions/$mapper0/$mapper0/$mapper1/okokvar"tsdb/mapper.go(„n0áo@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./SelectMapper/initializeMapFunctions/$mapper0/$mapper0/$mapper1/ok˝
>*<SelectMapper/initializeMapFunctions/$mapper0/$mapper0/nestednestedvar"tsdb/mapper.go(ƒn0›n@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZB

text/plain4Check for calls like `derivative(lmean(value), 1d)`
ä>./SelectMapper/initializeMapFunctions/$mapper0/$mapper0/nestedò
0*.SelectMapper/initializeMapFunctions/$mapper0/ccvar"tsdb/mapper.go(ıj0ìr@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./SelectMapper/initializeMapFunctions/$mapper0/c»
0*.SelectMapper/initializeMapFunctions/$mapper0/iivar"tsdb/mapper.go(ıj0ìr@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./SelectMapper/initializeMapFunctions/$mapper0/i•
0*.SelectMapper/initializeMapFunctions/aggregates
aggregatesvar"tsdb/mapper.go(Ûk0ûl@Rî{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./SelectMapper/initializeMapFunctions/aggregates‘
)*'SelectMapper/initializeMapFunctions/errerrvar"tsdb/mapper.go(≥k0ºk@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/initializeMapFunctions/errë
(*&SelectMapper/initializeMapFunctions/lmlmvar"tsdb/mapper.go(˚j0ãk@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectMapper/initializeMapFunctions/lmÚ
*SelectMapper/intervalSizeintervalSizefield"tsdb/mapper.go(π0ŒRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/intervalSize∫
*SelectMapper/mapFuncsmapFuncsfield"tsdb/mapper.go(û0¿R›{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]github.com/influxdb/influxdb/influxql.MapFunc",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.MapFunc",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/mapFuncs£
*SelectMapper/nextChunkAggnextChunkAggfunc"tsdb/mapper.go(“S0µfR≤{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÜ

text/plain˜nextChunkAgg returns the next chunk of data, which is the next interval of data
for the current tagset. Tagsets are always processed in the same order as that
returned by AvailTagsSets(). When there is no more data for any tagset nil
is returned.
ä./SelectMapper/nextChunkAggí
S*QSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/kkvar"tsdb/mapper.go(Í_0ç`@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/kË
S*QSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/ppvar"tsdb/mapper.go(√`0£a@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/pî
S*QSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/vvvar"tsdb/mapper.go(Í_0ç`@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/$mapper0/v¸
J*HSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/iivar"tsdb/mapper.go(¬_0»_@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper0/iÄ
J*HSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/kkvar"tsdb/mapper.go(Õb0ïc@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/kâ
M*KSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/timetimevar"tsdb/mapper.go(®b0≤b@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äM./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/timeå
J*HSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/vvvar"tsdb/mapper.go(Õb0ïc@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/vò
N*LSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/valuevaluevar"tsdb/mapper.go(¥b0≈b@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äN./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/$mapper1/value∞
A*?SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/ffvar"tsdb/mapper.go(õb0™c@RÜ{
        "PkgName": "tsdb",
        "TypeString": "func() (time int64, value interface{})",
        "UnderlyingTypeString": "func() (time int64, value interface{})",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/fÈ
L*JSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/tagSetCursortagSetCursorvar"tsdb/mapper.go(Ôc0∏d@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/tagSetCursoró
B*@SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/tftfvar"tsdb/mapper.go(Øc0Íc@RÍ{
        "PkgName": "tsdb",
        "TypeString": "func() map[string]string",
        "UnderlyingTypeString": "func() map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/tfç
F*DSelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/valuesvaluesvar"tsdb/mapper.go(ûe0Œe@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/$mapper0/valuesÿ
8*6SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/iivar"tsdb/mapper.go(“S0µf@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./SelectMapper/nextChunkAgg/$mapper0/$mapper0/$mapper4/i”
2*0SelectMapper/nextChunkAgg/$mapper0/$mapper0/qminqminvar"tsdb/mapper.go(º\0»\@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/nextChunkAgg/$mapper0/$mapper0/qmin”
2*0SelectMapper/nextChunkAgg/$mapper0/$mapper0/tmaxtmaxvar"tsdb/mapper.go(€U0˙U@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/nextChunkAgg/$mapper0/$mapper0/tmax”
2*0SelectMapper/nextChunkAgg/$mapper0/$mapper0/tmintminvar"tsdb/mapper.go(€U0˙U@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./SelectMapper/nextChunkAgg/$mapper0/$mapper0/tmin§
1*/SelectMapper/nextChunkAgg/$mapper0/$mapper0/tsctscvar"tsdb/mapper.go(≥U0ÿU@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./SelectMapper/nextChunkAgg/$mapper0/$mapper0/tsc˝
*SelectMapper/nextChunkAgg/lmlmvar"tsdb/mapper.go(ÿS0ËS@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/nextChunkAgg/lmâ
"* SelectMapper/nextChunkAgg/outputoutputvar"tsdb/mapper.go(ïT0©T@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./SelectMapper/nextChunkAgg/outputà
*SelectMapper/nextChunkRawnextChunkRawfunc"tsdb/mapper.go(ÌI0ÕQR≤{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÎ

text/plain‹nextChunkRaw returns the next chunk of data. Data comes in the same order as the
tags return by TagSets. A chunk never contains data for more than 1 tagset.
If there is no more data for any tagset, nil will be returned.
ä./SelectMapper/nextChunkRaw≠
4*2SelectMapper/nextChunkRaw/$mapper0/$mapper0/cursorcursorvar"tsdb/mapper.go(ŒK0ˆK@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./SelectMapper/nextChunkRaw/$mapper0/$mapper0/cursor 
/*-SelectMapper/nextChunkRaw/$mapper0/$mapper0/kkvar"tsdb/mapper.go(˙K0 L@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./SelectMapper/nextChunkRaw/$mapper0/$mapper0/k÷
/*-SelectMapper/nextChunkRaw/$mapper0/$mapper0/vvvar"tsdb/mapper.go(˙K0 L@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./SelectMapper/nextChunkRaw/$mapper0/$mapper0/v®
3*1SelectMapper/nextChunkRaw/$mapper0/$mapper0/valuevaluevar"tsdb/mapper.go(òP0’P@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./SelectMapper/nextChunkRaw/$mapper0/$mapper0/value˝
*SelectMapper/nextChunkRaw/lmlmvar"tsdb/mapper.go(ÛI0ÉJ@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/nextChunkRaw/lmâ
"* SelectMapper/nextChunkRaw/outputoutputvar"tsdb/mapper.go(∞J0ƒJ@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./SelectMapper/nextChunkRaw/output©
*SelectMapper/nextIntervalnextIntervalfunc"tsdb/mapper.go(≥g0˝iR∫{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() (start int64, end int64)",
        "UnderlyingTypeString": "func() (start int64, end int64)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÑ

text/plainvnextInterval returns the next interval for which to return data. If start is less than 0
there are no more intervals.
ä./SelectMapper/nextInterval¨
*SelectMapper/nextInterval/endendvar"tsdb/mapper.go(€g0Îg@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/nextInterval/end˝
*SelectMapper/nextInterval/lmlmvar"tsdb/mapper.go(πg0…g@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/nextInterval/lm≤
!*SelectMapper/nextInterval/startstartvar"tsdb/mapper.go(€g0Îg@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./SelectMapper/nextInterval/start¶
*SelectMapper/nextInterval/ttvar"tsdb/mapper.go(g0≈h@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/nextInterval/tÓ
*SelectMapper/numIntervalsnumIntervalsfield"tsdb/mapper.go(˜0äRÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/numIntervals¨
*SelectMapper/openMetaopenMetafunc"tsdb/mapper.go(£0ıRî{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,openMeta opens the mapper for a meta query.
ä./SelectMapper/openMetaı
*SelectMapper/openMeta/lmlmvar"tsdb/mapper.go(©0π@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/openMeta/lmÈ
*SelectMapper/queryTMax	queryTMaxfield"tsdb/mapper.go(◊0ÏRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/queryTMaxÈ
*SelectMapper/queryTMin	queryTMinfield"tsdb/mapper.go(ò0≠Râ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/queryTMin˚
*SelectMapper/queryTMinWindowqueryTMinWindowfield"tsdb/mapper.go(⁄0ÔRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/queryTMinWindow·
*SelectMapper/rawModerawModefield"tsdb/mapper.go(®0ºRá{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/rawMode§
*SelectMapper/remoteremotefield"tsdb/mapper.go(¡0◊RÕ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/remote‘
%*#SelectMapper/rewriteSelectStatementrewriteSelectStatementfunc"tsdb/mapper.go(ÿr0ÆvR˛{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*SelectMapper",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/influxql.SelectStatement, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/influxql.SelectStatement, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZN

text/plain@rewriteSelectStatement performs any necessary query re-writing.
ä%./SelectMapper/rewriteSelectStatement‘
)*'SelectMapper/rewriteSelectStatement/errerrvar"tsdb/mapper.go(—s0⁄s@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./SelectMapper/rewriteSelectStatement/errë
(*&SelectMapper/rewriteSelectStatement/lmlmvar"tsdb/mapper.go(ﬁr0Ór@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SelectMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./SelectMapper/rewriteSelectStatement/lmù
-*+SelectMapper/rewriteSelectStatement/sourcessourcesvar"tsdb/mapper.go(çt0»t@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./SelectMapper/rewriteSelectStatement/sources•
**(SelectMapper/rewriteSelectStatement/stmtstmtvar"tsdb/mapper.go(ás0•s@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./SelectMapper/rewriteSelectStatement/stmt¯
*SelectMapper/selectFieldsselectFieldsfield"tsdb/mapper.go(Â0˝Rè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/selectFieldsŒ
*SelectMapper/selectStmt
selectStmtfield"tsdb/mapper.go(˝0¶RÎ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/selectStmtÚ
*SelectMapper/selectTags
selectTagsfield"tsdb/mapper.go(µ0ÕRè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/selectTags£
*SelectMapper/shardshardfield"tsdb/mapper.go(©0øRœ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/shardå
*SelectMapper/stmtstmtfield"tsdb/mapper.go(Ÿ0˚Rª{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/stmtÙ
*SelectMapper/txtxfield"tsdb/mapper.go(”0ÂR©{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tx",
        "UnderlyingTypeString": "interface{Commit() error; Cursor(series string) github.com/influxdb/influxdb/tsdb.Cursor; Rollback() error; Size() int64; io.WriterTo}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/txı
*SelectMapper/whereFieldswhereFieldsfield"tsdb/mapper.go(ñ0ÆRè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SelectMapper",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SelectMapper/whereFieldsæ
*SeriesSeriestype"tsdb/meta.go(√‡0Ì·8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "struct{Key string; Tags map[string]string; id uint64; measurement *github.com/influxdb/influxdb/tsdb.Measurement; shardIDs map[uint64]bool}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z\

text/plainNSeries belong to a Measurement and represent unique time series in a database
ä./SeriesÜ
*Series/InitializeShardsInitializeShardsfunc"tsdb/meta.go(øË0äÈ8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Series",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/InitializeShardsÍ
*Series/InitializeShards/ssvar"tsdb/meta.go(≈Ë0ŒË@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/InitializeShards/s„
*
Series/KeyKeyfield"tsdb/meta.go(‘‡0ﬂ‡8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Series",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/Key‚
*Series/MarshalBinaryMarshalBinaryfunc"tsdb/meta.go(Û„0ÁÂ8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Series",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZC

text/plain5MarshalBinary encodes the object to a binary format.
ä./Series/MarshalBinary¿
(*&Series/MarshalBinary/$meta0/$meta0/keykeyvar"tsdb/meta.go(Ì‰0ı‰@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Series/MarshalBinary/$meta0/$meta0/key∆
**(Series/MarshalBinary/$meta0/$meta0/valuevaluevar"tsdb/meta.go(¯‰0ÇÂ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Series/MarshalBinary/$meta0/$meta0/value¨
*Series/MarshalBinary/$meta0/kkvar"tsdb/meta.go(Û„0ÁÂ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/MarshalBinary/$meta0/k¨
*Series/MarshalBinary/$meta0/vvvar"tsdb/meta.go(Û„0ÁÂ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/MarshalBinary/$meta0/v∂
*Series/MarshalBinary/pbpbvar"tsdb/meta.go(´‰0Ω‰@R€{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb/internal.Series",
        "UnderlyingTypeString": "struct{Key *string \"protobuf:\\\"bytes,1,req\\\" json:\\\"Key,omitempty\\\"\"; Tags []*github.com/influxdb/influxdb/tsdb/internal.Tag \"protobuf:\\\"bytes,2,rep\\\" json:\\\"Tags,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/MarshalBinary/pb‰
*Series/MarshalBinary/ssvar"tsdb/meta.go(˘„0Ç‰@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/MarshalBinary/s¸
*Series/TagsTagsfield"tsdb/meta.go(·‡0˜‡8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Series",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/TagsÏ
*Series/UnmarshalBinaryUnmarshalBinaryfunc"tsdb/meta.go(•Ê0ΩË8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Series",
        "TypeString": "func(buf []byte) error",
        "UnderlyingTypeString": "func(buf []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZG

text/plain9UnmarshalBinary decodes the object from a binary format.
ä./Series/UnmarshalBinary»
#*!Series/UnmarshalBinary/$meta0/errerrvar"tsdb/meta.go(ˆÊ0ñÁ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Series/UnmarshalBinary/$meta0/errÇ
!*Series/UnmarshalBinary/$meta1/ttvar"tsdb/meta.go(•Ê0ΩË@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/internal.Tag",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/internal.Tag",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Series/UnmarshalBinary/$meta1/t®
*Series/UnmarshalBinary/bufbufvar"tsdb/meta.go(∆Ê0–Ê@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/UnmarshalBinary/buf∫
*Series/UnmarshalBinary/pbpbvar"tsdb/meta.go(ﬂÊ0ÒÊ@R€{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb/internal.Series",
        "UnderlyingTypeString": "struct{Key *string \"protobuf:\\\"bytes,1,req\\\" json:\\\"Key,omitempty\\\"\"; Tags []*github.com/influxdb/influxdb/tsdb/internal.Tag \"protobuf:\\\"bytes,2,rep\\\" json:\\\"Tags,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/UnmarshalBinary/pbË
*Series/UnmarshalBinary/ssvar"tsdb/meta.go(´Ê0¥Ê@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/UnmarshalBinary/sƒ
*	Series/ididfield"tsdb/meta.go(˙‡0å·RÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Series",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/id∆
*Series/matchmatchfunc"tsdb/meta.go(∆È0—ÍR∏{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Series",
        "TypeString": "func(tags map[string]string) bool",
        "UnderlyingTypeString": "func(tags map[string]string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZE

text/plain7match returns true if all tags match the series' tags.
ä./Series/matchú
*Series/match/$meta0/kkvar"tsdb/meta.go(∆È0—Í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/match/$meta0/kú
*Series/match/$meta0/vvvar"tsdb/meta.go(∆È0—Í@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/match/$meta0/v‘
*Series/match/ssvar"tsdb/meta.go(ÃÈ0’È@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/match/s≠
*Series/match/tagstagsvar"tsdb/meta.go(›È0ÛÈ@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/match/tagsØ
*Series/measurementmeasurementfield"tsdb/meta.go(é·0¶·R’{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Series",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/measurementË
*Series/shardIDsshardIDsfield"tsdb/meta.go(®·0√·Ró{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Series",
        "TypeString": "map[uint64]bool",
        "UnderlyingTypeString": "map[uint64]bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Series/shardIDs˙
*SeriesCreateSeriesCreatetype"tsdb/shard.go(æ0˛8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "struct{Measurement string; Series *github.com/influxdb/influxdb/tsdb.Series}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z@

text/plain2struct to hold information for a series to create
ä./SeriesCreateå
*SeriesCreate/MeasurementMeasurementfield"tsdb/shard.go(’0Á8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SeriesCreate",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesCreate/Measurement√
*SeriesCreate/SeriesSeriesfield"tsdb/shard.go(È0¸8RÎ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "SeriesCreate",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesCreate/Series˘
*	SeriesIDs	SeriesIDstype"tsdb/meta.go(›Î0ÔÎ8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zç

text/plainSeriesIDs is a convenience type for sorting, checking equality, and doing
union and intersection of collections of series ids.
ä./SeriesIDsë
*SeriesIDs/EqualsEqualsfunc"tsdb/meta.go(‘Ì0ÑÔ8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) bool",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z3

text/plain%Equals assumes that both are sorted.
ä./SeriesIDs/Equalsû
*SeriesIDs/Equals/$meta1/iivar"tsdb/meta.go(‘Ì0ÑÔ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Equals/$meta1/i§
*SeriesIDs/Equals/$meta1/ssvar"tsdb/meta.go(‘Ì0ÑÔ@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Equals/$meta1/sΩ
*SeriesIDs/Equals/aavar"tsdb/meta.go(⁄Ì0ÂÌ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Equals/a…
*SeriesIDs/Equals/otherothervar"tsdb/meta.go(ÓÌ0˝Ì@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Equals/other◊
*SeriesIDs/Intersect	Intersectfunc"tsdb/meta.go(û0…Ù8Rÿ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z°

text/plainíIntersect returns a new collection of series ids in sorted order that is the intersection of the two.
The two collections must already be sorted.
ä./SeriesIDs/Intersect√
*SeriesIDs/Intersect/aavar"tsdb/meta.go(§0Ø@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Intersect/a∞
*SeriesIDs/Intersect/iivar"tsdb/meta.go(ÌÚ0ıÚ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zó

text/plainàthey're in sorted order so advance the counter as needed.
That is, don't run comparisons against lower values that we've already passed
ä./SeriesIDs/Intersect/i¶
*SeriesIDs/Intersect/idsidsvar"tsdb/meta.go(¯Ú0òÛ@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Intersect/ids∞
*SeriesIDs/Intersect/jjvar"tsdb/meta.go(ÌÚ0ıÚ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zó

text/plainàthey're in sorted order so advance the counter as needed.
That is, don't run comparisons against lower values that we've already passed
ä./SeriesIDs/Intersect/j√
*SeriesIDs/Intersect/llvar"tsdb/meta.go(Ÿ0ﬂ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Intersect/lœ
*SeriesIDs/Intersect/otherothervar"tsdb/meta.go(ª0 @RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Intersect/other√
*SeriesIDs/Intersect/rrvar"tsdb/meta.go(·0Î@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Intersect/rÔ
*SeriesIDs/LenLenfunc"tsdb/meta.go(ÒÎ0©Ï8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Len∑
*SeriesIDs/Len/aavar"tsdb/meta.go(˜Î0ÇÏ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Len/aå
*SeriesIDs/LessLessfunc"tsdb/meta.go(™Ï0ÁÏ8R¿{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Lessπ
*SeriesIDs/Less/aavar"tsdb/meta.go(∞Ï0ªÏ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Less/aå
*SeriesIDs/Less/iivar"tsdb/meta.go(¬Ï0 Ï@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Less/iå
*SeriesIDs/Less/jjvar"tsdb/meta.go(¬Ï0 Ï@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Less/j˝
*SeriesIDs/RejectRejectfunc"tsdb/meta.go(É˚0˚˝8Rÿ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z–

text/plain¡Reject returns a new collection of series ids in sorted order with the passed in set removed from the original.
This is useful for the NOT operator. The two collections must already be sorted.
ä./SeriesIDs/RejectΩ
*SeriesIDs/Reject/aavar"tsdb/meta.go(â˚0î˚@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/aê
*SeriesIDs/Reject/iivar"tsdb/meta.go(”˚0€˚@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/i†
*SeriesIDs/Reject/idsidsvar"tsdb/meta.go(ﬁ˚0˛˚@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/idsê
*SeriesIDs/Reject/jjvar"tsdb/meta.go(”˚0€˚@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/jΩ
*SeriesIDs/Reject/llvar"tsdb/meta.go(ª˚0¡˚@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/l…
*SeriesIDs/Reject/otherothervar"tsdb/meta.go(ù˚0¨˚@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/otherΩ
*SeriesIDs/Reject/rrvar"tsdb/meta.go(√˚0Õ˚@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Reject/rÇ
*SeriesIDs/SwapSwapfunc"tsdb/meta.go(ËÏ0™Ì8R∂{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Swapπ
*SeriesIDs/Swap/aavar"tsdb/meta.go(ÓÏ0˘Ï@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Swap/aå
*SeriesIDs/Swap/iivar"tsdb/meta.go(ÄÌ0àÌ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Swap/iå
*SeriesIDs/Swap/jjvar"tsdb/meta.go(ÄÌ0àÌ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Swap/j¿
*SeriesIDs/UnionUnionfunc"tsdb/meta.go(ÿı0∫˘8Rÿ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "SeriesIDs",
        "TypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "func(other github.com/influxdb/influxdb/tsdb.SeriesIDs) github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zñ

text/plaináUnion returns a new collection of series ids in sorted order that is the union of the two.
The two collections must already be sorted.
ä./SeriesIDs/Unionª
*SeriesIDs/Union/aavar"tsdb/meta.go(ﬁı0Èı@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/aé
*SeriesIDs/Union/iivar"tsdb/meta.go(–ˆ0ÿˆ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/iû
*SeriesIDs/Union/idsidsvar"tsdb/meta.go(£ˆ0 ˆ@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/idsé
*SeriesIDs/Union/jjvar"tsdb/meta.go(–ˆ0ÿˆ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/jª
*SeriesIDs/Union/llvar"tsdb/meta.go(èˆ0ïˆ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/l«
*SeriesIDs/Union/otherothervar"tsdb/meta.go(Òı0Äˆ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/otherª
*SeriesIDs/Union/rrvar"tsdb/meta.go(óˆ0°ˆ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./SeriesIDs/Union/rÛ
*ShardShardtype"tsdb/shard.go(á	0·8R˛{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "struct{db *github.com/boltdb/bolt.DB; index *github.com/influxdb/influxdb/tsdb.DatabaseIndex; path string; walPath string; id uint64; engine github.com/influxdb/influxdb/tsdb.Engine; options github.com/influxdb/influxdb/tsdb.EngineOptions; mu sync.RWMutex; measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields; LogOutput io.Writer}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z∏

text/plain©Shard represents a self-contained time series database. An inverted index of
the measurement and tag data is kept along with the raw time series data.
Data can be split across many shards. The query engine in TSDB is responsible
for combining the output of many shards into a single query result.
ä./Shard°
*Shard/CloseClosefunc"tsdb/shard.go(ô0Ó8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z2

text/plain$Close shuts down the shard's store.
ä./Shard/Closeœ
*Shard/Close/ssvar"tsdb/shard.go(ü0ß@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/Close/s§
*Shard/DeleteMeasurementDeleteMeasurementfunc"tsdb/shard.go(ì80≠:8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(name string, seriesKeys []string) error",
        "UnderlyingTypeString": "func(name string, seriesKeys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZQ

text/plainCDeleteMeasurement deletes a measurement and all underlying series.
ä./Shard/DeleteMeasurementÀ
%*#Shard/DeleteMeasurement/$shard0/errerrvar"tsdb/shard.go(Ü90π9@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Shard/DeleteMeasurement/$shard0/err¨
*Shard/DeleteMeasurement/namenamevar"tsdb/shard.go(µ80¿8@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/DeleteMeasurement/nameÁ
*Shard/DeleteMeasurement/ssvar"tsdb/shard.go(ô80°8@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/DeleteMeasurement/s¬
$*"Shard/DeleteMeasurement/seriesKeys
seriesKeysvar"tsdb/shard.go(¬80’8@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./Shard/DeleteMeasurement/seriesKeys”
*Shard/DeleteSeriesDeleteSeriesfunc"tsdb/shard.go(Ú60À78R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(keys []string) error",
        "UnderlyingTypeString": "func(keys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'DeleteSeries deletes a list of series.
ä./Shard/DeleteSeries¶
*Shard/DeleteSeries/keyskeysvar"tsdb/shard.go(è70ú7@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/DeleteSeries/keys›
*Shard/DeleteSeries/ssvar"tsdb/shard.go(¯60Ä7@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/DeleteSeries/s€
*Shard/FieldCodec
FieldCodecfunc"tsdb/shard.go(©0¯8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(measurementName string) *github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "func(measurementName string) *github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z‡

text/plain—TODO: this is temporarily exported to make tx.go work. When the query engine gets refactored
into the tsdb package this should be removed. No one outside tsdb should know the underlying field encoding scheme.
ä./Shard/FieldCodecÒ
*Shard/FieldCodec/mmvar"tsdb/shard.go(è0∏@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/FieldCodec/mø
"* Shard/FieldCodec/measurementNamemeasurementNamevar"tsdb/shard.go(ƒ0⁄@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Shard/FieldCodec/measurementNameŸ
*Shard/FieldCodec/ssvar"tsdb/shard.go(Ø0∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/FieldCodec/s 
*Shard/LogOutput	LogOutputfield"tsdb/shard.go(Ã0ﬂ8R»{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z-

text/plainThe writer used by the logger.
ä./Shard/LogOutput®
*
Shard/OpenOpenfunc"tsdb/shard.go(Ω08Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z<

text/plain.open initializes and opens the shard's store.
ä./Shard/Open—
(*&Shard/Open/$shard0/$shard0/$shard2/errerrvar"tsdb/shard.go(®0æ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Shard/Open/$shard0/$shard0/$shard2/err—
(*&Shard/Open/$shard0/$shard0/$shard3/errerrvar"tsdb/shard.go(û0›@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Shard/Open/$shard0/$shard0/$shard3/errÃ
*Shard/Open/$shard0/$shard0/eevar"tsdb/shard.go(ƒ0ı@RÈ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Engine",
        "UnderlyingTypeString": "interface{Begin(writable bool) (github.com/influxdb/influxdb/tsdb.Tx, error); Close() error; DeleteMeasurement(name string, seriesKeys []string) error; DeleteSeries(keys []string) error; LoadMetadataIndex(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error; Open() error; SeriesCount() (n int, err error); SetLogOutput(io.Writer); WritePoints(points []github.com/influxdb/influxdb/tsdb.Point, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/Open/$shard0/$shard0/e¡
 *Shard/Open/$shard0/$shard0/errerrvar"tsdb/shard.go(ƒ0ı@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./Shard/Open/$shard0/$shard0/err±
*Shard/Open/$shard0/errerrvar"tsdb/shard.go(‡0∑@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/Open/$shard0/errÕ
*Shard/Open/ssvar"tsdb/shard.go(√0À@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/Open/s∏
*
Shard/PathPathfunc"tsdb/shard.go(€0ä8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZJ

text/plain<Path returns the path set on the shard when it was created.
ä./Shard/PathÕ
*Shard/Path/ssvar"tsdb/shard.go(·0È@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/Path/s‹
*Shard/SeriesCountSeriesCountfunc"tsdb/shard.go(ÍS0∂T8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func() (int, error)",
        "UnderlyingTypeString": "func() (int, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZM

text/plain?SeriesCount returns the number of series buckets on the shard.
ä./Shard/SeriesCount€
*Shard/SeriesCount/ssvar"tsdb/shard.go(S0¯S@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/SeriesCount/sÍ
**(Shard/ValidateAggregateFieldsInStatement"ValidateAggregateFieldsInStatementfunc"tsdb/shard.go(Á*0∆68RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(measurementName string, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "UnderlyingTypeString": "func(measurementName string, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Shard/ValidateAggregateFieldsInStatement·
8*6Shard/ValidateAggregateFieldsInStatement/$shard0/anameanamevar"tsdb/shard.go(ï,0®,@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./Shard/ValidateAggregateFieldsInStatement/$shard0/aname·
8*6Shard/ValidateAggregateFieldsInStatement/$shard0/fnamefnamevar"tsdb/shard.go(ï,0®,@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./Shard/ValidateAggregateFieldsInStatement/$shard0/fname˙
4*2Shard/ValidateAggregateFieldsInStatement/$shard0/ttvar"tsdb/shard.go(™,0Ω,@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.DataType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./Shard/ValidateAggregateFieldsInStatement/$shard0/t¬
E*CShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard0/fnfnvar"tsdb/shard.go(ì10º1@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard0/fnÙ
E*CShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard0/okokvar"tsdb/shard.go(ì10º1@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard0/okÕ
f*dShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard0/$shard0/$shard0/$shard0/errerrvar"tsdb/shard.go(›20à3@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äf./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard0/$shard0/$shard0/$shard0/errÈ
\*ZShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard0/$shard0/$shard0/ffvar"tsdb/shard.go(ø20’2@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä\./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard0/$shard0/$shard0/fÕ
f*dShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard1/$shard1/$shard0/$shard0/errerrvar"tsdb/shard.go(Ñ50Ø5@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äf./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard1/$shard1/$shard0/$shard0/errÈ
\*ZShard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard1/$shard1/$shard0/ffvar"tsdb/shard.go(Ê40¸4@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä\./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/$shard1/$shard1/$shard1/$shard0/fÇ
A*?Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/nestednestedvar"tsdb/shard.go(Ù00ç1@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZB

text/plain4Check for fields like `derivative(mean(value), 1d)`
äA./Shard/ValidateAggregateFieldsInStatement/$shard2/$shard0/nestedü
4*2Shard/ValidateAggregateFieldsInStatement/$shard2/aavar"tsdb/shard.go(Á*0∆6@Rê{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Call",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./Shard/ValidateAggregateFieldsInStatement/$shard2/a°
,**Shard/ValidateAggregateFieldsInStatement/mmvar"tsdb/shard.go(á.0∞.@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Shard/ValidateAggregateFieldsInStatement/mÔ
:*8Shard/ValidateAggregateFieldsInStatement/measurementNamemeasurementNamevar"tsdb/shard.go(ö+0∞+@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Shard/ValidateAggregateFieldsInStatement/measurementNameâ
,**Shard/ValidateAggregateFieldsInStatement/ssvar"tsdb/shard.go(Ì*0ı*@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Shard/ValidateAggregateFieldsInStatement/sÆ
/*-Shard/ValidateAggregateFieldsInStatement/stmtstmtvar"tsdb/shard.go(≤+0–+@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./Shard/ValidateAggregateFieldsInStatement/stmtä
7*5Shard/ValidateAggregateFieldsInStatement/validateTypevalidateTypevar"tsdb/shard.go(Ä,0Ñ.@RÍ{
        "PkgName": "tsdb",
        "TypeString": "func(aname string, fname string, t github.com/influxdb/influxdb/influxql.DataType) error",
        "UnderlyingTypeString": "func(aname string, fname string, t github.com/influxdb/influxdb/influxql.DataType) error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä7./Shard/ValidateAggregateFieldsInStatement/validateType…
*Shard/WritePointsWritePointsfunc"tsdb/shard.go(›0Â*8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zh

text/plainZWritePoints will write the raw data points and any new metadata to the index in the shard
ä./Shard/WritePointsú
.*,Shard/WritePoints/$shard1/$shard0/$shard0/ssssvar"tsdb/shard.go(›0Â*@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../Shard/WritePoints/$shard1/$shard0/$shard0/ss†
6*4Shard/WritePoints/$shard2/$shard0/$shard0/$shard0/ssssvar"tsdb/shard.go(⁄"0Ò"@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./Shard/WritePoints/$shard2/$shard0/$shard0/$shard0/ss«
-*+Shard/WritePoints/$shard2/$shard0/$shard0/kkvar"tsdb/shard.go(›0Â*@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Shard/WritePoints/$shard2/$shard0/$shard0/k¿
(*&Shard/WritePoints/$shard4/$shard0/datadatavar"tsdb/shard.go(Ã(0˙(@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./Shard/WritePoints/$shard4/$shard0/dataœ
'*%Shard/WritePoints/$shard4/$shard0/errerrvar"tsdb/shard.go(Ã(0˙(@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./Shard/WritePoints/$shard4/$shard0/errñ
&*$Shard/WritePoints/$shard4/$shard0/mfmfvar"tsdb/shard.go(ã'0Æ'@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Shard/WritePoints/$shard4/$shard0/mf›
*Shard/WritePoints/$shard4/ppvar"tsdb/shard.go(›0Â*@R¸{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/WritePoints/$shard4/pø
*Shard/WritePoints/$shard5/errerrvar"tsdb/shard.go(“)0û*@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/WritePoints/$shard5/errØ
*Shard/WritePoints/errerrvar"tsdb/shard.go(í0Ó@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/WritePoints/errí
"* Shard/WritePoints/fieldsToCreatefieldsToCreatevar"tsdb/shard.go(í0Ó@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Shard/WritePoints/fieldsToCreateÀ
+*)Shard/WritePoints/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/shard.go(Ö$0“$@R∏{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./Shard/WritePoints/measurementFieldsToSaveÏ
*Shard/WritePoints/pointspointsvar"tsdb/shard.go(˘0á@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/WritePoints/points€
*Shard/WritePoints/ssvar"tsdb/shard.go(„0Î@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/WritePoints/sŒ
&*$Shard/WritePoints/seriesToAddShardToseriesToAddShardTovar"tsdb/shard.go(í0Ó@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Shard/WritePoints/seriesToAddShardToî
"* Shard/WritePoints/seriesToCreateseriesToCreatevar"tsdb/shard.go(í0Ó@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Shard/WritePoints/seriesToCreate—
*Shard/closeclosefunc"tsdb/shard.go(0–Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/closeœ
*Shard/close/ssvar"tsdb/shard.go(ˆ0˛@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/close/só
#*!Shard/createFieldsAndMeasurementscreateFieldsAndMeasurementsfunc"tsdb/shard.go(Ø:0úBRë{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(fieldsToCreate []*github.com/influxdb/influxdb/tsdb.FieldCreate) (map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, error)",
        "UnderlyingTypeString": "func(fieldsToCreate []*github.com/influxdb/influxdb/tsdb.FieldCreate) (map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Shard/createFieldsAndMeasurementsˇ
?*=Shard/createFieldsAndMeasurements/$shard1/$shard0/$shard1/errerrvar"tsdb/shard.go(‘?0è@@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./Shard/createFieldsAndMeasurements/$shard1/$shard0/$shard1/err≥
5*3Shard/createFieldsAndMeasurements/$shard1/$shard0/mmvar"tsdb/shard.go(ö=0¡=@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./Shard/createFieldsAndMeasurements/$shard1/$shard0/m≈
?*=Shard/createFieldsAndMeasurements/$shard1/$shard0/measurementmeasurementvar"tsdb/shard.go(˚@0¬A@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./Shard/createFieldsAndMeasurements/$shard1/$shard0/measurementó
-*+Shard/createFieldsAndMeasurements/$shard1/ffvar"tsdb/shard.go(Ø:0úB@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Shard/createFieldsAndMeasurements/$shard1/f≤
2*0Shard/createFieldsAndMeasurements/fieldsToCreatefieldsToCreatevar"tsdb/shard.go(€:0¯:@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./Shard/createFieldsAndMeasurements/fieldsToCreate‹
6*4Shard/createFieldsAndMeasurements/measurementsToSavemeasurementsToSavevar"tsdb/shard.go(π<0Ú<@R∏{
        "PkgName": "tsdb",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./Shard/createFieldsAndMeasurements/measurementsToSave˚
%*#Shard/createFieldsAndMeasurements/ssvar"tsdb/shard.go(µ:0Ω:@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./Shard/createFieldsAndMeasurements/sË

*Shard/dbdbfield"tsdb/shard.go(ó	0ß	R¨{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "*github.com/boltdb/bolt.DB",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.DB",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./Shard/dbÔ
*Shard/engineenginefield"tsdb/shard.go(ã
0ô
Rß{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Engine",
        "UnderlyingTypeString": "interface{Begin(writable bool) (github.com/influxdb/influxdb/tsdb.Tx, error); Close() error; DeleteMeasurement(name string, seriesKeys []string) error; DeleteSeries(keys []string) error; LoadMetadataIndex(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error; Open() error; SeriesCount() (n int, err error); SetLogOutput(io.Writer); WritePoints(points []github.com/influxdb/influxdb/tsdb.Point, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/engine¿

*Shard/ididfield"tsdb/shard.go(˙	0à
RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./Shard/idù
*Shard/indexindexfield"tsdb/shard.go(¬	0ÿ	Rÿ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/indexﬂ
*Shard/measurementFieldsmeasurementFieldsfield"tsdb/shard.go(”
0ÇRˆ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/measurementFieldsù

*Shard/mumufield"tsdb/shard.go(≥
0—
R·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./Shard/muï
*Shard/optionsoptionsfield"tsdb/shard.go(õ
0∞
R {
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/options∆
*
Shard/pathpathfield"tsdb/shard.go(⁄	0Ë	RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/path«
*Shard/validateSeriesAndFieldsvalidateSeriesAndFieldsfunc"tsdb/shard.go(èC0¶SRœ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Shard",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) ([]*github.com/influxdb/influxdb/tsdb.SeriesCreate, []*github.com/influxdb/influxdb/tsdb.FieldCreate, []string, error)",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) ([]*github.com/influxdb/influxdb/tsdb.SeriesCreate, []*github.com/influxdb/influxdb/tsdb.FieldCreate, []string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z|

text/plainnvalidateSeriesAndFields checks which series and fields are new and whose metadata should be saved and indexed
ä./Shard/validateSeriesAndFieldsƒ
F*DShard/validateSeriesAndFields/$shard0/$shard0/$shard0/$shard0/seriesseriesvar"tsdb/shard.go(¬G0G@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./Shard/validateSeriesAndFields/$shard0/$shard0/$shard0/$shard0/series®
:*8Shard/validateSeriesAndFields/$shard0/$shard0/$shard0/ssssvar"tsdb/shard.go(åG0±G@Rå{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Shard/validateSeriesAndFields/$shard0/$shard0/$shard0/ssà
L*JShard/validateSeriesAndFields/$shard0/$shard0/$shard1/$shard0/$shard0/namenamevar"tsdb/shard.go(èC0¶S@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./Shard/validateSeriesAndFields/$shard0/$shard0/$shard1/$shard0/$shard0/nameï
M*KShard/validateSeriesAndFields/$shard0/$shard0/$shard1/$shard0/$shard0/valuevaluevar"tsdb/shard.go(èC0¶S@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äM./Shard/validateSeriesAndFields/$shard0/$shard0/$shard1/$shard0/$shard0/value√
I*GShard/validateSeriesAndFields/$shard0/$shard0/$shard2/$shard0/$shard0/ffvar"tsdb/shard.go(¥N0»N@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./Shard/validateSeriesAndFields/$shard0/$shard0/$shard2/$shard0/$shard0/fË
<*:Shard/validateSeriesAndFields/$shard0/$shard0/$shard2/namenamevar"tsdb/shard.go(èC0¶S@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./Shard/validateSeriesAndFields/$shard0/$shard0/$shard2/nameı
=*;Shard/validateSeriesAndFields/$shard0/$shard0/$shard2/valuevaluevar"tsdb/shard.go(èC0¶S@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./Shard/validateSeriesAndFields/$shard0/$shard0/$shard2/valueÆ
2*0Shard/validateSeriesAndFields/$shard0/$shard0/mfmfvar"tsdb/shard.go(ΩK0‡K@R¢{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./Shard/validateSeriesAndFields/$shard0/$shard0/mfı
)*'Shard/validateSeriesAndFields/$shard0/ppvar"tsdb/shard.go(èC0¶S@R¸{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./Shard/validateSeriesAndFields/$shard0/p™
.*,Shard/validateSeriesAndFields/fieldsToCreatefieldsToCreatevar"tsdb/shard.go(•D0¬D@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.FieldCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../Shard/validateSeriesAndFields/fieldsToCreateÑ
&*$Shard/validateSeriesAndFields/pointspointsvar"tsdb/shard.go(∑C0≈C@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Shard/validateSeriesAndFields/pointsÛ
!*Shard/validateSeriesAndFields/ssvar"tsdb/shard.go(ïC0ùC@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Shard/validateSeriesAndFields/sÊ
2*0Shard/validateSeriesAndFields/seriesToAddShardToseriesToAddShardTovar"tsdb/shard.go(»D0„D@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./Shard/validateSeriesAndFields/seriesToAddShardTo¨
.*,Shard/validateSeriesAndFields/seriesToCreateseriesToCreatevar"tsdb/shard.go(ÅD0üD@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../Shard/validateSeriesAndFields/seriesToCreateœ
*Shard/walPathwalPathfield"tsdb/shard.go(Í	0¯	RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Shard",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Shard/walPathü

**(ShardGroupsByTimeRange$query_executor925ShardGroupsByTimeRangefunc"tsdb/query_executor.go(ù0Ö@RÖ	{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "UnderlyingTypeString": "func(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./ShardGroupsByTimeRange$query_executor925¶
*ShowMeasurementsExecutorShowMeasurementsExecutortype"tsdb/show_measurements.go( 0ø8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "UnderlyingTypeString": "struct{stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement; mappers []github.com/influxdb/influxdb/tsdb.Mapper; chunkSize int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zl

text/plain^ShowMeasurementsExecutor implements the Executor interface for a SHOW MEASUREMENTS statement.
ä./ShowMeasurementsExecutor˜
"* ShowMeasurementsExecutor/ExecuteExecutefunc"tsdb/show_measurements.go( 0Ò8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsExecutor",
        "TypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "func() \u003c-chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z[

text/plainMExecute begins execution of the query and returns a channel to receive rows.
ä"./ShowMeasurementsExecutor/Execute˘
v*tShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements0/$show_measurements0/$show_measurements0/errerrvar"tsdb/show_measurements.go(ü0Æ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äv./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements0/$show_measurements0/$show_measurements0/err”
L*JShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements0/mmvar"tsdb/show_measurements.go( 0Ò@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements0/m‰
u*sShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/$show_measurements2/mmmmvar"tsdb/show_measurements.go( 0Ò@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äu./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/$show_measurements2/mm√
`*^ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/ccvar"tsdb/show_measurements.go(–
0Á
@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/c—
b*`ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/errerrvar"tsdb/show_measurements.go(–
0Á
@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/err√
b*`ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/mmsmmsvar"tsdb/show_measurements.go(π0–@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/mms∏
a*_ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/okokvar"tsdb/show_measurements.go(π0–@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äa./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/$show_measurements0/ok”
L*JShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/mmvar"tsdb/show_measurements.go( 0Ò@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements1/mî
M*KShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements2/mmmmvar"tsdb/show_measurements.go( 0Ò@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äM./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements2/mm«
`*^ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements4/$show_measurements0/vvvar"tsdb/show_measurements.go(„0¯@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä`./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements4/$show_measurements0/vë
L*JShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements4/mmvar"tsdb/show_measurements.go( 0Ò@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./ShowMeasurementsExecutor/Execute/$show_measurements0/$show_measurements4/mÈ
:*8ShowMeasurementsExecutor/Execute/$show_measurements0/limlimvar"tsdb/show_measurements.go(÷0Ó@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./ShowMeasurementsExecutor/Execute/$show_measurements0/limé
C*AShowMeasurementsExecutor/Execute/$show_measurements0/measurementsmeasurementsvar"tsdb/show_measurements.go(˜0¢@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./ShowMeasurementsExecutor/Execute/$show_measurements0/measurementsÈ
:*8ShowMeasurementsExecutor/Execute/$show_measurements0/offoffvar"tsdb/show_measurements.go(ø0”@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./ShowMeasurementsExecutor/Execute/$show_measurements0/off∑
:*8ShowMeasurementsExecutor/Execute/$show_measurements0/rowrowvar"tsdb/show_measurements.go(¶0≤@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./ShowMeasurementsExecutor/Execute/$show_measurements0/rowâ
:*8ShowMeasurementsExecutor/Execute/$show_measurements0/setsetvar"tsdb/show_measurements.go(±	0Õ	@R‡{
        "PkgName": "tsdb",
        "TypeString": "map[string]struct{}",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./ShowMeasurementsExecutor/Execute/$show_measurements0/setı
>*<ShowMeasurementsExecutor/Execute/$show_measurements0/stmtLimstmtLimvar"tsdb/show_measurements.go(Ò0à@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./ShowMeasurementsExecutor/Execute/$show_measurements0/stmtLim´
$*"ShowMeasurementsExecutor/Execute/eevar"tsdb/show_measurements.go(–0Î@R∞{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ShowMeasurementsExecutor/Execute/eô
&*$ShowMeasurementsExecutor/Execute/outoutvar"tsdb/show_measurements.go(“0Ù@Rò{
        "PkgName": "tsdb",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./ShowMeasurementsExecutor/Execute/outî
$*"ShowMeasurementsExecutor/chunkSize	chunkSizefield"tsdb/show_measurements.go(∞0ΩRë{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsExecutor",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ShowMeasurementsExecutor/chunkSizeá
 *ShowMeasurementsExecutor/closeclosefunc"tsdb/show_measurements.go(Ê0◊Rî{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsExecutor",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z{

text/plainmClose closes the executor such that all resources are released. Once closed,
an executor may not be re-used.
ä ./ShowMeasurementsExecutor/close˜
^*\ShowMeasurementsExecutor/close/$show_measurements0/$show_measurements0/$show_measurements0/mmvar"tsdb/show_measurements.go(Ê0◊@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä^./ShowMeasurementsExecutor/close/$show_measurements0/$show_measurements0/$show_measurements0/mß
"* ShowMeasurementsExecutor/close/eevar"tsdb/show_measurements.go(Ï0á@R∞{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./ShowMeasurementsExecutor/close/e‹
"* ShowMeasurementsExecutor/mappersmappersfield"tsdb/show_measurements.go(ú0ÆRﬂ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsExecutor",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Mapper",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./ShowMeasurementsExecutor/mappersˇ
*ShowMeasurementsExecutor/stmtstmtfield"tsdb/show_measurements.go(Ì0öRã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsExecutor",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsExecutor/stmt“
*ShowMeasurementsMapperShowMeasurementsMappertype"tsdb/show_measurements.go(≥0Õ8R˜{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "struct{remote github.com/influxdb/influxdb/tsdb.Mapper; shard *github.com/influxdb/influxdb/tsdb.Shard; stmt *github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement; chunkSize int; state interface{}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z`

text/plainRShowMeasurementsMapper is a mapper for collecting measurement names from a shard.
ä./ShowMeasurementsMapper…
*ShowMeasurementsMapper/CloseClosefunc"tsdb/show_measurements.go(Ô-0«.8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z'

text/plainClose closes the mapper.
ä./ShowMeasurementsMapper/Closeü
 *ShowMeasurementsMapper/Close/mmvar"tsdb/show_measurements.go(ı-0é.@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./ShowMeasurementsMapper/Close/m˚
*ShowMeasurementsMapper/FieldsFieldsfunc"tsdb/show_measurements.go(∆$0î%8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZD

text/plain6Fields returns a list of field names for this mapper.
ä./ShowMeasurementsMapper/Fields°
!*ShowMeasurementsMapper/Fields/mmvar"tsdb/show_measurements.go(Ã$0Â$@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./ShowMeasurementsMapper/Fields/mù
"* ShowMeasurementsMapper/NextChunk	NextChunkfunc"tsdb/show_measurements.go(–%0ü)8R÷{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZE

text/plain7NextChunk returns the next chunk of measurement names.
ä"./ShowMeasurementsMapper/NextChunk—
b*`ShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/$show_measurements1/errerrvar"tsdb/show_measurements.go(∫'0„'@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äb./ShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/$show_measurements1/errõ
L*JShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/bbvar"tsdb/show_measurements.go(¨&0 &@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äL./ShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/b©
N*LShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/errerrvar"tsdb/show_measurements.go(¨&0 &@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äN./ShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/err°
P*NShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/namesnamesvar"tsdb/show_measurements.go(°'0¥'@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äP./ShowMeasurementsMapper/NextChunk/$show_measurements0/$show_measurements0/namesß
$*"ShowMeasurementsMapper/NextChunk/mmvar"tsdb/show_measurements.go(÷%0Ô%@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ShowMeasurementsMapper/NextChunk/mÿ
*ShowMeasurementsMapper/OpenOpenfunc"tsdb/show_measurements.go(…0Ë!8R∏{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z-

text/plainOpen opens the mapper for use.
ä./ShowMeasurementsMapper/Openü
I*GShowMeasurementsMapper/Open/$show_measurements1/$show_measurements0/errerrvar"tsdb/show_measurements.go(Æ0∑@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./ShowMeasurementsMapper/Open/$show_measurements1/$show_measurements0/err⁄
H*FShowMeasurementsMapper/Open/$show_measurements2/$show_measurements0/mmmmvar"tsdb/show_measurements.go(…0Ë!@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./ShowMeasurementsMapper/Open/$show_measurements2/$show_measurements0/mmƒ
 *ShowMeasurementsMapper/Open/chchvar"tsdb/show_measurements.go(Ê0˝@R–{
        "PkgName": "tsdb",
        "TypeString": "chan string",
        "UnderlyingTypeString": "chan string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./ShowMeasurementsMapper/Open/chù
*ShowMeasurementsMapper/Open/mmvar"tsdb/show_measurements.go(œ0Ë@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsMapper/Open/m™
**(ShowMeasurementsMapper/Open/measurementsmeasurementsvar"tsdb/show_measurements.go(±0 @Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./ShowMeasurementsMapper/Open/measurementsœ
"* ShowMeasurementsMapper/SetRemote	SetRemotefunc"tsdb/show_measurements.go(ñ"0¯"8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func(remote github.com/influxdb/influxdb/tsdb.Mapper) error",
        "UnderlyingTypeString": "func(remote github.com/influxdb/influxdb/tsdb.Mapper) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z7

text/plain)SetRemote sets the remote mapper to use.
ä"./ShowMeasurementsMapper/SetRemoteß
$*"ShowMeasurementsMapper/SetRemote/mmvar"tsdb/show_measurements.go(ú"0µ"@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ShowMeasurementsMapper/SetRemote/mí
)*'ShowMeasurementsMapper/SetRemote/remoteremotevar"tsdb/show_measurements.go(¡"0Œ"@Rà{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./ShowMeasurementsMapper/SetRemote/remoteî
 *ShowMeasurementsMapper/TagSetsTagSetsfunc"tsdb/show_measurements.go(…#0ã$8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLTagSets is only implemented on this mapper to satisfy the Mapper interface.
ä ./ShowMeasurementsMapper/TagSets£
"* ShowMeasurementsMapper/TagSets/mmvar"tsdb/show_measurements.go(œ#0Ë#@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./ShowMeasurementsMapper/TagSets/mé
"* ShowMeasurementsMapper/chunkSize	chunkSizefield"tsdb/show_measurements.go(ß0¥Rè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsMapper",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./ShowMeasurementsMapper/chunkSizeÉ
"* ShowMeasurementsMapper/nextChunk	nextChunkfunc"tsdb/show_measurements.go(›)0—-Rº{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*ShowMeasurementsMapper",
        "TypeString": "func() (interface{}, error)",
        "UnderlyingTypeString": "func() (interface{}, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZG

text/plain9nextChunk implements next chunk logic for a local shard.
ä"./ShowMeasurementsMapper/nextChunkÈ
8*6ShowMeasurementsMapper/nextChunk/$show_measurements0/nnvar"tsdb/show_measurements.go(›)0—-@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä8./ShowMeasurementsMapper/nextChunk/$show_measurements0/nß
$*"ShowMeasurementsMapper/nextChunk/mmvar"tsdb/show_measurements.go(„)0¸)@R¨{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.ShowMeasurementsMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./ShowMeasurementsMapper/nextChunk/m¯
3*1ShowMeasurementsMapper/nextChunk/measurementNamesmeasurementNamesvar"tsdb/show_measurements.go(≤+0€+@R–{
        "PkgName": "tsdb",
        "TypeString": "chan string",
        "UnderlyingTypeString": "chan string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./ShowMeasurementsMapper/nextChunk/measurementNames—
(*&ShowMeasurementsMapper/nextChunk/namesnamesvar"tsdb/show_measurements.go(–*0˜*@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./ShowMeasurementsMapper/nextChunk/namesÕ
*ShowMeasurementsMapper/remoteremotefield"tsdb/show_measurements.go(‘0‰R◊{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsMapper",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsMapper/remoteÃ
*ShowMeasurementsMapper/shardshardfield"tsdb/show_measurements.go(Ê0ˆRŸ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsMapper",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsMapper/shardí
*ShowMeasurementsMapper/statestatefield"tsdb/show_measurements.go(∂0ÀRü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsMapper",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsMapper/state˘
*ShowMeasurementsMapper/stmtstmtfield"tsdb/show_measurements.go(¯0•Râ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "ShowMeasurementsMapper",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowMeasurementsStatement",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./ShowMeasurementsMapper/stmtÍ
*StatefulMapperStatefulMappertype"tsdb/executor.go(Ü0Ï8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "struct{github.com/influxdb/influxdb/tsdb.Mapper; bufferedChunk *github.com/influxdb/influxdb/tsdb.MapperOutput; drained bool}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zt

text/plainfStatefulMapper encapsulates a Mapper and some state that the executor needs to
track for that mapper.
ä./StatefulMapper»
*StatefulMapper/MapperMapperfield"tsdb/executor.go(ü0•8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "StatefulMapper",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Mapper",
        "UnderlyingTypeString": "interface{Close(); Fields() []string; NextChunk() (interface{}, error); Open() error; SetRemote(m github.com/influxdb/influxdb/tsdb.Mapper) error; TagSets() []string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/Mapperπ
*StatefulMapper/NextChunk	NextChunkfunc"tsdb/executor.go(ù	0ú8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*StatefulMapper",
        "TypeString": "func() (*github.com/influxdb/influxdb/tsdb.MapperOutput, error)",
        "UnderlyingTypeString": "func() (*github.com/influxdb/influxdb/tsdb.MapperOutput, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,NextChunk wraps a RawMapper and some state.
ä./StatefulMapper/NextChunk≤
*StatefulMapper/NextChunk/ccvar"tsdb/executor.go(›	0¸	@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/NextChunk/cÜ
 *StatefulMapper/NextChunk/chunkchunkvar"tsdb/executor.go(§
0¬
@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./StatefulMapper/NextChunk/chunk¿
*StatefulMapper/NextChunk/errerrvar"tsdb/executor.go(›	0¸	@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/NextChunk/errß
*StatefulMapper/NextChunk/okokvar"tsdb/executor.go(§
0¬
@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/NextChunk/okÅ
*StatefulMapper/NextChunk/smsmvar"tsdb/executor.go(£	0µ	@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.StatefulMapper",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/NextChunk/sm—
*StatefulMapper/bufferedChunkbufferedChunkfield"tsdb/executor.go(ß0¬Rﬂ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "StatefulMapper",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperOutput",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/bufferedChunkÈ
*StatefulMapper/draineddrainedfield"tsdb/executor.go(ÿ0ÍRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "StatefulMapper",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StatefulMapper/drained–
*StoreStoretype"tsdb/store.go(¥0Ï8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; path string; databaseIndexes map[string]*github.com/influxdb/influxdb/tsdb.DatabaseIndex; shards map[uint64]*github.com/influxdb/influxdb/tsdb.Shard; EngineOptions github.com/influxdb/influxdb/tsdb.EngineOptions; Logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./StoreÌ
*Store/CloseClosefunc"tsdb/store.go(ñ:0È;8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Close”
)*'Store/Close/$store0/$store0/$store0/errerrvar"tsdb/store.go(˝:0é;@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./Store/Close/$store0/$store0/$store0/err‚
*Store/Close/$store0/shshvar"tsdb/store.go(ñ:0È;@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Close/$store0/shœ
*Store/Close/ssvar"tsdb/store.go(ú:0§:@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Close/sÄ
*Store/CreateMapperCreateMapperfunc"tsdb/store.go(€50î:8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(shardID uint64, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)",
        "UnderlyingTypeString": "func(shardID uint64, stmt github.com/influxdb/influxdb/influxql.Statement, chunkSize int) (github.com/influxdb/influxdb/tsdb.Mapper, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper´
*Store/CreateMapper/chunkSize	chunkSizevar"tsdb/store.go(°60Æ6@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper/chunkSize›
*Store/CreateMapper/ssvar"tsdb/store.go(·50È5@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper/sÈ
*Store/CreateMapper/shardshardvar"tsdb/store.go(√60‹6@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper/shard´
*Store/CreateMapper/shardIDshardIDvar"tsdb/store.go(¯50Ü6@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper/shardID“
*Store/CreateMapper/stmtstmtvar"tsdb/store.go(à60ü6@Rˆ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateMapper/stmtÌ
*Store/CreateShardCreateShardfunc"tsdb/store.go(í	0Ö8Rï{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(database string, retentionPolicy string, shardID uint64) error",
        "UnderlyingTypeString": "func(database string, retentionPolicy string, shardID uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard¶
*Store/CreateShard/$store0/okokvar"tsdb/store.go(®
0¬
@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/$store0/okø
*Store/CreateShard/$store1/errerrvar"tsdb/store.go(ü0È@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/$store1/errø
*Store/CreateShard/$store2/errerrvar"tsdb/store.go(ö0ª@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/$store2/errø
*Store/CreateShard/$store4/errerrvar"tsdb/store.go(©0º@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/$store4/err¨
*Store/CreateShard/databasedatabasevar"tsdb/store.go(Æ	0Œ	@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/databaseÓ
*Store/CreateShard/dbdbvar"tsdb/store.go(è0¥@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/dbñ
*Store/CreateShard/okokvar"tsdb/store.go(è0¥@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/ok¡
#*!Store/CreateShard/retentionPolicyretentionPolicyvar"tsdb/store.go(Æ	0Œ	@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Store/CreateShard/retentionPolicy€
*Store/CreateShard/ssvar"tsdb/store.go(ò	0†	@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/sÁ
*Store/CreateShard/shardshardvar"tsdb/store.go(·0§@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/shard©
*Store/CreateShard/shardIDshardIDvar"tsdb/store.go(–	0ﬁ	@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/shardIDØ
*Store/CreateShard/shardPath	shardPathvar"tsdb/store.go(Å0ﬂ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/shardPath©
*Store/CreateShard/walPathwalPathvar"tsdb/store.go(ß0ï@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/CreateShard/walPathÒ
*Store/DatabaseIndexDatabaseIndexfunc"tsdb/store.go(Ó0Ô8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DatabaseIndex§
*Store/DatabaseIndex/namenamevar"tsdb/store.go(å0ó@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DatabaseIndex/nameﬂ
*Store/DatabaseIndex/ssvar"tsdb/store.go(Ù0¸@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DatabaseIndex/s⁄
*Store/DatabaseIndexNDatabaseIndexNfunc"tsdb/store.go(è0˙8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZT

text/plainFDatabaseIndexN returns the number of databases indicies in the store.
ä./Store/DatabaseIndexN·
*Store/DatabaseIndexN/ssvar"tsdb/store.go(ï0ù@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DatabaseIndexN/s¬
*Store/DeleteDatabaseDeleteDatabasefunc"tsdb/store.go(©0‡8R„{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(name string, shardIDs []uint64) error",
        "UnderlyingTypeString": "func(name string, shardIDs []uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z|

text/plainnDeleteDatabase will close all shards associated with a database and remove the directory and files from disk.
ä./Store/DeleteDatabaseç
,**Store/DeleteDatabase/$store0/$store0/shardshardvar"tsdb/store.go(≥0»@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Store/DeleteDatabase/$store0/$store0/shard∞
!*Store/DeleteDatabase/$store0/ididvar"tsdb/store.go(©0‡@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./Store/DeleteDatabase/$store0/id≈
"* Store/DeleteDatabase/$store1/errerrvar"tsdb/store.go(˘0©@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Store/DeleteDatabase/$store1/err≈
"* Store/DeleteDatabase/$store2/errerrvar"tsdb/store.go(Ã0ì@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Store/DeleteDatabase/$store2/err¶
*Store/DeleteDatabase/namenamevar"tsdb/store.go(»0”@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteDatabase/name·
*Store/DeleteDatabase/ssvar"tsdb/store.go(Ø0∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteDatabase/s∂
*Store/DeleteDatabase/shardIDsshardIDsvar"tsdb/store.go(’0Ê@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteDatabase/shardIDs“
*Store/DeleteShardDeleteShardfunc"tsdb/store.go(±0∂8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(shardID uint64) error",
        "UnderlyingTypeString": "func(shardID uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'DeleteShard removes a shard from disk.
ä./Store/DeleteShardø
*Store/DeleteShard/$store1/errerrvar"tsdb/store.go(‹0Ì@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/$store1/errø
*Store/DeleteShard/$store2/errerrvar"tsdb/store.go(ë0™@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/$store2/errø
*Store/DeleteShard/$store3/errerrvar"tsdb/store.go(Œ0Ì@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/$store3/errñ
*Store/DeleteShard/okokvar"tsdb/store.go(°0º@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/ok€
*Store/DeleteShard/ssvar"tsdb/store.go(∑0ø@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/sﬁ
*Store/DeleteShard/shshvar"tsdb/store.go(°0º@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/sh©
*Store/DeleteShard/shardIDshardIDvar"tsdb/store.go(Õ0€@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/DeleteShard/shardID√
*Store/EngineOptionsEngineOptionsfield"tsdb/store.go(¥0œ8R‰{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "github.com/influxdb/influxdb/tsdb.EngineOptions",
        "UnderlyingTypeString": "struct{EngineVersion string; MaxWALSize int; WALFlushInterval time.Duration; WALPartitionFlushDelay time.Duration; Config github.com/influxdb/influxdb/tsdb.Config}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/EngineOptionsÚ
*Store/LoggerLoggerfield"tsdb/store.go(—0Í8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Loggerâ
*Store/MeasurementMeasurementfunc"tsdb/store.go(Ò0≤8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "func(database string, name string) *github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Measurement¨
*Store/Measurement/databasedatabasevar"tsdb/store.go(ç0¢@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Measurement/databaseÓ
*Store/Measurement/dbdbvar"tsdb/store.go(¬0„@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Measurement/db†
*Store/Measurement/namenamevar"tsdb/store.go(ç0¢@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Measurement/name€
*Store/Measurement/ssvar"tsdb/store.go(˜0ˇ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Measurement/sÍ
*
Store/OpenOpenfunc"tsdb/store.go(Õ00â48Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Open±
*Store/Open/$store0/errerrvar"tsdb/store.go(≠20Õ2@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Open/$store0/err±
*Store/Open/$store1/errerrvar"tsdb/store.go(ç30£3@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Open/$store1/err±
*Store/Open/$store2/errerrvar"tsdb/store.go(«30‹3@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Open/$store2/errÕ
*Store/Open/ssvar"tsdb/store.go(”00€0@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Open/s†
*
Store/PathPathfunc"tsdb/store.go(ï0ƒ8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z2

text/plain$Path returns the store's root path.
ä./Store/PathÕ
*Store/Path/ssvar"tsdb/store.go(õ0£@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Path/sÚ
*Store/ShardShardfunc"tsdb/store.go(ú0Ä8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(id uint64) *github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "func(id uint64) *github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z+

text/plainShard returns a shard by id.
ä./Store/Shardé
*Store/Shard/ididvar"tsdb/store.go(≤0ª@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Shard/idœ
*Store/Shard/ssvar"tsdb/store.go(¢0™@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/Shard/s«
*Store/ShardIDsShardIDsfunc"tsdb/store.go(†0¥8R≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() []uint64",
        "UnderlyingTypeString": "func() []uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;ShardIDs returns a slice of all ShardIDs under management.
ä./Store/ShardIDs°
*Store/ShardIDs/$store0/iivar"tsdb/store.go(†0¥@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/ShardIDs/$store0/iõ
*Store/ShardIDs/idsidsvar"tsdb/store.go(«0Ó@R {
        "PkgName": "tsdb",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/ShardIDs/ids’
*Store/ShardIDs/ssvar"tsdb/store.go(¶0Æ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/ShardIDs/s≠
*Store/ShardNShardNfunc"tsdb/store.go(∂0ê	8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z?

text/plain1ShardN returns the number of shard in the store.
ä./Store/ShardN—
*Store/ShardN/ssvar"tsdb/store.go(º0ƒ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/ShardN/sä
**(Store/ValidateAggregateFieldsInStatement"ValidateAggregateFieldsInStatementfunc"tsdb/store.go(∂0Ï8RÌ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(shardID uint64, measurementName string, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "UnderlyingTypeString": "func(shardID uint64, measurementName string, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./Store/ValidateAggregateFieldsInStatementÔ
:*8Store/ValidateAggregateFieldsInStatement/measurementNamemeasurementNamevar"tsdb/store.go(˘0è@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä:./Store/ValidateAggregateFieldsInStatement/measurementNameâ
,**Store/ValidateAggregateFieldsInStatement/ssvar"tsdb/store.go(º0ƒ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./Store/ValidateAggregateFieldsInStatement/sï
0*.Store/ValidateAggregateFieldsInStatement/shardshardvar"tsdb/store.go(»0‚@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./Store/ValidateAggregateFieldsInStatement/shard◊
2*0Store/ValidateAggregateFieldsInStatement/shardIDshardIDvar"tsdb/store.go(È0˜@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä2./Store/ValidateAggregateFieldsInStatement/shardIDÆ
/*-Store/ValidateAggregateFieldsInStatement/stmtstmtvar"tsdb/store.go(ë0Ø@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./Store/ValidateAggregateFieldsInStatement/stmtÇ
*Store/WriteToShardWriteToShardfunc"tsdb/store.go(ã40Ÿ58Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(shardID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShardò
*Store/WriteToShard/okokvar"tsdb/store.go(ı40ê5@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShard/okÓ
*Store/WriteToShard/pointspointsvar"tsdb/store.go(∏40∆4@Rå{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShard/points›
*Store/WriteToShard/ssvar"tsdb/store.go(ë40ô4@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShard/s‡
*Store/WriteToShard/shshvar"tsdb/store.go(ı40ê5@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShard/sh´
*Store/WriteToShard/shardIDshardIDvar"tsdb/store.go(®40∂4@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/WriteToShard/shardID—
*Store/databaseIndexesdatabaseIndexesfield"tsdb/store.go(Â0éRÓ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/databaseIndexes≤
*Store/deleteMeasurementdeleteMeasurementfunc"tsdb/store.go(Â"0◊$RÕ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(name string, seriesKeys []string) error",
        "UnderlyingTypeString": "func(name string, seriesKeys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z{

text/plainmdeleteMeasurement loops through the local shards and removes the measurement field encodings from each shard
ä./Store/deleteMeasurementÎ
5*3Store/deleteMeasurement/$store0/$store0/$store0/errerrvar"tsdb/store.go(˘#0¶$@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä5./Store/deleteMeasurement/$store0/$store0/$store0/err˙
$*"Store/deleteMeasurement/$store0/shshvar"tsdb/store.go(Â"0◊$@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./Store/deleteMeasurement/$store0/sh¨
*Store/deleteMeasurement/namenamevar"tsdb/store.go(á#0í#@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/deleteMeasurement/nameÁ
*Store/deleteMeasurement/ssvar"tsdb/store.go(Î"0Û"@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/deleteMeasurement/s¬
$*"Store/deleteMeasurement/seriesKeys
seriesKeysvar"tsdb/store.go(î#0ß#@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./Store/deleteMeasurement/seriesKeysÑ
*Store/deleteSeriesdeleteSeriesfunc"tsdb/store.go(™ 0Û!Rß{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func(keys []string) error",
        "UnderlyingTypeString": "func(keys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÅ

text/plainsdeleteSeries loops through the local shards and deletes the series data and metadata for the passed in series keys
ä./Store/deleteSeries·
0*.Store/deleteSeries/$store0/$store0/$store0/errerrvar"tsdb/store.go(¶!0¬!@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä0./Store/deleteSeries/$store0/$store0/$store0/err
*Store/deleteSeries/$store0/shshvar"tsdb/store.go(™ 0Û!@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/deleteSeries/$store0/sh¶
*Store/deleteSeries/keyskeysvar"tsdb/store.go(« 0‘ @R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/deleteSeries/keys›
*Store/deleteSeries/ssvar"tsdb/store.go(∞ 0∏ @Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/deleteSeries/s„
*Store/loadIndexesloadIndexesfunc"tsdb/store.go(Ÿ$0ë'Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadIndexesô
*Store/loadIndexes/$store1/dbdbvar"tsdb/store.go(Ÿ$0ë'@Rµ{
        "PkgName": "tsdb",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadIndexes/$store1/db´
*Store/loadIndexes/dbsdbsvar"tsdb/store.go(Ä%0¢%@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadIndexes/dbsØ
*Store/loadIndexes/errerrvar"tsdb/store.go(Ä%0¢%@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadIndexes/err€
*Store/loadIndexes/ssvar"tsdb/store.go(ﬂ$0Á$@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadIndexes/s‡
*Store/loadShards
loadShardsfunc"tsdb/store.go(ì'0À0Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadShardsç
F*DStore/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/errerrvar"tsdb/store.go(¢-0÷-@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./Store/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/err˛
G*EStore/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/pathpathvar"tsdb/store.go(‚+0ô,@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./Store/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/path≈
H*FStore/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/shardshardvar"tsdb/store.go(Ã.0ù/@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./Store/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/shardá
J*HStore/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/shardIDshardIDvar"tsdb/store.go(¢-0÷-@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./Store/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/shardIDá
J*HStore/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/walPathwalPathvar"tsdb/store.go(û,0Ô,@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./Store/loadShards/$store0/$store0/$store1/$store0/$store2/$store0/walPath◊
=*;Store/loadShards/$store0/$store0/$store1/$store0/$store2/shshvar"tsdb/store.go(ì'0À0@Rµ{
        "PkgName": "tsdb",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./Store/loadShards/$store0/$store0/$store1/$store0/$store2/shÌ
6*4Store/loadShards/$store0/$store0/$store1/$store0/errerrvar"tsdb/store.go(‘*0ó+@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä6./Store/loadShards/$store0/$store0/$store1/$store0/errÚ
9*7Store/loadShards/$store0/$store0/$store1/$store0/shardsshardsvar"tsdb/store.go(‘*0ó+@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä9./Store/loadShards/$store0/$store0/$store1/$store0/shards∑
-*+Store/loadShards/$store0/$store0/$store1/rprpvar"tsdb/store.go(ì'0À0@Rµ{
        "PkgName": "tsdb",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./Store/loadShards/$store0/$store0/$store1/rpÕ
&*$Store/loadShards/$store0/$store0/errerrvar"tsdb/store.go(ç(0¬(@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Store/loadShards/$store0/$store0/err…
&*$Store/loadShards/$store0/$store0/rpsrpsvar"tsdb/store.go(ç(0¬(@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./Store/loadShards/$store0/$store0/rps®
*Store/loadShards/$store0/dbdbvar"tsdb/store.go(ì'0À0@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadShards/$store0/dbŸ
*Store/loadShards/ssvar"tsdb/store.go(ô'0°'@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/loadShards/sù

*Store/mumufield"tsdb/store.go(ƒ0’R·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./Store/mu∆
*
Store/pathpathfield"tsdb/store.go(◊0‚RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/path¶
*Store/shardsshardsfield"tsdb/store.go(ê0±Rﬁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "Store",
        "TypeString": "map[uint64]*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "map[uint64]*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Store/shards•
*	TagFilter	TagFiltertype"tsdb/meta.go(”˛0Øˇ8RÄ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.TagFilter",
        "UnderlyingTypeString": "struct{Op github.com/influxdb/influxdb/influxql.Token; Key string; Value string; Regex *regexp.Regexp}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z\

text/plainNTagFilter represents a tag filter when looking up other tags or measurements.
ä./TagFilterÏ
*TagFilter/KeyKeyfield"tsdb/meta.go(˝˛0âˇ8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "TagFilter",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./TagFilter/Keyã
*TagFilter/OpOpfield"tsdb/meta.go(Á˛0˚˛8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "TagFilter",
        "TypeString": "github.com/influxdb/influxdb/influxql.Token",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./TagFilter/OpÇ
*TagFilter/RegexRegexfield"tsdb/meta.go(ôˇ0≠ˇ8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "TagFilter",
        "TypeString": "*regexp.Regexp",
        "UnderlyingTypeString": "*regexp.Regexp",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./TagFilter/RegexÚ
*TagFilter/ValueValuefield"tsdb/meta.go(ãˇ0óˇ8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "TagFilter",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./TagFilter/Value‡
*TagsTagstype"tsdb/points.go(ı—0ã“8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./TagsÙ
*Tags/HashKeyHashKeyfunc"tsdb/points.go(ç“0®ÿ8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Tags",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey∑
#*!Tags/HashKey/$points1/$points0/ekekvar"tsdb/points.go(§”0æ”@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Tags/HashKey/$points1/$points0/ek∑
#*!Tags/HashKey/$points1/$points0/evevvar"tsdb/points.go(¡”0€”@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./Tags/HashKey/$points1/$points0/ev¢
*Tags/HashKey/$points1/kkvar"tsdb/points.go(ç“0®ÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/$points1/k¢
*Tags/HashKey/$points1/vvvar"tsdb/points.go(ç“0®ÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/$points1/v¢
*Tags/HashKey/$points2/kkvar"tsdb/points.go(ç“0®ÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/$points2/k¢
*Tags/HashKey/$points2/vvvar"tsdb/points.go(ç“0®ÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/$points2/v¥
"* Tags/HashKey/$points3/$points0/vvvar"tsdb/points.go(’◊0‰◊@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./Tags/HashKey/$points3/$points0/v¢
*Tags/HashKey/$points3/kkvar"tsdb/points.go(ç“0®ÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/$points3/kê
*Tags/HashKey/bbvar"tsdb/points.go(®÷0Ω÷@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/bñ
*Tags/HashKey/bufbufvar"tsdb/points.go(ø÷0«÷@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/bufÕ
*Tags/HashKey/escapedescapedvar"tsdb/points.go(˘“0ä”@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/escapedä
*Tags/HashKey/iivar"tsdb/points.go(é’0î’@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/iê
*Tags/HashKey/idxidxvar"tsdb/points.go(…÷0—÷@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/idxù
*Tags/HashKey/keyskeysvar"tsdb/points.go(Ê‘0å’@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/keysç
*Tags/HashKey/szszvar"tsdb/points.go(Ø‘0÷‘@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/szª
*Tags/HashKey/ttvar"tsdb/points.go(ì“0ô“@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tags/HashKey/t¯
*TxTxtype"tsdb/engine.go(ó0É8Rô{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tx",
        "UnderlyingTypeString": "interface{Commit() error; Cursor(series string) github.com/influxdb/influxdb/tsdb.Cursor; Rollback() error; Size() int64; io.WriterTo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z+

text/plainTx represents a transaction.
ä./TxÁ
*	Tx/CommitCommitfunc"tsdb/engine.go(·0Ô8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Tx",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tx/Commit«
*	Tx/CursorCursorfunc"tsdb/engine.go(µ0—8RÉ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Tx",
        "TypeString": "func(series string) github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "func(series string) github.com/influxdb/influxdb/tsdb.Cursor",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tx/Cursoró
*Tx/Cursor/seriesseriesvar"tsdb/engine.go(º0…@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tx/Cursor/seriesÌ
*Tx/RollbackRollbackfunc"tsdb/engine.go(Ò0Å8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Tx",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./Tx/Rollback·
	*Tx/SizeSizefunc"tsdb/engine.go(”0ﬂ8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "Tx",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä	./Tx/SizeÌ
*User$query_executor670Userfunc"tsdb/query_executor.go(û0«@Râ{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./User$query_executor670ñ
*UserCount$query_executor898	UserCountfunc"tsdb/query_executor.go(Ç0ö@R£{
        "PkgName": "tsdb",
        "Receiver": "interface{AdminUserExists() (bool, error); Authenticate(username string, password string) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); NodeID() uint64; RetentionPolicy(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error); ShardGroupsByTimeRange(database string, policy string, min time.Time, max time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error); User(name string) (*github.com/influxdb/influxdb/meta.UserInfo, error); UserCount() (int, error)}",
        "TypeString": "func() (int, error)",
        "UnderlyingTypeString": "func() (int, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./UserCount$query_executor898≥
*aggTagSetCursoraggTagSetCursortype"tsdb/mapper.go(Áé0’èR‡{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "UnderlyingTypeString": "struct{nextFunc func() (time int64, value interface{}); tagsFunc func() map[string]string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zx

text/plainjaggTagSetCursor wraps a standard tagSetCursor, such that the values it emits are aggregated
by intervals.
ä./aggTagSetCursorƒ
*aggTagSetCursor/NextNextfunc"tsdb/mapper.go(—ê0™ë8RÂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*aggTagSetCursor",
        "TypeString": "func() (time int64, value interface{})",
        "UnderlyingTypeString": "func() (time int64, value interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÇ

text/plaintNext returns the next value for the aggTagSetCursor. It implements the interface expected
by the mapping functions.
ä./aggTagSetCursor/Next¯
*aggTagSetCursor/Next/aavar"tsdb/mapper.go(◊ê0Èê@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/Next/aß
*aggTagSetCursor/Next/timetimevar"tsdb/mapper.go(Ûê0˝ê@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/Next/time∂
*aggTagSetCursor/Next/valuevaluevar"tsdb/mapper.go(ˇê0êë@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/Next/value‡
*aggTagSetCursor/TagsTagsfunc"tsdb/mapper.go(‹ë0ßí8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*aggTagSetCursor",
        "TypeString": "func() map[string]string",
        "UnderlyingTypeString": "func() map[string]string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z;

text/plain-Tags returns the current tags for the cursor
ä./aggTagSetCursor/Tags¯
*aggTagSetCursor/Tags/aavar"tsdb/mapper.go(‚ë0Ùë@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.aggTagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/Tags/a≥
*aggTagSetCursor/nextFuncnextFuncfield"tsdb/mapper.go(Åè0∞èRŒ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "aggTagSetCursor",
        "TypeString": "func() (time int64, value interface{})",
        "UnderlyingTypeString": "func() (time int64, value interface{})",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/nextFuncó
*aggTagSetCursor/tagsFunctagsFuncfield"tsdb/mapper.go(≤è0”èR≤{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "aggTagSetCursor",
        "TypeString": "func() map[string]string",
        "UnderlyingTypeString": "func() map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./aggTagSetCursor/tagsFuncπ
*appendShardSnapshotFileappendShardSnapshotFilefunc"tsdb/snapshot_writer.go(‹0æR¡{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(sw *github.com/influxdb/influxdb/snapshot.Writer, sh *github.com/influxdb/influxdb/tsdb.Shard, name string) error",
        "UnderlyingTypeString": "func(sw *github.com/influxdb/influxdb/snapshot.Writer, sh *github.com/influxdb/influxdb/tsdb.Shard, name string) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile≈
*appendShardSnapshotFile/errerrvar"tsdb/snapshot_writer.go(Ò0é@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/err«
*appendShardSnapshotFile/ffvar"tsdb/snapshot_writer.go(‹0≤@R‡{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/fü
*appendShardSnapshotFile/fifivar"tsdb/snapshot_writer.go(Ò0é@Rµ{
        "PkgName": "tsdb",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/fi∂
*appendShardSnapshotFile/namenamevar"tsdb/snapshot_writer.go(ô0§@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/nameÙ
*appendShardSnapshotFile/shshvar"tsdb/snapshot_writer.go(é0ó@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/sh˛
*appendShardSnapshotFile/swswvar"tsdb/snapshot_writer.go(˘0å@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/swÿ
*appendShardSnapshotFile/txtxvar"tsdb/snapshot_writer.go(Ò0é@RÓ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/boltdb/bolt.Tx",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.Tx",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFile/txÇ
*appendShardSnapshotFilesappendShardSnapshotFilesfunc"tsdb/snapshot_writer.go(Â0⁄R≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(sw *github.com/influxdb/influxdb/snapshot.Writer, store *github.com/influxdb/influxdb/tsdb.Store) error",
        "UnderlyingTypeString": "func(sw *github.com/influxdb/influxdb/snapshot.Writer, store *github.com/influxdb/influxdb/tsdb.Store) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZX

text/plainJappendShardSnapshotFiles adds snapshot files for each shard in the store.
ä./appendShardSnapshotFiles≥
T*RappendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/$snapshot_writer3/errerrvar"tsdb/snapshot_writer.go(…0ı@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äT./appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/$snapshot_writer3/errè
B*@appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/errerrvar"tsdb/snapshot_writer.go(€0Ñ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äB./appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/errÄ
C*AappendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/namenamevar"tsdb/snapshot_writer.go(Õ0¸@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äC./appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/nameæ
A*?appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/shshvar"tsdb/snapshot_writer.go( 
0‰
@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Shard",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äA./appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/shè
H*FappendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/shardPath	shardPathvar"tsdb/snapshot_writer.go(€0Ñ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./appendShardSnapshotFiles/$snapshot_writer1/$snapshot_writer0/shardPathÂ
4*2appendShardSnapshotFiles/$snapshot_writer1/shardIDshardIDvar"tsdb/snapshot_writer.go(Â0⁄@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./appendShardSnapshotFiles/$snapshot_writer1/shardID«
*appendShardSnapshotFiles/errerrvar"tsdb/snapshot_writer.go(ı0°	@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFiles/errˇ
 *appendShardSnapshotFiles/storestorevar"tsdb/snapshot_writer.go(ò0§@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./appendShardSnapshotFiles/store«
$*"appendShardSnapshotFiles/storePath	storePathvar"tsdb/snapshot_writer.go(ı0°	@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./appendShardSnapshotFiles/storePathÄ
*appendShardSnapshotFiles/swswvar"tsdb/snapshot_writer.go(É0ñ@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./appendShardSnapshotFiles/swæ
*authErrLogFmtauthErrLogFmtconst"tsdb/query_executor.go(Â…0π R‚{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./authErrLogFmt 
*boltTxCloserboltTxClosertype"tsdb/snapshot_writer.go(Ü0ßR•{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.boltTxCloser",
        "UnderlyingTypeString": "struct{*github.com/boltdb/bolt.Tx}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZL

text/plain>boltTxCloser wraps a Bolt transaction to implement io.Closer.
ä./boltTxCloseræ
*boltTxCloser/CloseClosefunc"tsdb/snapshot_writer.go(Œ0å8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*boltTxCloser",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z0

text/plain"Close rolls back the transaction.
ä./boltTxCloser/Close¯
*boltTxCloser/Close/txtxvar"tsdb/snapshot_writer.go(‘0‰@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.boltTxCloser",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.boltTxCloser",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./boltTxCloser/Close/tx£
*boltTxCloser/TxTxfield"tsdb/snapshot_writer.go(ù0•8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "boltTxCloser",
        "TypeString": "*github.com/boltdb/bolt.Tx",
        "UnderlyingTypeString": "*github.com/boltdb/bolt.Tx",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./boltTxCloser/Tx˝
*btou64btou64func"tsdb/mapper.go(’„0ó‰Rˇ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(b []byte) uint64",
        "UnderlyingTypeString": "func(b []byte) uint64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0btou64 converts an 8-byte slice into an uint64.
ä./btou64Ñ

*btou64/bbvar"tsdb/mapper.go(·„0È„@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./btou64/b·
*copyTagExprscopyTagExprsfunc"tsdb/meta.go(Ç 0Ó Rì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(a []github.com/influxdb/influxdb/tsdb.tagExpr) []github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "func(a []github.com/influxdb/influxdb/tsdb.tagExpr) []github.com/influxdb/influxdb/tsdb.tagExpr",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./copyTagExprsÿ
*copyTagExprs/aavar"tsdb/meta.go(î 0ü @Rê{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./copyTagExprs/a‰
*copyTagExprs/otherothervar"tsdb/meta.go(Æ 0Œ @Rê{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./copyTagExprs/otherõ
*createTagSetsAndFieldscreateTagSetsAndFieldsfunc"tsdb/mapper.go(Öÿ0É‡Rµ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(m *github.com/influxdb/influxdb/tsdb.Measurement, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/tsdb.tagSetsAndFields, error)",
        "UnderlyingTypeString": "func(m *github.com/influxdb/influxdb/tsdb.Measurement, stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (*github.com/influxdb/influxdb/tsdb.tagSetsAndFields, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zv

text/plainhcreateTagSetsAndFields returns the tagsets and various fields given a measurement and
SELECT statement.
ä./createTagSetsAndFields∂
#*!createTagSetsAndFields/$mapper1/nnvar"tsdb/mapper.go(Öÿ0É‡@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./createTagSetsAndFields/$mapper1/n∂
#*!createTagSetsAndFields/$mapper2/nnvar"tsdb/mapper.go(Öÿ0É‡@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./createTagSetsAndFields/$mapper2/n∂
#*!createTagSetsAndFields/$mapper3/nnvar"tsdb/mapper.go(Öÿ0É‡@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./createTagSetsAndFields/$mapper3/nº
*createTagSetsAndFields/errerrvar"tsdb/mapper.go(Ôÿ0ùŸ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/errÙ
*createTagSetsAndFields/mmvar"tsdb/mapper.go(°ÿ0Øÿ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/m‹
*createTagSetsAndFields/sfssfsvar"tsdb/mapper.go(∆Ÿ0€Ÿ@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/sfsç
*createTagSetsAndFields/stmtstmtvar"tsdb/mapper.go(±ÿ0œÿ@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/stmt‹
*createTagSetsAndFields/stsstsvar"tsdb/mapper.go(›Ÿ0ÚŸ@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/sts∫
 *createTagSetsAndFields/tagKeystagKeysvar"tsdb/mapper.go(Ôÿ0ùŸ@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./createTagSetsAndFields/tagKeysà
 *createTagSetsAndFields/tagSetstagSetsvar"tsdb/mapper.go(¢ﬁ0 ﬁ@Rò{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./createTagSetsAndFields/tagSets‹
*createTagSetsAndFields/wfswfsvar"tsdb/mapper.go(ÙŸ0â⁄@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./createTagSetsAndFields/wfsΩ
*
cursorHeap
cursorHeaptype"tsdb/cursor.go(·0˝R¥{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z?

text/plain1cursorHeap represents a heap of cursorHeapItems.
ä./cursorHeapÚ
*cursorHeap/LenLenfunc"tsdb/cursor.go(ˇ0≥8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "cursorHeap",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/LenÂ
*cursorHeap/Len/hhvar"tsdb/cursor.go(Ö0ë@Rô{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Len/hè
*cursorHeap/LessLessfunc"tsdb/cursor.go(Û0¥8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "cursorHeap",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Less¶
*cursorHeap/Less/$cursor0/cmpcmpvar"tsdb/cursor.go(°0…@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Less/$cursor0/cmpÁ
*cursorHeap/Less/hhvar"tsdb/cursor.go(˘0Ö@Rô{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Less/hé
*cursorHeap/Less/iivar"tsdb/cursor.go(å0î@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Less/ié
*cursorHeap/Less/jjvar"tsdb/cursor.go(å0î@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Less/jÉ
*cursorHeap/PopPopfunc"tsdb/cursor.go(ä0Ä8R∏{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*cursorHeap",
        "TypeString": "func() interface{}",
        "UnderlyingTypeString": "func() interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Pop‡
*cursorHeap/Pop/hhvar"tsdb/cursor.go(ê0ù@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeap",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Pop/hÒ
*cursorHeap/Pop/itemitemvar"tsdb/cursor.go(Œ0ﬁ@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Pop/itemå
*cursorHeap/Pop/nnvar"tsdb/cursor.go(ø0Ã@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Pop/nÎ
*cursorHeap/Pop/oldoldvar"tsdb/cursor.go(¥0Ω@Rô{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Pop/oldà
*cursorHeap/PushPushfunc"tsdb/cursor.go(∂0à8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*cursorHeap",
        "TypeString": "func(x interface{})",
        "UnderlyingTypeString": "func(x interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Push‚
*cursorHeap/Push/hhvar"tsdb/cursor.go(º0…@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeap",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Push/hû
*cursorHeap/Push/xxvar"tsdb/cursor.go(–0›@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Push/xÖ
*cursorHeap/SwapSwapfunc"tsdb/cursor.go(¥0Ú8R∑{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "cursorHeap",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/SwapÁ
*cursorHeap/Swap/hhvar"tsdb/cursor.go(∫0∆@Rô{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Swap/hé
*cursorHeap/Swap/iivar"tsdb/cursor.go(Õ0’@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Swap/ié
*cursorHeap/Swap/jjvar"tsdb/cursor.go(Õ0’@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeap/Swap/jÉ
*cursorHeapItemcursorHeapItemtype"tsdb/cursor.go(≈0üR‰{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "UnderlyingTypeString": "struct{key []byte; value []byte; cursor github.com/influxdb/influxdb/tsdb.Cursor; priority int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;cursorHeapItem is something we manage in a priority queue.
ä./cursorHeapItemﬁ
*cursorHeapItem/cursorcursorfield"tsdb/cursor.go(Ä0èRÉ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "cursorHeapItem",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeapItem/cursorﬂ
*cursorHeapItem/keykeyfield"tsdb/cursor.go(ﬁ0ÌRç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "cursorHeapItem",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeapItem/keyË
*cursorHeapItem/prioritypriorityfield"tsdb/cursor.go(ë0ùRá{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "cursorHeapItem",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeapItem/priorityÂ
*cursorHeapItem/valuevaluefield"tsdb/cursor.go(Ô0˛Rç{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "cursorHeapItem",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./cursorHeapItem/valueÕ
*derivativeIntervalderivativeIntervalfunc"tsdb/executor.go( “0≠’RÖ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (time.Duration, error)",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.SelectStatement) (time.Duration, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zb

text/plainTderivativeInterval returns the time interval for the one (and only) derivative func
ä./derivativeInterval∂
*derivativeInterval/errerrvar"tsdb/executor.go(ö‘0¡‘@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./derivativeInterval/errπ
*derivativeInterval/intervalintervalvar"tsdb/executor.go(ö‘0¡‘@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./derivativeInterval/intervalá
*derivativeInterval/stmtstmtvar"tsdb/executor.go(‚“0Ä”@R¶{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SelectStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./derivativeInterval/stmtø
*escapeescapefunc"tsdb/points.go(å•0ã¶RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeí
*escape/$points0/bbvar"tsdb/points.go(å•0ã¶@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escape/$points0/bú
*escape/$points0/escescvar"tsdb/points.go(å•0ã¶@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escape/$points0/escá
*	escape/ininvar"tsdb/points.go(ò•0°•@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escape/inº
*escapeCodesescapeCodesvar"tsdb/points.go(á0¸RÚ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "map[byte][]byte",
        "UnderlyingTypeString": "map[byte][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeCodes…
*escapeCodesStrescapeCodesStrvar"tsdb/points.go(ˇ0£Rˆ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeCodesStr‡
*escapeMeasurementescapeMeasurementfunc"tsdb/points.go(Ã†0·°RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeMeasurement®
*escapeMeasurement/$points0/bbvar"tsdb/points.go(Ã†0·°@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeMeasurement/$points0/b≤
 *escapeMeasurement/$points0/escescvar"tsdb/points.go(Ã†0·°@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./escapeMeasurement/$points0/escù
*escapeMeasurement/ininvar"tsdb/points.go(„†0Ï†@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeMeasurement/in—
*escapeStringescapeStringfunc"tsdb/points.go(ç¶0èßRÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in string) string",
        "UnderlyingTypeString": "func(in string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeString¢
*escapeString/$points0/bbvar"tsdb/points.go(ç¶0èß@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeString/$points0/b®
*escapeString/$points0/escescvar"tsdb/points.go(ç¶0èß@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeString/$points0/escì
*escapeString/ininvar"tsdb/points.go(ü¶0®¶@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeString/in—
*escapeStringFieldescapeStringFieldfunc"tsdb/points.go(Ë¨0å∞RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in string) string",
        "UnderlyingTypeString": "func(in string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zo

text/plainaescapeStringField returns a copy of in with any double quotes or
backslashes with escaped values
ä./escapeStringFieldî
*escapeStringField/iivar"tsdb/points.go(§≠0™≠@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeStringField/iù
*escapeStringField/ininvar"tsdb/points.go(ˇ¨0à≠@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeStringField/in†
*escapeStringField/outoutvar"tsdb/points.go(ò≠0¢≠@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeStringField/out»
*	escapeTag	escapeTagfunc"tsdb/points.go(¸¢0Å§RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeTagò
*escapeTag/$points0/bbvar"tsdb/points.go(¸¢0Å§@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeTag/$points0/b¢
*escapeTag/$points0/escescvar"tsdb/points.go(¸¢0Å§@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeTag/$points0/escç
*escapeTag/ininvar"tsdb/points.go(ã£0î£@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./escapeTag/inÀ
*expandExprWithValuesexpandExprWithValuesfunc"tsdb/meta.go(˝µ0ﬁøRÂ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr, keys []string, tagExprs []github.com/influxdb/influxdb/tsdb.tagExpr, uniques [][]string, index int) []github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "UnderlyingTypeString": "func(expr github.com/influxdb/influxdb/influxql.Expr, keys []string, tagExprs []github.com/influxdb/influxdb/tsdb.tagExpr, uniques [][]string, index int) []github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues¬
-*+expandExprWithValues/$meta0/$meta0/$meta0/iivar"tsdb/meta.go(˝µ0ﬁø@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./expandExprWithValues/$meta0/$meta0/$meta0/iŒ
/*-expandExprWithValues/$meta0/$meta0/$meta0/keykeyvar"tsdb/meta.go(˝µ0ﬁø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./expandExprWithValues/$meta0/$meta0/$meta0/key¶
-*+expandExprWithValues/$meta0/$meta0/$meta1/eevar"tsdb/meta.go(íª0∑ª@R§{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./expandExprWithValues/$meta0/$meta0/$meta1/e«
.*,expandExprWithValues/$meta0/$meta0/$meta1/okokvar"tsdb/meta.go(íª0∑ª@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä../expandExprWithValues/$meta0/$meta0/$meta1/okï
&*$expandExprWithValues/$meta0/$meta0/eevar"tsdb/meta.go(›∫0åª@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./expandExprWithValues/$meta0/$meta0/e“
&*$expandExprWithValues/$meta0/$meta0/mmvar"tsdb/meta.go(Ñ∏0¨∏@Rﬁ{
        "PkgName": "tsdb",
        "TypeString": "map[string]*string",
        "UnderlyingTypeString": "map[string]*string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./expandExprWithValues/$meta0/$meta0/m¨
*expandExprWithValues/$meta1/vvvar"tsdb/meta.go(˝µ0ﬁø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/$meta1/vÇ
*expandExprWithValues/exprexprvar"tsdb/meta.go(ó∂0©∂@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/expr»
*expandExprWithValues/exprsexprsvar"tsdb/meta.go(Ôº0ÅΩ@Rñ{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZL

text/plain>Otherwise expand for each possible equality value of the key.
ä./expandExprWithValues/exprs§
*expandExprWithValues/indexindexvar"tsdb/meta.go(‚∂0Î∂@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/index´
*expandExprWithValues/keyskeysvar"tsdb/meta.go(´∂0∏∂@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/keys˝
*expandExprWithValues/tagExprstagExprsvar"tsdb/meta.go(∫∂0Ã∂@Rê{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/tagExprs∏
*expandExprWithValues/uniquesuniquesvar"tsdb/meta.go(Œ∂0‡∂@RŒ{
        "PkgName": "tsdb",
        "TypeString": "[][]string",
        "UnderlyingTypeString": "[][]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandExprWithValues/uniquesì
*expandSourcesexpandSourcesfunc"tsdb/mapper.go(ﬂÃ0ï◊R£{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(sources github.com/influxdb/influxdb/influxql.Sources, di *github.com/influxdb/influxdb/tsdb.DatabaseIndex) (github.com/influxdb/influxdb/influxql.Sources, error)",
        "UnderlyingTypeString": "func(sources github.com/influxdb/influxdb/influxql.Sources, di *github.com/influxdb/influxdb/tsdb.DatabaseIndex) (github.com/influxdb/influxdb/influxql.Sources, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zö

text/plainãexpandSources expands regex sources and removes duplicates.
NOTE: sources must be normalized (db and rp set) before calling this function.
ä./expandSourcesá
J*HexpandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper0/$mapper0/namenamevar"tsdb/mapper.go(ó–0´–@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper0/$mapper0/nameè
Q*OexpandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/$mapper0/okokvar"tsdb/mapper.go(Í”0¸”@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äQ./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/$mapper0/okŸ
H*FexpandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/m2m2var"tsdb/mapper.go(ª“0 ”@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/m2á
J*HexpandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/namenamevar"tsdb/mapper.go(œ”0‚”@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äJ./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/$mapper0/nameº
>*<expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/mmvar"tsdb/mapper.go(ﬂÃ0ï◊@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä>./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/$mapper1/mÕ
@*>expandSources/$mapper0/$mapper0/$mapper0/$mapper0/measurementsmeasurementsvar"tsdb/mapper.go(¥—0È—@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä@./expandSources/$mapper0/$mapper0/$mapper0/$mapper0/measurementsí
*expandSources/$mapper0/sourcesourcevar"tsdb/mapper.go(ﬂÃ0ï◊@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/$mapper0/source≠
*expandSources/$mapper1/namenamevar"tsdb/mapper.go(ﬂÃ0ï◊@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/$mapper1/nameÈ
*expandSources/didivar"tsdb/mapper.go(åÕ0ùÕ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/diˆ
*expandSources/expandedexpandedvar"tsdb/mapper.go(Ñ÷0≥÷@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/expanded¢
*expandSources/namesnamesvar"tsdb/mapper.go(«Œ0⁄Œ@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/names˙
*expandSources/setsetvar"tsdb/mapper.go(¢Œ0≈Œ@R®{
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/setÛ
*expandSources/sourcessourcesvar"tsdb/mapper.go(ÚÃ0äÕ@Rï{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Sources",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./expandSources/sources©
*formMeasurementTagSetKeyformMeasurementTagSetKeyfunc"tsdb/mapper.go(Ë·0†„Rµ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(name string, tags map[string]string) string",
        "UnderlyingTypeString": "func(name string, tags map[string]string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./formMeasurementTagSetKey±
*formMeasurementTagSetKey/namenamevar"tsdb/mapper.go(Ü‚0ë‚@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./formMeasurementTagSetKey/name«
*formMeasurementTagSetKey/tagstagsvar"tsdb/mapper.go(ì‚0©‚@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./formMeasurementTagSetKey/tagsÚ
*indexedSliceindexedSlicetype"tsdb/points.go(å˜0¬˜R¢{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.indexedSlice",
        "UnderlyingTypeString": "struct{indices []int; b []byte}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice˚
*indexedSlice/LenLenfunc"tsdb/points.go(»˘0É˙8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*indexedSlice",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/LenÍ
*indexedSlice/Len/ssvar"tsdb/points.go(Œ˘0›˘@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Len/sò
*indexedSlice/LessLessfunc"tsdb/points.go(ƒ˜0‚¯8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*indexedSlice",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Lessö
*indexedSlice/Less/aavar"tsdb/points.go(Ú˜0ò¯@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Less/aö
*indexedSlice/Less/bbvar"tsdb/points.go(ö¯0¿¯@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Less/bî
*indexedSlice/Less/iivar"tsdb/points.go(‡˜0Ë˜@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Less/iî
*indexedSlice/Less/jjvar"tsdb/points.go(‡˜0Ë˜@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Less/jÏ
*indexedSlice/Less/ssvar"tsdb/points.go( ˜0Ÿ˜@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Less/sé
*indexedSlice/SwapSwapfunc"tsdb/points.go(‰¯0∆˘8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*indexedSlice",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Swapî
*indexedSlice/Swap/iivar"tsdb/points.go(Ä˘0à˘@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Swap/iî
*indexedSlice/Swap/jjvar"tsdb/points.go(Ä˘0à˘@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Swap/jÏ
*indexedSlice/Swap/ssvar"tsdb/points.go(Í¯0˘¯@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.indexedSlice",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/Swap/s’
*indexedSlice/bbfield"tsdb/points.go(≤˜0¿˜Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "indexedSlice",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/bÂ
*indexedSlice/indicesindicesfield"tsdb/points.go(£˜0∞˜Râ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "indexedSlice",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./indexedSlice/indicesï
*init$points2283initfunc"tsdb/points.go(Ê0¡@R«{
        "PkgName": "tsdb",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./init$points2283¢
*init$points2283/$points0/kkvar"tsdb/points.go(Ê0¡@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./init$points2283/$points0/k¶
*init$points2283/$points0/vvvar"tsdb/points.go(Ê0¡@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./init$points2283/$points0/vÄ
*insertionSortinsertionSortfunc"tsdb/points.go(•M0ıNRØ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(l int, r int, buf []byte, indices []int)",
        "UnderlyingTypeString": "func(l int, r int, buf []byte, indices []int)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort¿
,**insertionSort/$points0/$points0/$points0/jjvar"tsdb/points.go(ÉN0âN@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./insertionSort/$points0/$points0/$points0/jú
*insertionSort/$points0/iivar"tsdb/points.go(‰M0ÓM@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort/$points0/iñ
*insertionSort/bufbufvar"tsdb/points.go(¬M0ÃM@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort/buf†
*insertionSort/indicesindicesvar"tsdb/points.go(ŒM0€M@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort/indicesä
*insertionSort/llvar"tsdb/points.go(∏M0¿M@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort/lä
*insertionSort/rrvar"tsdb/points.go(∏M0¿M@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./insertionSort/rÃ

*int64arrint64arrtype"tsdb/executor.go(Ÿ0Ä⁄RÜ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.int64arr",
        "UnderlyingTypeString": "[]int64",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./int64arr
*int64arr/LenLenfunc"tsdb/executor.go(Ç⁄0π⁄8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "int64arr",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Len∑
*int64arr/Len/aavar"tsdb/executor.go(à⁄0í⁄@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.int64arr",
        "UnderlyingTypeString": "[]int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Len/aç
*int64arr/LessLessfunc"tsdb/executor.go(¸⁄0∏€8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "int64arr",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Lessπ
*int64arr/Less/aavar"tsdb/executor.go(Ç€0å€@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.int64arr",
        "UnderlyingTypeString": "[]int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Less/aé
*int64arr/Less/iivar"tsdb/executor.go(ì€0õ€@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Less/ié
*int64arr/Less/jjvar"tsdb/executor.go(ì€0õ€@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Less/jÉ
*int64arr/SwapSwapfunc"tsdb/executor.go(∫⁄0˚⁄8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "int64arr",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Swapπ
*int64arr/Swap/aavar"tsdb/executor.go(¿⁄0 ⁄@RÎ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.int64arr",
        "UnderlyingTypeString": "[]int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Swap/aé
*int64arr/Swap/iivar"tsdb/executor.go(—⁄0Ÿ⁄@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Swap/ié
*int64arr/Swap/jjvar"tsdb/executor.go(—⁄0Ÿ⁄@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64arr/Swap/j„
*int64toFloat64int64toFloat64func"tsdb/executor.go(ïÿ0ÈŸRã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(v interface{}) float64",
        "UnderlyingTypeString": "func(v interface{}) float64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64toFloat64†
*int64toFloat64/vvvar"tsdb/executor.go(©ÿ0∂ÿ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./int64toFloat64/v‘
*isFieldEscapeCharisFieldEscapeCharfunc"tsdb/points.go(⁄P0—QR˜{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(b byte) bool",
        "UnderlyingTypeString": "func(b byte) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./isFieldEscapeChar¶
*isFieldEscapeChar/$points0/ccvar"tsdb/points.go(⁄P0—Q@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./isFieldEscapeChar/$points0/cî
*isFieldEscapeChar/bbvar"tsdb/points.go(ÒP0˜P@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./isFieldEscapeChar/bº
*	isNumeric	isNumericfunc"tsdb/points.go(Új0ºkR˜{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(b byte) bool",
        "UnderlyingTypeString": "func(b byte) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./isNumericÑ
*isNumeric/bbvar"tsdb/points.go(Åk0ák@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./isNumeric/bÔ
*lesslessfunc"tsdb/points.go(˜N0ÿPRπ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, indices []int, i int, j int) bool",
        "UnderlyingTypeString": "func(buf []byte, indices []int, i int, j int) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less˛
*less/aavar"tsdb/points.go(ÏO0êP@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less/a˛
*less/bbvar"tsdb/points.go(íP0∂P@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less/bÑ

*less/bufbufvar"tsdb/points.go(ÅO0ãO@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./less/buf¯
*less/iivar"tsdb/points.go(úO0§O@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less/ié
*less/indicesindicesvar"tsdb/points.go(çO0öO@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less/indices¯
*less/jjvar"tsdb/points.go(úO0§O@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./less/j—
*limitedRowWriterlimitedRowWritertype"tsdb/executor.go(˝Ü0ÚâR—{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "UnderlyingTypeString": "struct{chunkSize int; limit int; offset int; name string; tags map[string]string; fields github.com/influxdb/influxdb/influxql.Fields; selectNames []string; aliasNames []string; c chan *github.com/influxdb/influxdb/influxql.Row; currValues []*github.com/influxdb/influxdb/tsdb.MapperValue; totalOffSet int; totalSent int; transformer interface{Process(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zü

text/plainêlimitedRowWriter accepts raw mapper values, and will emit those values as rows in chunks
of the given size. If the chunk size is 0, no chunking will be performed. In addiiton if
limit is reached, outstanding values will be emitted. If limit is zero, no limit is enforced.
ä./limitedRowWriterå
*limitedRowWriter/AddAddfunc"tsdb/executor.go(Íã0ıó8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*limitedRowWriter",
        "TypeString": "func(values []*github.com/influxdb/influxdb/tsdb.MapperValue) (limited bool)",
        "UnderlyingTypeString": "func(values []*github.com/influxdb/influxdb/tsdb.MapperValue) (limited bool)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z¸

text/plainÌAdd accepts a slice of values, and will emit those values as per chunking requirements.
If limited is returned as true, the limit was also reached and no more values should be
added. In that case only up the limit of values are emitted.
ä./limitedRowWriter/AddÔ
;*9limitedRowWriter/Add/$executor1/$executor0/offsetRequiredoffsetRequiredvar"tsdb/executor.go(‹ç0Üé@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./limitedRowWriter/Add/$executor1/$executor0/offsetRequiredÄ
H*FlimitedRowWriter/Add/$executor3/$executor0/$executor0/$executor0/indexindexvar"tsdb/executor.go(˛í0ºì@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./limitedRowWriter/Add/$executor3/$executor0/$executor0/$executor0/indexø
#*!limitedRowWriter/Add/limitReachedlimitReachedvar"tsdb/executor.go(¢ê0Èê@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./limitedRowWriter/Add/limitReached∞
*limitedRowWriter/Add/limitedlimitedvar"tsdb/executor.go(°å0≠å@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/Add/limited¸
*limitedRowWriter/Add/rrvar"tsdb/executor.go(ã0Éå@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/Add/rÖ
*limitedRowWriter/Add/valuesvaluesvar"tsdb/executor.go(âå0ûå@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/Add/valuesú
*limitedRowWriter/FlushFlushfunc"tsdb/executor.go(Äô0Åù8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*limitedRowWriter",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zí

text/plainÉFlush instructs the limitedRowWriter to emit any pending values as a single row,
adhering to any limits. Chunking is not enforced.
ä./limitedRowWriter/FlushÄ
*limitedRowWriter/Flush/rrvar"tsdb/executor.go(Üô0ôô@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/Flush/rÇ
*limitedRowWriter/aliasNames
aliasNamesfield"tsdb/executor.go(±à0≈àRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/aliasNamesµ
*limitedRowWriter/ccfield"tsdb/executor.go(«à0ÂàR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "chan *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/cı
*limitedRowWriter/chunkSize	chunkSizefield"tsdb/executor.go(òá0ßáRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/chunkSize“
*limitedRowWriter/currValues
currValuesfield"tsdb/executor.go(Ëà0ÇâR„{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/currValues¿
*limitedRowWriter/fieldsfieldsfield"tsdb/executor.go(˛á0ôàR›{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "github.com/influxdb/influxdb/influxql.Fields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/fieldsÈ
*limitedRowWriter/limitlimitfield"tsdb/executor.go(©á0∏áRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/limitÏ
*limitedRowWriter/namenamefield"tsdb/executor.go(Àá0›áRè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/nameÏ
*limitedRowWriter/offsetoffsetfield"tsdb/executor.go(∫á0…áRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/offsetç
 *limitedRowWriter/processValuesprocessValuesfunc"tsdb/executor.go(ºù0˘ØR–{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*limitedRowWriter",
        "TypeString": "func(values []*github.com/influxdb/influxdb/tsdb.MapperValue) *github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "func(values []*github.com/influxdb/influxdb/tsdb.MapperValue) *github.com/influxdb/influxdb/influxql.Row",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZD

text/plain6processValues emits the given values in a single row.
ä ./limitedRowWriter/processValues∆
-*+limitedRowWriter/processValues/$executor2/iivar"tsdb/executor.go(ºù0˘Ø@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/$executor2/iÃ
-*+limitedRowWriter/processValues/$executor2/nnvar"tsdb/executor.go(ºù0˘Ø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/$executor2/nÄ
G*ElimitedRowWriter/processValues/$executor4/$executor0/$executor0/foundfoundvar"tsdb/executor.go(ã•0†•@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äG./limitedRowWriter/processValues/$executor4/$executor0/$executor0/found∆
-*+limitedRowWriter/processValues/$executor4/iivar"tsdb/executor.go(ºù0˘Ø@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/$executor4/iÃ
-*+limitedRowWriter/processValues/$executor4/nnvar"tsdb/executor.go(ºù0˘Ø@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/$executor4/nƒ
d*blimitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/$executor0/ffvar"tsdb/executor.go(ö≠0∫≠@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äd./limitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/$executor0/fπ
e*climitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/$executor0/okokvar"tsdb/executor.go(ö≠0∫≠@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äe./limitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/$executor0/okû
Y*WlimitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/iivar"tsdb/executor.go(Ò¨0˜¨@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äY./limitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/$executor0/iΩ
S*QlimitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/fieldsfieldsvar"tsdb/executor.go(–´0˙´@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äS./limitedRowWriter/processValues/$executor6/$executor0/$executor0/$executor1/fields˘
;*9limitedRowWriter/processValues/$executor6/$executor0/valsvalsvar"tsdb/executor.go(œ©0˝©@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä;./limitedRowWriter/processValues/$executor6/$executor0/valsú
-*+limitedRowWriter/processValues/$executor6/vvvar"tsdb/executor.go(ºù0˘Ø@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/$executor6/vÿ
,**limitedRowWriter/processValues/aliasFieldsaliasFieldsvar"tsdb/executor.go(±§0„§@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./limitedRowWriter/processValues/aliasFields’
+*)limitedRowWriter/processValues/aliasNames
aliasNamesvar"tsdb/executor.go(ﬁû0¯û@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./limitedRowWriter/processValues/aliasNamesƒ
(*&limitedRowWriter/processValues/hasTimehasTimevar"tsdb/executor.go(â†0ô†@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./limitedRowWriter/processValues/hasTimeê
"* limitedRowWriter/processValues/rrvar"tsdb/executor.go(¬ù0’ù@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.limitedRowWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./limitedRowWriter/processValues/rÑ
$*"limitedRowWriter/processValues/rowrowvar"tsdb/executor.go(í¶0Ë¶@Ré{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./limitedRowWriter/processValues/row€
-*+limitedRowWriter/processValues/selectFieldsselectFieldsvar"tsdb/executor.go(¸£0Ø§@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./limitedRowWriter/processValues/selectFieldsÿ
,**limitedRowWriter/processValues/selectNamesselectNamesvar"tsdb/executor.go(¿û0‹û@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./limitedRowWriter/processValues/selectNames–
,**limitedRowWriter/processValues/singleValuesingleValuevar"tsdb/executor.go(†®0·®@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./limitedRowWriter/processValues/singleValueô
'*%limitedRowWriter/processValues/valuesvaluesvar"tsdb/executor.go(Âù0˙ù@Rö{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.MapperValue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./limitedRowWriter/processValues/valuesÖ
*limitedRowWriter/selectNamesselectNamesfield"tsdb/executor.go(õà0ØàRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/selectNamesÇ
*limitedRowWriter/tagstagsfield"tsdb/executor.go(ﬂá0¸áR•{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/tags˚
*limitedRowWriter/totalOffSettotalOffSetfield"tsdb/executor.go(Ñâ0ìâRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/totalOffSetı
*limitedRowWriter/totalSent	totalSentfield"tsdb/executor.go(ïâ0§âRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/totalSentÎ
*limitedRowWriter/transformertransformerfield"tsdb/executor.go(ßâ0âR˘{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "limitedRowWriter",
        "TypeString": "interface{Process(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue}",
        "UnderlyingTypeString": "interface{Process(input []*github.com/influxdb/influxdb/tsdb.MapperValue) []*github.com/influxdb/influxdb/tsdb.MapperValue}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./limitedRowWriter/transformer¢
*matchesWherematchesWherefunc"tsdb/mapper.go(…‡0Ê·RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(f github.com/influxdb/influxdb/influxql.Expr, fields map[string]interface{}) bool",
        "UnderlyingTypeString": "func(f github.com/influxdb/influxdb/influxql.Expr, fields map[string]interface{}) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZO

text/plainAmatchesFilter returns true if the value matches the where clause
ä./matchesWhere°
*matchesWhere/$mapper0/okokvar"tsdb/mapper.go(ñ·0æ·@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./matchesWhere/$mapper0/okÎ
*matchesWhere/ffvar"tsdb/mapper.go(€‡0Í‡@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./matchesWhere/fø
*matchesWhere/fieldsfieldsvar"tsdb/mapper.go(Ï‡0â·@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./matchesWhere/fields¡
*maxFloat64DigitsmaxFloat64Digitsconst"tsdb/points.go(Ê0˚RÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zx

text/plainjthe number of characters required for the largest float64 before a range check
would occur during parsing
ä./maxFloat64Digitsü
*maxInt64DigitsmaxInt64Digitsconst"tsdb/points.go(Ù
0áRÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z\

text/plainNthe number of characters for the largest possible int64 (9223372036854775807)
ä./maxInt64Digits¬
*maxStringLengthmaxStringLengthconst"tsdb/meta.go(â0§RÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./maxStringLength›
*measurementEscapeCodesmeasurementEscapeCodesvar"tsdb/points.go(¶0¸RÚ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "map[byte][]byte",
        "UnderlyingTypeString": "map[byte][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./measurementEscapeCodesÏ
*measurementsFromSourcesOrDBmeasurementsFromSourcesOrDBfunc"tsdb/query_executor.go(∑±0”∑R©{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(db *github.com/influxdb/influxdb/tsdb.DatabaseIndex, sources ...github.com/influxdb/influxdb/influxql.Source) (github.com/influxdb/influxdb/tsdb.Measurements, error)",
        "UnderlyingTypeString": "func(db *github.com/influxdb/influxdb/tsdb.DatabaseIndex, sources ...github.com/influxdb/influxdb/influxql.Source) (github.com/influxdb/influxdb/tsdb.Measurements, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zª

text/plain¨measurementsFromSourcesOrDB returns a list of measurements from the
sources passed in or, if sources is empty, a list of all
measurement names from the database passed in.
ä./measurementsFromSourcesOrDBÛ
ê*çmeasurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/measurementmeasurementvar"tsdb/query_executor.go(∞≥0÷≥@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äè./measurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/measurement∏
t*rmeasurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/mmvar"tsdb/query_executor.go(˛≤0•≥@Rû{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ät./measurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/mﬂ
u*smeasurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/okokvar"tsdb/query_executor.go(˛≤0•≥@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äu./measurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/$query_executor0/$query_executor0/okä
W*UmeasurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/sourcesourcevar"tsdb/query_executor.go(∑±0”∑@R•{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "interface{source(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äW./measurementsFromSourcesOrDB/$query_executor0/$query_executor0/$query_executor0/sourceÏ
R*PmeasurementsFromSourcesOrDB/$query_executor0/$query_executor1/$query_executor0/mmvar"tsdb/query_executor.go(∑±0”∑@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äR./measurementsFromSourcesOrDB/$query_executor0/$query_executor1/$query_executor0/mç
 *measurementsFromSourcesOrDB/dbdbvar"tsdb/query_executor.go(ÿ±0È±@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./measurementsFromSourcesOrDB/db©
**(measurementsFromSourcesOrDB/measurementsmeasurementsvar"tsdb/query_executor.go(§≤0Ω≤@Rò{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Measurements",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./measurementsFromSourcesOrDB/measurementsò
%*#measurementsFromSourcesOrDB/sourcessourcesvar"tsdb/query_executor.go(Î±0Ö≤@Rñ{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Source",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./measurementsFromSourcesOrDB/sourcesß
*mergeSeriesFiltersmergeSeriesFiltersfunc"tsdb/meta.go(ﬁ|0ïîRÈ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(op github.com/influxdb/influxdb/influxql.Token, ids github.com/influxdb/influxdb/tsdb.SeriesIDs, lfilters map[uint64]github.com/influxdb/influxdb/influxql.Expr, rfilters map[uint64]github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, map[uint64]github.com/influxdb/influxdb/influxql.Expr)",
        "UnderlyingTypeString": "func(op github.com/influxdb/influxdb/influxql.Token, ids github.com/influxdb/influxdb/tsdb.SeriesIDs, lfilters map[uint64]github.com/influxdb/influxdb/influxql.Expr, rfilters map[uint64]github.com/influxdb/influxdb/influxql.Expr) (github.com/influxdb/influxdb/tsdb.SeriesIDs, map[uint64]github.com/influxdb/influxdb/influxql.Expr)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z]

text/plainOmergeSeriesFilters merges two sets of filter expressions and culls series IDs.
ä./mergeSeriesFilters¢
+*)mergeSeriesFilters/$meta1/$meta0/$meta2/bbvar"tsdb/meta.go(ªí0„í@R§{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.BooleanLiteral",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./mergeSeriesFilters/$meta1/$meta0/$meta2/b√
,**mergeSeriesFilters/$meta1/$meta0/$meta2/okokvar"tsdb/meta.go(ªí0„í@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä,./mergeSeriesFilters/$meta1/$meta0/$meta2/okè
%*#mergeSeriesFilters/$meta1/$meta0/bebevar"tsdb/meta.go(Œê0õë@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.BinaryExpr",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.BinaryExpr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä%./mergeSeriesFilters/$meta1/$meta0/beö
'*%mergeSeriesFilters/$meta1/$meta0/exprexprvar"tsdb/meta.go(»ë0Ëë@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./mergeSeriesFilters/$meta1/$meta0/expr£
**(mergeSeriesFilters/$meta1/$meta0/lfilterlfiltervar"tsdb/meta.go(Äé0Æé@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./mergeSeriesFilters/$meta1/$meta0/lfilter£
**(mergeSeriesFilters/$meta1/$meta0/rfilterrfiltervar"tsdb/meta.go(Äé0Æé@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./mergeSeriesFilters/$meta1/$meta0/rfilter™
*mergeSeriesFilters/$meta1/ididvar"tsdb/meta.go(ﬁ|0ïî@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/$meta1/idú
*mergeSeriesFilters/defdefvar"tsdb/meta.go(Úå0˛å@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/defà
*mergeSeriesFilters/filtersfiltersvar"tsdb/meta.go(≥~0ﬂ~@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/filters≈
*mergeSeriesFilters/idsidsvar"tsdb/meta.go(â}0ñ}@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/idsã
*mergeSeriesFilters/lfilterslfiltersvar"tsdb/meta.go(ò}0√}@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/lfiltersΩ
*mergeSeriesFilters/opopvar"tsdb/meta.go(ˆ|0á}@RË{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Token",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/opã
*mergeSeriesFilters/rfiltersrfiltersvar"tsdb/meta.go(ò}0√}@R§{
        "PkgName": "tsdb",
        "TypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "map[uint64]github.com/influxdb/influxdb/influxql.Expr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mergeSeriesFilters/rfilters˚
*mergeSeriesFilters/seriesseriesvar"tsdb/meta.go(Ü0ñ@RÌ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.SeriesIDs",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z+

text/plainResulting list of series IDs
ä./mergeSeriesFilters/seriesƒ
*minFloat64DigitsminFloat64Digitsconst"tsdb/points.go(Û0àRÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z{

text/plainmthe number of characters required for smallest float64 before a range check occur
would occur during parsing
ä./minFloat64Digits°
*minInt64DigitsminInt64Digitsconst"tsdb/points.go(ﬁ0ÒRÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z^

text/plainPthe number of characters for the smallest possible int64 (-9223372036854775808)
ä./minInt64Digits†
*multiCursormultiCursortype"tsdb/cursor.go(Á0≥R¸{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.multiCursor",
        "UnderlyingTypeString": "struct{cursors []github.com/influxdb/influxdb/tsdb.Cursor; heap github.com/influxdb/influxdb/tsdb.cursorHeap; prev []byte}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZW

text/plainImultiCursor represents a cursor that combines multiple cursors into one.
ä./multiCursorË
*multiCursor/NextNextfunc"tsdb/cursor.go(Û0∏	8R◊{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*multiCursor",
        "TypeString": "func() (key []byte, value []byte)",
        "UnderlyingTypeString": "func() (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z?

text/plain1Next returns the next key/value from the cursor.
ä./multiCursor/Nextú
*multiCursor/Next/keykeyvar"tsdb/cursor.go(í	0£	@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Next/keyÈ
*multiCursor/Next/mcmcvar"tsdb/cursor.go(˘0à	@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Next/mc¢
*multiCursor/Next/valuevaluevar"tsdb/cursor.go(í	0£	@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Next/valueÛ
*multiCursor/SeekSeekfunc"tsdb/cursor.go(ﬁ0Ω8RÌ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*multiCursor",
        "TypeString": "func(seek []byte) (key []byte, value []byte)",
        "UnderlyingTypeString": "func(seek []byte) (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z4

text/plain&Seek moves the cursor to a given key.
ä./multiCursor/Seek∫
&*$multiCursor/Seek/$cursor0/$cursor0/kkvar"tsdb/cursor.go(±0≈@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./multiCursor/Seek/$cursor0/$cursor0/k∫
&*$multiCursor/Seek/$cursor0/$cursor0/vvvar"tsdb/cursor.go(±0≈@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./multiCursor/Seek/$cursor0/$cursor0/vû
*multiCursor/Seek/$cursor0/ccvar"tsdb/cursor.go(ﬁ0Ω@Rº{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/$cursor0/c¢
*multiCursor/Seek/$cursor0/iivar"tsdb/cursor.go(ﬁ0Ω@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/$cursor0/iÈ
*multiCursor/Seek/hhvar"tsdb/cursor.go(≥0‹@Rô{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/hú
*multiCursor/Seek/keykeyvar"tsdb/cursor.go(à0ô@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/keyÈ
*multiCursor/Seek/mcmcvar"tsdb/cursor.go(‰0Û@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/mcü
*multiCursor/Seek/seekseekvar"tsdb/cursor.go(˙0Ö@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/seek¢
*multiCursor/Seek/valuevaluevar"tsdb/cursor.go(à0ô@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/Seek/value™
*multiCursor/cursorscursorsfield"tsdb/cursor.go(˝0çR“{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "multiCursor",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Cursor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/cursors¨
*multiCursor/heapheapfield"tsdb/cursor.go(è0°R›{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "multiCursor",
        "TypeString": "github.com/influxdb/influxdb/tsdb.cursorHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/heapå
*multiCursor/poppopfunc"tsdb/cursor.go(≥
0¶RΩ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*multiCursor",
        "TypeString": "func() (key []byte, value []byte)",
        "UnderlyingTypeString": "func() (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÅ

text/plainspop returns the next item from the heap.
Reads the next key/value from item's cursor and puts it back on the heap.
ä./multiCursor/popó
(*&multiCursor/pop/$cursor0/$cursor0/itemitemvar"tsdb/cursor.go(˜0£@Rú{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.cursorHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./multiCursor/pop/$cursor0/$cursor0/itemö
*multiCursor/pop/keykeyvar"tsdb/cursor.go(—
0‚
@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/pop/keyÁ
*multiCursor/pop/mcmcvar"tsdb/cursor.go(π
0»
@Rñ{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.multiCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/pop/mc†
*multiCursor/pop/valuevaluevar"tsdb/cursor.go(—
0‚
@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/pop/valueŸ
*multiCursor/prevprevfield"tsdb/cursor.go(£0±Rä{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "multiCursor",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./multiCursor/prev™
*mustMarshalJSONmustMarshalJSONfunc"tsdb/shard.go(Üú0êùRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(v interface{}) []byte",
        "UnderlyingTypeString": "func(v interface{}) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z∆

text/plain∑mustMarshal encodes a value to JSON.
This will panic if an error occurs. This should only be used internally when
an invalid marshal will cause corruption and a panic is appropriate.
ä./mustMarshalJSONï
*mustMarshalJSON/bbvar"tsdb/shard.go(¥ú0Õú@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustMarshalJSON/b≠
*mustMarshalJSON/errerrvar"tsdb/shard.go(¥ú0Õú@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustMarshalJSON/errü
*mustMarshalJSON/vvvar"tsdb/shard.go(õú0®ú@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustMarshalJSON/v¿
*mustUnmarshalJSONmustUnmarshalJSONfunc"tsdb/shard.go(‹û0ÂüRè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(b []byte, v interface{})",
        "UnderlyingTypeString": "func(b []byte, v interface{})",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z–

text/plain¡mustUnmarshalJSON decodes a value from JSON.
This will panic if an error occurs. This should only be used internally when
an invalid unmarshal will cause corruption and a panic is appropriate.
ä./mustUnmarshalJSON¡
*mustUnmarshalJSON/$shard0/errerrvar"tsdb/shard.go(íü0≠ü@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustUnmarshalJSON/$shard0/errô
*mustUnmarshalJSON/bbvar"tsdb/shard.go(Ûû0˚û@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustUnmarshalJSON/b£
*mustUnmarshalJSON/vvvar"tsdb/shard.go(˝û0äü@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./mustUnmarshalJSON/vÊ
*newEngineFuncsnewEngineFuncsvar"tsdb/engine.go(¨0€R»{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "map[string]github.com/influxdb/influxdb/tsdb.NewEngineFunc",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/tsdb.NewEngineFunc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;newEngineFuncs is a lookup of engine constructors by name.
ä./newEngineFuncs¨
*newFieldsFromBinarynewFieldsFromBinaryfunc"tsdb/points.go(ﬁ‹0ÔÊR«{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte) github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "func(buf []byte) github.com/influxdb/influxdb/tsdb.Fields",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary§
*newFieldsFromBinary/bufbufvar"tsdb/points.go(˜‹0Å›@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/buf∂
*newFieldsFromBinary/errerrvar"tsdb/points.go(Û›0áﬁ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/errﬂ
*newFieldsFromBinary/fieldsfieldsvar"tsdb/points.go(ç›0ü›@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/fieldsò
*newFieldsFromBinary/iivar"tsdb/points.go(©›0ª›@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/iß
*newFieldsFromBinary/namenamevar"tsdb/points.go(æ›0”›@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/name¥
*newFieldsFromBinary/valuevaluevar"tsdb/points.go(÷›0›@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/value≥
*newFieldsFromBinary/valueBufvalueBufvar"tsdb/points.go(æ›0”›@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newFieldsFromBinary/valueBufã
*newPointHeapnewPointHeapfunc"tsdb/mapper.go(…ì0ûîRª{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func() *github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/tsdb.pointHeap",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newPointHeap·
*newPointHeap/qqvar"tsdb/mapper.go(Îì0Çî@Ró{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newPointHeap/q”
*newSeriesCursornewSeriesCursorfunc"tsdb/mapper.go(∫¿0Û¡RØ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(cur github.com/influxdb/influxdb/tsdb.Cursor, filter github.com/influxdb/influxdb/influxql.Expr, tags map[string]string) *github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "func(cur github.com/influxdb/influxdb/tsdb.Cursor, filter github.com/influxdb/influxdb/influxql.Expr, tags map[string]string) *github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;newSeriesCursor returns a new instance of a series cursor.
ä./newSeriesCursorí
*newSeriesCursor/curcurvar"tsdb/mapper.go(œ¿0Ÿ¿@Rº{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newSeriesCursor/curÄ
*newSeriesCursor/filterfiltervar"tsdb/mapper.go(€¿0Ô¿@R°{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newSeriesCursor/filterµ
*newSeriesCursor/tagstagsvar"tsdb/mapper.go(Ò¿0á¡@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newSeriesCursor/tags¿
*newStringSetnewStringSetfunc"tsdb/meta.go(≥ì0ˆìRπ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z7

text/plain)newStringSet returns an empty stringSet.
ä./newStringSet◊
*newTagSetCursornewTagSetCursorfunc"tsdb/mapper.go(Ì§0‚¶R«{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(m string, t map[string]string, c []*github.com/influxdb/influxdb/tsdb.seriesCursor, d *github.com/influxdb/influxdb/tsdb.FieldCodec) *github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "func(m string, t map[string]string, c []*github.com/influxdb/influxdb/tsdb.seriesCursor, d *github.com/influxdb/influxdb/tsdb.FieldCodec) *github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'newTagSetCursor returns a tagSetCursor
ä./newTagSetCursorÏ
*newTagSetCursor/ccvar"tsdb/mapper.go(°•0≤•@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newTagSetCursor/c‰
*newTagSetCursor/ddvar"tsdb/mapper.go(¥•0¡•@Rî{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newTagSetCursor/dñ
*newTagSetCursor/mmvar"tsdb/mapper.go(Ç•0ä•@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newTagSetCursor/m¨
*newTagSetCursor/ttvar"tsdb/mapper.go(å•0ü•@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newTagSetCursor/tÓ
*newTagSetCursor/tsctscvar"tsdb/mapper.go(‘•0”¶@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./newTagSetCursor/tsc˝
*nopWriteToClosernopWriteToClosertype"tsdb/snapshot_writer.go(∆0ÓRö{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.nopWriteToCloser",
        "UnderlyingTypeString": "struct{io.WriterTo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./nopWriteToCloserò
*nopWriteToCloser/CloseClosefunc"tsdb/snapshot_writer.go(0ß8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*nopWriteToCloser",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./nopWriteToCloser/CloseÖ
*nopWriteToCloser/Close/wwvar"tsdb/snapshot_writer.go(ˆ0â@R†{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.nopWriteToCloser",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.nopWriteToCloser",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./nopWriteToCloser/Close/wÃ
*nopWriteToCloser/WriterToWriterTofield"tsdb/snapshot_writer.go(·0Ï8R‹{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "nopWriteToCloser",
        "TypeString": "io.WriterTo",
        "UnderlyingTypeString": "interface{WriteTo(w io.Writer) (n int64, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./nopWriteToCloser/WriterToÏ
*parseNumberparseNumberfunc"tsdb/points.go(Œÿ0‹‹Rü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(val []byte) (interface{}, error)",
        "UnderlyingTypeString": "func(val []byte) (interface{}, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parseNumberö
*parseNumber/$points1/iivar"tsdb/points.go(ÔŸ0ıŸ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parseNumber/$points1/iî
*parseNumber/valvalvar"tsdb/points.go(ﬂÿ0Èÿ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parseNumber/valÒ
*
parsePoint
parsePointfunc"tsdb/points.go(‚0à$R©{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, defaultTime time.Time, precision string) (github.com/influxdb/influxdb/tsdb.Point, error)",
        "UnderlyingTypeString": "func(buf []byte, defaultTime time.Time, precision string) (github.com/influxdb/influxdb/tsdb.Point, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint∆
"* parsePoint/$points5/$points1/errerrvar"tsdb/points.go(Ÿ"0à#@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./parsePoint/$points5/$points1/errØ
!*parsePoint/$points5/$points1/tstsvar"tsdb/points.go(Ÿ"0à#@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./parsePoint/$points5/$points1/tsê
*parsePoint/bufbufvar"tsdb/points.go(Ú0¸@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/buf÷
*parsePoint/defaultTimedefaultTimevar"tsdb/points.go(˛0ì@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/defaultTime¢
*parsePoint/errerrvar"tsdb/points.go(Ö0•@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/errô
*parsePoint/fieldsfieldsvar"tsdb/points.go(ˇ0ß@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/fieldsê
*parsePoint/keykeyvar"tsdb/points.go(Ö0•@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/keyä
*parsePoint/posposvar"tsdb/points.go(Ö0•@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/pos¢
*parsePoint/precision	precisionvar"tsdb/points.go(ï0•@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/precision—
*parsePoint/ptptvar"tsdb/points.go(ƒ!0É"@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/ptç
*parsePoint/tstsvar"tsdb/points.go(¯ 0ö!@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./parsePoint/tsÙ
*pointpointtype"tsdb/points.go(∫0ó
R˝{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "struct{time time.Time; key []byte; fields []byte; ts []byte; data []byte; cachedFields map[string]interface{}; cachedName string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z<

text/plain.point is the default implementation of Point.
ä./pointÌ
*point/AddFieldAddFieldfunc"tsdb/points.go(ı∆0ñ»8R◊{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(name string, value interface{})",
        "UnderlyingTypeString": "func(name string, value interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZB

text/plain4AddField adds or replaces a field value for a point
ä./point/AddField’
*point/AddField/fieldsfieldsvar"tsdb/points.go(±«0≈«@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddField/fieldsù
*point/AddField/namenamevar"tsdb/points.go(é«0ô«@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddField/nameÿ
*point/AddField/ppvar"tsdb/points.go(˚∆0É«@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddField/p™
*point/AddField/valuevaluevar"tsdb/points.go(õ«0¨«@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddField/value◊
*point/AddTagAddTagfunc"tsdb/points.go(˝√0¯ƒ8RÀ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(key string, value string)",
        "UnderlyingTypeString": "func(key string, value string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z>

text/plain0AddTag adds or replaces a tag value for a point
ä./point/AddTagñ
*point/AddTag/keykeyvar"tsdb/points.go(îƒ0•ƒ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddTag/key‘
*point/AddTag/ppvar"tsdb/points.go(Éƒ0ãƒ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddTag/pƒ
*point/AddTag/tagstagsvar"tsdb/points.go(™ƒ0∫ƒ@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddTag/tagsú
*point/AddTag/valuevaluevar"tsdb/points.go(îƒ0•ƒ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/AddTag/valueÔ
*
point/DataDatafunc"tsdb/points.go(…∂0˘∂8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Data–
*point/Data/ppvar"tsdb/points.go(œ∂0◊∂@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Data/pÒ
*point/FieldsFieldsfunc"tsdb/points.go(•≈0º∆8RÌ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z6

text/plain(Fields returns the fields for the point
ä./point/Fields‘
*point/Fields/ppvar"tsdb/points.go(´≈0≥≈@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Fields/pü
*point/GetPrecisionMultiplierGetPrecisionMultiplierfunc"tsdb/points.go(ñÃ0∞Œ8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(precision string) int64",
        "UnderlyingTypeString": "func(precision string) int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZZ

text/plainLGetPrecisionMultiplier will return a multiplier for the precision specified
ä./point/GetPrecisionMultiplier∂
 *point/GetPrecisionMultiplier/ddvar"tsdb/points.go(ÿÃ0ÏÃ@RÃ{
        "PkgName": "tsdb",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./point/GetPrecisionMultiplier/dÙ
 *point/GetPrecisionMultiplier/ppvar"tsdb/points.go(úÃ0§Ã@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./point/GetPrecisionMultiplier/p»
(*&point/GetPrecisionMultiplier/precision	precisionvar"tsdb/points.go(ΩÃ0ÕÃ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä(./point/GetPrecisionMultiplier/precisionı
*point/HashIDHashIDfunc"tsdb/points.go(»–0¨—8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/HashID≥
*point/HashID/hhvar"tsdb/points.go(Î–0¸–@RÈ{
        "PkgName": "tsdb",
        "TypeString": "hash.Hash64",
        "UnderlyingTypeString": "interface{Sum64() uint64; hash.Hash}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/HashID/h‘
*point/HashID/ppvar"tsdb/points.go(Œ–0÷–@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/HashID/pñ
*point/HashID/sumsumvar"tsdb/points.go(é—0û—@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/HashID/sumÏ
*	point/KeyKeyfunc"tsdb/points.go(Æ∑0‹∑8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/KeyŒ
*point/Key/ppvar"tsdb/points.go(¥∑0º∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Key/pÆ
*
point/NameNamefunc"tsdb/points.go(‚∏0ıπ8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z=

text/plain/Name return the measurement name for the point
ä./point/Name–
*point/Name/ppvar"tsdb/points.go(Ë∏0∏@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Name/p˙
*point/SetDataSetDatafunc"tsdb/points.go(˚∂0¨∑8R´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(b []byte)",
        "UnderlyingTypeString": "func(b []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetDataí
*point/SetData/bbvar"tsdb/points.go(ì∑0õ∑@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetData/b÷
*point/SetData/ppvar"tsdb/points.go(Å∑0â∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetData/p√
*point/SetNameSetNamefunc"tsdb/points.go(≠∫0ëª8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(name string)",
        "UnderlyingTypeString": "func(name string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZA

text/plain3SetName updates the measurement name for the point
ä./point/SetNameõ
*point/SetName/namenamevar"tsdb/points.go(≈∫0–∫@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetName/name÷
*point/SetName/ppvar"tsdb/points.go(≥∫0ª∫@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetName/p„
*point/SetPrecisionSetPrecisionfunc"tsdb/points.go(’»0≈À8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(precision string)",
        "UnderlyingTypeString": "func(precision string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZH

text/plain:SetPrecision will round a time to the specified precision
ä./point/SetPrecision‡
*point/SetPrecision/ppvar"tsdb/points.go(€»0„»@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetPrecision/p¥
*point/SetPrecision/precision	precisionvar"tsdb/points.go(Ú»0Ç…@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetPrecision/precision¯
*point/SetTagsSetTagsfunc"tsdb/points.go(˘¬0»√8RÒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(tags github.com/influxdb/influxdb/tsdb.Tags)",
        "UnderlyingTypeString": "func(tags github.com/influxdb/influxdb/tsdb.Tags)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z6

text/plain(SetTags replaces the tags for the point
ä./point/SetTags÷
*point/SetTags/ppvar"tsdb/points.go(ˇ¬0á√@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetTags/p∆
*point/SetTags/tagstagsvar"tsdb/points.go(ë√0ö√@RÒ{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetTags/tagsº
*point/SetTimeSetTimefunc"tsdb/points.go(¢º0÷º8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func(t time.Time)",
        "UnderlyingTypeString": "func(t time.Time)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z:

text/plain,SetTime updates the timestamp for the point
ä./point/SetTime÷
*point/SetTime/ppvar"tsdb/points.go(®º0∞º@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetTime/p¿
*point/SetTime/ttvar"tsdb/points.go(∫º0≈º@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/SetTime/tı
*point/StringStringfunc"tsdb/points.go(≤Œ0Úœ8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/String‘
*point/String/ppvar"tsdb/points.go(∏Œ0¿Œ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/String/pÊ
*
point/TagsTagsfunc"tsdb/points.go(ÇΩ0–¿8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Tags",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Tags",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'Tags returns the tag set for the point
ä./point/Tags™
 *point/Tags/$points0/$points0/iivar"tsdb/points.go(”æ0ﬂæ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./point/Tags/$points0/$points0/i∂
"* point/Tags/$points0/$points0/keykeyvar"tsdb/points.go(Êæ0˜æ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./point/Tags/$points0/$points0/keyπ
#*!point/Tags/$points0/$points0/namenamevar"tsdb/points.go(÷Ω0¯Ω@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./point/Tags/$points0/$points0/name∞
"* point/Tags/$points0/$points0/posposvar"tsdb/points.go(÷Ω0¯Ω@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./point/Tags/$points0/$points0/posº
$*"point/Tags/$points0/$points0/valuevaluevar"tsdb/points.go(Êæ0˜æ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä$./point/Tags/$points0/$points0/value–
*point/Tags/ppvar"tsdb/points.go(àΩ0êΩ@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Tags/p´
*point/Tags/tagstagsvar"tsdb/points.go(°Ω0ºΩ@R‹{
        "PkgName": "tsdb",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Tags/tags≠
*
point/TimeTimefunc"tsdb/points.go(æª0Òª8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() time.Time",
        "UnderlyingTypeString": "func() time.Time",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z6

text/plain(Time return the timestamp for the point
ä./point/Time–
*point/Time/ppvar"tsdb/points.go(ƒª0Ãª@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/Time/p˘
*point/UnixNanoUnixNanofunc"tsdb/points.go(Æ—0Ó—8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/UnixNanoÿ
*point/UnixNano/ppvar"tsdb/points.go(¥—0º—@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/UnixNano/pπ
*point/cachedFieldscachedFieldsfield"tsdb/points.go(≥	0÷	R§{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z8

text/plain*cached version of parsed fields from data
ä./point/cachedFieldsê
*point/cachedName
cachedNamefield"tsdb/points.go(Ñ
0ï
RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'cached version of parsed name from key
ä./point/cachedNameÒ
*
point/datadatafield"tsdb/points.go(˜0Ç	RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z(

text/plainbinary encoded field data
ä./point/data˘
*point/fieldsfieldsfield"tsdb/points.go(û0´RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z*

text/plaintext encoding of field data
ä./point/fields‡
*	point/keykeyfield"tsdb/points.go(Ò0˚RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zô

text/plainätext encoding of measurement and tags
key must always be stored sorted by tags, if the original line was not sorted,
we need to resort it
ä./point/key”
*
point/namenamefunc"tsdb/points.go(ﬁ∑0Æ∏Rè{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() []byte",
        "UnderlyingTypeString": "func() []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/nameï
*point/name/namenamevar"tsdb/points.go(ˇ∑0ü∏@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/name/name–
*point/name/ppvar"tsdb/points.go(‰∑0Ï∑@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/name/pı
*
point/timetimefield"tsdb/points.go( 0ÿR≤{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/timeÏ

*point/tstsfield"tsdb/points.go(Õ0÷RÑ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "point",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z)

text/plaintext encoding of timestamp
ä
./point/ts∏
*point/unmarshalBinaryunmarshalBinaryfunc"tsdb/points.go(Ùœ0∆–R”{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*point",
        "TypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/tsdb.Fields",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/unmarshalBinaryÊ
*point/unmarshalBinary/ppvar"tsdb/points.go(˙œ0Ç–@Rä{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./point/unmarshalBinary/p˘
*	pointHeap	pointHeaptype"tsdb/mapper.go(≠ì0«ìR≤{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeapÒ
*pointHeap/LenLenfunc"tsdb/mapper.go(†î0–î8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "pointHeap",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/LenÊ
*pointHeap/Len/pqpqvar"tsdb/mapper.go(¶î0≤î@Ró{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Len/pqé
*pointHeap/LessLessfunc"tsdb/mapper.go(“î0Òï8R¿{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "pointHeap",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Lessé
*pointHeap/Less/iivar"tsdb/mapper.go(Îî0Ûî@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Less/ié
*pointHeap/Less/jjvar"tsdb/mapper.go(Îî0Ûî@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Less/jË
*pointHeap/Less/pqpqvar"tsdb/mapper.go(ÿî0‰î@Ró{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Less/pqÇ
*pointHeap/PopPopfunc"tsdb/mapper.go(öó0íò8R∑{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*pointHeap",
        "TypeString": "func() interface{}",
        "UnderlyingTypeString": "func() interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/PopÔ
*pointHeap/Pop/itemitemvar"tsdb/mapper.go(ﬂó0Ôó@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Pop/itemå
*pointHeap/Pop/nnvar"tsdb/mapper.go(–ó0›ó@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Pop/nÈ
*pointHeap/Pop/oldoldvar"tsdb/mapper.go(ƒó0Œó@Ró{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Pop/old·
*pointHeap/Pop/pqpqvar"tsdb/mapper.go(†ó0≠ó@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Pop/pqá
*pointHeap/PushPushfunc"tsdb/mapper.go(∑ñ0òó8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*pointHeap",
        "TypeString": "func(x interface{})",
        "UnderlyingTypeString": "func(x interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/PushÒ
*pointHeap/Push/itemitemvar"tsdb/mapper.go(„ñ0˝ñ@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Push/item„
*pointHeap/Push/pqpqvar"tsdb/mapper.go(Ωñ0 ñ@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Push/pqû
*pointHeap/Push/xxvar"tsdb/mapper.go(—ñ0ﬁñ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Push/xÑ
*pointHeap/SwapSwapfunc"tsdb/mapper.go(Ûï0µñ8R∂{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "pointHeap",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Swapé
*pointHeap/Swap/iivar"tsdb/mapper.go(åñ0îñ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Swap/ié
*pointHeap/Swap/jjvar"tsdb/mapper.go(åñ0îñ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Swap/jË
*pointHeap/Swap/pqpqvar"tsdb/mapper.go(˘ï0Öñ@Ró{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeap/Swap/pq¥
*pointHeapItempointHeapItemtype"tsdb/mapper.go(Æí0¶ìR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "struct{timestamp int64; value []byte; cursor *github.com/influxdb/influxdb/tsdb.seriesCursor}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeapItemπ
*pointHeapItem/cursorcursorfield"tsdb/mapper.go(Èí0ÄìRﬁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "pointHeapItem",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeapItem/cursorÓ
*pointHeapItem/timestamp	timestampfield"tsdb/mapper.go(∆í0’íRä{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "pointHeapItem",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeapItem/timestamp‰
*pointHeapItem/valuevaluefield"tsdb/mapper.go(◊í0ÁíRå{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "pointHeapItem",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./pointHeapItem/valueÌ
*processForMathprocessForMathfunc"tsdb/executor.go(€æ0ÛƒRô{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(fields github.com/influxdb/influxdb/influxql.Fields, results [][]interface{}) [][]interface{}",
        "UnderlyingTypeString": "func(fields github.com/influxdb/influxdb/influxql.Fields, results [][]interface{}) [][]interface{}",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zz

text/plainlprocessForMath will apply any math that was specified in the select statement
against the passed in results
ä./processForMathÌ
?*=processForMath/$executor0/$executor0/$executor0/$executor1/okokvar"tsdb/executor.go(∞¿0’¿@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä?./processForMath/$executor0/$executor0/$executor0/$executor1/ok◊
4*2processForMath/$executor0/$executor0/$executor0/okokvar"tsdb/executor.go(Âø0ã¿@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä4./processForMath/$executor0/$executor0/$executor0/ok¯
*processForMath/$executor0/ffvar"tsdb/executor.go(€æ0Ûƒ@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/$executor0/f¯
*processForMath/$executor2/ffvar"tsdb/executor.go(€æ0Ûƒ@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/$executor2/f¶
*processForMath/$executor2/iivar"tsdb/executor.go(€æ0Ûƒ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/$executor2/i“
3*1processForMath/$executor3/$executor0/$executor0/jjvar"tsdb/executor.go(€æ0Ûƒ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./processForMath/$executor3/$executor0/$executor0/j°
3*1processForMath/$executor3/$executor0/$executor0/ppvar"tsdb/executor.go(€æ0Ûƒ@Rè{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Processor",
        "UnderlyingTypeString": "func(values []interface{}) interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä3./processForMath/$executor3/$executor0/$executor0/p¶
*processForMath/$executor3/iivar"tsdb/executor.go(€æ0Ûƒ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/$executor3/iÛ
*processForMath/fieldsfieldsvar"tsdb/executor.go(Ôæ0Öø@Rî{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/influxql.Fields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Field",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/fields§
*processForMath/hasMathhasMathvar"tsdb/executor.go(≥ø0√ø@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/hasMath∆
*processForMath/mathResultsmathResultsvar"tsdb/executor.go(À¬0˝¬@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/mathResultsá
*processForMath/processors
processorsvar"tsdb/executor.go(õ¡0–¡@Rú{
        "PkgName": "tsdb",
        "TypeString": "[]github.com/influxdb/influxdb/influxql.Processor",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/influxql.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/processors∫
*processForMath/resultsresultsvar"tsdb/executor.go(áø0ûø@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/results´
*processForMath/startIndex
startIndexvar"tsdb/executor.go(“¡0·¡@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./processForMath/startIndexè
*quoteReplacerquoteReplacervar"tsdb/points.go(÷0ÑR{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "*regexp.Regexp",
        "UnderlyingTypeString": "*regexp.Regexp",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZM

text/plain?Compile the regex that detects unquoted double quote sequences
ä./quoteReplacer‡
*resultsEmptyresultsEmptyfunc"tsdb/executor.go(ç÷0ìÿR£{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(resultValues [][]interface{}) bool",
        "UnderlyingTypeString": "func(resultValues [][]interface{}) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zi

text/plain[resultsEmpty will return true if the all the result values are empty or contain only nulls
ä./resultsEmptyŒ
1*/resultsEmpty/$executor0/$executor0/$executor0/iivar"tsdb/executor.go(¥◊0∫◊@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä1./resultsEmpty/$executor0/$executor0/$executor0/iø
*resultsEmpty/$executor0/valsvalsvar"tsdb/executor.go(ç÷0ìÿ@R‘{
        "PkgName": "tsdb",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./resultsEmpty/$executor0/vals≈
*resultsEmpty/resultValuesresultValuesvar"tsdb/executor.go(ü÷0ª÷@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "[][]interface{}",
        "UnderlyingTypeString": "[][]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./resultsEmpty/resultValuesË
*scanBooleanscanBooleanfunc"tsdb/points.go(‡É0»çR≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte, error)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÎ

text/plain‹scanBoolean returns the end position within buf, start at i after
scanning over buf for boolean. Valid values for a boolean are
t, T, true, TRUE, f, F, false, FALSE.  It returns an error if a invalid boolean
is scanned.
ä./scanBooleanî
*scanBoolean/bufbufvar"tsdb/points.go(ÒÉ0˚É@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanBoolean/bufà
*scanBoolean/iivar"tsdb/points.go(˝É0ÇÑ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanBoolean/iî
*scanBoolean/startstartvar"tsdb/points.go(úÑ0¶Ñ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanBoolean/startñ
*scanBoolean/validvalidvar"tsdb/points.go(ﬂâ0Ìâ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanBoolean/validı
*scanFieldValuescanFieldValuefunc"tsdb/points.go(Öù0 †Rü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFieldValueö
*scanFieldValue/bufbufvar"tsdb/points.go(ôù0£ù@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFieldValue/bufé
*scanFieldValue/iivar"tsdb/points.go(•ù0™ù@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFieldValue/iü
*scanFieldValue/quotedquotedvar"tsdb/points.go(…ù0ÿù@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFieldValue/quotedö
*scanFieldValue/startstartvar"tsdb/points.go(Ωù0«ù@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFieldValue/startö
*
scanFields
scanFieldsfunc"tsdb/points.go(ÏR0¨eR≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte, error)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z¢

text/plainìscanFields scans buf, starting at i for the fields section of a point.  It returns
the ending position and the byte slice of the fields within buf
ä./scanFieldsé
F*DscanFields/$points0/$points0/$points3/$points0/$points4/$points0/errerrvar"tsdb/points.go(•_0Æ_@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./scanFields/$points0/$points0/$points3/$points0/$points4/$points0/erré
F*DscanFields/$points0/$points0/$points3/$points0/$points5/$points0/errerrvar"tsdb/points.go(Ña0ça@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äF./scanFields/$points0/$points0/$points3/$points0/$points5/$points0/errê
*scanFields/bufbufvar"tsdb/points.go(¸R0ÜS@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/bufì
*scanFields/commascommasvar"tsdb/points.go(ºT0«T@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/commasì
*scanFields/equalsequalsvar"tsdb/points.go(àT0ìT@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/equalsÑ
*scanFields/iivar"tsdb/points.go(àS0çS@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/iï
*scanFields/quotedquotedvar"tsdb/points.go(”S0‚S@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/quotedê
*scanFields/startstartvar"tsdb/points.go(ßS0∆S@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanFields/start÷
	*scanKeyscanKeyfunc"tsdb/points.go(Î%0£MR≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte, error)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÁ

text/plainÿscanKey scans buf starting at i for the measurement and tag portion of the point.
It returns the ending position and the byte slice of key within buf.  If there
are tags, they will be sorted if they are not already.
ä	./scanKeyÜ
I*GscanKey/$points0/$points0/$points3/$points0/$points1/$points0/newIndics	newIndicsvar"tsdb/points.go(Â50ç6@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./scanKey/$points0/$points0/$points3/$points0/$points1/$points0/newIndicsÜ
I*GscanKey/$points0/$points0/$points4/$points0/$points2/$points0/newIndics	newIndicsvar"tsdb/points.go(†;0»;@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äI./scanKey/$points0/$points0/$points4/$points0/$points2/$points0/newIndics±
 *scanKey/$points3/$points0/leftleftvar"tsdb/points.go(ÄC0πC@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./scanKey/$points3/$points0/left¥
!*scanKey/$points3/$points0/rightrightvar"tsdb/points.go(ºC0ÑD@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./scanKey/$points3/$points0/rightê
*scanKey/$points3/jjvar"tsdb/points.go(¡B0«B@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/$points3/jÃ
/*-scanKey/$points4/$points0/$points0/$points0/vvvar"tsdb/points.go(´L0ÕL@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./scanKey/$points4/$points0/$points0/$points0/v¥
&*$scanKey/$points4/$points0/$points0/iivar"tsdb/points.go(Î%0£M@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä&./scanKey/$points4/$points0/$points0/i®
*scanKey/$points4/$points0/bbvar"tsdb/points.go(´K0œK@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/$points4/$points0/b∏
#*!scanKey/$points4/$points0/indicesindicesvar"tsdb/points.go(§J0øJ@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./scanKey/$points4/$points0/indices∆
'*%scanKey/$points4/$points0/measurementmeasurementvar"tsdb/points.go(‚I0äJ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./scanKey/$points4/$points0/measurement®
*scanKey/$points4/$points0/posposvar"tsdb/points.go(“K0ÌK@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/$points4/$points0/posä
*scanKey/bufbufvar"tsdb/points.go(¯%0Ç&@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/bufç
*scanKey/commascommasvar"tsdb/points.go(˝*0à+@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/commasç
*scanKey/equalsequalsvar"tsdb/points.go(Ø+0∫+@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/equals˛
*	scanKey/iivar"tsdb/points.go(Ñ&0â&@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/iî
*scanKey/indicesindicesvar"tsdb/points.go(¢)0Ω)@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "[]int",
        "UnderlyingTypeString": "[]int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/indicesè
*scanKey/sortedsortedvar"tsdb/points.go(ã'0ô'@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/sortedä
*scanKey/startstartvar"tsdb/points.go(£&0¬&@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanKey/start¿

*scanLinescanLinefunc"tsdb/points.go(ªê0∆ìRü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z[

text/plainMscanLine returns the end position in buf and the next line found within
buf.
ä
./scanLineé
*scanLine/bufbufvar"tsdb/points.go(…ê0”ê@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanLine/bufÇ
*
scanLine/iivar"tsdb/points.go(’ê0⁄ê@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanLine/iì
*scanLine/quotedquotedvar"tsdb/points.go(˘ê0àë@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanLine/quotedé
*scanLine/startstartvar"tsdb/points.go(Ìê0˜ê@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanLine/startö
*
scanNumber
scanNumberfunc"tsdb/points.go(Èl0ˆÅRù{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, error)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z±

text/plain¢scanNumber returns the end position within buf, start at i after
scanning over buf for an integer, or float.  It returns an
error if a invalid number is scanned.
ä./scanNumber¸
=*;scanNumber/$points3/$points0/$points1/$points0/$points0/errerrvar"tsdb/points.go(·}0õ~@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./scanNumber/$points3/$points0/$points1/$points0/$points0/err˛
=*;scanNumber/$points3/$points1/$points0/$points0/$points0/errerrvar"tsdb/points.go(ÍÄ0†Å@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä=./scanNumber/$points3/$points1/$points0/$points0/$points0/errê
*scanNumber/bufbufvar"tsdb/points.go(˘l0Ém@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/bufô
*scanNumber/decimalsdecimalsvar"tsdb/points.go(®n0µn@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/decimalsÑ
*scanNumber/iivar"tsdb/points.go(Öm0äm@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/ií
*scanNumber/isIntisIntvar"tsdb/points.go(¨m0∂m@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/isInt°
*scanNumber/scientific
scientificvar"tsdb/points.go(Òn0Ño@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/scientificê
*scanNumber/startstartvar"tsdb/points.go(úm0¶m@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanNumber/startÔ
*scanTagValuescanTagValuefunc"tsdb/points.go(†õ0ÉùRü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTagValueñ
*scanTagValue/bufbufvar"tsdb/points.go(≤õ0ºõ@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTagValue/bufä
*scanTagValue/iivar"tsdb/points.go(æõ0√õ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTagValue/iñ
*scanTagValue/startstartvar"tsdb/points.go(÷õ0‡õ@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTagValue/start–

*scanTimescanTimefunc"tsdb/points.go(Üg0jR≠{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) (int, []byte, error)",
        "UnderlyingTypeString": "func(buf []byte, i int) (int, []byte, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zﬁ

text/plainœscanTime scans buf, starting at i for the time section of a point.  It returns
the ending position and the byte slice of the fields within buf and error if the
timestamp is not in the correct numeric format
ä
./scanTimeå
*scanTime/bufbufvar"tsdb/points.go(îg0ûg@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTime/bufÄ
*
scanTime/iivar"tsdb/points.go(†g0•g@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTime/iå
*scanTime/startstartvar"tsdb/points.go(øg0ﬁg@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTime/start¡
*scanToscanTofunc"tsdb/points.go(çï0ØóRµ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int, stop byte) (int, []byte)",
        "UnderlyingTypeString": "func(buf []byte, i int, stop byte) (int, []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZÀ

text/plainºscanTo returns the end position in buf and the next consecutive block
of bytes, starting from i and ending with stop byte.  If there are leading
spaces or escaped chars, they are skipped.
ä./scanToä
*
scanTo/bufbufvar"tsdb/points.go(ôï0£ï@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTo/buf˛

*scanTo/iivar"tsdb/points.go(•ï0™ï@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./scanTo/iä
*scanTo/startstartvar"tsdb/points.go(»ï0“ï@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTo/startâ
*scanTo/stopstopvar"tsdb/points.go(¨ï0µï@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanTo/stop≈
*scanToSpaceOrscanToSpaceOrfunc"tsdb/points.go(Âò0ûõRµ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int, stop byte) (int, []byte)",
        "UnderlyingTypeString": "func(buf []byte, i int, stop byte) (int, []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z∫

text/plain´scanTo returns the end position in buf and the next consecutive block
of bytes, starting from i and ending with stop byte.  If there are leading
spaces, they are skipped.
ä./scanToSpaceOrò
*scanToSpaceOr/bufbufvar"tsdb/points.go(¯ò0Çô@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanToSpaceOr/bufå
*scanToSpaceOr/iivar"tsdb/points.go(Ñô0âô@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanToSpaceOr/iò
*scanToSpaceOr/startstartvar"tsdb/points.go(ßô0±ô@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanToSpaceOr/startó
*scanToSpaceOr/stopstopvar"tsdb/points.go(ãô0îô@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./scanToSpaceOr/stopÛ
*seriesCursorseriesCursortype"tsdb/mapper.go(ªæ0˙øRπ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "struct{cursor github.com/influxdb/influxdb/tsdb.Cursor; filter github.com/influxdb/influxdb/influxql.Expr; tags map[string]string; seekto int64; seekResult struct{k int64; v []byte}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zh

text/plainZseriesCursor is a cursor that walks a single series. It provides lookahead functionality.
ä./seriesCursorı
*seriesCursor/NextNextfunc"tsdb/mapper.go(ñ»0ƒ 8R÷{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*seriesCursor",
        "TypeString": "func() (key int64, value []byte)",
        "UnderlyingTypeString": "func() (key int64, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZI

text/plain;Next returns the next timestamp and value from the cursor.
ä./seriesCursor/Nextö
*seriesCursor/Next/kkvar"tsdb/mapper.go(ÿ…0…@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/Next/kû
*seriesCursor/Next/keykeyvar"tsdb/mapper.go(∂»0ø»@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/Next/keyÔ
*seriesCursor/Next/scscvar"tsdb/mapper.go(ú»0¨»@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/Next/scö
*seriesCursor/Next/vvvar"tsdb/mapper.go(ÿ…0…@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/Next/v¶
*seriesCursor/Next/valuevaluevar"tsdb/mapper.go(¡»0Õ»@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/Next/valueú
*seriesCursor/SeekToSeekTofunc"tsdb/mapper.go(∂¬0÷«8RÙ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*seriesCursor",
        "TypeString": "func(key int64) (timestamp int64, value []byte)",
        "UnderlyingTypeString": "func(key int64) (timestamp int64, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZL

text/plain>Seek positions returning the timestamp and value at that key.
ä./seriesCursor/SeekToû
*seriesCursor/SeekTo/kkvar"tsdb/mapper.go(à∆0≥∆@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/k¢
*seriesCursor/SeekTo/keykeyvar"tsdb/mapper.go(’¬0ﬁ¬@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/keyÛ
*seriesCursor/SeekTo/scscvar"tsdb/mapper.go(º¬0Ã¬@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/sc¥
*seriesCursor/SeekTo/timestamp	timestampvar"tsdb/mapper.go(·¬0¬@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/timestampû
*seriesCursor/SeekTo/vvvar"tsdb/mapper.go(à∆0≥∆@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/v™
*seriesCursor/SeekTo/valuevaluevar"tsdb/mapper.go(Ú¬0˛¬@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/SeekTo/value⁄
*seriesCursor/cursorcursorfield"tsdb/mapper.go(“æ0„æRÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "seriesCursor",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/cursorø
*seriesCursor/filterfilterfield"tsdb/mapper.go(Éø0õøRÊ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "seriesCursor",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/filterñ
*seriesCursor/seekResult
seekResultfield"tsdb/mapper.go(Õø0¯øR±{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "seriesCursor",
        "TypeString": "struct{k int64; v []byte}",
        "UnderlyingTypeString": "struct{k int64; v []byte}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/seekResult¿
*seriesCursor/seekResult/kkfield"tsdb/mapper.go(„ø0ÍøR‡{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/seekResult/k¬
*seriesCursor/seekResult/vvfield"tsdb/mapper.go(Ìø0ıøR‚{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/seekResult/v‚
*seriesCursor/seektoseektofield"tsdb/mapper.go(ªø0ÀøRâ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "seriesCursor",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/seektoÙ
*seriesCursor/tagstagsfield"tsdb/mapper.go(ùø0πøR°{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "seriesCursor",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./seriesCursor/tags÷
*skipWhitespaceskipWhitespacefunc"tsdb/points.go(µé0ÊèRã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(buf []byte, i int) int",
        "UnderlyingTypeString": "func(buf []byte, i int) int",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zs

text/plaineskipWhitespace returns the end position within buf, starting at i after
scanning over spaces in tags
ä./skipWhitespaceö
*skipWhitespace/bufbufvar"tsdb/points.go(…é0”é@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./skipWhitespace/bufé
*skipWhitespace/iivar"tsdb/points.go(’é0⁄é@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./skipWhitespace/iè
*	stringSet	stringSettype"tsdb/meta.go(Ëí0ÖìRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z5

text/plain'stringSet represents a set of strings.
ä./stringSetê
*stringSet/addaddfunc"tsdb/meta.go(òî0ÔîRú{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "stringSet",
        "TypeString": "func(ss ...string)",
        "UnderlyingTypeString": "func(ss ...string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z+

text/plainadd adds strings to the set.
ä./stringSet/addû
*stringSet/add/$meta0/nnvar"tsdb/meta.go(òî0Ôî@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/add/$meta0/n¬
*stringSet/add/ssvar"tsdb/meta.go(ûî0©î@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/add/só
*stringSet/add/ssssvar"tsdb/meta.go(Øî0ªî@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/add/ss¬
*stringSet/containscontainsfunc"tsdb/meta.go(∞ï0˙ïR†{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "stringSet",
        "TypeString": "func(ss string) bool",
        "UnderlyingTypeString": "func(ss string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZJ

text/plain<contains returns whether the set contains the given string.
ä./stringSet/containsô
*stringSet/contains/okokvar"tsdb/meta.go(ﬂï0Ìï@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/contains/okÃ
*stringSet/contains/ssvar"tsdb/meta.go(∂ï0¡ï@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/contains/sù
*stringSet/contains/ssssvar"tsdb/meta.go(Ãï0’ï@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/contains/ss◊
*stringSet/intersect	intersectfunc"tsdb/meta.go(Ëô0‘õR∂{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "stringSet",
        "TypeString": "func(o github.com/influxdb/influxdb/tsdb.stringSet) github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "func(o github.com/influxdb/influxdb/tsdb.stringSet) github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZF

text/plain8union returns the intersection of this set and another.
ä./stringSet/intersect≈
-*+stringSet/intersect/$meta0/$meta0/$meta0/okokvar"tsdb/meta.go(Õö0⁄ö@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./stringSet/intersect/$meta0/$meta0/$meta0/ok™
*stringSet/intersect/$meta0/kkvar"tsdb/meta.go(Ëô0‘õ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/intersect/$meta0/k≈
-*+stringSet/intersect/$meta1/$meta0/$meta0/okokvar"tsdb/meta.go(óõ0§õ@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./stringSet/intersect/$meta1/$meta0/$meta0/ok™
*stringSet/intersect/$meta1/kkvar"tsdb/meta.go(Ëô0‘õ@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/intersect/$meta1/k—
*stringSet/intersect/nsnsvar"tsdb/meta.go(üö0≥ö@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/intersect/nsŒ
*stringSet/intersect/oovar"tsdb/meta.go(Öö0êö@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/intersect/oŒ
*stringSet/intersect/ssvar"tsdb/meta.go(Óô0˘ô@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/intersect/sØ
*stringSet/listlistfunc"tsdb/meta.go(æñ0…óRñ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "stringSet",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZM

text/plain?list returns the current elements in the set, in sorted order.
ä./stringSet/list†
*stringSet/list/$meta0/kkvar"tsdb/meta.go(æñ0…ó@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/list/$meta0/kñ
*stringSet/list/llvar"tsdb/meta.go(‰ñ0Çó@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/list/lƒ
*stringSet/list/ssvar"tsdb/meta.go(ƒñ0œñ@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/list/sƒ
*stringSet/unionunionfunc"tsdb/meta.go(ˇó0´ôR∂{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "stringSet",
        "TypeString": "func(o github.com/influxdb/influxdb/tsdb.stringSet) github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "func(o github.com/influxdb/influxdb/tsdb.stringSet) github.com/influxdb/influxdb/tsdb.stringSet",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z?

text/plain1union returns the union of this set and another.
ä./stringSet/union¢
*stringSet/union/$meta0/kkvar"tsdb/meta.go(ˇó0´ô@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/union/$meta0/k¢
*stringSet/union/$meta1/kkvar"tsdb/meta.go(ˇó0´ô@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/union/$meta1/k…
*stringSet/union/nsnsvar"tsdb/meta.go(≤ò0∆ò@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/union/ns∆
*stringSet/union/oovar"tsdb/meta.go(òò0£ò@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/union/o∆
*stringSet/union/ssvar"tsdb/meta.go(Öò0êò@R¯{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.stringSet",
        "UnderlyingTypeString": "map[string]struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./stringSet/union/s≈
*tagEscapeCodestagEscapeCodesvar"tsdb/points.go(ˇ0‚RÚ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "map[byte][]byte",
        "UnderlyingTypeString": "map[byte][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagEscapeCodesﬂ
	*tagExprtagExprtype"tsdb/meta.go(™…0Ä R—{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "struct{key string; values []string; op github.com/influxdb/influxdb/influxql.Token}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZM

text/plain?tagExpr represents one or more values assigned to a given tag.
ä	./tagExpr 
*tagExpr/keykeyfield"tsdb/meta.go(º…0……RÜ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagExpr",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagExpr/keyÈ
*
tagExpr/opopfield"tsdb/meta.go(‹…0Ò…R®{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagExpr",
        "TypeString": "github.com/influxdb/influxdb/influxql.Token",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagExpr/op◊
*tagExpr/valuesvaluesfield"tsdb/meta.go(À…0⁄…Rä{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagExpr",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagExpr/values€
*tagSetCursortagSetCursortype"tsdb/mapper.go(åô0Ò†Ré{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "struct{measurement string; tags map[string]string; cursors []*github.com/influxdb/influxdb/tsdb.seriesCursor; decoder *github.com/influxdb/influxdb/tsdb.FieldCodec; currentTags map[string]string; pointHeap *github.com/influxdb/influxdb/tsdb.pointHeap; memokey string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z{

text/plainmtagSetCursor is virtual cursor that iterates over mutiple series cursors, as though it were
a single series.
ä./tagSetCursor˘
*tagSetCursor/NextNextfunc"tsdb/mapper.go(…©0ˆ±8R“{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*tagSetCursor",
        "TypeString": "func(tmin int64, tmax int64, selectFields []string, whereFields []string) (int64, interface{})",
        "UnderlyingTypeString": "func(tmin int64, tmax int64, selectFields []string, whereFields []string) (int64, interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z–

text/plain¡Next returns the next matching series-key, timestamp byte slice and meta tags for the tagset. Filtering
is enforced on the values. If there is no matching value, then a nil result is returned.
ä./tagSetCursor/NextŒ
-*+tagSetCursor/Next/$mapper0/$mapper0/nextKeynextKeyvar"tsdb/mapper.go(¡Ø0‰Ø@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./tagSetCursor/Next/$mapper0/$mapper0/nextKey–
-*+tagSetCursor/Next/$mapper0/$mapper0/nextValnextValvar"tsdb/mapper.go(¡Ø0‰Ø@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä-./tagSetCursor/Next/$mapper0/$mapper0/nextValí
'*%tagSetCursor/Next/$mapper0/$mapper0/ppvar"tsdb/mapper.go(—´0˛´@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä'./tagSetCursor/Next/$mapper0/$mapper0/p‘
/*-tagSetCursor/Next/$mapper0/$mapper0/timestamp	timestampvar"tsdb/mapper.go(ÜÆ0ûÆ@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä/./tagSetCursor/Next/$mapper0/$mapper0/timestamp‘
+*)tagSetCursor/Next/$mapper0/$mapper0/valuevaluevar"tsdb/mapper.go( ≠0ÉÆ@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä+./tagSetCursor/Next/$mapper0/$mapper0/valueø
 *tagSetCursor/Next/selectFieldsselectFieldsvar"tsdb/mapper.go(˘©0õ™@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./tagSetCursor/Next/selectFields°
*tagSetCursor/Next/tmaxtmaxvar"tsdb/mapper.go(Á©0˜©@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/Next/tmax°
*tagSetCursor/Next/tmintminvar"tsdb/mapper.go(Á©0˜©@Rƒ{
        "PkgName": "tsdb",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/Next/tminÚ
*tagSetCursor/Next/tsctscvar"tsdb/mapper.go(œ©0‡©@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/Next/tscº
*tagSetCursor/Next/whereFieldswhereFieldsvar"tsdb/mapper.go(˘©0õ™@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/Next/whereFieldsç
*tagSetCursor/TagsTagsfunc"tsdb/mapper.go(·≤0Æ≥8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*tagSetCursor",
        "TypeString": "func() map[string]string",
        "UnderlyingTypeString": "func() map[string]string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zq

text/plaincTags returns the current tags of the current cursor
if there is no current currsor, it returns nil
ä./tagSetCursor/TagsÚ
*tagSetCursor/Tags/tsctscvar"tsdb/mapper.go(Á≤0¯≤@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/Tags/tscâ
*tagSetCursor/currentTagscurrentTagsfield"tsdb/mapper.go(äõ0ßõR°{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/currentTagsΩ
*tagSetCursor/cursorscursorsfield"tsdb/mapper.go(åö0ßöR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.seriesCursor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/cursors∏
*tagSetCursor/decodeRawPointdecodeRawPointfunc"tsdb/mapper.go(ç¥0◊ΩRﬁ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*tagSetCursor",
        "TypeString": "func(p *github.com/influxdb/influxdb/tsdb.pointHeapItem, selectFields []string, whereFields []string) interface{}",
        "UnderlyingTypeString": "func(p *github.com/influxdb/influxdb/tsdb.pointHeapItem, selectFields []string, whereFields []string) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zh

text/plainZdecodeRawPoint decodes raw point data into field names & values and does WHERE filtering.
ä./tagSetCursor/decodeRawPoint¸
<*:tagSetCursor/decodeRawPoint/$mapper0/$mapper0/$mapper0/errerrvar"tsdb/mapper.go(öµ0‹µ@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä<./tagSetCursor/decodeRawPoint/$mapper0/$mapper0/$mapper0/errÆ
H*FtagSetCursor/decodeRawPoint/$mapper0/$mapper0/$mapper0/fieldsWithNamesfieldsWithNamesvar"tsdb/mapper.go(öµ0‹µ@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äH./tagSetCursor/decodeRawPoint/$mapper0/$mapper0/$mapper0/fieldsWithNamesé
E*CtagSetCursor/decodeRawPoint/$mapper2/$mapper0/$mapper0/$mapper1/errerrvar"tsdb/mapper.go(¢º0‰º@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äE./tagSetCursor/decodeRawPoint/$mapper2/$mapper0/$mapper0/$mapper1/err¿
Q*OtagSetCursor/decodeRawPoint/$mapper2/$mapper0/$mapper0/$mapper1/fieldsWithNamesfieldsWithNamesvar"tsdb/mapper.go(¢º0‰º@RÊ{
        "PkgName": "tsdb",
        "TypeString": "map[string]interface{}",
        "UnderlyingTypeString": "map[string]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }äQ./tagSetCursor/decodeRawPoint/$mapper2/$mapper0/$mapper0/$mapper1/fieldsWithNames∆
!*tagSetCursor/decodeRawPoint/errerrvar"tsdb/mapper.go(ö∏0⁄∏@Rÿ{
        "PkgName": "tsdb",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./tagSetCursor/decodeRawPoint/errÇ
*tagSetCursor/decodeRawPoint/ppvar"tsdb/mapper.go(µ¥0≈¥@Rö{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeapItem",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/decodeRawPoint/p”
**(tagSetCursor/decodeRawPoint/selectFieldsselectFieldsvar"tsdb/mapper.go(«¥0È¥@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä*./tagSetCursor/decodeRawPoint/selectFieldsÜ
!*tagSetCursor/decodeRawPoint/tsctscvar"tsdb/mapper.go(ì¥0§¥@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä!./tagSetCursor/decodeRawPoint/tscƒ
#*!tagSetCursor/decodeRawPoint/valuevaluevar"tsdb/mapper.go(ö∏0⁄∏@R–{
        "PkgName": "tsdb",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä#./tagSetCursor/decodeRawPoint/value–
)*'tagSetCursor/decodeRawPoint/whereFieldswhereFieldsvar"tsdb/mapper.go(«¥0È¥@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä)./tagSetCursor/decodeRawPoint/whereFieldsµ
*tagSetCursor/decoderdecoderfield"tsdb/mapper.go(…ö0‡öRŸ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/decoderÂ
*tagSetCursor/keykeyfunc"tsdb/mapper.go(‰¶0Ä®Rñ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*tagSetCursor",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/key
*tagSetCursor/key/tsctscvar"tsdb/mapper.go(Í¶0˚¶@Rò{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/key/tscÛ
*tagSetCursor/measurementmeasurementfield"tsdb/mapper.go(£ô0µôRã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/measurementÉ
*tagSetCursor/memokeymemokeyfield"tsdb/mapper.go(·†0Ô†Rã{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zô

text/plainäMemomize the cursor's tagset-based key. Profiling shows that calculating this
is significant CPU cost, and it only needs to be done once.
ä./tagSetCursor/memokeyÄ
*tagSetCursor/pointHeap	pointHeapfield"tsdb/mapper.go(∏ü0ÃüR◊{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.pointHeap",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zƒ

text/plainµpointHeap is a min-heap, ordered by timestamp, that contains the next
point from each seriesCursor. Queries sometimes pull points from
thousands of series. This makes it reasonably efficient to find the
point with the next lowest timestamp among the thousands of series that
the query is pulling points from.
Performance profiling shows that this lookahead needs to be part
of the tagSetCursor type and not part of the the cursors type.
ä./tagSetCursor/pointHeapÙ
*tagSetCursor/tagstagsfield"tsdb/mapper.go(÷ô0ÛôR°{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetCursor",
        "TypeString": "map[string]string",
        "UnderlyingTypeString": "map[string]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursor/tags‘
*tagSetCursorstagSetCursorstype"tsdb/mapper.go(∑°0‘°Rµ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursors",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZJ

text/plain<tagSetCursors represents a sortable slice of tagSetCursors.
ä./tagSetCursorsä
*tagSetCursors/KeysKeysfunc"tsdb/mapper.go(©£0¡§8R¥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "tagSetCursors",
        "TypeString": "func() []string",
        "UnderlyingTypeString": "func() []string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Keys®
*tagSetCursors/Keys/$mapper0/iivar"tsdb/mapper.go(©£0¡§@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Keys/$mapper0/i
*tagSetCursors/Keys/aavar"tsdb/mapper.go(Ø£0æ£@Rö{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursors",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Keys/a©
*tagSetCursors/Keys/keyskeysvar"tsdb/mapper.go(”£0Â£@R {
        "PkgName": "tsdb",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Keys/keys˝
*tagSetCursors/LenLenfunc"tsdb/mapper.go(÷°0í¢8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "tagSetCursors",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/LenÓ
*tagSetCursors/Len/aavar"tsdb/mapper.go(‹°0Î°@Rö{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursors",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Len/aö
*tagSetCursors/LessLessfunc"tsdb/mapper.go(ì¢0‡¢8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "tagSetCursors",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Less
*tagSetCursors/Less/aavar"tsdb/mapper.go(ô¢0®¢@Rö{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursors",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Less/añ
*tagSetCursors/Less/iivar"tsdb/mapper.go(Ø¢0∑¢@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Less/iñ
*tagSetCursors/Less/jjvar"tsdb/mapper.go(Ø¢0∑¢@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Less/jê
*tagSetCursors/SwapSwapfunc"tsdb/mapper.go(·¢0ß£8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "tagSetCursors",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Swap
*tagSetCursors/Swap/aavar"tsdb/mapper.go(Á¢0ˆ¢@Rö{
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetCursors",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.tagSetCursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Swap/añ
*tagSetCursors/Swap/iivar"tsdb/mapper.go(˝¢0Ö£@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Swap/iñ
*tagSetCursors/Swap/jjvar"tsdb/mapper.go(˝¢0Ö£@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetCursors/Swap/jé
*
tagSetExpr
tagSetExprtype"tsdb/meta.go(§»0·»RÏ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetExpr",
        "UnderlyingTypeString": "struct{values []github.com/influxdb/influxdb/tsdb.tagExpr; expr github.com/influxdb/influxdb/influxql.Expr}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZX

text/plainJtagSetExpr represents a set of tag keys/values and associated expression.
ä./tagSetExpr±
*tagSetExpr/exprexprfield"tsdb/meta.go(À»0ﬂ»R‰{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetExpr",
        "TypeString": "github.com/influxdb/influxdb/influxql.Expr",
        "UnderlyingTypeString": "interface{expr(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetExpr/expr¶
*tagSetExpr/valuesvaluesfield"tsdb/meta.go(π»0…»R”{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetExpr",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.tagExpr",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetExpr/values‰
*tagSetsAndFieldstagSetsAndFieldstype"tsdb/mapper.go(À 0ÃÀRà{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagSetsAndFields",
        "UnderlyingTypeString": "struct{tagSets []*github.com/influxdb/influxdb/influxql.TagSet; selectFields []string; selectTags []string; whereFields []string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetsAndFieldsÜ
*tagSetsAndFields/selectFieldsselectFieldsfield"tsdb/mapper.go(áÀ0úÀRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetsAndFields",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetsAndFields/selectFieldsÄ
*tagSetsAndFields/selectTags
selectTagsfield"tsdb/mapper.go(ûÀ0≥ÀRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetsAndFields",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetsAndFields/selectTags≈
*tagSetsAndFields/tagSetstagSetsfield"tsdb/mapper.go(Ê 0ÖÀR·{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetsAndFields",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.TagSet",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetsAndFields/tagSetsÉ
*tagSetsAndFields/whereFieldswhereFieldsfield"tsdb/mapper.go(µÀ0 ÀRì{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagSetsAndFields",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagSetsAndFields/whereFields∆
*	tagValuer	tagValuertype"tsdb/meta.go(ï≈0¬≈Rü{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "github.com/influxdb/influxdb/tsdb.tagValuer",
        "UnderlyingTypeString": "struct{tags map[string]*string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z`

text/plainRtagValuer is used during expression expansion to evaluate all sets of tag values.
ä./tagValuerã
*tagValuer/ValueValuefunc"tsdb/meta.go(ñ∆0–«8R›{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "tsdb",
        "Receiver": "*tagValuer",
        "TypeString": "func(name string) (interface{}, bool)",
        "UnderlyingTypeString": "func(name string) (interface{}, bool)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z]

text/plainOValue returns the string value of a tag and true if it's listed in the tagset.
ä./tagValuer/Value°
*tagValuer/Value/$meta0/okokvar"tsdb/meta.go(◊∆0∆@R¬{
        "PkgName": "tsdb",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagValuer/Value/$meta0/ok∞
*tagValuer/Value/$meta0/valuevaluevar"tsdb/meta.go(◊∆0∆@R»{
        "PkgName": "tsdb",
        "TypeString": "*string",
        "UnderlyingTypeString": "*string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagValuer/Value/$meta0/valueù
*tagValuer/Value/namenamevar"tsdb/meta.go(∞∆0ª∆@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagValuer/Value/name‡
*tagValuer/Value/vvvar"tsdb/meta.go(ú∆0®∆@Rí{
        "PkgName": "tsdb",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.tagValuer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.tagValuer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagValuer/Value/vÎ
*tagValuer/tagstagsfield"tsdb/meta.go(©≈0¿≈R†{
        "PkgScope": true,
        "PkgName": "tsdb",
        "FieldOfStruct": "tagValuer",
        "TypeString": "map[string]*string",
        "UnderlyingTypeString": "map[string]*string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./tagValuer/tags˝
*timeBetweenInclusivetimeBetweenInclusivefunc"tsdb/meta.go(¿Ö0√ÜRΩ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(t time.Time, min time.Time, max time.Time) bool",
        "UnderlyingTypeString": "func(t time.Time, min time.Time, max time.Time) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ZX

text/plainJtimeBetweenInclusive returns true if t is between min and max, inclusive.
ä./timeBetweenInclusive“
*timeBetweenInclusive/maxmaxvar"tsdb/meta.go(⁄Ö0ÔÖ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./timeBetweenInclusive/max“
*timeBetweenInclusive/minminvar"tsdb/meta.go(⁄Ö0ÔÖ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./timeBetweenInclusive/minÃ
*timeBetweenInclusive/ttvar"tsdb/meta.go(⁄Ö0ÔÖ@RÙ{
        "PkgName": "tsdb",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./timeBetweenInclusive/t˚
*u64tobu64tobfunc"tsdb/shard.go(ô†0˚†Rˇ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(v uint64) []byte",
        "UnderlyingTypeString": "func(v uint64) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Z=

text/plain/u64tob converts a uint64 into an 8-byte slice.
ä./u64tobÉ

*u64tob/bbvar"tsdb/shard.go(π†0Õ†@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./u64tob/bÉ

*u64tob/vvvar"tsdb/shard.go(•†0≠†@R∆{
        "PkgName": "tsdb",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./u64tob/v≈

*unescapeunescapefunc"tsdb/points.go(ëß0˘™RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä
./unescapeÇ
*
unescape/iivar"tsdb/points.go(¥ß0∫ß@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescape/iã
*unescape/ininvar"tsdb/points.go(üß0®ß@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescape/iné
*unescape/inLeninLenvar"tsdb/points.go(ºß0Ãß@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescape/inLené
*unescape/outoutvar"tsdb/points.go(“ß0‹ß@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescape/outÊ
*unescapeMeasurementunescapeMeasurementfunc"tsdb/points.go(„°0˙¢RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeMeasurement¨
 *unescapeMeasurement/$points0/bbvar"tsdb/points.go(„°0˙¢@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä ./unescapeMeasurement/$points0/b∂
"* unescapeMeasurement/$points0/escescvar"tsdb/points.go(„°0˙¢@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä"./unescapeMeasurement/$points0/esc°
*unescapeMeasurement/ininvar"tsdb/points.go(¸°0Ö¢@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeMeasurement/in◊
*unescapeStringunescapeStringfunc"tsdb/points.go(˚™0ˇ´RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in string) string",
        "UnderlyingTypeString": "func(in string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeString¶
*unescapeString/$points0/bbvar"tsdb/points.go(˚™0ˇ´@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeString/$points0/b¨
*unescapeString/$points0/escescvar"tsdb/points.go(˚™0ˇ´@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeString/$points0/escó
*unescapeString/ininvar"tsdb/points.go(è´0ò´@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeString/in◊
*unescapeStringFieldunescapeStringFieldfunc"tsdb/points.go(ı∞0Ø¥RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in string) string",
        "UnderlyingTypeString": "func(in string) string",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }Zo

text/plainaunescapeStringField returns a copy of in with any escaped double-quotes
or backslashes unescaped
ä./unescapeStringFieldò
*unescapeStringField/iivar"tsdb/points.go(≥±0π±@R¿{
        "PkgName": "tsdb",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeStringField/i°
*unescapeStringField/ininvar"tsdb/points.go(é±0ó±@R∆{
        "PkgName": "tsdb",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeStringField/in§
*unescapeStringField/outoutvar"tsdb/points.go(ß±0±±@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeStringField/outŒ
*unescapeTagunescapeTagfunc"tsdb/points.go(É§0ä•RÅ{
        "PkgScope": true,
        "PkgName": "tsdb",
        "TypeString": "func(in []byte) []byte",
        "UnderlyingTypeString": "func(in []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeTagú
*unescapeTag/$points0/bbvar"tsdb/points.go(É§0ä•@R¬{
        "PkgName": "tsdb",
        "TypeString": "byte",
        "UnderlyingTypeString": "byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeTag/$points0/b¶
*unescapeTag/$points0/escescvar"tsdb/points.go(É§0ä•@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeTag/$points0/escë
*unescapeTag/ininvar"tsdb/points.go(î§0ù§@R∆{
        "PkgName": "tsdb",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb"
      }ä./unescapeTag/in