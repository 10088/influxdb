∂
*$wal/$wal1/errerrvar"tsdb/engine/wal/wal.go(ª•0ƒ•@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal1/err´
*$wal/$wal1/filefilevar"tsdb/engine/wal/wal.go(¨•0π•@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal1/file°
*$wal/$wal1/flagflagvar"tsdb/engine/wal/wal.go(è•0ó•@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal1/flagß
*$wal/$wal1/namenamevar"tsdb/engine/wal/wal.go(Ç•0ç•@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal1/name¨
*$wal/$wal1/permpermvar"tsdb/engine/wal/wal.go(ô•0©•@R’{
        "PkgName": "wal",
        "TypeString": "os.FileMode",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal1/perm∂
*$wal/$wal2/errerrvar"tsdb/engine/wal/wal.go(ô¶0¢¶@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal2/err´
*$wal/$wal2/filefilevar"tsdb/engine/wal/wal.go(ä¶0ó¶@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal2/file°
*$wal/$wal2/flagflagvar"tsdb/engine/wal/wal.go(Ì•0ı•@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal2/flagß
*$wal/$wal2/namenamevar"tsdb/engine/wal/wal.go(‡•0Î•@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal2/name¨
*$wal/$wal2/permpermvar"tsdb/engine/wal/wal.go(˜•0á¶@R’{
        "PkgName": "wal",
        "TypeString": "os.FileMode",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal2/perm∞
*$wal/$wal3/newpathnewpathvar"tsdb/engine/wal/wal.go(æ¶0’¶@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal3/newpath∞
*$wal/$wal3/oldpatholdpathvar"tsdb/engine/wal/wal.go(æ¶0’¶@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./$wal/$wal3/oldpathÔ
/*-$wal_test/$wal_test10/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(Óœ0®–@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä/./$wal_test/$wal_test10/measurementFieldsToSaveÛ
#*!$wal_test/$wal_test10/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(Õœ0Ïœ@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./$wal_test/$wal_test10/pointsByKey∏
&*$$wal_test/$wal_test10/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(™–0Õ–@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./$wal_test/$wal_test10/seriesToCreate∂	
*.walpackage"tsdb/engine/wal8Ræ{
        "Exported": true,
        "PkgName": "wal",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z»

text/plainπPackage WAL implements a write ahead log optimized for write throughput
that can be put in front of the database index.

The WAL is broken into different partitions. The default number of
partitions is 5. Each partition consists of a number of segment files.
By default these files will get up to 2MB in size before a new segment
file is opened. The files are numbered and start at 1. The number
indicates the order in which the files should be read on startup to
ensure data is recovered in the same order it was written.

Partitions are flushed and compacted individually. One of the goals with
having multiple partitions was to be able to flush only a portion of the
WAL at a time.

The WAL does not flush everything in a partition when it comes time. It will
only flush series that are over a given threshold (32kb by default). The rest
will be written into a new segment file so they can be flushed later. This
is like a compaction in an LSM Tree.
ä.˘
*CompactSequenceCompactSequencevar"tsdb/engine/wal/wal.go(º0‡8RÑ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zí

text/plainÉCompactSequence is the byte sequence within a segment file that has been compacted
that indicates the start of a compaction marker
ä./CompactSequence›
*CompactionExtensionCompactionExtensionconst"tsdb/engine/wal/wal.go(Ω0ÿ8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZW

text/plainICompactionExtension is the file extension we expect for compaction files
ä./CompactionExtension‹
*DefaultSegmentSizeDefaultSegmentSizeconst"tsdb/engine/wal/wal.go(î
0∏
8Rê{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z_

text/plainQDefaultSegmentSize of 2MB is the size at which segment files will be rolled over
ä./DefaultSegmentSizeÉ
*ErrCompactionRunningErrCompactionRunningvar"tsdb/engine/wal/wal.go(î0À8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z|

text/plainnErrCompactionRunning to return if we attempt to run a compaction on a partition that is currently running one
ä./ErrCompactionRunning®
*ErrMemoryCompactionDoneErrMemoryCompactionDonevar"tsdb/engine/wal/wal.go(ﬁ0Æ8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zó

text/plainàErrMemoryCompactionDone gets returned if we called to flushAndCompact to free up memory
but a compaction has already been done to do so
ä./ErrMemoryCompactionDone¡
*FileExtensionFileExtensionconst"tsdb/engine/wal/wal.go(Õ0‚8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZM

text/plain?FileExtension is the file extension we expect for wal segments
ä./FileExtension∫
*IndexWriterIndexWritertype"tsdb/engine/wal/wal.go(∏+0µ-8Rà{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter",
        "UnderlyingTypeString": "interface{WriteIndex(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z[

text/plainMIndexWriter is an interface for the indexed database the WAL flushes data to
ä./IndexWriterË
*IndexWriter/WriteIndex
WriteIndexfunc"tsdb/engine/wal/wal.go(°,0≥-8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "IndexWriter",
        "TypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZR

text/plainDtime ascending points where each byte array is:
  int64 time
  data
ä./IndexWriter/WriteIndexË
0*.IndexWriter/WriteIndex/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal.go(Õ,0á-@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./IndexWriter/WriteIndex/measurementFieldsToSaveÏ
$*"IndexWriter/WriteIndex/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal.go(¨,0À,@RÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./IndexWriter/WriteIndex/pointsByKey±
'*%IndexWriter/WriteIndex/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal.go(â-0¨-@R¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./IndexWriter/WriteIndex/seriesToCreateê
*LogLogtype"tsdb/engine/wal/wal.go(È0·*8R”{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "struct{path string; flush chan int; flushCheckTimer *time.Timer; flushCheckInterval time.Duration; wg sync.WaitGroup; closing chan struct{}; LogOutput io.Writer; logger *log.Logger; mu sync.RWMutex; partitions map[uint8]*github.com/influxdb/influxdb/tsdb/engine/wal.Partition; metaFile *os.File; FlushColdInterval time.Duration; SegmentSize int64; MaxSeriesSize int; ReadySeriesSize int; CompactionThreshold float64; PartitionSizeThreshold uint64; partitionCount uint64; Index github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter; EnableLogging bool}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log⁄
*	Log/CloseClosefunc"tsdb/engine/wal/wal.go(–z0á~8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z^

text/plainPClose will finish any flush that is currently in process and close file handles
ä./Log/Closeæ
*Log/Close/$wal1/errerrvar"tsdb/engine/wal/wal.go(∂}0∆}@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Close/$wal1/err
*Log/Close/llvar"tsdb/engine/wal/wal.go(÷z0‹z@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Close/l—
*Log/CompactionThresholdCompactionThresholdfield"tsdb/engine/wal/wal.go(∏%0”%8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z∞

text/plain°CompactionThreshold controls when a parition will be flushed. Once this
percentage of series in a partition are ready, a flush and compaction will be triggered.
ä./Log/CompactionThreshold»
*
Log/CursorCursorfunc"tsdb/engine/wal/wal.go(¥<0∂=8Râ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(key string) github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "func(key string) github.com/influxdb/influxdb/tsdb.Cursor",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zo

text/plainaCursor will return a cursor object to Seek and iterate with Next for the WAL cache for the given
ä./Log/Cursor¢
*Log/Cursor/keykeyvar"tsdb/engine/wal/wal.go(…<0”<@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Cursor/keyÚ
*Log/Cursor/llvar"tsdb/engine/wal/wal.go(∫<0¿<@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Cursor/lú
*Log/DeleteSeriesDeleteSeriesfunc"tsdb/engine/wal/wal.go(ƒR0ÌT8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(keys []string) error",
        "UnderlyingTypeString": "func(keys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z

text/plain·DeleteSeries will flush the metadata that is in the WAL to the index and remove
all series specified from the cache and the segment files in each partition. This
will block all writes while a compaction is done against all partitions. This function
is meant to be called by bz1 BEFORE it updates its own index, since the metadata
is flushed here first.
ä./Log/DeleteSeriesÃ
*Log/DeleteSeries/$wal0/errerrvar"tsdb/engine/wal/wal.go(˙R0íS@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/DeleteSeries/$wal0/errñ
*Log/DeleteSeries/$wal1/ppvar"tsdb/engine/wal/wal.go(ƒR0ÌT@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/DeleteSeries/$wal1/pµ
*Log/DeleteSeries/keyskeysvar"tsdb/engine/wal/wal.go(ﬂR0ÏR@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/DeleteSeries/keys˛
*Log/DeleteSeries/llvar"tsdb/engine/wal/wal.go( R0–R@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/DeleteSeries/l–
*Log/EnableLoggingEnableLoggingfield"tsdb/engine/wal/wal.go(Õ*0ﬂ*8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZH

text/plain:EnableLogging specifies if detailed logs should be output
ä./Log/EnableLogging¥
*	Log/FlushFlushfunc"tsdb/engine/wal/wal.go(òB0◊C8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z8

text/plain*Flush will force a flush on all paritions
ä./Log/Flush÷
!*Log/Flush/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(ÇC0•C@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/Flush/$wal0/$wal0/$wal0/errà
*Log/Flush/$wal0/ppvar"tsdb/engine/wal/wal.go(òB0◊C@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Flush/$wal0/p
*Log/Flush/llvar"tsdb/engine/wal/wal.go(ûB0§B@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Flush/l≤
*Log/FlushColdIntervalFlushColdIntervalfield"tsdb/engine/wal/wal.go(› 0¸ 8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zì

text/plainÑFlushColdInterval is the period of time after which a partition will do a
full flush and compaction if it has been cold for writes.
ä./Log/FlushColdInterval„
*	Log/IndexIndexfield"tsdb/engine/wal/wal.go(˚)0å*8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter",
        "UnderlyingTypeString": "interface{WriteIndex(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zl

text/plain^Index is the database that series data gets flushed to once it gets compacted
out of the WAL.
ä./Log/IndexÈ
*Log/LoadMetadataIndexLoadMetadataIndexfunc"tsdb/engine/wal/wal.go(ÜE0“O8R¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error",
        "UnderlyingTypeString": "func(index *github.com/influxdb/influxdb/tsdb.DatabaseIndex, measurementFields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z∂

text/plainßLoadMetadatIndex loads the new series and fields files into memory and flushes them to the BoltDB index. This function
should be called before making a call to Open()
ä./Log/LoadMetadataIndexè
F*DLog/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/$wal0/$wal0/namenamevar"tsdb/engine/wal/wal.go(ÜE0“O@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äF./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/$wal0/$wal0/name 
=*;Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/$wal0/mmvar"tsdb/engine/wal/wal.go(õJ0“J@R†{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Measurement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä=./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/$wal0/mÓ
7*5Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/kkvar"tsdb/engine/wal/wal.go(ÜE0“O@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä7./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/kÕ
8*6Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/mfmfvar"tsdb/engine/wal/wal.go(ÜE0“O@R¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal0/mf√
8*6Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal1/scscvar"tsdb/engine/wal/wal.go(ÜE0“O@R¢{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/$wal0/$wal1/sc«
,**Log/LoadMetadataIndex/$wal1/$wal0/$wal1/sfsfvar"tsdb/engine/wal/wal.go(ÜE0“O@Ræ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Log/LoadMetadataIndex/$wal1/$wal0/$wal1/sfº
%*#Log/LoadMetadataIndex/$wal1/$wal0/aavar"tsdb/engine/wal/wal.go(ÉH0£H@R¬{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Log/LoadMetadataIndex/$wal1/$wal0/a‚
'*%Log/LoadMetadataIndex/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(ÉH0£H@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Log/LoadMetadataIndex/$wal1/$wal0/err¡
 *Log/LoadMetadataIndex/$wal1/fnfnvar"tsdb/engine/wal/wal.go(ÜE0“O@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/LoadMetadataIndex/$wal1/fn÷
!*Log/LoadMetadataIndex/$wal2/errerrvar"tsdb/engine/wal/wal.go(€M0¢N@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/LoadMetadataIndex/$wal2/errÓ
-*+Log/LoadMetadataIndex/$wal3/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(åO0†O@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Log/LoadMetadataIndex/$wal3/$wal0/$wal0/err¡
 *Log/LoadMetadataIndex/$wal3/fnfnvar"tsdb/engine/wal/wal.go(ÜE0“O@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/LoadMetadataIndex/$wal3/fn 
*Log/LoadMetadataIndex/errerrvar"tsdb/engine/wal/wal.go(ÄF0£F@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/LoadMetadataIndex/errí
*Log/LoadMetadataIndex/indexindexvar"tsdb/engine/wal/wal.go(¶E0øE@R§{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/LoadMetadataIndex/indexà
*Log/LoadMetadataIndex/llvar"tsdb/engine/wal/wal.go(åE0íE@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/LoadMetadataIndex/l‘
)*'Log/LoadMetadataIndex/measurementFieldsmeasurementFieldsvar"tsdb/engine/wal/wal.go(¡E0ıE@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Log/LoadMetadataIndex/measurementFieldsÊ
/*-Log/LoadMetadataIndex/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal.go(«F0äG@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä/./Log/LoadMetadataIndex/measurementFieldsToSaveŒ
!*Log/LoadMetadataIndex/metaFiles	metaFilesvar"tsdb/engine/wal/wal.go(ÄF0£F@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/LoadMetadataIndex/metaFilesØ
&*$Log/LoadMetadataIndex/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal.go(åG0ªG@R¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Log/LoadMetadataIndex/seriesToCreate‰
*Log/LogOutput	LogOutputfield"tsdb/engine/wal/wal.go(˝0ê8R–{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z:

text/plain,LogOutput is the writer used by the logger.
ä./Log/LogOutput®
*Log/MaxSeriesSizeMaxSeriesSizefield"tsdb/engine/wal/wal.go(Ü#0ó#8R†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z°

text/plainíMaxSeriesSize controls when a partition should get flushed to index and compacted
if any series in the partition has exceeded this size threshold
ä./Log/MaxSeriesSizeŸ

*Log/OpenOpenfunc"tsdb/engine/wal/wal.go(«30Œ;8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z`

text/plainROpen opens and initializes the Log. Will recover from previous unclosed shutdowns
ä
./Log/Openº
*Log/Open/$wal1/errerrvar"tsdb/engine/wal/wal.go(Ú50í6@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal1/errº
*Log/Open/$wal2/errerrvar"tsdb/engine/wal/wal.go(ÿ60Ô6@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal2/err»
*Log/Open/$wal3/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ü80à9@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal3/$wal0/errí
*Log/Open/$wal3/$wal0/ppvar"tsdb/engine/wal/wal.go(Ü80à9@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal3/$wal0/p§
*Log/Open/$wal3/iivar"tsdb/engine/wal/wal.go(◊70Â7@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal3/iº
*Log/Open/$wal4/errerrvar"tsdb/engine/wal/wal.go(›90˙9@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/$wal4/errÓ
*
Log/Open/llvar"tsdb/engine/wal/wal.go(Õ30”3@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/Open/lá
*Log/PartitionSizeThresholdPartitionSizeThresholdfield"tsdb/engine/wal/wal.go(¨&0…&8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z`

text/plainRPartitionSizeThreshold specifies when a partition should be forced to be flushed.
ä./Log/PartitionSizeThresholdı
*Log/ReadySeriesSizeReadySeriesSizefield"tsdb/engine/wal/wal.go(˘#0å$8R†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zi

text/plain[ReadySeriesSize is the minimum size a series of points must get to before getting flushed.
ä./Log/ReadySeriesSizeÁ
*Log/SegmentSizeSegmentSizefield"tsdb/engine/wal/wal.go(ÿ!0È!8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zc

text/plainUSegmentSize is the file size at which a segment file will be rotated in a partition.
ä./Log/SegmentSize
*Log/WritePointsWritePointsfunc"tsdb/engine/wal/wal.go(∏=0ÈA8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point, fields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, series []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point, fields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, series []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints 
*Log/WritePoints/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ó>0õ?@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/$wal0/err‚
'*%Log/WritePoints/$wal1/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(°A0∑A@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Log/WritePoints/$wal1/$wal0/$wal0/errî
*Log/WritePoints/$wal1/ppvar"tsdb/engine/wal/wal.go(∏=0ÈA@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/$wal1/pá
*Log/WritePoints/$wal1/pointspointsvar"tsdb/engine/wal/wal.go(∏=0ÈA@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/$wal1/pointsß
*Log/WritePoints/fieldsfieldsvar"tsdb/engine/wal/wal.go(Á=0ê>@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/fields¸
*Log/WritePoints/llvar"tsdb/engine/wal/wal.go(æ=0ƒ=@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/lî
#*!Log/WritePoints/partitionsToWritepartitionsToWritevar"tsdb/engine/wal/wal.go(≠@0ﬁ@@Ré{
        "PkgName": "wal",
        "TypeString": "map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Log/WritePoints/partitionsToWrite˚
*Log/WritePoints/pointspointsvar"tsdb/engine/wal/wal.go(“=0Â=@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/pointsã
*Log/WritePoints/seriesseriesvar"tsdb/engine/wal/wal.go(í>0≠>@R¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/WritePoints/seriesù
*Log/autoflusherautoflusherfunc"tsdb/engine/wal/wal.go(öÖ0€âR≥{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(closing chan struct{})",
        "UnderlyingTypeString": "func(closing chan struct{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zä

text/plain|autoflusher waits for notification of a flush and kicks it off in the background.
This method runs in a separate goroutine.
ä./Log/autoflusherà
9*7Log/autoflusher/$wal0/$wal0/$wal0/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ñà0îà@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä9./Log/autoflusher/$wal0/$wal0/$wal0/$wal0/$wal0/$wal0/errî
?*=Log/autoflusher/$wal0/$wal0/$wal0/$wal0/$wal0/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ùà0åâ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä?./Log/autoflusher/$wal0/$wal0/$wal0/$wal0/$wal0/$wal1/$wal0/err»
*Log/autoflusher/closingclosingvar"tsdb/engine/wal/wal.go(¥Ö0…Ö@Rﬁ{
        "PkgName": "wal",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/autoflusher/closing˛
*Log/autoflusher/llvar"tsdb/engine/wal/wal.go(†Ö0¶Ö@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/autoflusher/lﬁ
!*Log/autoflusher/metaFlushTickermetaFlushTickervar"tsdb/engine/wal/wal.go(‚Ö0ñÜ@R‹{
        "PkgName": "wal",
        "TypeString": "*time.Ticker",
        "UnderlyingTypeString": "*time.Ticker",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/autoflusher/metaFlushTicker¢
*	Log/closeclosefunc"tsdb/engine/wal/wal.go(ø~0ÙÄRï{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZA

text/plain3close all the open Log partitions and file handles
ä./Log/close÷
!*Log/close/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ñ0î@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/close/$wal0/$wal0/$wal0/errâ
*Log/close/$wal0/ppvar"tsdb/engine/wal/wal.go(ø~0ÙÄ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/close/$wal0/p¿
*Log/close/$wal1/errerrvar"tsdb/engine/wal/wal.go(úÄ0µÄ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/close/$wal1/err
*Log/close/llvar"tsdb/engine/wal/wal.go(≈~0À~@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/close/lÍ
*Log/closingclosingfield"tsdb/engine/wal/wal.go(µ0 Rö{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/closing⁄
*	Log/flushflushfield"tsdb/engine/wal/wal.go(Ö0†Rê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "chan int",
        "UnderlyingTypeString": "chan int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushÉ
*Log/flushCheckIntervalflushCheckIntervalfield"tsdb/engine/wal/wal.go(π0ŸRí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushCheckInterval˛
*Log/flushCheckTimerflushCheckTimerfield"tsdb/engine/wal/wal.go(⁄0¯Rñ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "*time.Timer",
        "UnderlyingTypeString": "*time.Timer",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushCheckTimerù
*Log/flushMetadataflushMetadatafunc"tsdb/engine/wal/wal.go(˘ã0ÇòRï{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z¢

text/plainìflushMetadata will write start a new metafile for writes to go through and then flush all
metadata from previous files to the index. After a sucessful write, the metadata files
will be removed. While the flush to index is happening we aren't blocked for new metadata writes.
ä./Log/flushMetadata–
*Log/flushMetadata/$wal0/errerrvar"tsdb/engine/wal/wal.go(·ç0˝ç@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal0/err™
*Log/flushMetadata/$wal0/ststvar"tsdb/engine/wal/wal.go(·ç0˝ç@Rø{
        "PkgName": "wal",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal0/st–
*Log/flushMetadata/$wal3/errerrvar"tsdb/engine/wal/wal.go(ßê0æê@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal3/errË
3*1Log/flushMetadata/$wal4/$wal0/$wal1/$wal0/$wal0/kkvar"tsdb/engine/wal/wal.go(˘ã0Çò@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./Log/flushMetadata/$wal4/$wal0/$wal1/$wal0/$wal0/k«
4*2Log/flushMetadata/$wal4/$wal0/$wal1/$wal0/$wal0/mfmfvar"tsdb/engine/wal/wal.go(˘ã0Çò@R¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Log/flushMetadata/$wal4/$wal0/$wal1/$wal0/$wal0/mf¡
(*&Log/flushMetadata/$wal4/$wal0/$wal1/sfsfvar"tsdb/engine/wal/wal.go(˘ã0Çò@Ræ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Log/flushMetadata/$wal4/$wal0/$wal1/sf∂
!*Log/flushMetadata/$wal4/$wal0/aavar"tsdb/engine/wal/wal.go(¢í0¬í@R¬{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/flushMetadata/$wal4/$wal0/a‹
#*!Log/flushMetadata/$wal4/$wal0/errerrvar"tsdb/engine/wal/wal.go(¢í0¬í@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Log/flushMetadata/$wal4/$wal0/errª
*Log/flushMetadata/$wal4/fnfnvar"tsdb/engine/wal/wal.go(˘ã0Çò@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal4/fn–
*Log/flushMetadata/$wal6/errerrvar"tsdb/engine/wal/wal.go(¨ï0‡ï@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal6/errË
)*'Log/flushMetadata/$wal8/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(ºó0–ó@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Log/flushMetadata/$wal8/$wal0/$wal0/errª
*Log/flushMetadata/$wal8/fnfnvar"tsdb/engine/wal/wal.go(˘ã0Çò@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/$wal8/fnƒ
*Log/flushMetadata/errerrvar"tsdb/engine/wal/wal.go(Áå0¬é@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/errº
*Log/flushMetadata/filesfilesvar"tsdb/engine/wal/wal.go(·è0Äê@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/filesÇ
*Log/flushMetadata/llvar"tsdb/engine/wal/wal.go(ˇã0Öå@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/lø
 *Log/flushMetadata/measurementsmeasurementsvar"tsdb/engine/wal/wal.go(ﬂê0óë@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/flushMetadata/measurementsë
*Log/flushMetadata/seriesseriesvar"tsdb/engine/wal/wal.go(ôë0¿ë@R¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/series≥
*Log/flushMetadata/sizesizevar"tsdb/engine/wal/wal.go(Áå0¬é@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/sizeÚ
*Log/flushMetadata/startTime	startTimevar"tsdb/engine/wal/wal.go(Ùì0ãî@R˛{
        "PkgName": "wal",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/flushMetadata/startTime„
*
Log/loggerloggerfield"tsdb/engine/wal/wal.go(í0ßRñ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/logger«
*Log/metaFilemetaFilefield"tsdb/engine/wal/wal.go(Ω0ŒRê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zb

text/plainTmetaFile is the file that compressed metadata like series and fields are written to
ä./Log/metaFileÓ
*Log/metadataFilesmetadataFilesfunc"tsdb/engine/wal/wal.go(Œn0∞pR≠{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z^

text/plainPmetadataFiles returns the files in the WAL directory with the MetaFileExtension
ä./Log/metadataFilesÆ
*Log/metadataFiles/aavar"tsdb/engine/wal/wal.go(…o0Êo@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/metadataFiles/a¬
*Log/metadataFiles/errerrvar"tsdb/engine/wal/wal.go(…o0Êo@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/metadataFiles/errÄ
*Log/metadataFiles/llvar"tsdb/engine/wal/wal.go(‘n0⁄n@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/metadataFiles/l≥
*Log/metadataFiles/pathpathvar"tsdb/engine/wal/wal.go(Åo0∆o@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/metadataFiles/path™
*Log/mumufield"tsdb/engine/wal/wal.go(™0¡RÈ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/mu¨
*Log/nextMetaFilenextMetaFilefunc"tsdb/engine/wal/wal.go(Ìh0˘mRï{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z∂

text/plainßnextMetaFile will close the current file if there is one open and open a new file to log
metadata updates to. This function assumes that you've locked l.mu elsewhere.
ä./Log/nextMetaFile‰
(*&Log/nextMetaFile/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(“i0Îi@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Log/nextMetaFile/$wal0/$wal0/$wal0/errÿ
"* Log/nextMetaFile/$wal2/$wal0/errerrvar"tsdb/engine/wal/wal.go(∆k0Ìk@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Log/nextMetaFile/$wal2/$wal0/erræ
 *Log/nextMetaFile/$wal2/$wal0/nnvar"tsdb/engine/wal/wal.go(∆k0Ìk@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/nextMetaFile/$wal2/$wal0/n∆
"* Log/nextMetaFile/$wal2/$wal0/numnumvar"tsdb/engine/wal/wal.go(˚j0√k@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Log/nextMetaFile/$wal2/$wal0/num¿
*Log/nextMetaFile/errerrvar"tsdb/engine/wal/wal.go(ëj0¥j@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/nextMetaFile/err•
*Log/nextMetaFile/ididvar"tsdb/engine/wal/wal.go(ÿj0ﬂj@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/nextMetaFile/id˛
*Log/nextMetaFile/llvar"tsdb/engine/wal/wal.go(Ûh0˘h@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/nextMetaFile/lƒ
*Log/nextMetaFile/metaFiles	metaFilesvar"tsdb/engine/wal/wal.go(ëj0¥j@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/nextMetaFile/metaFiles…
*Log/nextMetaFile/nextFileNamenextFileNamevar"tsdb/engine/wal/wal.go(´l0ˇl@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/nextMetaFile/nextFileNameﬁ
*Log/openPartitionFilesopenPartitionFilesfunc"tsdb/engine/wal/wal.go(…s0˚yRï{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZW

text/plainIopenPartitionFiles will open all partitions and read their segment files
ä./Log/openPartitionFiles¸
4*2Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(∑u0◊u@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal0/err÷
>*<Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/$wal1/eevar"tsdb/engine/wal/wal.go(…s0˚y@R™{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä>./Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/$wal1/e‡
>*<Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/entriesentriesvar"tsdb/engine/wal/wal.go(ªw0ÿw@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä>./Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/entriesà
:*8Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/errerrvar"tsdb/engine/wal/wal.go(ªw0ÿw@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä:./Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/$wal0/err‰
2*0Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/nnvar"tsdb/engine/wal/wal.go(…s0˚y@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./Log/openPartitionFiles/$wal0/$wal0/$wal0/$wal2/n
.*,Log/openPartitionFiles/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(πv0ﬂv@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../Log/openPartitionFiles/$wal0/$wal0/$wal0/errÙ
4*2Log/openPartitionFiles/$wal0/$wal0/$wal0/fileNames	fileNamesvar"tsdb/engine/wal/wal.go(πv0ﬂv@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Log/openPartitionFiles/$wal0/$wal0/$wal0/fileNames∫
,**Log/openPartitionFiles/$wal0/$wal0/$wal0/ppvar"tsdb/engine/wal/wal.go(—t0›t@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Log/openPartitionFiles/$wal0/$wal0/$wal0/p¢
 *Log/openPartitionFiles/$wal0/ppvar"tsdb/engine/wal/wal.go(…s0˚y@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/openPartitionFiles/$wal0/p‰
(*&Log/openPartitionFiles/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(µy0≈y@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Log/openPartitionFiles/$wal1/$wal0/err∫
 *Log/openPartitionFiles/$wal1/iivar"tsdb/engine/wal/wal.go(éy0îy@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/openPartitionFiles/$wal1/iä
*Log/openPartitionFiles/llvar"tsdb/engine/wal/wal.go(œs0’s@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/openPartitionFiles/lŒ
 *Log/openPartitionFiles/resultsresultsvar"tsdb/engine/wal/wal.go(ıs0£t@Rÿ{
        "PkgName": "wal",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/openPartitionFiles/results≥
*Log/partition	partitionfunc"tsdb/engine/wal/wal.go(∆ò0øõRç{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(key []byte) *github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "func(key []byte) *github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZM

text/plain?walPartition returns the partition number that key belongs to.
ä./Log/partition‘
*Log/partition/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(Ìô0Èö@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/$wal0/$wal0/errû
*Log/partition/$wal0/$wal0/ppvar"tsdb/engine/wal/wal.go(Ìô0Èö@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/$wal0/$wal0/p«
*Log/partition/hhvar"tsdb/engine/wal/wal.go(¯ò0âô@RÛ{
        "PkgName": "wal",
        "TypeString": "hash.Hash64",
        "UnderlyingTypeString": "interface{Sum64() uint64; hash.Hash}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/h•
*Log/partition/ididvar"tsdb/engine/wal/wal.go(ôô0ƒô@RŒ{
        "PkgName": "wal",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/id™
*Log/partition/keykeyvar"tsdb/engine/wal/wal.go(ﬁò0Ëò@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/key˙
*Log/partition/llvar"tsdb/engine/wal/wal.go(Ãò0“ò@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/lÜ
*Log/partition/ppvar"tsdb/engine/wal/wal.go(∆ô0€ô@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partition/p§
*Log/partitionCountpartitionCountfield"tsdb/engine/wal/wal.go(˝(0í)Rå{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z∞

text/plain°partitionCount is the number of separate partitions to create for the WAL.
Compactions happen per partition. So this number will affect what percentage
of the WAL gets compacted at a time. For instance, a setting of 10 means
we generally will be compacting about 10% of the WAL at a time.
ä./Log/partitionCount€
*Log/partitions
partitionsfield"tsdb/engine/wal/wal.go(√0‚RÇ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "map[uint8]*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/partitions”

*Log/pathpathfield"tsdb/engine/wal/wal.go(˜0ÇRå{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./Log/pathù
*Log/pointsToPartitionspointsToPartitionsfunc"tsdb/engine/wal/wal.go(ùq0˚rRµ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zv

text/plainhpointsToPartitions returns a map that organizes the points into the partitions they should be mapped to
ä./Log/pointsToPartitions±
'*%Log/pointsToPartitions/$wal0/$wal0/ppppvar"tsdb/engine/wal/wal.go(∑r0—r@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Log/pointsToPartitions/$wal0/$wal0/ppˆ
 *Log/pointsToPartitions/$wal0/ppvar"tsdb/engine/wal/wal.go(ùq0˚r@RÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/pointsToPartitions/$wal0/pä
*Log/pointsToPartitions/llvar"tsdb/engine/wal/wal.go(£q0©q@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/pointsToPartitions/lÚ
*Log/pointsToPartitions/mmvar"tsdb/engine/wal/wal.go(Úq0òr@Ré{
        "PkgName": "wal",
        "TypeString": "map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "map[*github.com/influxdb/influxdb/tsdb/engine/wal.Partition][]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/pointsToPartitions/mâ
*Log/pointsToPartitions/pointspointsvar"tsdb/engine/wal/wal.go(æq0—q@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/pointsToPartitions/pointsÙ
*Log/readMetadataFilereadMetadataFilefunc"tsdb/engine/wal/wal.go(∑V0ÇaRπ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(fileName string) ([]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields, error)",
        "UnderlyingTypeString": "func(fileName string) ([]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZŒ

text/plainøreadMetadataFile will read the entire contents of the meta file and return a slice of the
seriesAndFields objects that were written in. It ignores file errors since those can't be
recovered.
ä./Log/readMetadataFileÏ
,**Log/readMetadataFile/$wal1/$wal0/$wal4/errerrvar"tsdb/engine/wal/wal.go(Õ^0Î^@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Log/readMetadataFile/$wal1/$wal0/$wal4/err»
$*"Log/readMetadataFile/$wal1/$wal0/bbvar"tsdb/engine/wal/wal.go(“Z0ÔZ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./Log/readMetadataFile/$wal1/$wal0/bŒ
&*$Log/readMetadataFile/$wal1/$wal0/bufbufvar"tsdb/engine/wal/wal.go(›\0˛\@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Log/readMetadataFile/$wal1/$wal0/buf„
-*+Log/readMetadataFile/$wal1/$wal0/dataLength
dataLengthvar"tsdb/engine/wal/wal.go(ﬂY0˚Y@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Log/readMetadataFile/$wal1/$wal0/dataLength‡
&*$Log/readMetadataFile/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(‡X0ÄY@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Log/readMetadataFile/$wal1/$wal0/errπ
%*#Log/readMetadataFile/$wal1/$wal0/sfsfvar"tsdb/engine/wal/wal.go(Ø^0«^@Ræ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Log/readMetadataFile/$wal1/$wal0/sf‘
 *Log/readMetadataFile/$wal2/errerrvar"tsdb/engine/wal/wal.go(Ω`0Õ`@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Log/readMetadataFile/$wal2/err¢
*Log/readMetadataFile/aavar"tsdb/engine/wal/wal.go(ﬂW0ˇW@R¬{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/a»
*Log/readMetadataFile/errerrvar"tsdb/engine/wal/wal.go(ÜW0∂W@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/err¥
*Log/readMetadataFile/ffvar"tsdb/engine/wal/wal.go(ÜW0∂W@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/f≈
*Log/readMetadataFile/fileNamefileNamevar"tsdb/engine/wal/wal.go(÷V0ÂV@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/fileNameÜ
*Log/readMetadataFile/llvar"tsdb/engine/wal/wal.go(ΩV0√V@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/lø
*Log/readMetadataFile/lengthlengthvar"tsdb/engine/wal/wal.go(ÇX0õX@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/readMetadataFile/lengthË
*Log/triggerAutoFlushtriggerAutoFlushfunc"tsdb/engine/wal/wal.go(‹Å0ñÑRâ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zq

text/plainctriggerAutoFlush will flush and compact any partitions that have hit the thresholds for compaction
ä./Log/triggerAutoFlushÜ
8*6Log/triggerAutoFlush/$wal0/$wal0/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(õÉ0∂É@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./Log/triggerAutoFlush/$wal0/$wal0/$wal0/$wal0/$wal0/errÉ
**(Log/triggerAutoFlush/$wal0/$wal0/$wal0/ffvar"tsdb/engine/wal/wal.go( Ç0ÑÉ@R˝{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Log/triggerAutoFlush/$wal0/$wal0/$wal0/f†
*Log/triggerAutoFlush/$wal0/ppvar"tsdb/engine/wal/wal.go(‹Å0ñÑ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/triggerAutoFlush/$wal0/pà
*Log/triggerAutoFlush/llvar"tsdb/engine/wal/wal.go(‚Å0ËÅ@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/triggerAutoFlush/l‹
*Log/wgwgfield"tsdb/engine/wal/wal.go(ù0≥RŒ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Log",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZK

text/plain=These coordinate closing and waiting for running goroutines.
ä./Log/wgµ
*Log/writeSeriesAndFieldswriteSeriesAndFieldsfunc"tsdb/engine/wal/wal.go(•c0ægRï{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Log",
        "TypeString": "func(fields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, series []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(fields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, series []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zß

text/plainòwriteSeriesAndFields will write the compressed fields and series to the meta file. This file persists the data
in case the server gets shutdown before the WAL has a chance to flush everything to the cache. By default this
file is flushed on start when bz1 calls LoadMetaDataIndex
ä./Log/writeSeriesAndFields‹
$*"Log/writeSeriesAndFields/$wal2/errerrvar"tsdb/engine/wal/wal.go(éf0¡f@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./Log/writeSeriesAndFields/$wal2/err‹
$*"Log/writeSeriesAndFields/$wal3/errerrvar"tsdb/engine/wal/wal.go(Âf0Ég@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./Log/writeSeriesAndFields/$wal3/err∏
*Log/writeSeriesAndFields/bbvar"tsdb/engine/wal/wal.go(çe0ße@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/writeSeriesAndFields/bª
*Log/writeSeriesAndFields/cbcbvar"tsdb/engine/wal/wal.go( e0Âe@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/writeSeriesAndFields/cb–
*Log/writeSeriesAndFields/errerrvar"tsdb/engine/wal/wal.go(çe0ße@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/writeSeriesAndFields/errπ
!*Log/writeSeriesAndFields/fieldsfieldsvar"tsdb/engine/wal/wal.go(»c0Òc@R¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/writeSeriesAndFields/fieldsé
*Log/writeSeriesAndFields/llvar"tsdb/engine/wal/wal.go(´c0±c@R¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/writeSeriesAndFields/lù
!*Log/writeSeriesAndFields/seriesseriesvar"tsdb/engine/wal/wal.go(Ûc0éd@R¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Log/writeSeriesAndFields/series©
*Log/writeSeriesAndFields/sfsfvar"tsdb/engine/wal/wal.go(’d0ãe@Ræ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Log/writeSeriesAndFields/sf»
*MarshalEntryMarshalEntryfunc"tsdb/engine/wal/wal.go(´0·Ò8RÀ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(timestamp int64, data []byte) []byte",
        "UnderlyingTypeString": "func(timestamp int64, data []byte) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z†

text/plainëmarshalCacheEntry encodes the timestamp and data to a single byte slice.

The format of the byte slice is:

    uint64 timestamp
    []byte data
ä./MarshalEntry®
*MarshalEntry/bufbufvar"tsdb/engine/wal/wal.go(Â0ÖÒ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./MarshalEntry/buf´
*MarshalEntry/datadatavar"tsdb/engine/wal/wal.go(Œ0Ÿ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./MarshalEntry/data∏
*MarshalEntry/timestamp	timestampvar"tsdb/engine/wal/wal.go(Ω0Ã@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./MarshalEntry/timestamp¯
*MetaFileExtensionMetaFileExtensionconst"tsdb/engine/wal/wal.go(”0Ì8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zx

text/plainjMetaFileExtension is the file extension for the log files of new fields and measurements that get created
ä./MetaFileExtension˙
*MetaFlushIntervalMetaFlushIntervalconst"tsdb/engine/wal/wal.go(ÿ0¸8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZÉ

text/plainuMetaFlushInterval is the period after which any compressed meta data in the .meta file will get
flushed to the index
ä./MetaFlushInterval≈
*NewLogNewLogfunc"tsdb/engine/wal/wal.go(∑-028Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(path string) *github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "func(path string) *github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewLogù
*NewLog/pathpathvar"tsdb/engine/wal/wal.go(√-0Œ-@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewLog/path…
*NewPartitionNewPartitionfunc"tsdb/engine/wal/wal.go(∆®0•Æ8RÔ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(id uint8, path string, segmentSize int64, sizeThreshold uint64, readySeriesSize int, flushColdInterval time.Duration, index github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter) (*github.com/influxdb/influxdb/tsdb/engine/wal.Partition, error)",
        "UnderlyingTypeString": "func(id uint8, path string, segmentSize int64, sizeThreshold uint64, readySeriesSize int, flushColdInterval time.Duration, index github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter) (*github.com/influxdb/influxdb/tsdb/engine/wal.Partition, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartitionÿ
 *NewPartition/flushColdIntervalflushColdIntervalvar"tsdb/engine/wal/wal.go(≠©0Ã©@R÷{
        "PkgName": "wal",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./NewPartition/flushColdInterval£
*NewPartition/ididvar"tsdb/engine/wal/wal.go(ÿ®0‡®@RŒ{
        "PkgName": "wal",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/id±
*NewPartition/indexindexvar"tsdb/engine/wal/wal.go(Œ©0ﬂ©@R”{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter",
        "UnderlyingTypeString": "interface{WriteIndex(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/indexÑ
*NewPartition/ppvar"tsdb/engine/wal/wal.go(¯©0√¨@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/p´
*NewPartition/pathpathvar"tsdb/engine/wal/wal.go(‚®0Ì®@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/path∆
*NewPartition/readySeriesSizereadySeriesSizevar"tsdb/engine/wal/wal.go(ò©0´©@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/readySeriesSizeæ
*NewPartition/segmentSizesegmentSizevar"tsdb/engine/wal/wal.go(Ô®0Ä©@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/segmentSize∆
*NewPartition/sizeThresholdsizeThresholdvar"tsdb/engine/wal/wal.go(Ç©0ñ©@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./NewPartition/sizeThreshold„

*	Partition	Partitiontype"tsdb/engine/wal/wal.go(Òú0ö®8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "struct{id uint8; path string; mu sync.RWMutex; currentSegmentFile *os.File; currentSegmentSize int64; currentSegmentID uint32; lastFileID uint32; maxSegmentSize int64; cache map[string]*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry; index github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter; readySeriesSize int; memorySize uint64; sizeThreshold uint64; flushCache map[string][][]byte; compactionRunning bool; flushColdInterval time.Duration; lastWriteTime time.Time; log *github.com/influxdb/influxdb/tsdb/engine/wal.Log; os struct{OpenCompactionFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); OpenSegmentFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); Rename func(oldpath string, newpath string) error}; buf []byte; snappybuf []byte}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z¥

text/plain•Partition is a set of files for a partition of the WAL. We use multiple partitions so when compactions occur
only a portion of the WAL must be flushed and compacted
ä./Partition·
*Partition/CloseClosefunc"tsdb/engine/wal/wal.go(ÌÆ0…∞8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZQ

text/plainCClose resets the caches and closes the currently open segment file
ä./Partition/CloseÃ
*Partition/Close/$wal1/errerrvar"tsdb/engine/wal/wal.go(˘Ø0ú∞@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Close/$wal1/errä
*Partition/Close/ppvar"tsdb/engine/wal/wal.go(ÛÆ0ˇÆ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Close/p˘
*Partition/WriteWritefunc"tsdb/engine/wal/wal.go(Õ≤0ë¡8Rï{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zà

text/plain˘Write will write a compressed block of the points to the current segment file. If the segment
file is larger than the max size, it will roll over to a new file before performing the write.
This method will also add the points to the in memory cache
ä./Partition/Write“
+*)Partition/Write/$wal1/$wal0/$wal0/$wal0/nnvar"tsdb/engine/wal/wal.go(Ô∂0Ü∑@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./Partition/Write/$wal1/$wal0/$wal0/$wal0/në
,**Partition/Write/$wal1/$wal0/$wal0/$wal0/ppppvar"tsdb/engine/wal/wal.go(”∂0Î∂@RÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Partition/Write/$wal1/$wal0/$wal0/$wal0/pp
-*+Partition/Write/$wal1/$wal0/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(⁄ª0Ûª@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Partition/Write/$wal1/$wal0/$wal1/$wal0/err‰
'*%Partition/Write/$wal1/$wal0/$wal2/errerrvar"tsdb/engine/wal/wal.go(•º0·º@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/Write/$wal1/$wal0/$wal2/err∆
%*#Partition/Write/$wal1/$wal0/$wal2/nnvar"tsdb/engine/wal/wal.go(•º0·º@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/Write/$wal1/$wal0/$wal2/n‰
'*%Partition/Write/$wal1/$wal0/$wal3/errerrvar"tsdb/engine/wal/wal.go(„Ω0äæ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/Write/$wal1/$wal0/$wal3/err∆
%*#Partition/Write/$wal1/$wal0/$wal3/nnvar"tsdb/engine/wal/wal.go(„Ω0äæ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/Write/$wal1/$wal0/$wal3/nÖ
&*$Partition/Write/$wal1/$wal0/$wal4/ppppvar"tsdb/engine/wal/wal.go(Õ≤0ë¡@RÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/Write/$wal1/$wal0/$wal4/pp¿
*Partition/Write/$wal1/$wal0/bbvar"tsdb/engine/wal/wal.go(ü∫0–∫@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Write/$wal1/$wal0/b⁄
#*!Partition/Write/$wal1/$wal0/blockblockvar"tsdb/engine/wal/wal.go(Ûµ0ñ∂@Rﬁ{
        "PkgName": "wal",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Partition/Write/$wal1/$wal0/block∫
*Partition/Write/$wal1/$wal0/iivar"tsdb/engine/wal/wal.go(ù∂0¢∂@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Write/$wal1/$wal0/i∞
-*+Partition/Write/$wal1/$wal0/marshaledPointsmarshaledPointsvar"tsdb/engine/wal/wal.go(Œπ0Ùπ@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Partition/Write/$wal1/$wal0/marshaledPointsÃ
*Partition/Write/$wal2/errerrvar"tsdb/engine/wal/wal.go(√¿0Â¿@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Write/$wal2/errä
*Partition/Write/ppvar"tsdb/engine/wal/wal.go(”≤0ﬂ≤@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Write/p˝
*Partition/Write/pointspointsvar"tsdb/engine/wal/wal.go(Á≤0˙≤@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/Write/pointsò
!*Partition/Write/remainingPointsremainingPointsvar"tsdb/engine/wal/wal.go(∑µ0–µ@Rñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/Write/remainingPoints—
*Partition/addToCache
addToCachefunc"tsdb/engine/wal/wal.go(Áß0à≠Rﬂ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(key []byte, data []byte, timestamp int64)",
        "UnderlyingTypeString": "func(key []byte, data []byte, timestamp int64)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zâ

text/plain{addToCache will marshal the entry and add it to the in memory cache. It will also mark if this key will need sorting later
ä./Partition/addToCacheª
*Partition/addToCache/datadatavar"tsdb/engine/wal/wal.go(Ü®0ñ®@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/data¢
*Partition/addToCache/entryentryvar"tsdb/engine/wal/wal.go(¿©0ÿ©@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/entry∏
*Partition/addToCache/keykeyvar"tsdb/engine/wal/wal.go(Ü®0ñ®@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/key¡
*Partition/addToCache/keystrkeystrvar"tsdb/engine/wal/wal.go(®©0Ω©@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/keystrî
*Partition/addToCache/ppvar"tsdb/engine/wal/wal.go(Ìß0˘ß@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/p»
 *Partition/addToCache/timestamp	timestampvar"tsdb/engine/wal/wal.go(ò®0ß®@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/addToCache/timestamp≤
*Partition/addToCache/vvvar"tsdb/engine/wal/wal.go(‰®0Ü©@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/addToCache/v˛
*Partition/bufbuffield"tsdb/engine/wal/wal.go(ˆß0Ü®Rí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zó

text/plainàbuffers for reading and writing compressed blocks
We constrain blocks so that we can read and write into a partition
without allocating
ä./Partition/buf‰
*Partition/cachecachefield"tsdb/engine/wal/wal.go(‚û0ãüRå{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/cacheˇ
*Partition/compactFilescompactFilesfunc"tsdb/engine/wal/wal.go(Ùˆ0‚ÑRì{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(c *github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo, flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) error",
        "UnderlyingTypeString": "func(c *github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo, flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactFilesâ
E*CPartition/compactFiles/$wal2/$wal0/$wal3/$wal0/$wal1/$wal0/$wal0/okokvar"tsdb/engine/wal/wal.go(§ˇ0Àˇ@RÃ{
        "PkgName": "wal",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äE./Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/$wal1/$wal0/$wal0/okÃ
8*6Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/$wal1/eevar"tsdb/engine/wal/wal.go(Ùˆ0‚Ñ@R™{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/$wal1/eƒ
2*0Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/aavar"tsdb/engine/wal/wal.go(ë˝0π˝@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/a˛
4*2Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/errerrvar"tsdb/engine/wal/wal.go(ë˝0π˝@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/errÔ
5*3Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/namenamevar"tsdb/engine/wal/wal.go(ë˝0π˝@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./Partition/compactFiles/$wal2/$wal0/$wal3/$wal0/nameÚ
.*,Partition/compactFiles/$wal2/$wal0/$wal4/errerrvar"tsdb/engine/wal/wal.go(äÄ0 Ä@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../Partition/compactFiles/$wal2/$wal0/$wal4/errÚ
.*,Partition/compactFiles/$wal2/$wal0/$wal5/errerrvar"tsdb/engine/wal/wal.go(îÅ0§Å@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../Partition/compactFiles/$wal2/$wal0/$wal5/errÚ
.*,Partition/compactFiles/$wal2/$wal0/$wal6/errerrvar"tsdb/engine/wal/wal.go(ÀÅ0ﬁÅ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../Partition/compactFiles/$wal2/$wal0/$wal6/erræ
,**Partition/compactFiles/$wal2/$wal0/entriesentriesvar"tsdb/engine/wal/wal.go(ı¸0Ö˝@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Partition/compactFiles/$wal2/$wal0/entriesÊ
(*&Partition/compactFiles/$wal2/$wal0/errerrvar"tsdb/engine/wal/wal.go(î˙0≤˙@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Partition/compactFiles/$wal2/$wal0/err“
&*$Partition/compactFiles/$wal2/$wal0/ffvar"tsdb/engine/wal/wal.go(Ò˚0•¸@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/compactFiles/$wal2/$wal0/f—
'*%Partition/compactFiles/$wal2/$wal0/ididvar"tsdb/engine/wal/wal.go(î˙0≤˙@R–{
        "PkgName": "wal",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/compactFiles/$wal2/$wal0/idØ
'*%Partition/compactFiles/$wal2/$wal0/sfsfvar"tsdb/engine/wal/wal.go(Õ¸0Ó¸@RÆ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/compactFiles/$wal2/$wal0/sf¬
 *Partition/compactFiles/$wal2/nnvar"tsdb/engine/wal/wal.go(Ùˆ0‚Ñ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/compactFiles/$wal2/n⁄
"* Partition/compactFiles/$wal3/errerrvar"tsdb/engine/wal/wal.go(‰Ç0ÅÉ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/compactFiles/$wal3/err¢
*Partition/compactFiles/ccvar"tsdb/engine/wal/wal.go(ï˜0¶˜@Rº{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactFiles/c·
'*%Partition/compactFiles/compactionFilecompactionFilevar"tsdb/engine/wal/wal.go(Ì¯0–˘@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/compactFiles/compactionFileŒ
*Partition/compactFiles/errerrvar"tsdb/engine/wal/wal.go(„˜0â¯@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactFiles/err“
"* Partition/compactFiles/fileNames	fileNamesvar"tsdb/engine/wal/wal.go(„˜0â¯@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/compactFiles/fileNamesÔ
*Partition/compactFiles/flushflushvar"tsdb/engine/wal/wal.go(®˜0∑˜@R˝{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactFiles/flushò
*Partition/compactFiles/ppvar"tsdb/engine/wal/wal.go(˙ˆ0Ü˜@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactFiles/pÙ
*Partition/compactionFileNamecompactionFileNamefunc"tsdb/engine/wal/wal.go( «0÷»Rù{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZW

text/plainIcompactionFileName is the name of the temporary file used for compaction
ä./Partition/compactionFileName§
 *Partition/compactionFileName/ppvar"tsdb/engine/wal/wal.go(–«0‹«@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/compactionFileName/pä
*Partition/compactionRunningcompactionRunningfield"tsdb/engine/wal/wal.go(‘¢0Í¢Ré{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/compactionRunningï
*Partition/currentSegmentFilecurrentSegmentFilefield"tsdb/engine/wal/wal.go(€ù0ˆùRñ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/currentSegmentFileã
*Partition/currentSegmentIDcurrentSegmentIDfield"tsdb/engine/wal/wal.go(íû0´ûRí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/currentSegmentIDè
*Partition/currentSegmentSizecurrentSegmentSizefield"tsdb/engine/wal/wal.go(¯ù0êûRê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/currentSegmentSizeÅ
*Partition/cursorcursorfunc"tsdb/engine/wal/wal.go(ïÆ0ü¥Rç{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(key string) *github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "UnderlyingTypeString": "func(key string) *github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zó

text/plainàcursor will combine the in memory cache and flush cache (if a flush is currently happening) to give a single ordered cursor for the key
ä./Partition/cursorﬁ
,**Partition/cursor/$wal1/$wal0/$wal0/$wal0/ccvar"tsdb/engine/wal/wal.go(÷∞0ç±@R‘{
        "PkgName": "wal",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Partition/cursor/$wal1/$wal0/$wal0/$wal0/cÌ
1*/Partition/cursor/$wal1/$wal0/$wal0/$wal0/dedupededupevar"tsdb/engine/wal/wal.go(√±0‚±@R‘{
        "PkgName": "wal",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä1./Partition/cursor/$wal1/$wal0/$wal0/$wal0/dedupe’
'*%Partition/cursor/$wal1/$wal0/$wal0/fcfcvar"tsdb/engine/wal/wal.go(±∞0Ã∞@R‘{
        "PkgName": "wal",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/cursor/$wal1/$wal0/$wal0/fcÕ
'*%Partition/cursor/$wal1/$wal0/$wal0/okokvar"tsdb/engine/wal/wal.go(±∞0Ã∞@RÃ{
        "PkgName": "wal",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/cursor/$wal1/$wal0/$wal0/okÆ
*Partition/cursor/aavar"tsdb/engine/wal/wal.go(∆≥0Ï≥@R‘{
        "PkgName": "wal",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/cursor/aö
*Partition/cursor/entryentryvar"tsdb/engine/wal/wal.go(ÍÆ0ˇÆ@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/cursor/entry∞
*Partition/cursor/keykeyvar"tsdb/engine/wal/wal.go(∞Æ0∫Æ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/cursor/keyå
*Partition/cursor/ppvar"tsdb/engine/wal/wal.go(õÆ0ßÆ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/cursor/pû
*Partition/deleteSeriesdeleteSeriesfunc"tsdb/engine/wal/wal.go(Óπ0∑øRµ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(keys []string) error",
        "UnderlyingTypeString": "func(keys []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z{

text/plainmdeleteSeries will perform a compaction on the partition, removing all data
from any of the series passed in.
ä./Partition/deleteSeriesæ
**(Partition/deleteSeries/$wal0/$wal0/entryentryvar"tsdb/engine/wal/wal.go(˛ª0ëº@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/deleteSeries/$wal0/$wal0/entry¬
 *Partition/deleteSeries/$wal0/kkvar"tsdb/engine/wal/wal.go(Óπ0∑ø@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/deleteSeries/$wal0/k⁄
"* Partition/deleteSeries/$wal1/errerrvar"tsdb/engine/wal/wal.go(©æ0¬æ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/deleteSeries/$wal1/err¢
*Partition/deleteSeries/ccvar"tsdb/engine/wal/wal.go(úΩ0ﬂΩ@Rº{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/deleteSeries/c√
*Partition/deleteSeries/keyskeysvar"tsdb/engine/wal/wal.go(è∫0ú∫@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/deleteSeries/keysò
*Partition/deleteSeries/ppvar"tsdb/engine/wal/wal.go(Ùπ0Ä∫@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/deleteSeries/pÙ
&*$Partition/deleteSeries/seriesToFlushseriesToFlushvar"tsdb/engine/wal/wal.go(∑ª0·ª@RÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/deleteSeries/seriesToFlushπ
*Partition/deleteSeries/sizesizevar"tsdb/engine/wal/wal.go(¨ª0µª@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/deleteSeries/sizeÑ
*Partition/fileIDFromNamefileIDFromNamefunc"tsdb/engine/wal/wal.go(ò…0⁄ÀR≈{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(name string) (uint32, error)",
        "UnderlyingTypeString": "func(name string) (uint32, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZK

text/plain=fileIDFromName will return the segment ID from the file name
ä./Partition/fileIDFromName“
*Partition/fileIDFromName/errerrvar"tsdb/engine/wal/wal.go(Ó 0úÀ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/fileIDFromName/errΩ
*Partition/fileIDFromName/ididvar"tsdb/engine/wal/wal.go(Ó 0úÀ@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/fileIDFromName/id√
*Partition/fileIDFromName/namenamevar"tsdb/engine/wal/wal.go(ª…0∆…@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/fileIDFromName/nameú
*Partition/fileIDFromName/ppvar"tsdb/engine/wal/wal.go(û…0™…@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/fileIDFromName/p 
 *Partition/fileIDFromName/partspartsvar"tsdb/engine/wal/wal.go(€…0ã @R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/fileIDFromName/partsé
*Partition/fileNameForSegmentfileNameForSegmentfunc"tsdb/engine/wal/wal.go(Ï≈0¸∆RØ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(id uint32) string",
        "UnderlyingTypeString": "func(id uint32) string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z_

text/plainQfileNameForSegment will return the full path and filename for a given segment ID
ä./Partition/fileNameForSegment≈
!*Partition/fileNameForSegment/ididvar"tsdb/engine/wal/wal.go(ì∆0ú∆@R–{
        "PkgName": "wal",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/fileNameForSegment/id§
 *Partition/fileNameForSegment/ppvar"tsdb/engine/wal/wal.go(Ú≈0˛≈@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/fileNameForSegment/pª
*Partition/flushAndCompactflushAndCompactfunc"tsdb/engine/wal/wal.go(ıÎ0ÚˆRì{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) error",
        "UnderlyingTypeString": "func(flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z∞

text/plain°flushAndCompact will flush any series that are over their threshold and then read in all old segment files and
write the data that was not flushed to a new file
ä./Partition/flushAndCompact‡
-*+Partition/flushAndCompact/$wal1/$wal0/ftypeftypevar"tsdb/engine/wal/wal.go(ÁÓ0ˆÓ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Partition/flushAndCompact/$wal1/$wal0/ftype‡
%*#Partition/flushAndCompact/$wal2/errerrvar"tsdb/engine/wal/wal.go(ŒÒ0ÇÚ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/flushAndCompact/$wal2/err®
*Partition/flushAndCompact/ccvar"tsdb/engine/wal/wal.go(≥Ï0ÌÏ@Rº{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/flushAndCompact/c‘
*Partition/flushAndCompact/errerrvar"tsdb/engine/wal/wal.go(≥Ï0ÌÏ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/flushAndCompact/errı
!*Partition/flushAndCompact/flushflushvar"tsdb/engine/wal/wal.go(ôÏ0®Ï@R˝{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/flushAndCompact/flushû
*Partition/flushAndCompact/ppvar"tsdb/engine/wal/wal.go(˚Î0áÏ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/flushAndCompact/pÇ
%*#Partition/flushAndCompact/startTime	startTimevar"tsdb/engine/wal/wal.go(≥Ó0 Ó@R˛{
        "PkgName": "wal",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/flushAndCompact/startTime≈
*Partition/flushCache
flushCachefield"tsdb/engine/wal/wal.go(≠¢0“¢R¨{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZØ

text/plain†flushCache is a temporary placeholder to keep data while its being flushed
and compacted. It's for cursors to combine the cache and this if a flush is occuring
ä./Partition/flushCache§
*Partition/flushColdIntervalflushColdIntervalfield"tsdb/engine/wal/wal.go(Ù£0ì§Rò{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zç

text/plainflushColdInterval and lastWriteTime are used to determin if a partition should
be flushed because it has been idle for writes.
ä./Partition/flushColdIntervalﬂ
*Partition/ididfield"tsdb/engine/wal/wal.go(Öù0ùùRê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "uint8",
        "UnderlyingTypeString": "uint8",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/idˇ
*Partition/idFromFileNameidFromFileNamefunc"tsdb/engine/wal/wal.go(‹¥0á∑R≈{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(name string) (uint32, error)",
        "UnderlyingTypeString": "func(name string) (uint32, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZF

text/plain8idFromFileName parses the segment file ID from its name
ä./Partition/idFromFileName“
*Partition/idFromFileName/errerrvar"tsdb/engine/wal/wal.go(æ∂0Ï∂@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/idFromFileName/errΩ
*Partition/idFromFileName/ididvar"tsdb/engine/wal/wal.go(æ∂0Ï∂@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/idFromFileName/id√
*Partition/idFromFileName/namenamevar"tsdb/engine/wal/wal.go(ˇ¥0äµ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/idFromFileName/nameú
*Partition/idFromFileName/ppvar"tsdb/engine/wal/wal.go(‚¥0Ó¥@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/idFromFileName/p 
 *Partition/idFromFileName/partspartsvar"tsdb/engine/wal/wal.go(üµ0œµ@R‘{
        "PkgName": "wal",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./Partition/idFromFileName/partsÌ
*Partition/indexindexfield"tsdb/engine/wal/wal.go(éü0©üRï{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.IndexWriter",
        "UnderlyingTypeString": "interface{WriteIndex(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/index˘
*Partition/lastFileID
lastFileIDfield"tsdb/engine/wal/wal.go(≠û0∆ûRí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/lastFileID∞
*Partition/lastWriteTimelastWriteTimefield"tsdb/engine/wal/wal.go(ï§0∞§R¿{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/lastWriteTime∫
*Partition/loglogfield"tsdb/engine/wal/wal.go(≥§0ª§RË{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/logÉ
*Partition/maxSegmentSizemaxSegmentSizefield"tsdb/engine/wal/wal.go(»û0‡ûRê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/maxSegmentSizeŒ
*Partition/memorySize
memorySizefield"tsdb/engine/wal/wal.go(ä†0õ†Rí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZS

text/plainEmemorySize is the rough size in memory of all the cached series data
ä./Partition/memorySizeæ
*Partition/mumufield"tsdb/engine/wal/wal.go(∫ù0ŸùRÔ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/muê
*Partition/newSegmentFilenewSegmentFilefunc"tsdb/engine/wal/wal.go(à¬0ñ≈Rõ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZÄ

text/plainrnewSegmentFile will close the current segment file and open a new one, updating bookkeeping info on the partition
ä./Partition/newSegmentFileˆ
0*.Partition/newSegmentFile/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(ı¬0ò√@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./Partition/newSegmentFile/$wal0/$wal0/$wal0/err“
*Partition/newSegmentFile/errerrvar"tsdb/engine/wal/wal.go(Ù√0±ƒ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/newSegmentFile/err¡
*Partition/newSegmentFile/ffffvar"tsdb/engine/wal/wal.go(Ù√0±ƒ@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/newSegmentFile/ffœ
#*!Partition/newSegmentFile/fileNamefileNamevar"tsdb/engine/wal/wal.go(æ√0Ú√@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Partition/newSegmentFile/fileNameú
*Partition/newSegmentFile/ppvar"tsdb/engine/wal/wal.go(é¬0ö¬@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/newSegmentFile/pﬂ
*Partition/ososfield"tsdb/engine/wal/wal.go(‹§0ﬂ¶RÊ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "struct{OpenCompactionFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); OpenSegmentFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); Rename func(oldpath string, newpath string) error}",
        "UnderlyingTypeString": "struct{OpenCompactionFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); OpenSegmentFile func(name string, flag int, perm os.FileMode) (file *os.File, err error); Rename func(oldpath string, newpath string) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z(

text/plainUsed for mocking OS calls
ä./Partition/osë
!*Partition/os/OpenCompactionFileOpenCompactionFilefield"tsdb/engine/wal/wal.go(Í§0≈•8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(name string, flag int, perm os.FileMode) (file *os.File, err error)",
        "UnderlyingTypeString": "func(name string, flag int, perm os.FileMode) (file *os.File, err error)",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/os/OpenCompactionFileà
*Partition/os/OpenSegmentFileOpenSegmentFilefield"tsdb/engine/wal/wal.go(»•0£¶8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(name string, flag int, perm os.FileMode) (file *os.File, err error)",
        "UnderlyingTypeString": "func(name string, flag int, perm os.FileMode) (file *os.File, err error)",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/os/OpenSegmentFile±
*Partition/os/RenameRenamefield"tsdb/engine/wal/wal.go(¶¶0‹¶8RŒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(oldpath string, newpath string) error",
        "UnderlyingTypeString": "func(oldpath string, newpath string) error",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/os/RenameÁ
*Partition/pathpathfield"tsdb/engine/wal/wal.go(üù0∏ùRí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/path‰
 *Partition/prepareSeriesToFlushprepareSeriesToFlushfunc"tsdb/engine/wal/wal.go(∏’0ƒÂRΩ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(readySeriesSize int, flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) (*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo, error)",
        "UnderlyingTypeString": "func(readySeriesSize int, flush github.com/influxdb/influxdb/tsdb/engine/wal.flushType) (*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z†

text/plainëprepareSeriesToFlush will empty the cache of series that are ready based on their size
and return information for the compaction process to use.
ä ./Partition/prepareSeriesToFlushŒ
4*2Partition/prepareSeriesToFlush/$wal1/$wal0/$wal0/ccvar"tsdb/engine/wal/wal.go(∏’0ƒÂ@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Partition/prepareSeriesToFlush/$wal1/$wal0/$wal0/cŒ
4*2Partition/prepareSeriesToFlush/$wal1/$wal0/$wal1/ccvar"tsdb/engine/wal/wal.go(∏’0ƒÂ@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Partition/prepareSeriesToFlush/$wal1/$wal0/$wal1/cÍ
4*2Partition/prepareSeriesToFlush/$wal1/$wal0/$wal1/kkvar"tsdb/engine/wal/wal.go(∏’0ƒÂ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./Partition/prepareSeriesToFlush/$wal1/$wal0/$wal1/k
:*8Partition/prepareSeriesToFlush/$wal1/$wal1/$wal0/$wal0/nnvar"tsdb/engine/wal/wal.go(õﬁ0√ﬁ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä:./Partition/prepareSeriesToFlush/$wal1/$wal1/$wal0/$wal0/nê
:*8Partition/prepareSeriesToFlush/$wal1/$wal1/$wal0/$wal0/ssvar"tsdb/engine/wal/wal.go(õﬁ0√ﬁ@RÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä:./Partition/prepareSeriesToFlush/$wal1/$wal1/$wal0/$wal0/sö
B*@Partition/prepareSeriesToFlush/$wal2/$wal0/$wal0/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(å‚0Ø‚@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äB./Partition/prepareSeriesToFlush/$wal2/$wal0/$wal0/$wal0/$wal0/errÇ
6*4Partition/prepareSeriesToFlush/$wal2/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(Å‰0ö‰@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä6./Partition/prepareSeriesToFlush/$wal2/$wal1/$wal0/err≤
"* Partition/prepareSeriesToFlush/ccvar"tsdb/engine/wal/wal.go(¡‡0Ñ·@Rº{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/prepareSeriesToFlush/cˇ
&*$Partition/prepareSeriesToFlush/flushflushvar"tsdb/engine/wal/wal.go(ˆ’0Ö÷@R˝{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/prepareSeriesToFlush/flush®
"* Partition/prepareSeriesToFlush/ppvar"tsdb/engine/wal/wal.go(æ’0 ’@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/prepareSeriesToFlush/pÍ
0*.Partition/prepareSeriesToFlush/readySeriesSizereadySeriesSizevar"tsdb/engine/wal/wal.go(·’0Ù’@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./Partition/prepareSeriesToFlush/readySeriesSize¬
.*,Partition/prepareSeriesToFlush/seriesToFlushseriesToFlushvar"tsdb/engine/wal/wal.go(Ω⁄0ﬁ⁄@RÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zª

text/plain¨we've been ordered to flush and compact. iterate until we have at least
some series to flush by cutting the ready size in half each iteration
if we didn't come up with any
ä../Partition/prepareSeriesToFlush/seriesToFlush…
%*#Partition/prepareSeriesToFlush/sizesizevar"tsdb/engine/wal/wal.go(‰⁄0Ï⁄@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/prepareSeriesToFlush/sizeÙ
*Partition/readFilereadFilefunc"tsdb/engine/wal/wal.go(≠†0Á¶Rª{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(path string) (entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry, err error)",
        "UnderlyingTypeString": "func(path string) (entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZW

text/plainIreadFile will read a segment file and marshal its entries into the cache
ä./Partition/readFile§
"* Partition/readFile/$wal2/$wal0/aavar"tsdb/engine/wal/wal.go(Œ¢0ˆ¢@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/readFile/$wal2/$wal0/aﬁ
$*"Partition/readFile/$wal2/$wal0/errerrvar"tsdb/engine/wal/wal.go(Œ¢0ˆ¢@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./Partition/readFile/$wal2/$wal0/errœ
%*#Partition/readFile/$wal2/$wal0/namenamevar"tsdb/engine/wal/wal.go(Œ¢0ˆ¢@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/readFile/$wal2/$wal0/nameÍ
**(Partition/readFile/$wal3/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(•¶0µ¶@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/readFile/$wal3/$wal1/$wal0/errû
*Partition/readFile/entriesentriesvar"tsdb/engine/wal/wal.go(ÿ†0Ë†@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/entries∆
*Partition/readFile/errerrvar"tsdb/engine/wal/wal.go(Í†0Û†@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/err≤
*Partition/readFile/ffvar"tsdb/engine/wal/wal.go(¬°0˙°@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/f±
*Partition/readFile/ididvar"tsdb/engine/wal/wal.go(¯†0ô°@R–{
        "PkgName": "wal",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/idê
*Partition/readFile/ppvar"tsdb/engine/wal/wal.go(≥†0ø†@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/p∑
*Partition/readFile/pathpathvar"tsdb/engine/wal/wal.go( †0’†@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/pathè
*Partition/readFile/sfsfvar"tsdb/engine/wal/wal.go(£¢0ƒ¢@RÆ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readFile/sfÇ
*Partition/readySeriesSizereadySeriesSizefield"tsdb/engine/wal/wal.go(´ü0æüRå{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/readySeriesSize®
!*Partition/recoverCompactionFilerecoverCompactionFilefunc"tsdb/engine/wal/wal.go(Òé0ﬂüRõ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZÉ

text/plainurecoverCompactionFile iterates over all compaction files in a directory and
cleans them and removes undeleted files.
ä!./Partition/recoverCompactionFile‹
;*9Partition/recoverCompactionFile/$wal1/$wal0/$wal1/entriesentriesvar"tsdb/engine/wal/wal.go(¢î0Õî@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä;./Partition/recoverCompactionFile/$wal1/$wal0/$wal1/entriesÑ
7*5Partition/recoverCompactionFile/$wal1/$wal0/$wal1/errerrvar"tsdb/engine/wal/wal.go(¢î0Õî@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä7./Partition/recoverCompactionFile/$wal1/$wal0/$wal1/errÏ
5*3Partition/recoverCompactionFile/$wal1/$wal0/$wal1/ssvar"tsdb/engine/wal/wal.go(¢î0Õî@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./Partition/recoverCompactionFile/$wal1/$wal0/$wal1/sÑ
7*5Partition/recoverCompactionFile/$wal1/$wal0/$wal2/errerrvar"tsdb/engine/wal/wal.go(“ñ0Ëñ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä7./Partition/recoverCompactionFile/$wal1/$wal0/$wal2/erræ
/*-Partition/recoverCompactionFile/$wal1/$wal0/aavar"tsdb/engine/wal/wal.go(óí0øí@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä/./Partition/recoverCompactionFile/$wal1/$wal0/a¯
1*/Partition/recoverCompactionFile/$wal1/$wal0/errerrvar"tsdb/engine/wal/wal.go(óí0øí@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä1./Partition/recoverCompactionFile/$wal1/$wal0/errÈ
2*0Partition/recoverCompactionFile/$wal1/$wal0/namenamevar"tsdb/engine/wal/wal.go(óí0øí@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./Partition/recoverCompactionFile/$wal1/$wal0/nameÑ
7*5Partition/recoverCompactionFile/$wal2/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(≠ö0√ö@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä7./Partition/recoverCompactionFile/$wal2/$wal0/$wal0/errÏ
+*)Partition/recoverCompactionFile/$wal3/errerrvar"tsdb/engine/wal/wal.go(úù0∂ù@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./Partition/recoverCompactionFile/$wal3/errÏ
+*)Partition/recoverCompactionFile/$wal4/errerrvar"tsdb/engine/wal/wal.go(Áû0àü@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./Partition/recoverCompactionFile/$wal4/err‡
%*#Partition/recoverCompactionFile/errerrvar"tsdb/engine/wal/wal.go(˝è0µê@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/recoverCompactionFile/errÃ
#*!Partition/recoverCompactionFile/ffvar"tsdb/engine/wal/wal.go(˝è0µê@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Partition/recoverCompactionFile/f÷
)*'Partition/recoverCompactionFile/hasDatahasDatavar"tsdb/engine/wal/wal.go(‰ë0ë@RÃ{
        "PkgName": "wal",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Partition/recoverCompactionFile/hasData⁄
)*'Partition/recoverCompactionFile/newpathnewpathvar"tsdb/engine/wal/wal.go(ıú0óù@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Partition/recoverCompactionFile/newpath™
#*!Partition/recoverCompactionFile/ppvar"tsdb/engine/wal/wal.go(˜é0Éè@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./Partition/recoverCompactionFile/p—
&*$Partition/recoverCompactionFile/pathpathvar"tsdb/engine/wal/wal.go(¶è0ƒè@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/recoverCompactionFile/path©
$*"Partition/recoverCompactionFile/sfsfvar"tsdb/engine/wal/wal.go(Ωë0ﬁë@RÆ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./Partition/recoverCompactionFile/sfÇ
*Partition/segmentFileNamessegmentFileNamesfunc"tsdb/engine/wal/wal.go(”∑0˘∏R≥{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZU

text/plainGsegmentFileNames returns all the segment files names for the partition
ä./Partition/segmentFileNames†
*Partition/segmentFileNames/ppvar"tsdb/engine/wal/wal.go(Ÿ∑0Â∑@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/segmentFileNames/p«
!*Partition/segmentFileNames/pathpathvar"tsdb/engine/wal/wal.go(è∏0€∏@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/segmentFileNames/pathÌ
*Partition/seriesToFlushseriesToFlushfunc"tsdb/engine/wal/wal.go(ÕÊ0ÃÍRÎ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(readySeriesSize int) (map[string][][]byte, int)",
        "UnderlyingTypeString": "func(readySeriesSize int) (map[string][][]byte, int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zê

text/plainÅseriesToFlush will clear the cache of series over the give threshold and return
them in a new map along with their combined size
ä./Partition/seriesToFlush®
!*Partition/seriesToFlush/$wal0/ccvar"tsdb/engine/wal/wal.go(ÕÊ0ÃÍ@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/seriesToFlush/$wal0/cƒ
!*Partition/seriesToFlush/$wal0/kkvar"tsdb/engine/wal/wal.go(ÕÊ0ÃÍ@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./Partition/seriesToFlush/$wal0/kö
*Partition/seriesToFlush/ppvar"tsdb/engine/wal/wal.go(”Ê0ﬂÊ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/seriesToFlush/p‹
)*'Partition/seriesToFlush/readySeriesSizereadySeriesSizevar"tsdb/engine/wal/wal.go(ÔÊ0ÇÁ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Partition/seriesToFlush/readySeriesSizeˆ
'*%Partition/seriesToFlush/seriesToFlushseriesToFlushvar"tsdb/engine/wal/wal.go(¢Á0ÃÁ@RÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./Partition/seriesToFlush/seriesToFlushª
*Partition/seriesToFlush/sizesizevar"tsdb/engine/wal/wal.go(ŒÁ0◊Á@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/seriesToFlush/size€
*Partition/shouldFlushshouldFlushfunc"tsdb/engine/wal/wal.go(ÔŒ0ü‘RŸ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(maxSeriesSize int, compactionThreshold float64) github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "func(maxSeriesSize int, compactionThreshold float64) github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zñ

text/plaináshouldFlush returns a flushType that indicates if a partition should be flushed and why. The criteria are:
maxSeriesSize - flush if any series in the partition has exceeded this size threshold
readySeriesSize - a series is ready to flush once it has this much data in it
compactionThreshold - a partition is ready to flush if this percentage of series has hit the readySeriesSize or greater
ä./Partition/shouldFlush§
*Partition/shouldFlush/$wal3/ccvar"tsdb/engine/wal/wal.go(ÔŒ0ü‘@R¥{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/shouldFlush/$wal3/cÏ
+*)Partition/shouldFlush/compactionThresholdcompactionThresholdvar"tsdb/engine/wal/wal.go(¢œ0Ωœ@R“{
        "PkgName": "wal",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./Partition/shouldFlush/compactionThreshold…
"* Partition/shouldFlush/countReady
countReadyvar"tsdb/engine/wal/wal.go(©—0∏—@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/shouldFlush/countReady“
%*#Partition/shouldFlush/maxSeriesSizemaxSeriesSizevar"tsdb/engine/wal/wal.go(èœ0†œ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/shouldFlush/maxSeriesSizeñ
*Partition/shouldFlush/ppvar"tsdb/engine/wal/wal.go(ıŒ0Åœ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/shouldFlush/pﬁ
*Partition/sizeThresholdsizeThresholdfield"tsdb/engine/wal/wal.go(Ó†0Ç°Rí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZZ

text/plainLsizeThreshold is the memory size after which writes start getting throttled
ä./Partition/sizeThresholdˆ
*Partition/snappybuf	snappybuffield"tsdb/engine/wal/wal.go(à®0ò®Rí{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "Partition",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./Partition/snappybufà
 *Partition/writeCompactionEntrywriteCompactionEntryfunc"tsdb/engine/wal/wal.go(çÜ0ÏâRœ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(f *os.File, filename string, entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry) error",
        "UnderlyingTypeString": "func(f *os.File, filename string, entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z≤

text/plain£writeCompactionEntry will write a marker for the beginning of the file we're compacting, a compressed block
for all entries, then a marker for the end of the file
ä ./Partition/writeCompactionEntryÍ
**(Partition/writeCompactionEntry/$wal0/errerrvar"tsdb/engine/wal/wal.go(ÒÜ0ûá@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/writeCompactionEntry/$wal0/err¨
(*&Partition/writeCompactionEntry/$wal1/eevar"tsdb/engine/wal/wal.go(çÜ0Ïâ@R™{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Partition/writeCompactionEntry/$wal1/eÍ
**(Partition/writeCompactionEntry/$wal2/errerrvar"tsdb/engine/wal/wal.go(Ÿà0Çâ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/writeCompactionEntry/$wal2/errÍ
**(Partition/writeCompactionEntry/$wal3/errerrvar"tsdb/engine/wal/wal.go(¶â0∫â@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/writeCompactionEntry/$wal3/err∆
"* Partition/writeCompactionEntry/bbvar"tsdb/engine/wal/wal.go(Æà0‘à@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/writeCompactionEntry/b´
&*$Partition/writeCompactionEntry/blockblockvar"tsdb/engine/wal/wal.go(√á0’á@R©{
        "PkgName": "wal",
        "TypeString": "bytes.Buffer",
        "UnderlyingTypeString": "struct{buf []byte; off int; runeBytes [4]byte; bootstrap [64]byte; lastRead bytes.readOp}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./Partition/writeCompactionEntry/block∂
(*&Partition/writeCompactionEntry/entriesentriesvar"tsdb/engine/wal/wal.go(”Ü0„Ü@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./Partition/writeCompactionEntry/entries 
"* Partition/writeCompactionEntry/ffvar"tsdb/engine/wal/wal.go(∂Ü0¿Ü@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/writeCompactionEntry/f€
)*'Partition/writeCompactionEntry/filenamefilenamevar"tsdb/engine/wal/wal.go(¬Ü0—Ü@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./Partition/writeCompactionEntry/filename®
"* Partition/writeCompactionEntry/ppvar"tsdb/engine/wal/wal.go(ìÜ0üÜ@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./Partition/writeCompactionEntry/p⁄
#*!Partition/writeCompactionFileNamewriteCompactionFileNamefunc"tsdb/engine/wal/wal.go(›ä0ÙçR—{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*Partition",
        "TypeString": "func(f *os.File, filename string) error",
        "UnderlyingTypeString": "func(f *os.File, filename string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zz

text/plainlwriteCompactionFileName will write a compaction log length entry and the name of the file that is compacted
ä#./Partition/writeCompactionFileName
-*+Partition/writeCompactionFileName/$wal0/errerrvar"tsdb/engine/wal/wal.go(Áå0Äç@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Partition/writeCompactionFileName/$wal0/err
-*+Partition/writeCompactionFileName/$wal1/errerrvar"tsdb/engine/wal/wal.go(§ç0«ç@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./Partition/writeCompactionFileName/$wal1/err–
%*#Partition/writeCompactionFileName/ffvar"tsdb/engine/wal/wal.go(âã0ìã@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/writeCompactionFileName/f·
,**Partition/writeCompactionFileName/filenamefilenamevar"tsdb/engine/wal/wal.go(ïã0§ã@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./Partition/writeCompactionFileName/filename€
**(Partition/writeCompactionFileName/lengthlengthvar"tsdb/engine/wal/wal.go(Øã0ﬁã@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./Partition/writeCompactionFileName/lengthÆ
%*#Partition/writeCompactionFileName/ppvar"tsdb/engine/wal/wal.go(„ä0Ôä@R≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./Partition/writeCompactionFileName/pµ
*PartitionCountPartitionCountconst"tsdb/engine/wal/wal.go(ı
0á8Rê{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZD

text/plain6PartitionCount is the number of partitions in the WAL
ä./PartitionCount≈
)*'TestWAL_CompactAfterPercentageThreshold'TestWAL_CompactAfterPercentageThresholdfunc"tsdb/engine/wal/wal_test.go(¨40üN8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zv

text/plainhEnsure the wal flushes and compacts after a partition has enough series in
it with enough data to flush
ä)./TestWAL_CompactAfterPercentageThresholdß
L*JTestWAL_CompactAfterPercentageThreshold/$wal_test0/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(Û70≠8@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äL./TestWAL_CompactAfterPercentageThreshold/$wal_test0/measurementFieldsToSave´
@*>TestWAL_CompactAfterPercentageThreshold/$wal_test0/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(“70Ò7@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä@./TestWAL_CompactAfterPercentageThreshold/$wal_test0/pointsByKey
C*ATestWAL_CompactAfterPercentageThreshold/$wal_test0/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(Ø80“8@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äC./TestWAL_CompactAfterPercentageThreshold/$wal_test0/seriesToCreateã
8*6TestWAL_CompactAfterPercentageThreshold/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(ô90™9@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./TestWAL_CompactAfterPercentageThreshold/$wal_test1/errô
L*JTestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/$wal_test0/jjvar"tsdb/engine/wal/wal_test.go(Â;0Î;@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äL./TestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/$wal_test0/j∑
N*LTestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/$wal_test2/errerrvar"tsdb/engine/wal/wal_test.go(‚A0§B@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äN./TestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/$wal_test2/errù
C*ATestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/bufbufvar"tsdb/engine/wal/wal_test.go(≈;0ﬁ;@HRﬁ{
        "PkgName": "wal",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äC./TestWAL_CompactAfterPercentageThreshold/$wal_test2/$wal_test0/bufÌ
6*4TestWAL_CompactAfterPercentageThreshold/$wal_test2/iivar"tsdb/engine/wal/wal_test.go(´;0±;@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä6./TestWAL_CompactAfterPercentageThreshold/$wal_test2/iã
8*6TestWAL_CompactAfterPercentageThreshold/$wal_test5/errerrvar"tsdb/engine/wal/wal_test.go(ºF0ÙF@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä8./TestWAL_CompactAfterPercentageThreshold/$wal_test5/err›
+*)TestWAL_CompactAfterPercentageThreshold/bbvar"tsdb/engine/wal/wal_test.go(ã;0•;@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_CompactAfterPercentageThreshold/b”
+*)TestWAL_CompactAfterPercentageThreshold/ccvar"tsdb/engine/wal/wal_test.go(´C0ÿC@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_CompactAfterPercentageThreshold/c∑
/*-TestWAL_CompactAfterPercentageThreshold/codeccodecvar"tsdb/engine/wal/wal_test.go(Ô90ˆ:@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä/./TestWAL_CompactAfterPercentageThreshold/codec›
+*)TestWAL_CompactAfterPercentageThreshold/kkvar"tsdb/engine/wal/wal_test.go(⁄C0ÍC@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_CompactAfterPercentageThreshold/kπ
-*+TestWAL_CompactAfterPercentageThreshold/loglogvar"tsdb/engine/wal/wal_test.go(Í40˛4@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./TestWAL_CompactAfterPercentageThreshold/logÔ
3*1TestWAL_CompactAfterPercentageThreshold/numSeries	numSeriesvar"tsdb/engine/wal/wal_test.go(˘:0â;@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./TestWAL_CompactAfterPercentageThreshold/numSeriesä
0*.TestWAL_CompactAfterPercentageThreshold/pointspointsvar"tsdb/engine/wal/wal_test.go(Ç70™7@HRÓ{
        "PkgName": "wal",
        "TypeString": "[]map[string][][]byte",
        "UnderlyingTypeString": "[]map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./TestWAL_CompactAfterPercentageThreshold/pointsÂ
+*)TestWAL_CompactAfterPercentageThreshold/ttvar"tsdb/engine/wal/wal_test.go(Ÿ40Â4@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_CompactAfterPercentageThreshold/t›
+*)TestWAL_CompactAfterPercentageThreshold/vvvar"tsdb/engine/wal/wal_test.go(⁄C0ÍC@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_CompactAfterPercentageThreshold/v¨
&*$TestWAL_CompactAfterTimeWithoutWrite$TestWAL_CompactAfterTimeWithoutWritefunc"tsdb/engine/wal/wal_test.go(¸N0Ô^8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zf

text/plainXEnsure the wal forces a full flush after not having a write in a given interval of time
ä&./TestWAL_CompactAfterTimeWithoutWrite°
I*GTestWAL_CompactAfterTimeWithoutWrite/$wal_test0/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(˚Q0µR@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äI./TestWAL_CompactAfterTimeWithoutWrite/$wal_test0/measurementFieldsToSave•
=*;TestWAL_CompactAfterTimeWithoutWrite/$wal_test0/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(⁄Q0˘Q@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä=./TestWAL_CompactAfterTimeWithoutWrite/$wal_test0/pointsByKeyÍ
@*>TestWAL_CompactAfterTimeWithoutWrite/$wal_test0/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(∑R0⁄R@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä@./TestWAL_CompactAfterTimeWithoutWrite/$wal_test0/seriesToCreateÖ
5*3TestWAL_CompactAfterTimeWithoutWrite/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(°S0≤S@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./TestWAL_CompactAfterTimeWithoutWrite/$wal_test1/errì
I*GTestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/$wal_test0/jjvar"tsdb/engine/wal/wal_test.go(ÏU0ÚU@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äI./TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/$wal_test0/j±
K*ITestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(ëW0”W@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äK./TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/$wal_test1/erró
@*>TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/bufbufvar"tsdb/engine/wal/wal_test.go(ÃU0ÂU@HRﬁ{
        "PkgName": "wal",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä@./TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/$wal_test0/bufÁ
3*1TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/iivar"tsdb/engine/wal/wal_test.go(≥U0πU@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./TestWAL_CompactAfterTimeWithoutWrite/$wal_test2/iö
3*1TestWAL_CompactAfterTimeWithoutWrite/$wal_test4/ffvar"tsdb/engine/wal/wal_test.go(⁄Z0∏[@HR˝{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./TestWAL_CompactAfterTimeWithoutWrite/$wal_test4/f◊
(*&TestWAL_CompactAfterTimeWithoutWrite/bbvar"tsdb/engine/wal/wal_test.go(ìU0≠U@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_CompactAfterTimeWithoutWrite/bÕ
(*&TestWAL_CompactAfterTimeWithoutWrite/ccvar"tsdb/engine/wal/wal_test.go(⁄X0áY@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_CompactAfterTimeWithoutWrite/c±
,**TestWAL_CompactAfterTimeWithoutWrite/codeccodecvar"tsdb/engine/wal/wal_test.go(˜S0˛T@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_CompactAfterTimeWithoutWrite/codec◊
(*&TestWAL_CompactAfterTimeWithoutWrite/kkvar"tsdb/engine/wal/wal_test.go(âY0ôY@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_CompactAfterTimeWithoutWrite/k≥
**(TestWAL_CompactAfterTimeWithoutWrite/loglogvar"tsdb/engine/wal/wal_test.go(∑O0ÀO@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./TestWAL_CompactAfterTimeWithoutWrite/logÈ
0*.TestWAL_CompactAfterTimeWithoutWrite/numSeries	numSeriesvar"tsdb/engine/wal/wal_test.go(ÅU0ëU@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./TestWAL_CompactAfterTimeWithoutWrite/numSeriesÑ
-*+TestWAL_CompactAfterTimeWithoutWrite/pointspointsvar"tsdb/engine/wal/wal_test.go(äQ0≤Q@HRÓ{
        "PkgName": "wal",
        "TypeString": "[]map[string][][]byte",
        "UnderlyingTypeString": "[]map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./TestWAL_CompactAfterTimeWithoutWrite/pointsﬂ
(*&TestWAL_CompactAfterTimeWithoutWrite/ttvar"tsdb/engine/wal/wal_test.go(¶O0≤O@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_CompactAfterTimeWithoutWrite/tÂ
*TestWAL_Compact_RecoveryTestWAL_Compact_Recoveryfunc"tsdb/engine/wal/wal_test.go(ıî0ã®8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZA

text/plain3Ensure a partial compaction can be recovered from.
ä./TestWAL_Compact_Recoveryã
=*;TestWAL_Compact_Recovery/$wal_test0/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(÷ó0êò@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä=./TestWAL_Compact_Recovery/$wal_test0/measurementFieldsToSaveè
1*/TestWAL_Compact_Recovery/$wal_test0/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(µó0‘ó@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä1./TestWAL_Compact_Recovery/$wal_test0/pointsByKey‘
4*2TestWAL_Compact_Recovery/$wal_test0/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(íò0µò@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_Compact_Recovery/$wal_test0/seriesToCreateÔ
)*'TestWAL_Compact_Recovery/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(¸ò0çô@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_Compact_Recovery/$wal_test1/err˝
=*;TestWAL_Compact_Recovery/$wal_test2/$wal_test0/$wal_test0/jjvar"tsdb/engine/wal/wal_test.go(Áõ0Ìõ@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä=./TestWAL_Compact_Recovery/$wal_test2/$wal_test0/$wal_test0/jõ
?*=TestWAL_Compact_Recovery/$wal_test2/$wal_test0/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(Ùù0∂û@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä?./TestWAL_Compact_Recovery/$wal_test2/$wal_test0/$wal_test1/errÅ
4*2TestWAL_Compact_Recovery/$wal_test2/$wal_test0/bufbufvar"tsdb/engine/wal/wal_test.go(«õ0‡õ@HRﬁ{
        "PkgName": "wal",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_Compact_Recovery/$wal_test2/$wal_test0/buf—
'*%TestWAL_Compact_Recovery/$wal_test2/iivar"tsdb/engine/wal/wal_test.go(≠õ0≥õ@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_Compact_Recovery/$wal_test2/iÔ
)*'TestWAL_Compact_Recovery/$wal_test3/errerrvar"tsdb/engine/wal/wal_test.go(˝ü0Ü†@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_Compact_Recovery/$wal_test3/err‰
**(TestWAL_Compact_Recovery/$wal_test3/filefilevar"tsdb/engine/wal/wal_test.go(Óü0˚ü@HR‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./TestWAL_Compact_Recovery/$wal_test3/file⁄
**(TestWAL_Compact_Recovery/$wal_test3/flagflagvar"tsdb/engine/wal/wal_test.go(—ü0Ÿü@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./TestWAL_Compact_Recovery/$wal_test3/flag‡
**(TestWAL_Compact_Recovery/$wal_test3/namenamevar"tsdb/engine/wal/wal_test.go(ƒü0œü@HR–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./TestWAL_Compact_Recovery/$wal_test3/nameÂ
**(TestWAL_Compact_Recovery/$wal_test3/permpermvar"tsdb/engine/wal/wal_test.go(€ü0Îü@HR’{
        "PkgName": "wal",
        "TypeString": "os.FileMode",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä*./TestWAL_Compact_Recovery/$wal_test3/permÔ
)*'TestWAL_Compact_Recovery/$wal_test4/errerrvar"tsdb/engine/wal/wal_test.go(é°0∂°@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_Compact_Recovery/$wal_test4/errÖ
4*2TestWAL_Compact_Recovery/$wal_test5/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(§§0ö•@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_Compact_Recovery/$wal_test5/$wal_test1/errÖ
4*2TestWAL_Compact_Recovery/$wal_test5/$wal_test2/errerrvar"tsdb/engine/wal/wal_test.go(·•0Ù•@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_Compact_Recovery/$wal_test5/$wal_test2/errﬂ
3*1TestWAL_Compact_Recovery/$wal_test5/$wal_test2/fifivar"tsdb/engine/wal/wal_test.go(·•0Ù•@HRø{
        "PkgName": "wal",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./TestWAL_Compact_Recovery/$wal_test5/$wal_test2/fiÔ
)*'TestWAL_Compact_Recovery/$wal_test5/errerrvar"tsdb/engine/wal/wal_test.go(Ù¢0æ£@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_Compact_Recovery/$wal_test5/err€
'*%TestWAL_Compact_Recovery/$wal_test5/ffvar"tsdb/engine/wal/wal_test.go(Ù¢0æ£@HR‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_Compact_Recovery/$wal_test5/fÔ
)*'TestWAL_Compact_Recovery/$wal_test6/errerrvar"tsdb/engine/wal/wal_test.go(∫ß0Àß@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_Compact_Recovery/$wal_test6/err¡
*TestWAL_Compact_Recovery/bbvar"tsdb/engine/wal/wal_test.go(çõ0ßõ@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_Compact_Recovery/bõ
 *TestWAL_Compact_Recovery/codeccodecvar"tsdb/engine/wal/wal_test.go(Éö0äõ@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./TestWAL_Compact_Recovery/codecù
*TestWAL_Compact_Recovery/loglogvar"tsdb/engine/wal/wal_test.go(§ï0∏ï@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_Compact_Recovery/log£
*TestWAL_Compact_Recovery/ppvar"tsdb/engine/wal/wal_test.go(Íô0Äö@HR≤{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Partition",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_Compact_Recovery/pÓ
!*TestWAL_Compact_Recovery/pointspointsvar"tsdb/engine/wal/wal_test.go(Âñ0çó@HRÓ{
        "PkgName": "wal",
        "TypeString": "[]map[string][][]byte",
        "UnderlyingTypeString": "[]map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./TestWAL_Compact_Recovery/points…
*TestWAL_Compact_Recovery/ttvar"tsdb/engine/wal/wal_test.go(ìï0üï@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_Compact_Recovery/t†
*TestWAL_CorruptDataBlockTestWAL_CorruptDataBlockfunc"tsdb/engine/wal/wal_test.go(Ô$0º38HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlockÌ
)*'TestWAL_CorruptDataBlock/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(È%0˙%@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_CorruptDataBlock/$wal_test0/errÌ
)*'TestWAL_CorruptDataBlock/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(Á(0ù)@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_CorruptDataBlock/$wal_test1/errÀ
'*%TestWAL_CorruptDataBlock/$wal_test2/ccvar"tsdb/engine/wal/wal_test.go(¸)0ô*@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_CorruptDataBlock/$wal_test2/c’
'*%TestWAL_CorruptDataBlock/$wal_test2/vvvar"tsdb/engine/wal/wal_test.go(ú*0¨*@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_CorruptDataBlock/$wal_test2/vœ
'*%TestWAL_CorruptDataBlock/$wal_test3/iivar"tsdb/engine/wal/wal_test.go(‡-0Ê-@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_CorruptDataBlock/$wal_test3/iÌ
)*'TestWAL_CorruptDataBlock/$wal_test4/errerrvar"tsdb/engine/wal/wal_test.go(Ω/0Ô/@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_CorruptDataBlock/$wal_test4/errÀ
'*%TestWAL_CorruptDataBlock/$wal_test5/ccvar"tsdb/engine/wal/wal_test.go(Ã00È0@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_CorruptDataBlock/$wal_test5/c’
'*%TestWAL_CorruptDataBlock/$wal_test5/vvvar"tsdb/engine/wal/wal_test.go(Ï00¸0@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_CorruptDataBlock/$wal_test5/vô
 *TestWAL_CorruptDataBlock/codeccodecvar"tsdb/engine/wal/wal_test.go(ø&0∆'@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./TestWAL_CorruptDataBlock/codec√
*TestWAL_CorruptDataBlock/ffvar"tsdb/engine/wal/wal_test.go(˚,0§-@HR‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/fõ
*TestWAL_CorruptDataBlock/loglogvar"tsdb/engine/wal/wal_test.go(û%0≤%@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/log¯
*TestWAL_CorruptDataBlock/p1p1var"tsdb/engine/wal/wal_test.go(¸'0Æ(@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/p1¯
*TestWAL_CorruptDataBlock/p2p2var"tsdb/engine/wal/wal_test.go(∞(0‚(@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/p2¯
*TestWAL_CorruptDataBlock/p3p3var"tsdb/engine/wal/wal_test.go(Ü/0∏/@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/p3«
*TestWAL_CorruptDataBlock/ttvar"tsdb/engine/wal/wal_test.go(ç%0ô%@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataBlock/tŒ
!*TestWAL_CorruptDataBlock/verifyverifyvar"tsdb/engine/wal/wal_test.go(Á)0•,@HR–{
        "PkgName": "wal",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./TestWAL_CorruptDataBlock/verifyØ
*TestWAL_CorruptDataLengthSizeTestWAL_CorruptDataLengthSizefunc"tsdb/engine/wal/wal_test.go(é0Ì$8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_CorruptDataLengthSize˜
.*,TestWAL_CorruptDataLengthSize/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(ç0û@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../TestWAL_CorruptDataLengthSize/$wal_test0/err˜
.*,TestWAL_CorruptDataLengthSize/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(ã0¡@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../TestWAL_CorruptDataLengthSize/$wal_test1/err’
,**TestWAL_CorruptDataLengthSize/$wal_test2/ccvar"tsdb/engine/wal/wal_test.go(†0Ω@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_CorruptDataLengthSize/$wal_test2/cﬂ
,**TestWAL_CorruptDataLengthSize/$wal_test2/vvvar"tsdb/engine/wal/wal_test.go(¿0–@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_CorruptDataLengthSize/$wal_test2/v˜
.*,TestWAL_CorruptDataLengthSize/$wal_test3/errerrvar"tsdb/engine/wal/wal_test.go(¸ 0Æ!@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../TestWAL_CorruptDataLengthSize/$wal_test3/err’
,**TestWAL_CorruptDataLengthSize/$wal_test4/ccvar"tsdb/engine/wal/wal_test.go(ã"0®"@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_CorruptDataLengthSize/$wal_test4/cﬂ
,**TestWAL_CorruptDataLengthSize/$wal_test4/vvvar"tsdb/engine/wal/wal_test.go(´"0ª"@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_CorruptDataLengthSize/$wal_test4/v£
%*#TestWAL_CorruptDataLengthSize/codeccodecvar"tsdb/engine/wal/wal_test.go(„0Í@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_CorruptDataLengthSize/codecÕ
!*TestWAL_CorruptDataLengthSize/ffvar"tsdb/engine/wal/wal_test.go(û0«@HR‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./TestWAL_CorruptDataLengthSize/f•
#*!TestWAL_CorruptDataLengthSize/loglogvar"tsdb/engine/wal/wal_test.go(¬0÷@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_CorruptDataLengthSize/logÇ
"* TestWAL_CorruptDataLengthSize/p1p1var"tsdb/engine/wal/wal_test.go(†0“@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_CorruptDataLengthSize/p1Ç
"* TestWAL_CorruptDataLengthSize/p2p2var"tsdb/engine/wal/wal_test.go(‘0Ü@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_CorruptDataLengthSize/p2Ç
"* TestWAL_CorruptDataLengthSize/p3p3var"tsdb/engine/wal/wal_test.go(≈ 0˜ @HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_CorruptDataLengthSize/p3—
!*TestWAL_CorruptDataLengthSize/ttvar"tsdb/engine/wal/wal_test.go(±0Ω@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./TestWAL_CorruptDataLengthSize/tÿ
&*$TestWAL_CorruptDataLengthSize/verifyverifyvar"tsdb/engine/wal/wal_test.go(ã0…@HR–{
        "PkgName": "wal",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./TestWAL_CorruptDataLengthSize/verifyï
*TestWAL_DeleteSeriesTestWAL_DeleteSeriesfunc"tsdb/engine/wal/wal_test.go(ı{0Ωî8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeriesÂ
%*#TestWAL_DeleteSeries/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(Î|0¸|@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_DeleteSeries/$wal_test0/errÅ
9*7TestWAL_DeleteSeries/$wal_test1/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(∫0Ù@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä9./TestWAL_DeleteSeries/$wal_test1/measurementFieldsToSaveÖ
-*+TestWAL_DeleteSeries/$wal_test1/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(ô0∏@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./TestWAL_DeleteSeries/$wal_test1/pointsByKeyÀ
0*.TestWAL_DeleteSeries/$wal_test1/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(ˆ0ôÄ@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./TestWAL_DeleteSeries/$wal_test1/seriesToCreateÈ
&*$TestWAL_DeleteSeries/$wal_test10/errerrvar"tsdb/engine/wal/wal_test.go(…ë0⁄ë@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./TestWAL_DeleteSeries/$wal_test10/err—
$*"TestWAL_DeleteSeries/$wal_test11/kkvar"tsdb/engine/wal/wal_test.go(Ÿí0Èí@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_DeleteSeries/$wal_test11/k—
$*"TestWAL_DeleteSeries/$wal_test12/kkvar"tsdb/engine/wal/wal_test.go(Ôì0ˇì@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_DeleteSeries/$wal_test12/kÁ
%*#TestWAL_DeleteSeries/$wal_test2/errerrvar"tsdb/engine/wal/wal_test.go(§Ö0ÌÖ@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_DeleteSeries/$wal_test2/errœ
#*!TestWAL_DeleteSeries/$wal_test3/kkvar"tsdb/engine/wal/wal_test.go(ÚÜ0Çá@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test3/kœ
#*!TestWAL_DeleteSeries/$wal_test4/kkvar"tsdb/engine/wal/wal_test.go(Îá0˚á@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test4/kÁ
%*#TestWAL_DeleteSeries/$wal_test5/errerrvar"tsdb/engine/wal/wal_test.go(çâ0ºâ@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_DeleteSeries/$wal_test5/errœ
#*!TestWAL_DeleteSeries/$wal_test6/kkvar"tsdb/engine/wal/wal_test.go(øä0œä@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test6/kœ
#*!TestWAL_DeleteSeries/$wal_test7/kkvar"tsdb/engine/wal/wal_test.go(’ã0Âã@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test7/k»
#*!TestWAL_DeleteSeries/$wal_test8/iivar"tsdb/engine/wal/wal_test.go(ı{0Ωî@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test8/i†
#*!TestWAL_DeleteSeries/$wal_test8/ssvar"tsdb/engine/wal/wal_test.go(ı{0Ωî@HR¢{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_DeleteSeries/$wal_test8/sÁ
%*#TestWAL_DeleteSeries/$wal_test9/errerrvar"tsdb/engine/wal/wal_test.go(Ôê0Åë@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_DeleteSeries/$wal_test9/errØ
*TestWAL_DeleteSeries/ccvar"tsdb/engine/wal/wal_test.go(–Ü0ÌÜ@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/cë
*TestWAL_DeleteSeries/codeccodecvar"tsdb/engine/wal/wal_test.go(¡}0»~@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/codecì
*TestWAL_DeleteSeries/loglogvar"tsdb/engine/wal/wal_test.go(†|0¥|@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/logÚ
*TestWAL_DeleteSeries/p1p1var"tsdb/engine/wal/wal_test.go(”É0ÖÑ@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/p1Ú
*TestWAL_DeleteSeries/p2p2var"tsdb/engine/wal/wal_test.go(áÑ0∏Ñ@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/p2Ú
*TestWAL_DeleteSeries/p3p3var"tsdb/engine/wal/wal_test.go(∫Ñ0ÏÑ@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/p3Ú
*TestWAL_DeleteSeries/p4p4var"tsdb/engine/wal/wal_test.go(ÓÑ0üÖ@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/p4∂
%*#TestWAL_DeleteSeries/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(ÒÄ0ùÉ@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_DeleteSeries/seriesToCreate±
$*"TestWAL_DeleteSeries/seriesToIndexseriesToIndexvar"tsdb/engine/wal/wal_test.go(œ~0Ò~@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_DeleteSeries/seriesToIndexø
*TestWAL_DeleteSeries/ttvar"tsdb/engine/wal/wal_test.go(è|0õ|@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_DeleteSeries/tñ
*TestWAL_PointsSortedTestWAL_PointsSortedfunc"tsdb/engine/wal/wal_test.go(⁄≤0Çª8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSortedÁ
%*#TestWAL_PointsSorted/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(–≥0·≥@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_PointsSorted/$wal_test0/errÁ
%*#TestWAL_PointsSorted/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(≤∑0∑@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_PointsSorted/$wal_test1/errØ
*TestWAL_PointsSorted/ccvar"tsdb/engine/wal/wal_test.go(∫∏0◊∏@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/cì
*TestWAL_PointsSorted/codeccodecvar"tsdb/engine/wal/wal_test.go(¶¥0≠µ@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/codecπ
*TestWAL_PointsSorted/kkvar"tsdb/engine/wal/wal_test.go(Ÿ∏0È∏@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/kï
*TestWAL_PointsSorted/loglogvar"tsdb/engine/wal/wal_test.go(Ö≥0ô≥@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/logÚ
*TestWAL_PointsSorted/p1p1var"tsdb/engine/wal/wal_test.go(„µ0î∂@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/p1Ú
*TestWAL_PointsSorted/p2p2var"tsdb/engine/wal/wal_test.go(ñ∂0«∂@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/p2Ú
*TestWAL_PointsSorted/p3p3var"tsdb/engine/wal/wal_test.go(…∂0˙∂@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/p3Ú
*TestWAL_PointsSorted/p4p4var"tsdb/engine/wal/wal_test.go(¸∂0≠∑@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/p4¡
*TestWAL_PointsSorted/ttvar"tsdb/engine/wal/wal_test.go(Ù≤0Ä≥@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_PointsSorted/t±
*TestWAL_QueryDuringCompactionTestWAL_QueryDuringCompactionfunc"tsdb/engine/wal/wal_test.go(ç®0ÿ≤8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_QueryDuringCompactionï
B*@TestWAL_QueryDuringCompaction/$wal_test0/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(≥™0Ì™@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äB./TestWAL_QueryDuringCompaction/$wal_test0/measurementFieldsToSaveô
6*4TestWAL_QueryDuringCompaction/$wal_test0/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(í™0±™@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä6./TestWAL_QueryDuringCompaction/$wal_test0/pointsByKeyﬁ
9*7TestWAL_QueryDuringCompaction/$wal_test0/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(Ô™0í´@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä9./TestWAL_QueryDuringCompaction/$wal_test0/seriesToCreate˘
.*,TestWAL_QueryDuringCompaction/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(˙´0ã¨@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../TestWAL_QueryDuringCompaction/$wal_test1/err˘
.*,TestWAL_QueryDuringCompaction/$wal_test2/errerrvar"tsdb/engine/wal/wal_test.go(ƒÆ0ˆÆ@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../TestWAL_QueryDuringCompaction/$wal_test2/err◊
,**TestWAL_QueryDuringCompaction/$wal_test3/ccvar"tsdb/engine/wal/wal_test.go(’Ø0ÚØ@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_QueryDuringCompaction/$wal_test3/c·
,**TestWAL_QueryDuringCompaction/$wal_test3/kkvar"tsdb/engine/wal/wal_test.go(ıØ0é∞@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_QueryDuringCompaction/$wal_test3/k·
,**TestWAL_QueryDuringCompaction/$wal_test3/vvvar"tsdb/engine/wal/wal_test.go(ıØ0é∞@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä,./TestWAL_QueryDuringCompaction/$wal_test3/v•
%*#TestWAL_QueryDuringCompaction/codeccodecvar"tsdb/engine/wal/wal_test.go(–¨0◊≠@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_QueryDuringCompaction/codecÜ
0*.TestWAL_QueryDuringCompaction/finishCompactionfinishCompactionvar"tsdb/engine/wal/wal_test.go(√©0Í©@HRﬁ{
        "PkgName": "wal",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä0./TestWAL_QueryDuringCompaction/finishCompactionß
#*!TestWAL_QueryDuringCompaction/loglogvar"tsdb/engine/wal/wal_test.go(¡®0’®@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä#./TestWAL_QueryDuringCompaction/logÑ
"* TestWAL_QueryDuringCompaction/p1p1var"tsdb/engine/wal/wal_test.go(çÆ0øÆ@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_QueryDuringCompaction/p1¯
&*$TestWAL_QueryDuringCompaction/pointspointsvar"tsdb/engine/wal/wal_test.go(•©0¡©@HRÓ{
        "PkgName": "wal",
        "TypeString": "[]map[string][][]byte",
        "UnderlyingTypeString": "[]map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./TestWAL_QueryDuringCompaction/points”
!*TestWAL_QueryDuringCompaction/ttvar"tsdb/engine/wal/wal_test.go(∞®0º®@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./TestWAL_QueryDuringCompaction/t⁄
&*$TestWAL_QueryDuringCompaction/verifyverifyvar"tsdb/engine/wal/wal_test.go(¿Ø0ﬁ±@HR–{
        "PkgName": "wal",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä&./TestWAL_QueryDuringCompaction/verify¡
%*#TestWAL_SeriesAndFieldsGetPersisted#TestWAL_SeriesAndFieldsGetPersistedfunc"tsdb/engine/wal/wal_test.go(Ò^0Û{8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./TestWAL_SeriesAndFieldsGetPersistedÉ
4*2TestWAL_SeriesAndFieldsGetPersisted/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(ˆ_0á`@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_SeriesAndFieldsGetPersisted/$wal_test0/errü
H*FTestWAL_SeriesAndFieldsGetPersisted/$wal_test1/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(Åc0ªc@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }äH./TestWAL_SeriesAndFieldsGetPersisted/$wal_test1/measurementFieldsToSave£
<*:TestWAL_SeriesAndFieldsGetPersisted/$wal_test1/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(‡b0ˇb@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä<./TestWAL_SeriesAndFieldsGetPersisted/$wal_test1/pointsByKeyË
?*=TestWAL_SeriesAndFieldsGetPersisted/$wal_test1/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(Ωc0‡c@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä?./TestWAL_SeriesAndFieldsGetPersisted/$wal_test1/seriesToCreateÖ
5*3TestWAL_SeriesAndFieldsGetPersisted/$wal_test10/errerrvar"tsdb/engine/wal/wal_test.go(àx0ôx@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./TestWAL_SeriesAndFieldsGetPersisted/$wal_test10/errÖ
5*3TestWAL_SeriesAndFieldsGetPersisted/$wal_test11/errerrvar"tsdb/engine/wal/wal_test.go(‡x0Úx@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./TestWAL_SeriesAndFieldsGetPersisted/$wal_test11/errÖ
5*3TestWAL_SeriesAndFieldsGetPersisted/$wal_test12/errerrvar"tsdb/engine/wal/wal_test.go(âz0Æz@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä5./TestWAL_SeriesAndFieldsGetPersisted/$wal_test12/errÉ
4*2TestWAL_SeriesAndFieldsGetPersisted/$wal_test2/errerrvar"tsdb/engine/wal/wal_test.go(âj0‡j@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_SeriesAndFieldsGetPersisted/$wal_test2/errÉ
4*2TestWAL_SeriesAndFieldsGetPersisted/$wal_test3/errerrvar"tsdb/engine/wal/wal_test.go(Òl0ñm@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_SeriesAndFieldsGetPersisted/$wal_test3/errÂ
2*0TestWAL_SeriesAndFieldsGetPersisted/$wal_test8/iivar"tsdb/engine/wal/wal_test.go(Ò^0Û{@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./TestWAL_SeriesAndFieldsGetPersisted/$wal_test8/iΩ
2*0TestWAL_SeriesAndFieldsGetPersisted/$wal_test8/ssvar"tsdb/engine/wal/wal_test.go(Ò^0Û{@HR¢{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./TestWAL_SeriesAndFieldsGetPersisted/$wal_test8/s›
=*;TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/$wal_test0/mmvar"tsdb/engine/wal/wal_test.go(„u0˛u@HR¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä=./TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/$wal_test0/mÎ
2*0TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/kkvar"tsdb/engine/wal/wal_test.go(Ò^0Û{@HR–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/k«
2*0TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/vvvar"tsdb/engine/wal/wal_test.go(Ò^0Û{@HR¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä2./TestWAL_SeriesAndFieldsGetPersisted/$wal_test9/vØ
+*)TestWAL_SeriesAndFieldsGetPersisted/codeccodecvar"tsdb/engine/wal/wal_test.go(Ã`0”a@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./TestWAL_SeriesAndFieldsGetPersisted/codecØ
)*'TestWAL_SeriesAndFieldsGetPersisted/idxidxvar"tsdb/engine/wal/wal_test.go(ùl0ªl@HR§{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_SeriesAndFieldsGetPersisted/idx±
)*'TestWAL_SeriesAndFieldsGetPersisted/loglogvar"tsdb/engine/wal/wal_test.go(´_0ø_@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä)./TestWAL_SeriesAndFieldsGetPersisted/log±
'*%TestWAL_SeriesAndFieldsGetPersisted/mmvar"tsdb/engine/wal/wal_test.go(ªo0…o@HR¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_SeriesAndFieldsGetPersisted/mÉ
;*9TestWAL_SeriesAndFieldsGetPersisted/measaurementsToCreatemeasaurementsToCreatevar"tsdb/engine/wal/wal_test.go(Êh0Éj@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä;./TestWAL_SeriesAndFieldsGetPersisted/measaurementsToCreate˝
9*7TestWAL_SeriesAndFieldsGetPersisted/measurementsToIndexmeasurementsToIndexvar"tsdb/engine/wal/wal_test.go(⁄a0êb@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä9./TestWAL_SeriesAndFieldsGetPersisted/measurementsToIndex 
(*&TestWAL_SeriesAndFieldsGetPersisted/mfmfvar"tsdb/engine/wal/wal_test.go(Ωl0Îl@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_SeriesAndFieldsGetPersisted/mfé
(*&TestWAL_SeriesAndFieldsGetPersisted/p1p1var"tsdb/engine/wal/wal_test.go(õe0Õe@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_SeriesAndFieldsGetPersisted/p1é
(*&TestWAL_SeriesAndFieldsGetPersisted/p2p2var"tsdb/engine/wal/wal_test.go(œe0Åf@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_SeriesAndFieldsGetPersisted/p2é
(*&TestWAL_SeriesAndFieldsGetPersisted/p3p3var"tsdb/engine/wal/wal_test.go(Éf0¥f@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./TestWAL_SeriesAndFieldsGetPersisted/p3õ
'*%TestWAL_SeriesAndFieldsGetPersisted/ssvar"tsdb/engine/wal/wal_test.go(Êm0Én@HRñ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Series",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_SeriesAndFieldsGetPersisted/s“
4*2TestWAL_SeriesAndFieldsGetPersisted/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(∑f0„h@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./TestWAL_SeriesAndFieldsGetPersisted/seriesToCreateœ
3*1TestWAL_SeriesAndFieldsGetPersisted/seriesToIndexseriesToIndexvar"tsdb/engine/wal/wal_test.go(ñb0∏b@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./TestWAL_SeriesAndFieldsGetPersisted/seriesToIndex›
'*%TestWAL_SeriesAndFieldsGetPersisted/ttvar"tsdb/engine/wal/wal_test.go(ö_0¶_@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./TestWAL_SeriesAndFieldsGetPersisted/të
*TestWAL_WritePointsTestWAL_WritePointsfunc"tsdb/engine/wal/wal_test.go(˛0å8HRù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints„
$*"TestWAL_WritePoints/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(Û0Ñ@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_WritePoints/$wal_test0/err„
$*"TestWAL_WritePoints/$wal_test1/errerrvar"tsdb/engine/wal/wal_test.go(§0ﬁ@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_WritePoints/$wal_test1/err¡
"* TestWAL_WritePoints/$wal_test2/ccvar"tsdb/engine/wal/wal_test.go(Ω0⁄@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test2/cÀ
"* TestWAL_WritePoints/$wal_test2/kkvar"tsdb/engine/wal/wal_test.go(›0ˆ@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test2/kÀ
"* TestWAL_WritePoints/$wal_test2/vvvar"tsdb/engine/wal/wal_test.go(›0ˆ@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test2/v„
$*"TestWAL_WritePoints/$wal_test3/errerrvar"tsdb/engine/wal/wal_test.go(Ë0¢@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä$./TestWAL_WritePoints/$wal_test3/err¡
"* TestWAL_WritePoints/$wal_test4/ccvar"tsdb/engine/wal/wal_test.go(Ç0ü@HR∆{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Cursor",
        "UnderlyingTypeString": "interface{Next() (key []byte, value []byte); Seek(seek []byte) (key []byte, value []byte)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test4/cÀ
"* TestWAL_WritePoints/$wal_test4/kkvar"tsdb/engine/wal/wal_test.go(¢0≤@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test4/kÀ
"* TestWAL_WritePoints/$wal_test4/vvvar"tsdb/engine/wal/wal_test.go(¢0≤@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./TestWAL_WritePoints/$wal_test4/vè
*TestWAL_WritePoints/codeccodecvar"tsdb/engine/wal/wal_test.go(…0–@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/codecë
*TestWAL_WritePoints/loglogvar"tsdb/engine/wal/wal_test.go(®0º@HR¶{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/logÓ
*TestWAL_WritePoints/p1p1var"tsdb/engine/wal/wal_test.go(Ü0∏@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p1Ó
*TestWAL_WritePoints/p2p2var"tsdb/engine/wal/wal_test.go(∫0Ï@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p2Ó
*TestWAL_WritePoints/p3p3var"tsdb/engine/wal/wal_test.go(Ó0ü@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p3Ó
*TestWAL_WritePoints/p4p4var"tsdb/engine/wal/wal_test.go(˛0Ø@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p4Ó
*TestWAL_WritePoints/p5p5var"tsdb/engine/wal/wal_test.go(€0å@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p5Ó
*TestWAL_WritePoints/p6p6var"tsdb/engine/wal/wal_test.go(À0¸@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/p6Ω
*TestWAL_WritePoints/ttvar"tsdb/engine/wal/wal_test.go(ó0£@HRÿ{
        "PkgName": "wal",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/tƒ
*TestWAL_WritePoints/verifyverifyvar"tsdb/engine/wal/wal_test.go(®0œ@HR–{
        "PkgName": "wal",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/verify«
*TestWAL_WritePoints/verify2verify2var"tsdb/engine/wal/wal_test.go(Ï0ÿ@HR–{
        "PkgName": "wal",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./TestWAL_WritePoints/verify2ñ
*UnmarshalEntryUnmarshalEntryfunc"tsdb/engine/wal/wal.go(µÚ0≈Û8R◊{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(buf []byte) (timestamp int64, data []byte)",
        "UnderlyingTypeString": "func(buf []byte) (timestamp int64, data []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z]

text/plainOunmarshalCacheEntry returns the timestamp and data from an encoded byte slice.
ä./UnmarshalEntry¨
*UnmarshalEntry/bufbufvar"tsdb/engine/wal/wal.go(…Ú0”Ú@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./UnmarshalEntry/bufØ
*UnmarshalEntry/datadatavar"tsdb/engine/wal/wal.go(ÁÚ0ÚÚ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./UnmarshalEntry/dataº
*UnmarshalEntry/timestamp	timestampvar"tsdb/engine/wal/wal.go(÷Ú0ÂÚ@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./UnmarshalEntry/timestampœ
*btou64btou64func"tsdb/engine/wal/wal.go(›Ù0†ıRâ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(b []byte) uint64",
        "UnderlyingTypeString": "func(b []byte) uint64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./btou64ñ

*btou64/bbvar"tsdb/engine/wal/wal.go(ÈÙ0ÒÙ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./btou64/bŸ
*
cacheEntry
cacheEntrytype"tsdb/engine/wal/wal.go(‹‰0™ÂR…{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.cacheEntry",
        "UnderlyingTypeString": "struct{points [][]byte; isDirtySort bool; size int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z<

text/plain.cacheEntry holds the cached data for a series
ä./cacheEntry˚
*cacheEntry/isDirtySortisDirtySortfield"tsdb/engine/wal/wal.go(áÂ0óÂRè{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "cacheEntry",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cacheEntry/isDirtySortÙ
*cacheEntry/pointspointsfield"tsdb/engine/wal/wal.go(Ò‰0ÖÂRó{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "cacheEntry",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cacheEntry/points‰
*cacheEntry/sizesizefield"tsdb/engine/wal/wal.go(ôÂ0®ÂRç{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "cacheEntry",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cacheEntry/size
*compactionInfocompactionInfotype"tsdb/engine/wal/wal.go(¡¿0’¡RÑ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.compactionInfo",
        "UnderlyingTypeString": "struct{seriesToFlush map[string][][]byte; compactFilesLessThan uint32; flushSize int; countCompacting int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zã

text/plain}compactionInfo is a data object with information about a compaction running
and the series that will be flushed to the index
ä./compactionInfo¶
%*#compactionInfo/compactFilesLessThancompactFilesLessThanfield"tsdb/engine/wal/wal.go(Ñ¡0ü¡Ró{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "compactionInfo",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./compactionInfo/compactFilesLessThanë
 *compactionInfo/countCompactingcountCompactingfield"tsdb/engine/wal/wal.go(ª¡0”¡Rë{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "compactionInfo",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä ./compactionInfo/countCompactingˇ
*compactionInfo/flushSize	flushSizefield"tsdb/engine/wal/wal.go(°¡0π¡Rë{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "compactionInfo",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./compactionInfo/flushSize´
*compactionInfo/seriesToFlushseriesToFlushfield"tsdb/engine/wal/wal.go(⁄¿0Ç¡R±{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "compactionInfo",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./compactionInfo/seriesToFlush∆
*cursorcursortype"tsdb/engine/wal/wal.go(—›0ÉﬁR∂{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "UnderlyingTypeString": "struct{cache [][]byte; position int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZH

text/plain:cursor is a forward cursor for a given entry in the cache
ä./cursorá
*cursor/NextNextfunc"tsdb/engine/wal/wal.go(„‡0â‚8R‹{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*cursor",
        "TypeString": "func() (key []byte, value []byte)",
        "UnderlyingTypeString": "func() (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZY

text/plainKNext moves the cursor to the next key/value. will return nil if at the end
ä./cursor/Next¸
*cursor/Next/ccvar"tsdb/engine/wal/wal.go(È‡0Ú‡@R¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Next/c¶
*cursor/Next/keykeyvar"tsdb/engine/wal/wal.go(¸‡0ç·@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Next/key†
*cursor/Next/vvvar"tsdb/engine/wal/wal.go(…·0··@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Next/v¨
*cursor/Next/valuevaluevar"tsdb/engine/wal/wal.go(¸‡0ç·@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Next/valueà
*cursor/SeekSeekfunc"tsdb/engine/wal/wal.go(æﬁ0ì‡8RÚ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*cursor",
        "TypeString": "func(seek []byte) (key []byte, value []byte)",
        "UnderlyingTypeString": "func(seek []byte) (key []byte, value []byte)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZD

text/plain6Seek will point the cursor to the given time (or key)
ä./cursor/Seek¶
*cursor/Seek/$wal0/iivar"tsdb/engine/wal/wal.go(∫ﬂ0øﬂ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Seek/$wal0/i¸
*cursor/Seek/ccvar"tsdb/engine/wal/wal.go(ƒﬁ0Õﬁ@R¨{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.cursor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Seek/c¶
*cursor/Seek/keykeyvar"tsdb/engine/wal/wal.go(‚ﬁ0Ûﬁ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Seek/key©
*cursor/Seek/seekseekvar"tsdb/engine/wal/wal.go(‘ﬁ0ﬂﬁ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Seek/seek¨
*cursor/Seek/valuevaluevar"tsdb/engine/wal/wal.go(‚ﬁ0Ûﬁ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/Seek/valueÂ
*cursor/cachecachefield"tsdb/engine/wal/wal.go(‚›0Û›Rì{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "cursor",
        "TypeString": "[][]byte",
        "UnderlyingTypeString": "[][]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/cache‰
*cursor/positionpositionfield"tsdb/engine/wal/wal.go(ı›0ÅﬁRâ{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "cursor",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./cursor/position·
*defaultFlushCheckIntervaldefaultFlushCheckIntervalconst"tsdb/engine/wal/wal.go(‰0ãRÚ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zo

text/plainadefaultFlushCheckInterval is how often flushes are triggered automatically by the flush criteria
ä./defaultFlushCheckInterval÷
*deleteFlushdeleteFlushconst"tsdb/engine/wal/wal.go(å0óRô{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zg

text/plainYdeleteFlush indicates that we're flushing because series need to be removed from the WAL
ä./deleteFlush›
*entryentrytype"tsdb/engine/wal/wal.go(»‹0ç›R¡{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "struct{key []byte; data []byte; timestamp int64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZW

text/plainIentry is used as a temporary object when reading data from segment files
ä./entry€
*
entry/datadatafield"tsdb/engine/wal/wal.go(Í‹0˙‹Ré{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "entry",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./entry/dataÿ
*	entry/keykeyfield"tsdb/engine/wal/wal.go(ÿ‹0Ë‹Ré{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "entry",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./entry/keyË
*entry/timestamp	timestampfield"tsdb/engine/wal/wal.go(¸‹0ã›Rå{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "entry",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./entry/timestampÔ
*	flushType	flushTypetype"tsdb/engine/wal/wal.go(ì0†Rò{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zá

text/plainyflushType indiciates why a flush and compaction are being run so the partition can
do the appropriate type of compaction
ä./flushType˘
*	idleFlush	idleFlushconst"tsdb/engine/wal/wal.go(£0¨Rô{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zè

text/plainÄidleFlush indicates that we should flush all series in the parition,
delete all segment files and hold off on opening a new one
ä./idleFlush–
*inttobinttobfunc"tsdb/engine/wal/wal_test.go(À◊0≤ÿHRÉ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(v int) []byte",
        "UnderlyingTypeString": "func(v int) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./inttobù

*inttob/bbvar"tsdb/engine/wal/wal_test.go(Ë◊0¸◊@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./inttob/bó

*inttob/vvvar"tsdb/engine/wal/wal_test.go(◊◊0‹◊@HR {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./inttob/vï
*marshalWALEntrymarshalWALEntryfunc"tsdb/engine/wal/wal.go(âÁ0ÀÍR·{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(buf *bytes.Buffer, key []byte, timestamp int64, data []byte)",
        "UnderlyingTypeString": "func(buf *bytes.Buffer, key []byte, timestamp int64, data []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z–

text/plain¡marshalWALEntry encodes point data into a single byte slice.

The format of the byte slice is:

    uint64 timestamp
    uint32 key length
    uint32 data length
    []byte key
    []byte data
ä./marshalWALEntryº
*marshalWALEntry/bufbufvar"tsdb/engine/wal/wal.go(ûÁ0ØÁ@Rﬁ{
        "PkgName": "wal",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./marshalWALEntry/buf±
*marshalWALEntry/datadatavar"tsdb/engine/wal/wal.go(ŒÁ0ŸÁ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./marshalWALEntry/dataÆ
*marshalWALEntry/keykeyvar"tsdb/engine/wal/wal.go(±Á0ªÁ@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./marshalWALEntry/keyæ
*marshalWALEntry/timestamp	timestampvar"tsdb/engine/wal/wal.go(ΩÁ0ÃÁ@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./marshalWALEntry/timestampâ
*marshalWALEntry/tmpbuftmpbufvar"tsdb/engine/wal/wal.go(¶Ë0¥Ë@R“{
        "PkgName": "wal",
        "TypeString": "[8]byte",
        "UnderlyingTypeString": "[8]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZN

text/plain@bytes.Buffer can't error, so ignore error checking in this code
ä./marshalWALEntry/tmpbufÒ
*memoryFlushmemoryFlushconst"tsdb/engine/wal/wal.go(é0ôRô{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZÅ

text/plainsmemoryFlush indicates that we should look for the series using the most
memory to flush out and compact all others
ä./memoryFlush€
*
newSegment
newSegmentfunc"tsdb/engine/wal/wal.go(™√0´ƒRâ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(f *os.File, l *log.Logger) *github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "func(f *os.File, l *log.Logger) *github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./newSegment¢
*newSegment/ffvar"tsdb/engine/wal/wal.go(∫√0ƒ√@R‘{
        "PkgName": "wal",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./newSegment/f®
*newSegment/llvar"tsdb/engine/wal/wal.go(∆√0”√@R⁄{
        "PkgName": "wal",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./newSegment/lª
	*noFlushnoFlushconst"tsdb/engine/wal/wal.go(˘0ëRô{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZX

text/plainJnoFlush indicates that no flush or compaction are necesssary at this time
ä	./noFlush´
*openTestWALopenTestWALfunc"tsdb/engine/wal/wal_test.go(Õ“0›”HRœ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func() *github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/tsdb/engine/wal.Log",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./openTestWAL≠
*openTestWAL/dirdirvar"tsdb/engine/wal/wal_test.go(Ë“0í”@HR–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./openTestWAL/dirø
*openTestWAL/errerrvar"tsdb/engine/wal/wal_test.go(Ë“0í”@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./openTestWAL/errí
*
parsePoint
parsePointfunc"tsdb/engine/wal/wal_test.go(‰÷0…◊HRπ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(buf string, codec *github.com/influxdb/influxdb/tsdb.FieldCodec) github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func(buf string, codec *github.com/influxdb/influxdb/tsdb.FieldCodec) github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoint´
*parsePoint/bufbufvar"tsdb/engine/wal/wal_test.go(Ù÷0˛÷@HR–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoint/bufˇ
*parsePoint/codeccodecvar"tsdb/engine/wal/wal_test.go(Ä◊0ñ◊@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoint/codecô
*parsePointsparsePointsfunc"tsdb/engine/wal/wal_test.go(ﬂ”0‚÷HRΩ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(buf string, codec *github.com/influxdb/influxdb/tsdb.FieldCodec) []github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "func(buf string, codec *github.com/influxdb/influxdb/tsdb.FieldCodec) []github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints”
%*#parsePoints/$wal_test1/$wal_test0/bbvar"tsdb/engine/wal/wal_test.go(¿’0Ë’@HR–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./parsePoints/$wal_test1/$wal_test0/bÎ
'*%parsePoints/$wal_test1/$wal_test0/errerrvar"tsdb/engine/wal/wal_test.go(¿’0Ë’@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./parsePoints/$wal_test1/$wal_test0/errÛ
*parsePoints/$wal_test1/ppvar"tsdb/engine/wal/wal_test.go(ﬂ”0‚÷@HRÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints/$wal_test1/p≠
*parsePoints/bufbufvar"tsdb/engine/wal/wal_test.go(”0˙”@HR–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints/bufÅ
*parsePoints/codeccodecvar"tsdb/engine/wal/wal_test.go(¸”0í‘@HRû{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.FieldCodec",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints/codecø
*parsePoints/errerrvar"tsdb/engine/wal/wal_test.go(§‘0Œ‘@HR‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints/err¸
*parsePoints/pointspointsvar"tsdb/engine/wal/wal_test.go(§‘0Œ‘@HRñ{
        "PkgName": "wal",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./parsePoints/pointsÌ
*partitionBufLenpartitionBufLenconst"tsdb/engine/wal/wal.go(¢®0º®Rˆ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z

text/plain16kb
ä./partitionBufLen°
	*segmentsegmenttype"tsdb/engine/wal/wal.go(≈¬0®√R‚{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "struct{f *os.File; block []byte; length []byte; size int64; logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zt

text/plainfsegmentFile is a struct for reading in segment files from the WAL. Used on startup only while loading
ä	./segment‰
*segment/blockblockfield"tsdb/engine/wal/wal.go(Ë¬0ı¬Rê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "segment",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/block‹
*	segment/fffield"tsdb/engine/wal/wal.go(◊¬0Ê¬Rî{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "segment",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/fÁ
*segment/lengthlengthfield"tsdb/engine/wal/wal.go(˜¬0Ñ√Rê{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "segment",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/lengthÒ
*segment/loggerloggerfield"tsdb/engine/wal/wal.go(î√0¶√Rö{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "segment",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/loggerˆ
*segment/readCompressedBlockreadCompressedBlockfunc"tsdb/engine/wal/wal.go(›≈0ı€RΩ{
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*segment",
        "TypeString": "func() (name string, entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry, err error)",
        "UnderlyingTypeString": "func() (name string, entries []*github.com/influxdb/influxdb/tsdb/engine/wal.entry, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zπ

text/plain™readCompressedBlock will read the next compressed block from the file and marshal the entries.
if we've hit the end of the file or corruption the entry array will be nil
ä./segment/readCompressedBlock¸
3*1segment/readCompressedBlock/$wal5/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(Â“0Ä”@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./segment/readCompressedBlock/$wal5/$wal0/$wal0/err¸
3*1segment/readCompressedBlock/$wal7/$wal0/$wal0/errerrvar"tsdb/engine/wal/wal.go(˚◊0ñÿ@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./segment/readCompressedBlock/$wal7/$wal0/$wal0/err·
.*,segment/readCompressedBlock/$wal8/$wal0/datadatavar"tsdb/engine/wal/wal.go(¥⁄0Ò⁄@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä../segment/readCompressedBlock/$wal8/$wal0/dataﬁ
-*+segment/readCompressedBlock/$wal8/$wal0/keykeyvar"tsdb/engine/wal/wal.go(¥⁄0Ò⁄@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä-./segment/readCompressedBlock/$wal8/$wal0/key“
+*)segment/readCompressedBlock/$wal8/$wal0/nnvar"tsdb/engine/wal/wal.go(¥⁄0Ò⁄@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./segment/readCompressedBlock/$wal8/$wal0/nÓ
3*1segment/readCompressedBlock/$wal8/$wal0/timestamp	timestampvar"tsdb/engine/wal/wal.go(¥⁄0Ò⁄@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä3./segment/readCompressedBlock/$wal8/$wal0/timestamp÷
'*%segment/readCompressedBlock/blockSize	blockSizevar"tsdb/engine/wal/wal.go(≥∆0»∆@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./segment/readCompressedBlock/blockSize∆
!*segment/readCompressedBlock/bufbufvar"tsdb/engine/wal/wal.go(Ì’0°÷@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./segment/readCompressedBlock/buf“
'*%segment/readCompressedBlock/bytesRead	bytesReadvar"tsdb/engine/wal/wal.go(’Ÿ0„Ÿ@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä'./segment/readCompressedBlock/bytesRead€
(*&segment/readCompressedBlock/dataLength
dataLengthvar"tsdb/engine/wal/wal.go(⁄Ã0¯Ã@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./segment/readCompressedBlock/dataLength∞
%*#segment/readCompressedBlock/entriesentriesvar"tsdb/engine/wal/wal.go(ì∆0£∆@RÆ{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb/engine/wal.entry",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä%./segment/readCompressedBlock/entriesÿ
!*segment/readCompressedBlock/errerrvar"tsdb/engine/wal/wal.go(•∆0Æ∆@R‚{
        "PkgName": "wal",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä!./segment/readCompressedBlock/errÑ
7*5segment/readCompressedBlock/isCompactionFileNameBlockisCompactionFileNameBlockvar"tsdb/engine/wal/wal.go(ƒÀ0åÃ@RÃ{
        "PkgName": "wal",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä7./segment/readCompressedBlock/isCompactionFileNameBlock∫
*segment/readCompressedBlock/nnvar"tsdb/engine/wal/wal.go(À∆0Á∆@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/readCompressedBlock/n…
"* segment/readCompressedBlock/namenamevar"tsdb/engine/wal/wal.go(Ü∆0ë∆@R–{
        "PkgName": "wal",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä"./segment/readCompressedBlock/nameû
*segment/readCompressedBlock/ssvar"tsdb/engine/wal/wal.go(„≈0Ì≈@RÆ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/readCompressedBlock/sﬂ
*segment/sizesizefield"tsdb/engine/wal/wal.go(Ü√0í√Ré{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "segment",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./segment/size¬
*seriesAndFieldsseriesAndFieldstype"tsdb/engine/wal/wal.go(Ä„0§‰RÁ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.seriesAndFields",
        "UnderlyingTypeString": "struct{Fields map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields \"json:\\\"fields,omitempty\\\"\"; Series []*github.com/influxdb/influxdb/tsdb.SeriesCreate \"json:\\\"series,omitempty\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zx

text/plainjseriesAndFields is a data struct to serialize new series and fields
to get created into WAL segment files
ä./seriesAndFieldsç
*seriesAndFields/FieldsFieldsfield"tsdb/engine/wal/wal.go(ö„0›„8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "seriesAndFields",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./seriesAndFields/FieldsÒ
*seriesAndFields/SeriesSeriesfield"tsdb/engine/wal/wal.go(ﬂ„0¢‰8Rà{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "seriesAndFields",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./seriesAndFields/Series‘
*testIndexWritertestIndexWritertype"tsdb/engine/wal/wal_test.go(´œ0÷–HRÏ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.testIndexWriter",
        "UnderlyingTypeString": "struct{fn func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./testIndexWriter™
*testIndexWriter/WriteIndex
WriteIndexfunc"tsdb/engine/wal/wal_test.go(ÿ–0À“8HRØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "wal",
        "Receiver": "*testIndexWriter",
        "TypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./testIndexWriter/WriteIndex˘
4*2testIndexWriter/WriteIndex/measurementFieldsToSavemeasurementFieldsToSavevar"tsdb/engine/wal/wal_test.go(û—0ÿ—@HR¬{
        "PkgName": "wal",
        "TypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "UnderlyingTypeString": "map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä4./testIndexWriter/WriteIndex/measurementFieldsToSave˝
(*&testIndexWriter/WriteIndex/pointsByKeypointsByKeyvar"tsdb/engine/wal/wal_test.go(˝–0ú—@HRÍ{
        "PkgName": "wal",
        "TypeString": "map[string][][]byte",
        "UnderlyingTypeString": "map[string][][]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä(./testIndexWriter/WriteIndex/pointsByKey¬
+*)testIndexWriter/WriteIndex/seriesToCreateseriesToCreatevar"tsdb/engine/wal/wal_test.go(⁄—0˝—@HR¶{
        "PkgName": "wal",
        "TypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/tsdb.SeriesCreate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä+./testIndexWriter/WriteIndex/seriesToCreate≥
*testIndexWriter/WriteIndex/ttvar"tsdb/engine/wal/wal_test.go(ﬁ–0–@HRæ{
        "PkgName": "wal",
        "TypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.testIndexWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb/engine/wal.testIndexWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./testIndexWriter/WriteIndex/t˙
*testIndexWriter/fnfnfield"tsdb/engine/wal/wal_test.go(≈œ0‘–HRò{
        "PkgScope": true,
        "PkgName": "wal",
        "FieldOfStruct": "testIndexWriter",
        "TypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "UnderlyingTypeString": "func(pointsByKey map[string][][]byte, measurementFieldsToSave map[string]*github.com/influxdb/influxdb/tsdb.MeasurementFields, seriesToCreate []*github.com/influxdb/influxdb/tsdb.SeriesCreate) error",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./testIndexWriter/fnÔ
*thresholdFlushthresholdFlushconst"tsdb/engine/wal/wal.go(ü0≠Rô{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb/engine/wal.flushType",
        "UnderlyingTypeString": "int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Zw

text/plainithresholdFlush indicates that we should flush all series over the ReadySize
and compact all other series
ä./thresholdFlushé
*u64tobu64tobfunc"tsdb/engine/wal/wal.go(˘Û0€ÙRâ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(v uint64) []byte",
        "UnderlyingTypeString": "func(v uint64) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }Z=

text/plain/u64tob converts a uint64 into an 8-byte slice.
ä./u64tobñ

*u64tob/bbvar"tsdb/engine/wal/wal.go(ôÙ0≠Ù@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./u64tob/bñ

*u64tob/vvvar"tsdb/engine/wal/wal.go(ÖÙ0çÙ@R–{
        "PkgName": "wal",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä
./u64tob/vŸ
*unmarshalWALEntryunmarshalWALEntryfunc"tsdb/engine/wal/wal.go(°Ï0ÖÔRÔ{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(v []byte) (bytesRead int, key []byte, timestamp int64, data []byte)",
        "UnderlyingTypeString": "func(v []byte) (bytesRead int, key []byte, timestamp int64, data []byte)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ZÄ

text/plainrunmarshalWALEntry decodes a WAL entry into it's separate parts.
Returned byte slices point to the original slice.
ä./unmarshalWALEntryæ
*unmarshalWALEntry/bytesRead	bytesReadvar"tsdb/engine/wal/wal.go(√Ï0–Ï@R {
        "PkgName": "wal",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/bytesReadµ
*unmarshalWALEntry/datadatavar"tsdb/engine/wal/wal.go(ÔÏ0˙Ï@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/dataæ
*unmarshalWALEntry/dataLendataLenvar"tsdb/engine/wal/wal.go(ﬂÌ0ãÓ@R–{
        "PkgName": "wal",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/dataLen≤
*unmarshalWALEntry/keykeyvar"tsdb/engine/wal/wal.go(“Ï0‹Ï@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/keyª
*unmarshalWALEntry/keyLenkeyLenvar"tsdb/engine/wal/wal.go(≥Ì0›Ì@R–{
        "PkgName": "wal",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/keyLen¬
*unmarshalWALEntry/timestamp	timestampvar"tsdb/engine/wal/wal.go(ﬁÏ0ÌÏ@RŒ{
        "PkgName": "wal",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/timestamp¨
*unmarshalWALEntry/vvvar"tsdb/engine/wal/wal.go(∏Ï0¿Ï@R–{
        "PkgName": "wal",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./unmarshalWALEntry/v£
*walEntryLengthwalEntryLengthfunc"tsdb/engine/wal/wal.go(ÕÍ0ßÎR≈{
        "PkgScope": true,
        "PkgName": "wal",
        "TypeString": "func(p github.com/influxdb/influxdb/tsdb.Point) int",
        "UnderlyingTypeString": "func(p github.com/influxdb/influxdb/tsdb.Point) int",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./walEntryLength‹
*walEntryLength/ppvar"tsdb/engine/wal/wal.go(·Í0ÌÍ@RÜ{
        "PkgName": "wal",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/tsdb/engine/wal"
      }ä./walEntryLength/p