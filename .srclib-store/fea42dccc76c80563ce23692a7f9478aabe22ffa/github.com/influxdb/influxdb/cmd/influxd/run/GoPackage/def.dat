Î
*.runpackage"cmd/influxd/run8Ræ{
        "Exported": true,
        "PkgName": "run",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä.ó
	*CommandCommandtype"cmd/influxd/run/command.go(ò0—8RÄ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "struct{Version string; Branch string; Commit string; closing chan struct{}; Closed chan struct{}; Stdin io.Reader; Stdout io.Writer; Stderr io.Writer; Server *github.com/influxdb/influxdb/cmd/influxd/run.Server}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZH

text/plain:Command represents the command executed by "influxd run".
ä	./CommandÖ
*Command/BranchBranchfield"cmd/influxd/run/command.go(∫0»8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Branch∑
*Command/CloseClosefunc"cmd/influxd/run/command.go(¶0ª8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z+

text/plainClose shuts down the server.
ä./Command/Closeä
*Command/Close/cmdcmdvar"cmd/influxd/run/command.go(¨0∏@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Close/cmdì
*Command/ClosedClosedfield"cmd/influxd/run/command.go(Ú0á8R∏{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ClosedÖ
*Command/CommitCommitfield"cmd/influxd/run/command.go( 0ÿ8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Commità
*Command/ParseConfigParseConfigfunc"cmd/influxd/run/command.go(ù%0π(8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func(path string) (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "UnderlyingTypeString": "func(path string) (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Zd

text/plainVParseConfig parses the config at path.
Returns a demo configuration if path is blank.
ä./Command/ParseConfigﬁ
#*!Command/ParseConfig/$command1/errerrvar"cmd/influxd/run/command.go(◊'0ˇ'@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä#./Command/ParseConfig/$command1/errñ
*Command/ParseConfig/cmdcmdvar"cmd/influxd/run/command.go(£%0Ø%@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseConfig/cmdù
*Command/ParseConfig/configconfigvar"cmd/influxd/run/command.go(Ω'0“'@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseConfig/configª
*Command/ParseConfig/pathpathvar"cmd/influxd/run/command.go(Ω%0»%@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseConfig/pathÑ
*Command/ParseFlags
ParseFlagsfunc"cmd/influxd/run/command.go(‚0∂ 8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func(args ...string) (github.com/influxdb/influxdb/cmd/influxd/run.Options, error)",
        "UnderlyingTypeString": "func(args ...string) (github.com/influxdb/influxdb/cmd/influxd/run.Options, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z]

text/plainOParseFlags parses the command line flags from args and returns an options set.
ä./Command/ParseFlags‹
"* Command/ParseFlags/$command1/errerrvar"cmd/influxd/run/command.go(·0ˆ@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Command/ParseFlags/$command1/errΩ
*Command/ParseFlags/argsargsvar"cmd/influxd/run/command.go(Å0è@R‘{
        "PkgName": "run",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseFlags/argsî
*Command/ParseFlags/cmdcmdvar"cmd/influxd/run/command.go(Ë0Ù@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseFlags/cmd¡
*Command/ParseFlags/fsfsvar"cmd/influxd/run/command.go(∫0È@Rﬁ{
        "PkgName": "run",
        "TypeString": "*flag.FlagSet",
        "UnderlyingTypeString": "*flag.FlagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseFlags/fs◊
*Command/ParseFlags/optionsoptionsvar"cmd/influxd/run/command.go(©0∏@RÂ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Options",
        "UnderlyingTypeString": "struct{ConfigPath string; PIDFile string; Hostname string; Join string; CPUProfile string; MemProfile string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ParseFlags/optionsÂ
*Command/RunRunfunc"cmd/influxd/run/command.go(Ò	0Ñ8Rœ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func(args ...string) error",
        "UnderlyingTypeString": "func(args ...string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZC

text/plain5Run parses the config from args and runs the server.
ä./Command/RunŒ
*Command/Run/$command1/errerrvar"cmd/influxd/run/command.go(ª0„@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/$command1/errŒ
*Command/Run/$command3/errerrvar"cmd/influxd/run/command.go(Ÿ0˙@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/$command3/errŒ
*Command/Run/$command6/errerrvar"cmd/influxd/run/command.go(≈0›@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/$command6/errŒ
*Command/Run/$command8/errerrvar"cmd/influxd/run/command.go(…0ÿ@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/$command8/errØ
*Command/Run/argsargsvar"cmd/influxd/run/command.go(â
0ó
@R‘{
        "PkgName": "run",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/argsÜ
*Command/Run/cmdcmdvar"cmd/influxd/run/command.go(˜	0É
@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/cmdç
*Command/Run/configconfigvar"cmd/influxd/run/command.go(†0“@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/config∫
*Command/Run/errerrvar"cmd/influxd/run/command.go(ƒ
0Î
@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/err…
*Command/Run/optionsoptionsvar"cmd/influxd/run/command.go(ƒ
0Î
@RÂ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Options",
        "UnderlyingTypeString": "struct{ConfigPath string; PIDFile string; Hostname string; Join string; CPUProfile string; MemProfile string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/options˛
*Command/Run/ssvar"cmd/influxd/run/command.go(î0º@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Run/s·
*Command/ServerServerfield"cmd/influxd/run/command.go(¡0œ8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/ServerØ
*Command/StderrStderrfield"cmd/influxd/run/command.go(Æ0æ8R‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Stderr´
*Command/StdinStdinfield"cmd/influxd/run/command.go(ä0ö8R”{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "io.Reader",
        "UnderlyingTypeString": "interface{Read(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/StdinØ
*Command/StdoutStdoutfield"cmd/influxd/run/command.go(ú0¨8R‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Stdoutà
*Command/VersionVersionfield"cmd/influxd/run/command.go(™0∏8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/Version˙
*Command/closingclosingfield"cmd/influxd/run/command.go(€0Rû{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Command",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/closingå
*Command/monitorServerErrorsmonitorServerErrorsfunc"cmd/influxd/run/command.go(Ω0éRç{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/monitorServerErrorsñ
?*=Command/monitorServerErrors/$command0/$command0/$command0/errerrvar"cmd/influxd/run/command.go(¥0Õ@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä?./Command/monitorServerErrors/$command0/$command0/$command0/err¶
!*Command/monitorServerErrors/cmdcmdvar"cmd/influxd/run/command.go(√0œ@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./Command/monitorServerErrors/cmd€
$*"Command/monitorServerErrors/loggerloggervar"cmd/influxd/run/command.go(Í0ö@R⁄{
        "PkgName": "run",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Command/monitorServerErrors/logger’
*Command/writePIDFilewritePIDFilefunc"cmd/influxd/run/command.go(Á 0ø$RØ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Command",
        "TypeString": "func(path string) error",
        "UnderlyingTypeString": "func(path string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z:

text/plain,writePIDFile writes the process ID to path.
ä./Command/writePIDFile‡
$*"Command/writePIDFile/$command2/errerrvar"cmd/influxd/run/command.go(ƒ#0Ù#@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Command/writePIDFile/$command2/errò
*Command/writePIDFile/cmdcmdvar"cmd/influxd/run/command.go(Ì 0˘ @RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/writePIDFile/cmdÃ
*Command/writePIDFile/errerrvar"cmd/influxd/run/command.go(ì"0ø"@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/writePIDFile/errΩ
*Command/writePIDFile/pathpathvar"cmd/influxd/run/command.go(à!0ì!@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/writePIDFile/path∫
*Command/writePIDFile/pidpidvar"cmd/influxd/run/command.go(ü#0ø#@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Command/writePIDFile/pidÿ
*ConfigConfigtype"cmd/influxd/run/config.go(‘0ñ8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "struct{Meta *github.com/influxdb/influxdb/meta.Config \"toml:\\\"meta\\\"\"; Data github.com/influxdb/influxdb/tsdb.Config \"toml:\\\"data\\\"\"; Cluster github.com/influxdb/influxdb/cluster.Config \"toml:\\\"cluster\\\"\"; Retention github.com/influxdb/influxdb/services/retention.Config \"toml:\\\"retention\\\"\"; Precreator github.com/influxdb/influxdb/services/precreator.Config \"toml:\\\"shard-precreation\\\"\"; Admin github.com/influxdb/influxdb/services/admin.Config \"toml:\\\"admin\\\"\"; HTTPD github.com/influxdb/influxdb/services/httpd.Config \"toml:\\\"http\\\"\"; Graphites []github.com/influxdb/influxdb/services/graphite.Config \"toml:\\\"graphite\\\"\"; Collectd github.com/influxdb/influxdb/services/collectd.Config \"toml:\\\"collectd\\\"\"; OpenTSDB github.com/influxdb/influxdb/services/opentsdb.Config \"toml:\\\"opentsdb\\\"\"; UDPs []github.com/influxdb/influxdb/services/udp.Config \"toml:\\\"udp\\\"\"; Monitoring github.com/influxdb/influxdb/services/monitor.Config \"toml:\\\"monitoring\\\"\"; ContinuousQuery github.com/influxdb/influxdb/services/continuous_querier.Config \"toml:\\\"continuous_queries\\\"\"; HintedHandoff github.com/influxdb/influxdb/services/hh.Config \"toml:\\\"hinted-handoff\\\"\"; ReportingDisabled bool \"toml:\\\"reporting-disabled\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZQ

text/plainCConfig represents the configuration format for the influxd binary.
ä./ConfigÒ
*Config/AdminAdminfield"cmd/influxd/run/config.go(◊0Å	8Rú{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/admin.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; HttpsEnabled bool \"toml:\\\"https-enabled\\\"\"; HttpsCertificate string \"toml:\\\"https-certificate\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Admin™
*Config/ApplyEnvOverridesApplyEnvOverridesfunc"cmd/influxd/run/config.go(£0ç8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Config",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/ApplyEnvOverridesó
*Config/ApplyEnvOverrides/ccvar"cmd/influxd/run/config.go(©0≤@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/ApplyEnvOverrides/cè
*Config/ClusterClusterfield"cmd/influxd/run/config.go(Ω0Í8R¥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/cluster.Config",
        "UnderlyingTypeString": "struct{ForceRemoteShardMapping bool \"toml:\\\"force-remote-mapping\\\"\"; WriteTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"write-timeout\\\"\"; ShardWriterTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"shard-writer-timeout\\\"\"; ShardMapperTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"shard-mapper-timeout\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Cluster°
*Config/CollectdCollectdfield"cmd/influxd/run/config.go(›	0ä
8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/collectd.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; RetentionPolicy string \"toml:\\\"retention-policy\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchDuration github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"; TypesDB string \"toml:\\\"typesdb\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Collectd˝
*Config/ContinuousQueryContinuousQueryfield"cmd/influxd/run/config.go(”0ò8Rä{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/continuous_querier.Config",
        "UnderlyingTypeString": "struct{LogEnabled bool \"toml:\\\"log-enabled\\\"\"; Enabled bool \"toml:\\\"enabled\\\"\"; RecomputePreviousN int \"toml:\\\"recompute-previous-n\\\"\"; RecomputeNoOlderThan github.com/influxdb/influxdb/toml.Duration \"toml:\\\"recompute-no-older-than\\\"\"; ComputeRunsPerInterval int \"toml:\\\"compute-runs-per-interval\\\"\"; ComputeNoMoreThan github.com/influxdb/influxdb/toml.Duration \"toml:\\\"compute-no-more-than\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/ContinuousQueryú	
*Config/DataDatafield"cmd/influxd/run/config.go(ë0ª8R {
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Config",
        "UnderlyingTypeString": "struct{Dir string \"toml:\\\"dir\\\"\"; MaxWALSize int \"toml:\\\"max-wal-size\\\"\"; WALFlushInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-interval\\\"\"; WALPartitionFlushDelay github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-partition-flush-delay\\\"\"; WALDir string \"toml:\\\"wal-dir\\\"\"; WALEnableLogging bool \"toml:\\\"wal-enable-logging\\\"\"; WALReadySeriesSize int \"toml:\\\"wal-ready-series-size\\\"\"; WALCompactionThreshold float64 \"toml:\\\"wal-compaction-threshold\\\"\"; WALMaxSeriesSize int \"toml:\\\"wal-max-series-size\\\"\"; WALFlushColdInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"wal-flush-cold-interval\\\"\"; WALPartitionSizeThreshold uint64 \"toml:\\\"wal-partition-size-threshold\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/DataÏ
*Config/Graphites	Graphitesfield"cmd/influxd/run/config.go(Æ	0€	8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "[]github.com/influxdb/influxdb/services/graphite.Config",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/services/graphite.Config",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Graphites≥
*Config/HTTPDHTTPDfield"cmd/influxd/run/config.go(É	0¨	8Rﬁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/httpd.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; AuthEnabled bool \"toml:\\\"auth-enabled\\\"\"; LogEnabled bool \"toml:\\\"log-enabled\\\"\"; WriteTracing bool \"toml:\\\"write-tracing\\\"\"; PprofEnabled bool \"toml:\\\"pprof-enabled\\\"\"; HttpsEnabled bool \"toml:\\\"https-enabled\\\"\"; HttpsCertificate string \"toml:\\\"https-certificate\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/HTTPDé
*Config/HintedHandoffHintedHandofffield"cmd/influxd/run/config.go(õ0 8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; Dir string \"toml:\\\"dir\\\"\"; MaxSize int64 \"toml:\\\"max-size\\\"\"; MaxAge github.com/influxdb/influxdb/toml.Duration \"toml:\\\"max-age\\\"\"; RetryRateLimit int64 \"toml:\\\"retry-rate-limit\\\"\"; RetryInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"retry-interval\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/HintedHandoff¡
*Config/MetaMetafield"cmd/influxd/run/config.go(Â0è8RÔ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "*github.com/influxdb/influxdb/meta.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Config",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Metaˆ
*Config/Monitoring
Monitoringfield"cmd/influxd/run/config.go(î0—8Rÿ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/monitor.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; WriteInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"write-interval\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z8

text/plain*Snapshot SnapshotConfig `toml:"snapshot"`
ä./Config/Monitoringè
*Config/OpenTSDBOpenTSDBfield"cmd/influxd/run/config.go(å
0π
8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/opentsdb.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; RetentionPolicy string \"toml:\\\"retention-policy\\\"\"; ConsistencyLevel string \"toml:\\\"consistency-level\\\"\"; TLSEnabled bool \"toml:\\\"tls-enabled\\\"\"; Certificate string \"toml:\\\"certificate\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/OpenTSDBô
*Config/Precreator
Precreatorfield"cmd/influxd/run/config.go(ù0‘8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/precreator.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; CheckInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"check-interval\\\"\"; AdvancePeriod github.com/influxdb/influxdb/toml.Duration \"toml:\\\"advance-period\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Precreatorø
*Config/ReportingDisabledReportingDisabledfield"cmd/influxd/run/config.go(‚0î8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z

text/plainServer reporting
ä./Config/ReportingDisabledª
*Config/Retention	Retentionfield"cmd/influxd/run/config.go(Ï0õ8R⁄{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/services/retention.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; CheckInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"check-interval\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Retention”
*Config/UDPsUDPsfield"cmd/influxd/run/config.go(ª
0„
8RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Config",
        "TypeString": "[]github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/services/udp.Config",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/UDPs”
*Config/ValidateValidatefunc"cmd/influxd/run/config.go(ì0°8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Config",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZB

text/plain4Validate returns an error if the config is invalid.
ä./Config/Validate˜
0*.Config/Validate/$config1/$config0/$config0/errerrvar"cmd/influxd/run/config.go(≤0≈@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä0./Config/Validate/$config1/$config0/$config0/errŸ
*Config/Validate/$config1/ggvar"cmd/influxd/run/config.go(ì0°@RÓ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/graphite.Config",
        "UnderlyingTypeString": "struct{BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; Enabled bool \"toml:\\\"enabled\\\"\"; Protocol string \"toml:\\\"protocol\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"; ConsistencyLevel string \"toml:\\\"consistency-level\\\"\"; Templates []string \"toml:\\\"templates\\\"\"; Tags []string \"toml:\\\"tags\\\"\"; Separator string \"toml:\\\"separator\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Validate/$config1/gÖ
*Config/Validate/ccvar"cmd/influxd/run/config.go(ô0¢@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/Validate/c–
*Config/applyEnvOverridesapplyEnvOverridesfunc"cmd/influxd/run/config.go(è0è4R⁄{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Config",
        "TypeString": "func(prefix string, spec reflect.Value) error",
        "UnderlyingTypeString": "func(prefix string, spec reflect.Value) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/applyEnvOverridesı
o*mConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config1/$config0/$config0/$config0/$config0/errerrvar"cmd/influxd/run/config.go(¯%0º&@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äo./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config1/$config0/$config0/$config0/$config0/err≥
[*YConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config1/$config0/$config0/iivar"cmd/influxd/run/config.go(’%0€%@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä[./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config1/$config0/$config0/i—
]*[Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config2/$config0/$config0/errerrvar"cmd/influxd/run/config.go(Ô'0ë(@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä]./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config2/$config0/$config0/err◊
f*dConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config0/durdurvar"cmd/influxd/run/config.go(ò+0Ω+@R÷{
        "PkgName": "run",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äf./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config0/dur„
f*dConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config0/errerrvar"cmd/influxd/run/config.go(ò+0Ω+@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äf./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config0/err„
f*dConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config1/errerrvar"cmd/influxd/run/config.go(ç-0ñ-@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äf./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/$config0/$config1/err∫
Y*WConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/intValueintValuevar"cmd/influxd/run/config.go(¿*0Œ*@RŒ{
        "PkgName": "run",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äY./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config1/intValueª
Z*XConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config2/boolValue	boolValuevar"cmd/influxd/run/config.go(ß/0—/@RÃ{
        "PkgName": "run",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äZ./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config2/boolValueø
T*RConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config2/errerrvar"cmd/influxd/run/config.go(ß/0—/@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äT./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config2/errø
T*RConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config3/errerrvar"cmd/influxd/run/config.go(Æ10Î1@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äT./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config3/errƒ
[*YConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config3/floatValue
floatValuevar"cmd/influxd/run/config.go(Æ10Î1@R“{
        "PkgName": "run",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä[./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config3/floatValue—
]*[Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config4/$config0/errerrvar"cmd/influxd/run/config.go(Ø30—3@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä]./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/$config4/$config4/$config0/errâ
B*@Config/applyEnvOverrides/$config2/$config0/$config0/$config0/keykeyvar"cmd/influxd/run/config.go(ì#0µ#@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äB./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/keyè
D*BConfig/applyEnvOverrides/$config2/$config0/$config0/$config0/valuevaluevar"cmd/influxd/run/config.go(ó$0Æ$@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }äD./Config/applyEnvOverrides/$config2/$config0/$config0/$config0/value˙
7*5Config/applyEnvOverrides/$config2/$config0/configName
configNamevar"cmd/influxd/run/config.go(§ 0’ @R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä7./Config/applyEnvOverrides/$config2/$config0/configNameú
.*,Config/applyEnvOverrides/$config2/$config0/ffvar"cmd/influxd/run/config.go(÷0Â@Rç{
        "PkgName": "run",
        "TypeString": "reflect.Value",
        "UnderlyingTypeString": "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä../Config/applyEnvOverrides/$config2/$config0/f˜
6*4Config/applyEnvOverrides/$config2/$config0/fieldName	fieldNamevar"cmd/influxd/run/config.go(”!0¯!@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä6./Config/applyEnvOverrides/$config2/$config0/fieldName«
%*#Config/applyEnvOverrides/$config2/iivar"cmd/influxd/run/config.go(¥0∫@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Config/applyEnvOverrides/$config2/ió
*Config/applyEnvOverrides/ccvar"cmd/influxd/run/config.go(ï0û@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/applyEnvOverrides/c 
!*Config/applyEnvOverrides/prefixprefixvar"cmd/influxd/run/config.go(≤0ø@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./Config/applyEnvOverrides/prefix¯
*Config/applyEnvOverrides/ssvar"cmd/influxd/run/config.go(á0ê@Rç{
        "PkgName": "run",
        "TypeString": "reflect.Value",
        "UnderlyingTypeString": "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/applyEnvOverrides/sÅ
*Config/applyEnvOverrides/specspecvar"cmd/influxd/run/config.go(¡0”@Rç{
        "PkgName": "run",
        "TypeString": "reflect.Value",
        "UnderlyingTypeString": "struct{typ *reflect.rtype; ptr unsafe.Pointer; reflect.flag}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Config/applyEnvOverrides/spec¸
%*#Config/applyEnvOverrides/typeOfSpec
typeOfSpecvar"cmd/influxd/run/config.go(ò0Æ@Rˆ{
        "PkgName": "run",
        "TypeString": "reflect.Type",
        "UnderlyingTypeString": "interface{Align() int; AssignableTo(u reflect.Type) bool; Bits() int; ChanDir() reflect.ChanDir; Comparable() bool; ConvertibleTo(u reflect.Type) bool; Elem() reflect.Type; Field(i int) reflect.StructField; FieldAlign() int; FieldByIndex(index []int) reflect.StructField; FieldByName(name string) (reflect.StructField, bool); FieldByNameFunc(match func(string) bool) (reflect.StructField, bool); Implements(u reflect.Type) bool; In(i int) reflect.Type; IsVariadic() bool; Key() reflect.Type; Kind() reflect.Kind; Len() int; Method(int) reflect.Method; MethodByName(string) (reflect.Method, bool); Name() string; NumField() int; NumIn() int; NumMethod() int; NumOut() int; Out(i int) reflect.Type; PkgPath() string; Size() uintptr; String() string; common() *reflect.rtype; uncommon() *reflect.uncommonType}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Config/applyEnvOverrides/typeOfSpecÑ
*
NewCommand
NewCommandfunc"cmd/influxd/run/command.go(É0∑	8RÒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.Command",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z;

text/plain-NewCommand return a new instance of Command.
ä./NewCommandì
*	NewConfig	NewConfigfunc"cmd/influxd/run/config.go(›0Ï8RÔ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZP

text/plainBNewConfig returns an instance of Config with reasonable defaults.
ä./NewConfig˘
*NewConfig/ccvar"cmd/influxd/run/config.go(˘0á@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewConfig/c∑
*NewDemoConfigNewDemoConfigfunc"cmd/influxd/run/config.go(π0⁄8RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func() (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "UnderlyingTypeString": "func() (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZV

text/plainHNewDemoConfig returns the config that runs when no config is specified.
ä./NewDemoConfigÅ
*NewDemoConfig/ccvar"cmd/influxd/run/config.go(‚0Ú@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewDemoConfig/cΩ
*NewDemoConfig/errerrvar"cmd/influxd/run/config.go(”0Î@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewDemoConfig/err∑
*NewDemoConfig/homeDirhomeDirvar"cmd/influxd/run/config.go(˘0á@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewDemoConfig/homeDir≥
*NewDemoConfig/uuvar"cmd/influxd/run/config.go(”0Î@Rﬁ{
        "PkgName": "run",
        "TypeString": "*os/user.User",
        "UnderlyingTypeString": "*os/user.User",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewDemoConfig/uÿ
*NewPrintConfigCommandNewPrintConfigCommandfunc"!cmd/influxd/run/config_command.go(æ0–8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZQ

text/plainCNewPrintConfigCommand return a new instance of PrintConfigCommand.
ä./NewPrintConfigCommandØ
*	NewServer	NewServerfunc"cmd/influxd/run/server.go(Í0œ 8Rç{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func(c *github.com/influxdb/influxdb/cmd/influxd/run.Config, version string) (*github.com/influxdb/influxdb/cmd/influxd/run.Server, error)",
        "UnderlyingTypeString": "func(c *github.com/influxdb/influxdb/cmd/influxd/run.Config, version string) (*github.com/influxdb/influxdb/cmd/influxd/run.Server, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZN

text/plain@NewServer returns a new instance of Server built from a config.
ä./NewServer«
*NewServer/$server0/errerrvar"cmd/influxd/run/server.go(ú0∆@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/$server0/err‡
*NewServer/$server1/ggvar"cmd/influxd/run/server.go(Í0œ @RÅ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/$server1/gÎ
**(NewServer/$server2/$server0/$server0/errerrvar"cmd/influxd/run/server.go(Ù0ï @R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä*./NewServer/$server2/$server0/$server0/errÕ
*NewServer/$server2/ggvar"cmd/influxd/run/server.go(Í0œ @RÓ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/graphite.Config",
        "UnderlyingTypeString": "struct{BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; Enabled bool \"toml:\\\"enabled\\\"\"; Protocol string \"toml:\\\"protocol\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"; ConsistencyLevel string \"toml:\\\"consistency-level\\\"\"; Templates []string \"toml:\\\"templates\\\"\"; Tags []string \"toml:\\\"tags\\\"\"; Separator string \"toml:\\\"separator\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/$server2/g˘
*NewServer/ccvar"cmd/influxd/run/server.go(˘0Ç@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/c˘
*NewServer/ssvar"cmd/influxd/run/server.go(®0µ@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/s˘
*NewServer/tsdbStore	tsdbStorevar"cmd/influxd/run/server.go(÷0¸@Rî{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/tsdbStoreØ
*NewServer/versionversionvar"cmd/influxd/run/server.go(Ñ0í@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./NewServer/version∑
	*OptionsOptionstype"cmd/influxd/run/command.go(È-0Ì.8Rö{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Options",
        "UnderlyingTypeString": "struct{ConfigPath string; PIDFile string; Hostname string; Join string; CPUProfile string; MemProfile string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZN

text/plain@Options represents the command line options that can be parsed.
ä	./Optionsë
*Options/CPUProfile
CPUProfilefield"cmd/influxd/run/command.go(«.0ÿ.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/CPUProfileë
*Options/ConfigPath
ConfigPathfield"cmd/influxd/run/command.go(˚-0å.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/ConfigPathã
*Options/HostnameHostnamefield"cmd/influxd/run/command.go(°.0≤.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/Hostnameˇ
*Options/JoinJoinfield"cmd/influxd/run/command.go(¥.0≈.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/Joinë
*Options/MemProfile
MemProfilefield"cmd/influxd/run/command.go(⁄.0Î.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/MemProfileà
*Options/PIDFilePIDFilefield"cmd/influxd/run/command.go(é.0ü.8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Options",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Options/PIDFile¿
*PrintConfigCommandPrintConfigCommandtype"!cmd/influxd/run/config_command.go(£0ˆ8RÛ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "UnderlyingTypeString": "struct{Stdin io.Reader; Stdout io.Writer; Stderr io.Writer}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZV

text/plainHPrintConfigCommand represents the command executed by "influxd config".
ä./PrintConfigCommandâ
*PrintConfigCommand/RunRunfunc"!cmd/influxd/run/config_command.go(Ü0ã8R⁄{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*PrintConfigCommand",
        "TypeString": "func(args ...string) error",
        "UnderlyingTypeString": "func(args ...string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z?

text/plain1Run parses and prints the current config loaded.
ä./PrintConfigCommand/Run˘
-*+PrintConfigCommand/Run/$config_command1/errerrvar"!cmd/influxd/run/config_command.go(ß0º@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä-./PrintConfigCommand/Run/$config_command1/err˘
-*+PrintConfigCommand/Run/$config_command3/errerrvar"!cmd/influxd/run/config_command.go(´0Ã@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä-./PrintConfigCommand/Run/$config_command3/err˘
-*+PrintConfigCommand/Run/$config_command5/errerrvar"!cmd/influxd/run/config_command.go(ë
0©
@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä-./PrintConfigCommand/Run/$config_command5/errÃ
*PrintConfigCommand/Run/argsargsvar"!cmd/influxd/run/config_command.go(©0∑@R‘{
        "PkgName": "run",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Run/argsπ
*PrintConfigCommand/Run/cmdcmdvar"!cmd/influxd/run/config_command.go(å0£@Rƒ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Run/cmd™
*PrintConfigCommand/Run/configconfigvar"!cmd/influxd/run/config_command.go(˘0§@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Run/config‹
#*!PrintConfigCommand/Run/configPath
configPathvar"!cmd/influxd/run/config_command.go(å0µ@R“{
        "PkgName": "run",
        "TypeString": "*string",
        "UnderlyingTypeString": "*string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä#./PrintConfigCommand/Run/configPath◊
*PrintConfigCommand/Run/errerrvar"!cmd/influxd/run/config_command.go(˘0§@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Run/err–
*PrintConfigCommand/Run/fsfsvar"!cmd/influxd/run/config_command.go(€0ä@Rﬁ{
        "PkgName": "run",
        "TypeString": "*flag.FlagSet",
        "UnderlyingTypeString": "*flag.FlagSet",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Run/fs÷
!*PrintConfigCommand/Run/hostnamehostnamevar"!cmd/influxd/run/config_command.go(∑0‡@R“{
        "PkgName": "run",
        "TypeString": "*string",
        "UnderlyingTypeString": "*string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./PrintConfigCommand/Run/hostname◊
*PrintConfigCommand/StderrStderrfield"!cmd/influxd/run/config_command.go(‰0Ù8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "PrintConfigCommand",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Stderr”
*PrintConfigCommand/StdinStdinfield"!cmd/influxd/run/config_command.go(¿0–8Rﬁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "PrintConfigCommand",
        "TypeString": "io.Reader",
        "UnderlyingTypeString": "interface{Read(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Stdin◊
*PrintConfigCommand/StdoutStdoutfield"!cmd/influxd/run/config_command.go(“0‚8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "PrintConfigCommand",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./PrintConfigCommand/Stdoutî
 *PrintConfigCommand/parseConfigparseConfigfunc"!cmd/influxd/run/config_command.go(È0ﬁR™{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*PrintConfigCommand",
        "TypeString": "func(path string) (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "UnderlyingTypeString": "func(path string) (*github.com/influxdb/influxdb/cmd/influxd/run.Config, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Zd

text/plainVParseConfig parses the config at path.
Returns a demo configuration if path is blank.
ä ./PrintConfigCommand/parseConfigâ
5*3PrintConfigCommand/parseConfig/$config_command1/errerrvar"!cmd/influxd/run/config_command.go(˝0•@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä5./PrintConfigCommand/parseConfig/$config_command1/err…
$*"PrintConfigCommand/parseConfig/cmdcmdvar"!cmd/influxd/run/config_command.go(Ô0Ü@Rƒ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.PrintConfigCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./PrintConfigCommand/parseConfig/cmd∫
'*%PrintConfigCommand/parseConfig/configconfigvar"!cmd/influxd/run/config_command.go(„0¯@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./PrintConfigCommand/parseConfig/configÿ
%*#PrintConfigCommand/parseConfig/pathpathvar"!cmd/influxd/run/config_command.go(î0ü@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./PrintConfigCommand/parseConfig/pathÍ

*ServerServertype"cmd/influxd/run/server.go(¶0•8RŸ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "struct{version string; err chan error; closing chan struct{}; Hostname string; BindAddress string; Listener net.Listener; MetaStore *github.com/influxdb/influxdb/meta.Store; TSDBStore *github.com/influxdb/influxdb/tsdb.Store; QueryExecutor *github.com/influxdb/influxdb/tsdb.QueryExecutor; PointsWriter *github.com/influxdb/influxdb/cluster.PointsWriter; ShardWriter *github.com/influxdb/influxdb/cluster.ShardWriter; ShardMapper *github.com/influxdb/influxdb/cluster.ShardMapper; HintedHandoff *github.com/influxdb/influxdb/services/hh.Service; Services []github.com/influxdb/influxdb/cmd/influxd/run.Service; ClusterService *github.com/influxdb/influxdb/cluster.Service; SnapshotterService *github.com/influxdb/influxdb/services/snapshotter.Service; reportingDisabled bool; CPUProfile string; MemProfile string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z≈

text/plain∂Server represents a container for the metadata and storage data and services.
It is built using a Config and it manages the startup and shutdown of all
services in the proper order.
ä./Serverê
*Server/BindAddressBindAddressfield"cmd/influxd/run/server.go(ô	0´	8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/BindAddressß
*Server/CPUProfile
CPUProfilefield"cmd/influxd/run/server.go(ˇ0ê8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z

text/plain
Profiling
ä./Server/CPUProfile“
*Server/CloseClosefunc"cmd/influxd/run/server.go(ºH0ñK8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZJ

text/plain<Close shuts down the meta and data stores and all services.
ä./Server/Closeï
*Server/Close/$server4/serviceservicevar"cmd/influxd/run/server.go(ºH0ñK@Rû{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "UnderlyingTypeString": "interface{Close() error; Open() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Close/$server4/serviceˇ
*Server/Close/ssvar"cmd/influxd/run/server.go(¬H0ÀH@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Close/s®
*Server/ClusterServiceClusterServicefield"cmd/influxd/run/server.go(Ù0ó8R˜{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/cluster.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.Service",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z?

text/plain1These references are required for the tcp muxer.
ä./Server/ClusterServiceâ
*
Server/ErrErrfunc"cmd/influxd/run/server.go(÷70ä88R {
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func() \u003c-chan error",
        "UnderlyingTypeString": "func() \u003c-chan error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Zo

text/plainaErr returns an error channel that multiplexes all out of band errors received from all services.
ä./Server/Err˚
*Server/Err/ssvar"cmd/influxd/run/server.go(‹70Â7@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Err/sÏ
*Server/HintedHandoffHintedHandofffield"cmd/influxd/run/server.go(é0ß8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/HintedHandoffá
*Server/HostnameHostnamefield"cmd/influxd/run/server.go(Ö	0ó	8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Hostname“
*Server/ListenerListenerfield"cmd/influxd/run/server.go(≠	0≈	8RÙ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Listenerç
*Server/MemProfile
MemProfilefield"cmd/influxd/run/server.go(í0£8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/MemProfileŒ
*Server/MetaStore	MetaStorefield"cmd/influxd/run/server.go(»	0·	8RÌ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/MetaStore»
*Server/OpenOpenfunc"cmd/influxd/run/server.go(ƒ80˚G8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZC

text/plain5Open opens the meta and data store and all services.
ä./Server/OpenÔ
,**Server/Open/$server0/$server0/$server4/errerrvar"cmd/influxd/run/server.go(·A0˙A@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä,./Server/Open/$server0/$server0/$server4/errÔ
,**Server/Open/$server0/$server0/$server5/errerrvar"cmd/influxd/run/server.go(≈C0ﬁC@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä,./Server/Open/$server0/$server0/$server5/errÔ
,**Server/Open/$server0/$server0/$server6/errerrvar"cmd/influxd/run/server.go(ÕD0ÍD@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä,./Server/Open/$server0/$server0/$server6/errì
>*<Server/Open/$server0/$server0/$server7/$server0/$server0/errerrvar"cmd/influxd/run/server.go(‡E0ıE@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä>./Server/Open/$server0/$server0/$server7/$server0/$server0/err∑
0*.Server/Open/$server0/$server0/$server7/serviceservicevar"cmd/influxd/run/server.go(Ë80¬G@Rû{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "UnderlyingTypeString": "interface{Close() error; Open() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä0./Server/Open/$server0/$server0/$server7/service⁄
$*"Server/Open/$server0/$server0/addraddrvar"cmd/influxd/run/server.go(º:0Ï:@R‹{
        "PkgName": "run",
        "TypeString": "*net.TCPAddr",
        "UnderlyingTypeString": "*net.TCPAddr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Server/Open/$server0/$server0/addr›
#*!Server/Open/$server0/$server0/errerrvar"cmd/influxd/run/server.go( 90È9@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä#./Server/Open/$server0/$server0/errŒ
$*"Server/Open/$server0/$server0/hosthostvar"cmd/influxd/run/server.go( 90È9@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Server/Open/$server0/$server0/host⁄
(*&Server/Open/$server0/$server0/hostporthostportvar"cmd/influxd/run/server.go(ë:0π:@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä(./Server/Open/$server0/$server0/hostportì
"* Server/Open/$server0/$server0/lnlnvar"cmd/influxd/run/server.go(≥<0ﬁ<@Rõ{
        "PkgName": "run",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/Open/$server0/$server0/lnâ
#*!Server/Open/$server0/$server0/muxmuxvar"cmd/influxd/run/server.go(Î>0˛>@Ré{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/tcp.Mux",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tcp.Mux",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä#./Server/Open/$server0/$server0/muxŒ
$*"Server/Open/$server0/$server0/portportvar"cmd/influxd/run/server.go( 90È9@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Server/Open/$server0/$server0/portÀ
*Server/Open/$server0/errerrvar"cmd/influxd/run/server.go(Ë80¬G@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Open/$server0/err˝
*Server/Open/ssvar"cmd/influxd/run/server.go( 80”8@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/Open/sÎ
*Server/PointsWriterPointsWriterfield"cmd/influxd/run/server.go(°
0ƒ
8RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/cluster.PointsWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.PointsWriter",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/PointsWriterÍ
*Server/QueryExecutorQueryExecutorfield"cmd/influxd/run/server.go(˛	0ü
8R˝{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.QueryExecutor",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/QueryExecutorÁ
*Server/ServicesServicesfield"cmd/influxd/run/server.go(™0º8Râ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "[]github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/ServicesÊ
*Server/ShardMapperShardMapperfield"cmd/influxd/run/server.go(Í
0å8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/cluster.ShardMapper",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.ShardMapper",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/ShardMapperÊ
*Server/ShardWriterShardWriterfield"cmd/influxd/run/server.go(∆
0Ë
8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/cluster.ShardWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.ShardWriter",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/ShardWriterç
*Server/SnapshotterServiceSnapshotterServicefield"cmd/influxd/run/server.go(ô0¿8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/services/snapshotter.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/snapshotter.Service",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/SnapshotterServiceŒ
*Server/TSDBStore	TSDBStorefield"cmd/influxd/run/server.go(„	0¸	8RÌ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.Store",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/TSDBStoreÌ
*Server/appendAdminServiceappendAdminServicefunc"cmd/influxd/run/server.go(÷%0Ï&RÙ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/admin.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/admin.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendAdminService∞
*Server/appendAdminService/ccvar"cmd/influxd/run/server.go(˙%0à&@R√{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/admin.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; HttpsEnabled bool \"toml:\\\"https-enabled\\\"\"; HttpsCertificate string \"toml:\\\"https-certificate\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendAdminService/cô
*Server/appendAdminService/ssvar"cmd/influxd/run/server.go(‹%0Â%@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendAdminService/sü
*Server/appendAdminService/srvsrvvar"cmd/influxd/run/server.go(™&0ƒ&@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/admin.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/admin.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendAdminService/srvÂ
*Server/appendClusterServiceappendClusterServicefunc"cmd/influxd/run/server.go(— 0¢"RÊ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/cluster.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/cluster.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendClusterServiceÃ
*Server/appendClusterService/ccvar"cmd/influxd/run/server.go(˜ 0á!@R€{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cluster.Config",
        "UnderlyingTypeString": "struct{ForceRemoteShardMapping bool \"toml:\\\"force-remote-mapping\\\"\"; WriteTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"write-timeout\\\"\"; ShardWriterTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"shard-writer-timeout\\\"\"; ShardMapperTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"shard-mapper-timeout\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendClusterService/cù
*Server/appendClusterService/ssvar"cmd/influxd/run/server.go(◊ 0‡ @R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendClusterService/sï
!*Server/appendClusterService/srvsrvvar"cmd/influxd/run/server.go(å!0®!@Rû{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cluster.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./Server/appendClusterService/srv¸
*Server/appendCollectdServiceappendCollectdServicefunc"cmd/influxd/run/server.go(ˇ*0ﬁ,R˙{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/collectd.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/collectd.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendCollectdService›
 *Server/appendCollectdService/ccvar"cmd/influxd/run/server.go(¶+0∑+@RÍ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/collectd.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; RetentionPolicy string \"toml:\\\"retention-policy\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchDuration github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"; TypesDB string \"toml:\\\"typesdb\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendCollectdService/cü
 *Server/appendCollectdService/ssvar"cmd/influxd/run/server.go(Ö+0é+@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendCollectdService/s´
"* Server/appendCollectdService/srvsrvvar"cmd/influxd/run/server.go(Ÿ+0ˆ+@R≤{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/collectd.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/collectd.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendCollectdService/srv•
%*#Server/appendContinuousQueryServiceappendContinuousQueryServicefunc"cmd/influxd/run/server.go(—406Ré{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/continuous_querier.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/continuous_querier.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Server/appendContinuousQueryService≤
'*%Server/appendContinuousQueryService/ccvar"cmd/influxd/run/server.go(ˇ40ö5@R±{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/continuous_querier.Config",
        "UnderlyingTypeString": "struct{LogEnabled bool \"toml:\\\"log-enabled\\\"\"; Enabled bool \"toml:\\\"enabled\\\"\"; RecomputePreviousN int \"toml:\\\"recompute-previous-n\\\"\"; RecomputeNoOlderThan github.com/influxdb/influxdb/toml.Duration \"toml:\\\"recompute-no-older-than\\\"\"; ComputeRunsPerInterval int \"toml:\\\"compute-runs-per-interval\\\"\"; ComputeNoMoreThan github.com/influxdb/influxdb/toml.Duration \"toml:\\\"compute-no-more-than\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./Server/appendContinuousQueryService/c≠
'*%Server/appendContinuousQueryService/ssvar"cmd/influxd/run/server.go(◊40‡4@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./Server/appendContinuousQueryService/sÕ
)*'Server/appendContinuousQueryService/srvsrvvar"cmd/influxd/run/server.go(º50„5@R∆{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/continuous_querier.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/continuous_querier.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/appendContinuousQueryService/srvà
*Server/appendGraphiteServiceappendGraphiteServicefunc"cmd/influxd/run/server.go(˝.0ô1RÜ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/graphite.Config) error",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/graphite.Config) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendGraphiteService·
 *Server/appendGraphiteService/ccvar"cmd/influxd/run/server.go(§/0µ/@RÓ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/graphite.Config",
        "UnderlyingTypeString": "struct{BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; Enabled bool \"toml:\\\"enabled\\\"\"; Protocol string \"toml:\\\"protocol\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"; ConsistencyLevel string \"toml:\\\"consistency-level\\\"\"; Templates []string \"toml:\\\"templates\\\"\"; Tags []string \"toml:\\\"tags\\\"\"; Separator string \"toml:\\\"separator\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendGraphiteService/c€
"* Server/appendGraphiteService/errerrvar"cmd/influxd/run/server.go(·/0É0@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendGraphiteService/errü
 *Server/appendGraphiteService/ssvar"cmd/influxd/run/server.go(É/0å/@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendGraphiteService/s´
"* Server/appendGraphiteService/srvsrvvar"cmd/influxd/run/server.go(·/0É0@R≤{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/graphite.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/graphite.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendGraphiteService/srvÌ
*Server/appendHTTPDServiceappendHTTPDServicefunc"cmd/influxd/run/server.go(Ó&0˝*RÙ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/httpd.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/httpd.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendHTTPDServiceÚ
=*;Server/appendHTTPDService/$server1/$server0/$server0/cqsrvccqsrvcvar"cmd/influxd/run/server.go(‰)0ù*@R¿{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/continuous_querier.ContinuousQuerier",
        "UnderlyingTypeString": "interface{Run(database string, name string) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä=./Server/appendHTTPDService/$server1/$server0/$server0/cqsrvcÚ
9*7Server/appendHTTPDService/$server1/$server0/$server0/okokvar"cmd/influxd/run/server.go(‰)0ù*@RÃ{
        "PkgName": "run",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä9./Server/appendHTTPDService/$server1/$server0/$server0/ok¶
)*'Server/appendHTTPDService/$server1/srvcsrvcvar"cmd/influxd/run/server.go(Ó&0˝*@Rû{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "UnderlyingTypeString": "interface{Close() error; Open() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/appendHTTPDService/$server1/srvcÚ
*Server/appendHTTPDService/ccvar"cmd/influxd/run/server.go(í'0†'@RÖ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/httpd.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; AuthEnabled bool \"toml:\\\"auth-enabled\\\"\"; LogEnabled bool \"toml:\\\"log-enabled\\\"\"; WriteTracing bool \"toml:\\\"write-tracing\\\"\"; PprofEnabled bool \"toml:\\\"pprof-enabled\\\"\"; HttpsEnabled bool \"toml:\\\"https-enabled\\\"\"; HttpsCertificate string \"toml:\\\"https-certificate\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendHTTPDService/cô
*Server/appendHTTPDService/ssvar"cmd/influxd/run/server.go(Ù&0˝&@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendHTTPDService/sü
*Server/appendHTTPDService/srvsrvvar"cmd/influxd/run/server.go(¬'0‹'@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/httpd.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/httpd.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendHTTPDService/srvà
*Server/appendOpenTSDBServiceappendOpenTSDBServicefunc"cmd/influxd/run/server.go(‡,0˚.RÜ{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/opentsdb.Config) error",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/opentsdb.Config) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendOpenTSDBServiceÀ
 *Server/appendOpenTSDBService/ccvar"cmd/influxd/run/server.go(á-0ò-@Rÿ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/opentsdb.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; RetentionPolicy string \"toml:\\\"retention-policy\\\"\"; ConsistencyLevel string \"toml:\\\"consistency-level\\\"\"; TLSEnabled bool \"toml:\\\"tls-enabled\\\"\"; Certificate string \"toml:\\\"certificate\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendOpenTSDBService/c€
"* Server/appendOpenTSDBService/errerrvar"cmd/influxd/run/server.go(ƒ-0Ê-@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendOpenTSDBService/errü
 *Server/appendOpenTSDBService/ssvar"cmd/influxd/run/server.go(Ê,0Ô,@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendOpenTSDBService/s´
"* Server/appendOpenTSDBService/srvsrvvar"cmd/influxd/run/server.go(ƒ-0Ê-@R≤{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/opentsdb.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/opentsdb.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendOpenTSDBService/srví
 *Server/appendPrecreatorServiceappendPrecreatorServicefunc"cmd/influxd/run/server.go(õ10ö3Rä{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/precreator.Config) error",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/precreator.Config) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä ./Server/appendPrecreatorService”
"* Server/appendPrecreatorService/ccvar"cmd/influxd/run/server.go(ƒ10◊1@R‹{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/precreator.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; CheckInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"check-interval\\\"\"; AdvancePeriod github.com/influxdb/influxdb/toml.Duration \"toml:\\\"advance-period\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendPrecreatorService/cﬂ
$*"Server/appendPrecreatorService/errerrvar"cmd/influxd/run/server.go(É20ß2@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Server/appendPrecreatorService/err£
"* Server/appendPrecreatorService/ssvar"cmd/influxd/run/server.go(°10™1@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/appendPrecreatorService/s≥
$*"Server/appendPrecreatorService/srvsrvvar"cmd/influxd/run/server.go(É20ß2@R∂{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/precreator.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/precreator.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./Server/appendPrecreatorService/srvì
%*#Server/appendRetentionPolicyServiceappendRetentionPolicyServicefunc"cmd/influxd/run/server.go(Ú#0‘%R¸{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/retention.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/retention.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Server/appendRetentionPolicyServiceÇ
'*%Server/appendRetentionPolicyService/ccvar"cmd/influxd/run/server.go(†$0≤$@RÅ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/retention.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; CheckInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"check-interval\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./Server/appendRetentionPolicyService/c≠
'*%Server/appendRetentionPolicyService/ssvar"cmd/influxd/run/server.go(¯#0Å$@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./Server/appendRetentionPolicyService/sª
)*'Server/appendRetentionPolicyService/srvsrvvar"cmd/influxd/run/server.go(‘$0Ú$@R¥{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/retention.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/retention.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/appendRetentionPolicyService/srvó
!*Server/appendSnapshotterServiceappendSnapshotterServicefunc"cmd/influxd/run/server.go(§"0#Rå{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./Server/appendSnapshotterService•
#*!Server/appendSnapshotterService/ssvar"cmd/influxd/run/server.go(™"0≥"@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä#./Server/appendSnapshotterService/s∑
%*#Server/appendSnapshotterService/srvsrvvar"cmd/influxd/run/server.go(”"0Ú"@R∏{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/snapshotter.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/snapshotter.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Server/appendSnapshotterService/srv„
*Server/appendUDPServiceappendUDPServicefunc"cmd/influxd/run/server.go(ú30œ4R{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(c github.com/influxdb/influxdb/services/udp.Config)",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/udp.Config)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendUDPServiceÍ
*Server/appendUDPService/ccvar"cmd/influxd/run/server.go(æ30 3@RÅ{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendUDPService/cï
*Server/appendUDPService/ssvar"cmd/influxd/run/server.go(¢30´3@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendUDPService/só
*Server/appendUDPService/srvsrvvar"cmd/influxd/run/server.go(Ï30Ñ4@R®{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/appendUDPService/srvˆ
*Server/closingclosingfield"cmd/influxd/run/server.go(Ì0Ç	Rù{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/closing‰
*
Server/errerrfield"cmd/influxd/run/server.go(Ÿ0ÎRó{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/err˘
*Server/hostAddrhostAddrfunc"cmd/influxd/run/server.go(Æ[0°`Rº{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func() (string, string, error)",
        "UnderlyingTypeString": "func() (string, string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z`

text/plainRhostAddr returns the host and port that remote nodes will use to reach this
node.
ä./Server/hostAddrÂ
'*%Server/hostAddr/$server1/$server0/errerrvar"cmd/influxd/run/server.go( ^0Ä_@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä'./Server/hostAddr/$server1/$server0/errﬂ
+*)Server/hostAddr/$server1/$server0/hostArghostArgvar"cmd/influxd/run/server.go( ^0Ä_@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä+./Server/hostAddr/$server1/$server0/hostArgﬂ
+*)Server/hostAddr/$server1/$server0/portArgportArgvar"cmd/influxd/run/server.go( ^0Ä_@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä+./Server/hostAddr/$server1/$server0/portArg¡
*Server/hostAddr/errerrvar"cmd/influxd/run/server.go(Ç\0≤\@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/hostAddr/err≤
*Server/hostAddr/hosthostvar"cmd/influxd/run/server.go(Ñ]0ñ]@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/hostAddr/host≤
*Server/hostAddr/portportvar"cmd/influxd/run/server.go(Ç\0≤\@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/hostAddr/portÖ
*Server/hostAddr/ssvar"cmd/influxd/run/server.go(¥[0Ω[@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/hostAddr/sÇ
*Server/monitorErrorChanmonitorErrorChanfunc"cmd/influxd/run/server.go(£Y0‘ZR¥{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func(ch \u003c-chan error)",
        "UnderlyingTypeString": "func(ch \u003c-chan error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZY

text/plainKmonitorErrorChan reads an error channel and resends it through the server.
ä./Server/monitorErrorChaná
8*6Server/monitorErrorChan/$server0/$server0/$server0/errerrvar"cmd/influxd/run/server.go(ÒY0ÄZ@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä8./Server/monitorErrorChan/$server0/$server0/$server0/errÓ
7*5Server/monitorErrorChan/$server0/$server0/$server0/okokvar"cmd/influxd/run/server.go(ÒY0ÄZ@RÃ{
        "PkgName": "run",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä7./Server/monitorErrorChan/$server0/$server0/$server0/ok“
*Server/monitorErrorChan/chchvar"cmd/influxd/run/server.go(≈Y0‘Y@RÊ{
        "PkgName": "run",
        "TypeString": "\u003c-chan error",
        "UnderlyingTypeString": "\u003c-chan error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/monitorErrorChan/chï
*Server/monitorErrorChan/ssvar"cmd/influxd/run/server.go(©Y0≤Y@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/monitorErrorChan/sø
*Server/reportServerreportServerfunc"cmd/influxd/run/server.go(ÁN0”XRå{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZJ

text/plain<reportServer reports anonymous statistics about the system.
ä./Server/reportServer©
)*'Server/reportServer/$server1/$server0/ddvar"cmd/influxd/run/server.go(ÙP0õQ@R§{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.DatabaseIndex",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/reportServer/$server1/$server0/dœ
)*'Server/reportServer/$server1/$server0/mmvar"cmd/influxd/run/server.go(ÌQ0êR@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/reportServer/$server1/$server0/mœ
)*'Server/reportServer/$server1/$server0/ssvar"cmd/influxd/run/server.go(ÌQ0êR@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä)./Server/reportServer/$server1/$server0/s∞
!*Server/reportServer/$server1/didivar"cmd/influxd/run/server.go(ÁN0”X@R∫{
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä!./Server/reportServer/$server1/di„
*Server/reportServer/clientclientvar"cmd/influxd/run/server.go(°W0ﬂW@RÛ{
        "PkgName": "run",
        "TypeString": "net/http.Client",
        "UnderlyingTypeString": "struct{Transport net/http.RoundTripper; CheckRedirect func(req *net/http.Request, via []*net/http.Request) error; Jar net/http.CookieJar; Timeout time.Duration}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/client…
*Server/reportServer/clusterID	clusterIDvar"cmd/influxd/run/server.go(æR0ÁR@R–{
        "PkgName": "run",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/clusterID»
*Server/reportServer/datadatavar"cmd/influxd/run/server.go(∂V0ŸV@Rﬁ{
        "PkgName": "run",
        "TypeString": "*bytes.Buffer",
        "UnderlyingTypeString": "*bytes.Buffer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/dataã
*Server/reportServer/disdisvar"cmd/influxd/run/server.go(äO0≠O@R§{
        "PkgName": "run",
        "TypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/dis…
*Server/reportServer/errerrvar"cmd/influxd/run/server.go(äO0≠O@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/err∫
*Server/reportServer/jsonjsonvar"cmd/influxd/run/server.go(‘S0≥V@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/jsonÃ
"* Server/reportServer/numDatabasesnumDatabasesvar"cmd/influxd/run/server.go(òP0∞P@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./Server/reportServer/numDatabases’
%*#Server/reportServer/numMeasurementsnumMeasurementsvar"cmd/influxd/run/server.go(≥P0«P@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä%./Server/reportServer/numMeasurements√
*Server/reportServer/numSeries	numSeriesvar"cmd/influxd/run/server.go(…P0◊P@R {
        "PkgName": "run",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/numSeriesç
*Server/reportServer/ssvar"cmd/influxd/run/server.go(ÌN0ˆN@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/reportServer/s£
*Server/reportingDisabledreportingDisabledfield"cmd/influxd/run/server.go(ÿ0ÓRã{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }Z

text/plainServer reporting
ä./Server/reportingDisabled“
*Server/startServerReportingstartServerReportingfunc"cmd/influxd/run/server.go(“K0¶NRå{
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*Server",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZE

text/plain7startServerReporting starts periodic server reporting.
ä./Server/startServerReportingè
<*:Server/startServerReporting/$server0/$server0/$server1/errerrvar"cmd/influxd/run/server.go(¿L0ÚL@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä<./Server/startServerReporting/$server0/$server0/$server1/errù
*Server/startServerReporting/ssvar"cmd/influxd/run/server.go(ÿK0·K@R¨{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.Server",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/startServerReporting/sË
*Server/versionversionfield"cmd/influxd/run/server.go(∑0≈Rè{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "Server",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Server/version‰
	*ServiceServicetype"cmd/influxd/run/server.go(‡`0ía8R”{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.Service",
        "UnderlyingTypeString": "interface{Close() error; Open() error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZC

text/plain5Service represents a service attached to the server.
ä	./Serviceà
*Service/CloseClosefunc"cmd/influxd/run/server.go(Éa0êa8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "Service",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Service/CloseÖ
*Service/OpenOpenfunc"cmd/influxd/run/server.go(ı`0Åa8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "Service",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./Service/Openø
*logologoconst"cmd/influxd/run/command.go(ß0‘R¸{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./logo÷
*printConfigUsageprintConfigUsagevar"!cmd/influxd/run/config_command.go(‰0≥RÍ{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./printConfigUsage•
*profprofvar"cmd/influxd/run/server.go(Œa0˘aR¢{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "struct{cpu *os.File; mem *os.File}",
        "UnderlyingTypeString": "struct{cpu *os.File; mem *os.File}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZA

text/plain3prof stores the file locations of active profiles.
ä./profπ

*prof/cpucpufield"cmd/influxd/run/server.go(›a0ÈaR{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä
./prof/cpuπ

*prof/memmemfield"cmd/influxd/run/server.go(Îa0˜aR{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä
./prof/memﬂ
*startProfilestartProfilefunc"cmd/influxd/run/server.go(¡b0∑fR≥{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func(cpuprofile string, memprofile string)",
        "UnderlyingTypeString": "func(cpuprofile string, memprofile string)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZQ

text/plainCStartProfile initializes the cpu and memory profile, if specified.
ä./startProfileﬂ
$*"startProfile/$server0/$server0/errerrvar"cmd/influxd/run/server.go(çc0¨c@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./startProfile/$server0/$server0/errÀ
"* startProfile/$server0/$server0/ffvar"cmd/influxd/run/server.go(çc0¨c@R‘{
        "PkgName": "run",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./startProfile/$server0/$server0/fﬂ
$*"startProfile/$server1/$server0/errerrvar"cmd/influxd/run/server.go(Ôd0ée@R‚{
        "PkgName": "run",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä$./startProfile/$server1/$server0/errÀ
"* startProfile/$server1/$server0/ffvar"cmd/influxd/run/server.go(Ôd0ée@R‘{
        "PkgName": "run",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä"./startProfile/$server1/$server0/fæ
*startProfile/cpuprofile
cpuprofilevar"cmd/influxd/run/server.go(”b0b@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./startProfile/cpuprofileæ
*startProfile/memprofile
memprofilevar"cmd/influxd/run/server.go(”b0b@R–{
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./startProfile/memprofileï
*stopProfilestopProfilefunc"cmd/influxd/run/server.go(Äg0˝hRÎ{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ZR

text/plainDStopProfile closes the cpu and memory profiles if they are running.
ä./stopProfile
	*tcpaddrtcpaddrtype"cmd/influxd/run/server.go(Ñi0°iR¶{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "github.com/influxdb/influxdb/cmd/influxd/run.tcpaddr",
        "UnderlyingTypeString": "struct{host string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä	./tcpaddrë
*tcpaddr/NetworkNetworkfunc"cmd/influxd/run/server.go(£i0÷i8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*tcpaddr",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./tcpaddr/Networká
*tcpaddr/Network/aavar"cmd/influxd/run/server.go(©i0≥i@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.tcpaddr",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.tcpaddr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./tcpaddr/Network/aé
*tcpaddr/StringStringfunc"cmd/influxd/run/server.go(◊i0ãj8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "run",
        "Receiver": "*tcpaddr",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./tcpaddr/StringÖ
*tcpaddr/String/aavar"cmd/influxd/run/server.go(›i0Ái@RÆ{
        "PkgName": "run",
        "TypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.tcpaddr",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cmd/influxd/run.tcpaddr",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./tcpaddr/String/a‚
*tcpaddr/hosthostfield"cmd/influxd/run/server.go(îi0üiRê{
        "PkgScope": true,
        "PkgName": "run",
        "FieldOfStruct": "tcpaddr",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./tcpaddr/hostÆ
*usageusagevar"cmd/influxd/run/command.go(ø(0ü-RÍ{
        "PkgScope": true,
        "PkgName": "run",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/cmd/influxd/run"
      }ä./usage