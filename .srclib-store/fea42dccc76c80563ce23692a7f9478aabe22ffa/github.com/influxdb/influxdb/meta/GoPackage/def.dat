ê
*$rpc/$rpc5/hosthostvar"meta/rpc.go(Á0Ú@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$rpc/$rpc5/hostê
*$rpc/$rpc6/hosthostvar"meta/rpc.go(á0í@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$rpc/$rpc6/hostê
*$rpc/$rpc7/hosthostvar"meta/rpc.go(¥0ø@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$rpc/$rpc7/hostÈ
4*2$statement_executor/$statement_executor10/databasedatabasevar"meta/statement_executor.go(˜0å@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor10/database›
0*.$statement_executor/$statement_executor10/namenamevar"meta/statement_executor.go(˜0å@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor10/name‹
1*/$statement_executor/$statement_executor12/adminadminvar"meta/statement_executor.go(◊0·@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./$statement_executor/$statement_executor12/admin›
0*.$statement_executor/$statement_executor12/namenamevar"meta/statement_executor.go(¿0’@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor12/nameÈ
4*2$statement_executor/$statement_executor12/passwordpasswordvar"meta/statement_executor.go(¿0’@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor12/password›
0*.$statement_executor/$statement_executor13/namenamevar"meta/statement_executor.go(É0ò@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor13/nameÈ
4*2$statement_executor/$statement_executor13/passwordpasswordvar"meta/statement_executor.go(É0ò@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor13/password›
0*.$statement_executor/$statement_executor14/namenamevar"meta/statement_executor.go(´0∂@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor14/nameÈ
4*2$statement_executor/$statement_executor15/databasedatabasevar"meta/statement_executor.go(Õ0Ê@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor15/database˙
-*+$statement_executor/$statement_executor15/ppvar"meta/statement_executor.go(Ë0¸@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./$statement_executor/$statement_executor15/pÈ
4*2$statement_executor/$statement_executor15/usernameusernamevar"meta/statement_executor.go(Õ0Ê@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor15/username‹
1*/$statement_executor/$statement_executor16/adminadminvar"meta/statement_executor.go(©0≥@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./$statement_executor/$statement_executor16/adminÈ
4*2$statement_executor/$statement_executor16/usernameusernamevar"meta/statement_executor.go(ò0ß@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor16/usernameÈ
4*2$statement_executor/$statement_executor17/usernameusernamevar"meta/statement_executor.go(Ã0€@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor17/usernameÈ
4*2$statement_executor/$statement_executor18/databasedatabasevar"meta/statement_executor.go(î	0≠	@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor18/databaseÈ
4*2$statement_executor/$statement_executor18/usernameusernamevar"meta/statement_executor.go(î	0≠	@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor18/usernameÈ
4*2$statement_executor/$statement_executor19/databasedatabasevar"meta/statement_executor.go(Â	0Å
@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor19/database›
0*.$statement_executor/$statement_executor19/namenamevar"meta/statement_executor.go(Â	0Å
@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor19/name‡
1*/$statement_executor/$statement_executor19/queryqueryvar"meta/statement_executor.go(Â	0Å
@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./$statement_executor/$statement_executor19/query€
/*-$statement_executor/$statement_executor2/namenamevar"meta/statement_executor.go(å0ó@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./$statement_executor/$statement_executor2/nameÈ
4*2$statement_executor/$statement_executor20/databasedatabasevar"meta/statement_executor.go(ü
0¥
@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./$statement_executor/$statement_executor20/database›
0*.$statement_executor/$statement_executor20/namenamevar"meta/statement_executor.go(ü
0¥
@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./$statement_executor/$statement_executor20/name€
/*-$statement_executor/$statement_executor4/namenamevar"meta/statement_executor.go(Á0Ú@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./$statement_executor/$statement_executor4/name€
/*-$statement_executor/$statement_executor5/namenamevar"meta/statement_executor.go(ö0•@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./$statement_executor/$statement_executor5/nameÁ
3*1$statement_executor/$statement_executor6/databasedatabasevar"meta/statement_executor.go(«0÷@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./$statement_executor/$statement_executor6/databaseÁ
3*1$statement_executor/$statement_executor7/databasedatabasevar"meta/statement_executor.go(é0ù@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./$statement_executor/$statement_executor7/database∏
.*,$statement_executor/$statement_executor7/rpirpivar"meta/statement_executor.go(ü0∑@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../$statement_executor/$statement_executor7/rpiÁ
3*1$statement_executor/$statement_executor8/databasedatabasevar"meta/statement_executor.go(Ô0Ñ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./$statement_executor/$statement_executor8/database€
/*-$statement_executor/$statement_executor8/namenamevar"meta/statement_executor.go(Ô0Ñ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./$statement_executor/$statement_executor8/nameº
.*,$statement_executor/$statement_executor8/rpurpuvar"meta/statement_executor.go(Ü0†@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../$statement_executor/$statement_executor8/rpuÁ
3*1$statement_executor/$statement_executor9/databasedatabasevar"meta/statement_executor.go(ƒ0Ÿ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./$statement_executor/$statement_executor9/database€
/*-$statement_executor/$statement_executor9/namenamevar"meta/statement_executor.go(ƒ0Ÿ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./$statement_executor/$statement_executor9/name®
*$store/$store3/passwordpasswordvar"meta/store.go(Ö≈0î≈@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$store/$store3/passwordˇ
*$store/$store63/ddvar"meta/store.go(Ø‡0Ω‡@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$store/$store63/dŸ
*$store/$store63/rrvar"meta/store.go(ø‡0‘‡@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./$store/$store63/r◊
*.metapackage"meta8R¥{
        "Exported": true,
        "PkgName": "meta",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä.˝
*AddPeer$rpc607AddPeerfunc"meta/rpc.go(ﬂ0˘@R±{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func(host string) error",
        "UnderlyingTypeString": "func(host string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./AddPeer$rpc607∫
*AutoCreateRetentionPolicyNameAutoCreateRetentionPolicyNameconst"meta/store.go(ù0»8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z)

text/plainRetention policy settings.
ä./AutoCreateRetentionPolicyName∫
!*AutoCreateRetentionPolicyPeriodAutoCreateRetentionPolicyPeriodconst"meta/store.go( 0Ì8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z)

text/plainRetention policy settings.
ä!./AutoCreateRetentionPolicyPeriod‚
*
BcryptCost
BcryptCostvar"meta/store.go(°ƒ0∞ƒ8RÙ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z°

text/plainíBcryptCost is the cost associated with generating password with Bcrypt.
This setting is lowered during testing to improve test suite performance.
ä./BcryptCost©
*ConfigConfigtype"meta/config.go(±0Ç8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Config",
        "UnderlyingTypeString": "struct{Dir string \"toml:\\\"dir\\\"\"; Hostname string \"toml:\\\"hostname\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Peers []string \"toml:\\\"-\\\"\"; RetentionAutoCreate bool \"toml:\\\"retention-autocreate\\\"\"; ElectionTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"election-timeout\\\"\"; HeartbeatTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"heartbeat-timeout\\\"\"; LeaderLeaseTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"leader-lease-timeout\\\"\"; CommitTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"commit-timeout\\\"\"; ClusterTracing bool \"toml:\\\"cluster-tracing\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z8

text/plain*Config represents the meta configuration.
ä./Config˚
*Config/BindAddressBindAddressfield"meta/config.go(ß0ﬁ8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/BindAddressÄ
*Config/ClusterTracingClusterTracingfield"meta/config.go(∆
0Ä8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/ClusterTracing§
*Config/CommitTimeoutCommitTimeoutfield"meta/config.go(ã
0ƒ
8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/CommitTimeout„
*
Config/DirDirfield"meta/config.go(¬08Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/Dir™
*Config/ElectionTimeoutElectionTimeoutfield"meta/config.go(œ0ä	8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/ElectionTimeout≠
*Config/HeartbeatTimeoutHeartbeatTimeoutfield"meta/config.go(å	0»	8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/HeartbeatTimeoutÚ
*Config/HostnameHostnamefield"meta/config.go(Ú0•8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/Hostname≥
*Config/LeaderLeaseTimeoutLeaderLeaseTimeoutfield"meta/config.go( 	0â
8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/LeaderLeaseTimeoutÌ
*Config/PeersPeersfield"meta/config.go(‡0å8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/Peersè
*Config/RetentionAutoCreateRetentionAutoCreatefield"meta/config.go(é0Õ8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Config/RetentionAutoCreate¸
*ContinuousQueryInfoContinuousQueryInfotype"meta/data.go(‹“0ñ”8R≈{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "struct{Name string; Query string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBContinuousQueryInfo represents metadata about a continuous query.
ä./ContinuousQueryInfoç
*ContinuousQueryInfo/NameNamefield"meta/data.go(˙“0Ü”8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ContinuousQueryInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ContinuousQueryInfo/Nameê
*ContinuousQueryInfo/QueryQueryfield"meta/data.go(à”0î”8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ContinuousQueryInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ContinuousQueryInfo/Queryç
*ContinuousQueryInfo/cloneclonefunc"meta/data.go(Ω”0Ü‘R˙{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ContinuousQueryInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z0

text/plain"clone returns a deep copy of cqi.
ä./ContinuousQueryInfo/clone¯
*ContinuousQueryInfo/clone/cqicqivar"meta/data.go(√”0⁄”@Rê{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "struct{Name string; Query string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ContinuousQueryInfo/clone/cqi∂
*ContinuousQueryInfo/marshalmarshalfunc"meta/data.go(º‘0Û’Ré{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ContinuousQueryInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./ContinuousQueryInfo/marshal¸
!*ContinuousQueryInfo/marshal/cqicqivar"meta/data.go(¬‘0Ÿ‘@Rê{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "struct{Name string; Query string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./ContinuousQueryInfo/marshal/cqi«
*ContinuousQueryInfo/unmarshal	unmarshalfunc"meta/data.go(Ø÷0≤◊Rì{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ContinuousQueryInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./ContinuousQueryInfo/unmarshalñ
#*!ContinuousQueryInfo/unmarshal/cqicqivar"meta/data.go(µ÷0Õ÷@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./ContinuousQueryInfo/unmarshal/cqi•
"* ContinuousQueryInfo/unmarshal/pbpbvar"meta/data.go(Ÿ÷0˘÷@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./ContinuousQueryInfo/unmarshal/pbõ
.*,CreateContinuousQuery$statement_executor1231CreateContinuousQueryfunc"meta/statement_executor.go(œ	0à
@Rˆ{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, name string, query string) error",
        "UnderlyingTypeString": "func(database string, name string, query string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../CreateContinuousQuery$statement_executor1231¨
&*$CreateDatabase$statement_executor344CreateDatabasefunc"meta/statement_executor.go(ÿ0ä@Rû{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./CreateDatabase$statement_executor344‰
*CreateNode$rpc636
CreateNodefunc"meta/rpc.go(¸0¶@Rè{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./CreateNode$rpc636œ
-*+CreateRetentionPolicy$statement_executor504CreateRetentionPolicyfunc"meta/statement_executor.go(¯0÷@R¨{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "UnderlyingTypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./CreateRetentionPolicy$statement_executor504“
"* CreateUser$statement_executor821
CreateUserfunc"meta/statement_executor.go(µ0ı@R–{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "UnderlyingTypeString": "func(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./CreateUser$statement_executor821©
*DataDatatype"meta/data.go(¨0±8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "struct{Term uint64; Index uint64; ClusterID uint64; Nodes []github.com/influxdb/influxdb/meta.NodeInfo; Databases []github.com/influxdb/influxdb/meta.DatabaseInfo; Users []github.com/influxdb/influxdb/meta.UserInfo; MaxNodeID uint64; MaxShardGroupID uint64; MaxShardID uint64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:Data represents the top level collection of all metadata.
ä./DataÓ
*
Data/CloneClonefunc"meta/data.go(Æj0îo8RÍ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1Clone returns a copy of data with a new version.
ä./Data/Clone¨
#*!Data/Clone/$data0/$data0/$data0/iivar"meta/data.go(Æj0îo@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/Clone/$data0/$data0/$data0/i¨
#*!Data/Clone/$data1/$data0/$data0/iivar"meta/data.go(Æj0îo@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/Clone/$data1/$data0/$data0/i¨
#*!Data/Clone/$data2/$data0/$data0/iivar"meta/data.go(Æj0îo@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/Clone/$data2/$data0/$data0/i”
*Data/Clone/datadatavar"meta/data.go(¥j0æj@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Clone/data¬
*Data/Clone/otherothervar"meta/data.go(—j0ﬂj@RÙ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "struct{Term uint64; Index uint64; ClusterID uint64; Nodes []github.com/influxdb/influxdb/meta.NodeInfo; Databases []github.com/influxdb/influxdb/meta.DatabaseInfo; Users []github.com/influxdb/influxdb/meta.UserInfo; MaxNodeID uint64; MaxShardGroupID uint64; MaxShardID uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Clone/otherÌ
*Data/ClusterID	ClusterIDfield"meta/data.go(ê0†8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ClusterID¿
*Data/CreateContinuousQueryCreateContinuousQueryfunc"meta/data.go(ÖQ0›T8R˙{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string, query string) error",
        "UnderlyingTypeString": "func(database string, name string, query string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCCreateContinuousQuery adds a named continuous query to a database.
ä./Data/CreateContinuousQuery∞
%*#Data/CreateContinuousQuery/$data1/iivar"meta/data.go(ÖQ0›T@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/CreateContinuousQuery/$data1/iÛ
!*Data/CreateContinuousQuery/datadatavar"meta/data.go(ãQ0ïQ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/CreateContinuousQuery/dataΩ
%*#Data/CreateContinuousQuery/databasedatabasevar"meta/data.go(≠Q0…Q@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/CreateContinuousQuery/database˝
*Data/CreateContinuousQuery/didivar"meta/data.go(‘Q0ÒQ@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateContinuousQuery/di±
!*Data/CreateContinuousQuery/namenamevar"meta/data.go(≠Q0…Q@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/CreateContinuousQuery/name¥
"* Data/CreateContinuousQuery/queryqueryvar"meta/data.go(≠Q0…Q@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Data/CreateContinuousQuery/query®
*Data/CreateDatabaseCreateDatabasefunc"meta/data.go(˛0ì8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zã

text/plain}CreateDatabase creates a new database.
Returns an error if name is blank or if a database with the same name already exists.
ä./Data/CreateDatabaseÂ
*Data/CreateDatabase/datadatavar"meta/data.go(Ñ0é@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateDatabase/data£
*Data/CreateDatabase/namenamevar"meta/data.go(ü0™@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateDatabase/name∆
*Data/CreateNode
CreateNodefunc"meta/data.go(‚
0ò8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(host string) error",
        "UnderlyingTypeString": "func(host string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z6

text/plain(CreateNode adds a node to the metadata.
ä./Data/CreateNode›
*Data/CreateNode/datadatavar"meta/data.go(Ë
0Ú
@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateNode/dataõ
*Data/CreateNode/hosthostvar"meta/data.go(ˇ
0ä@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateNode/host»
*Data/CreateRetentionPolicyCreateRetentionPolicyfunc"meta/data.go(Ê0¨ 8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) error",
        "UnderlyingTypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zñ

text/plaináCreateRetentionPolicy creates a new retention policy on a database.
Returns an error if name is blank or if a database does not exist.
ä./Data/CreateRetentionPolicyÛ
!*Data/CreateRetentionPolicy/datadatavar"meta/data.go(Ï0ˆ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/CreateRetentionPolicy/dataΩ
%*#Data/CreateRetentionPolicy/databasedatabasevar"meta/data.go(é0ù@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/CreateRetentionPolicy/database˝
*Data/CreateRetentionPolicy/didivar"meta/data.go(˜0î@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateRetentionPolicy/dié
 *Data/CreateRetentionPolicy/rpirpivar"meta/data.go(ü0∑@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/CreateRetentionPolicy/rpi◊
*Data/CreateShardGroupCreateShardGroupfunc"meta/data.go(¡=0ÅL8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, policy string, timestamp time.Time) error",
        "UnderlyingTypeString": "func(database string, policy string, timestamp time.Time) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Ze

text/plainWCreateShardGroup creates a shard group on a database and policy for a given timestamp.
ä./Data/CreateShardGroup¶
 *Data/CreateShardGroup/$data4/iivar"meta/data.go(¡=0ÅL@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/CreateShardGroup/$data4/iÂ
:*8Data/CreateShardGroup/$data5/$data0/$data0/$data0/nodeIDnodeIDvar"meta/data.go(äJ0ºJ@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä:./Data/CreateShardGroup/$data5/$data0/$data0/$data0/nodeID¬
.*,Data/CreateShardGroup/$data5/$data0/$data0/jjvar"meta/data.go(ÎI0ÒI@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../Data/CreateShardGroup/$data5/$data0/$data0/jâ
(*&Data/CreateShardGroup/$data5/$data0/sisivar"meta/data.go(–I0‰I@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Data/CreateShardGroup/$data5/$data0/si¶
 *Data/CreateShardGroup/$data5/iivar"meta/data.go(¡=0ÅL@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/CreateShardGroup/$data5/iÈ
*Data/CreateShardGroup/datadatavar"meta/data.go(«=0—=@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/data≥
 *Data/CreateShardGroup/databasedatabasevar"meta/data.go(‰=0˚=@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/CreateShardGroup/database∂
*Data/CreateShardGroup/errerrvar"meta/data.go(õ?0Õ?@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/err∞
!*Data/CreateShardGroup/nodeIndex	nodeIndexvar"meta/data.go(˙H0∞I@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/CreateShardGroup/nodeIndex≠
*Data/CreateShardGroup/policypolicyvar"meta/data.go(‰=0˚=@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/policy≠
 *Data/CreateShardGroup/replicaNreplicaNvar"meta/data.go(àB0†B@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/CreateShardGroup/replicaNÑ
*Data/CreateShardGroup/rpirpivar"meta/data.go(õ?0Õ?@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/rpiÃ
*Data/CreateShardGroup/sgisgivar"meta/data.go(§E0ªE@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/sgiß
*Data/CreateShardGroup/shardNshardNvar"meta/data.go(…D0ÌD@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateShardGroup/shardN‰
!*Data/CreateShardGroup/timestamp	timestampvar"meta/data.go(˝=0ê>@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/CreateShardGroup/timestampÔ
*Data/CreateUser
CreateUserfunc"meta/data.go(˚Y0◊\8RÓ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string, hash string, admin bool) error",
        "UnderlyingTypeString": "func(name string, hash string, admin bool) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z-

text/plainCreateUser creates a new user.
ä./Data/CreateUserö
*Data/CreateUser/adminadminvar"meta/data.go(´Z0µZ@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateUser/admin›
*Data/CreateUser/datadatavar"meta/data.go(ÅZ0ãZ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateUser/dataõ
*Data/CreateUser/hashhashvar"meta/data.go(òZ0©Z@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateUser/hashõ
*Data/CreateUser/namenamevar"meta/data.go(òZ0©Z@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/CreateUser/nameë
*Data/DatabaseDatabasefunc"meta/data.go(…0˘8Rê{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z3

text/plain%Database returns a database by name.
ä./Data/Databaseñ
*Data/Database/$data0/iivar"meta/data.go(…0˘@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Database/$data0/iŸ
*Data/Database/datadatavar"meta/data.go(œ0Ÿ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Database/dataó
*Data/Database/namenamevar"meta/data.go(‰0Ô@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Database/name¡
*Data/Databases	Databasesfield"meta/data.go(∏0–8RÒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Databases«
*Data/DeleteNode
DeleteNodefunc"meta/data.go( 0ü8R∏{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(id uint64) error",
        "UnderlyingTypeString": "func(id uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z;

text/plain-DeleteNode removes a node from the metadata.
ä./Data/DeleteNodeö
*Data/DeleteNode/$data0/iivar"meta/data.go( 0ü@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteNode/$data0/i›
*Data/DeleteNode/datadatavar"meta/data.go(–0⁄@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteNode/dataï
*Data/DeleteNode/ididvar"meta/data.go(Á0@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteNode/idø
*Data/DeleteShardGroupDeleteShardGroupfunc"meta/data.go(ŸL0ΩP8R¯{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, policy string, id uint64) error",
        "UnderlyingTypeString": "func(database string, policy string, id uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Za

text/plainSDeleteShardGroup removes a shard group from a database and retention policy by id.
ä./Data/DeleteShardGroup¶
 *Data/DeleteShardGroup/$data1/iivar"meta/data.go(ŸL0ΩP@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/DeleteShardGroup/$data1/iÈ
*Data/DeleteShardGroup/datadatavar"meta/data.go(ﬂL0ÈL@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteShardGroup/data≥
 *Data/DeleteShardGroup/databasedatabasevar"meta/data.go(¸L0ìM@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/DeleteShardGroup/database∂
*Data/DeleteShardGroup/errerrvar"meta/data.go(ƒM0ˆM@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteShardGroup/err°
*Data/DeleteShardGroup/ididvar"meta/data.go(ïM0ûM@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteShardGroup/id≠
*Data/DeleteShardGroup/policypolicyvar"meta/data.go(¸L0ìM@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteShardGroup/policyÑ
*Data/DeleteShardGroup/rpirpivar"meta/data.go(ƒM0ˆM@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DeleteShardGroup/rpiã
*Data/DropContinuousQueryDropContinuousQueryfunc"meta/data.go(íU0çX8Rﬁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0DropContinuousQuery removes a continuous query.
ä./Data/DropContinuousQuery¨
#*!Data/DropContinuousQuery/$data1/iivar"meta/data.go(íU0çX@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/DropContinuousQuery/$data1/iÔ
*Data/DropContinuousQuery/datadatavar"meta/data.go(òU0¢U@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropContinuousQuery/dataπ
#*!Data/DropContinuousQuery/databasedatabasevar"meta/data.go(∏U0ÕU@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/DropContinuousQuery/database˘
*Data/DropContinuousQuery/didivar"meta/data.go(ÿU0ıU@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropContinuousQuery/di≠
*Data/DropContinuousQuery/namenamevar"meta/data.go(∏U0ÕU@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropContinuousQuery/nameÕ
*Data/DropDatabaseDropDatabasefunc"meta/data.go(¡0∂8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z7

text/plain)DropDatabase removes a database by name.
ä./Data/DropDatabaseû
*Data/DropDatabase/$data0/iivar"meta/data.go(¡0∂@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropDatabase/$data0/i·
*Data/DropDatabase/datadatavar"meta/data.go(«0—@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropDatabase/dataü
*Data/DropDatabase/namenamevar"meta/data.go(‡0Î@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropDatabase/name£
*Data/DropRetentionPolicyDropRetentionPolicyfunc"meta/data.go(˘ 0ù$8Rﬁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZV

text/plainHDropRetentionPolicy removes a retention policy from a database by name.
ä./Data/DropRetentionPolicy¨
#*!Data/DropRetentionPolicy/$data1/iivar"meta/data.go(˘ 0ù$@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/DropRetentionPolicy/$data1/iÔ
*Data/DropRetentionPolicy/datadatavar"meta/data.go(ˇ 0â!@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropRetentionPolicy/dataπ
#*!Data/DropRetentionPolicy/databasedatabasevar"meta/data.go(ü!0¥!@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/DropRetentionPolicy/database˘
*Data/DropRetentionPolicy/didivar"meta/data.go(“!0Ô!@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropRetentionPolicy/di≠
*Data/DropRetentionPolicy/namenamevar"meta/data.go(ü!0¥!@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropRetentionPolicy/name√
*Data/DropUserDropUserfunc"meta/data.go(á]0‡^8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z9

text/plain+DropUser removes an existing user by name.
ä./Data/DropUserñ
*Data/DropUser/$data0/iivar"meta/data.go(á]0‡^@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropUser/$data0/iŸ
*Data/DropUser/datadatavar"meta/data.go(ç]0ó]@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropUser/dataó
*Data/DropUser/namenamevar"meta/data.go(¢]0≠]@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/DropUser/name·
*
Data/IndexIndexfield"meta/data.go(Â0ı8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Index‹
*Data/MarshalBinaryMarshalBinaryfunc"meta/data.go(ƒ{0ü|8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7MarshalBinary encodes the metadata to a binary format.
ä./Data/MarshalBinary„
*Data/MarshalBinary/datadatavar"meta/data.go( {0‘{@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/MarshalBinary/dataÌ
*Data/MaxNodeID	MaxNodeIDfield"meta/data.go(È0ˇ8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/MaxNodeIDˇ
*Data/MaxShardGroupIDMaxShardGroupIDfield"meta/data.go(Å0ó8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/MaxShardGroupID
*Data/MaxShardID
MaxShardIDfield"meta/data.go(ô0Ø8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/MaxShardIDÔ
*	Data/NodeNodefunc"meta/data.go(—0Á8RÑ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(id uint64) *github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "func(id uint64) *github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z)

text/plainNode returns a node by id.
ä./Data/Nodeé
*Data/Node/$data0/iivar"meta/data.go(—0Á@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Node/$data0/i—
*Data/Node/datadatavar"meta/data.go(◊0·@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Node/dataâ
*Data/Node/ididvar"meta/data.go(Ë0Ò@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Node/idë
*Data/NodeByHost
NodeByHostfunc"meta/data.go(ì	0µ
8Rà{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(host string) *github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "func(host string) *github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z5

text/plain'NodeByHost returns a node by hostname.
ä./Data/NodeByHostö
*Data/NodeByHost/$data0/iivar"meta/data.go(ì	0µ
@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/NodeByHost/$data0/i›
*Data/NodeByHost/datadatavar"meta/data.go(ô	0£	@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/NodeByHost/dataõ
*Data/NodeByHost/hosthostvar"meta/data.go(∞	0ª	@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/NodeByHost/host≠
*
Data/NodesNodesfield"meta/data.go(¢0∂8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/NodesÜ
*Data/RetentionPolicyRetentionPolicyfunc"meta/data.go(˛0◊8R“{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "UnderlyingTypeString": "func(database string, name string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCRetentionPolicy returns a retention policy for a database by name.
ä./Data/RetentionPolicy§
*Data/RetentionPolicy/$data1/iivar"meta/data.go(˛0◊@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/RetentionPolicy/$data1/iÁ
*Data/RetentionPolicy/datadatavar"meta/data.go(Ñ0é@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/RetentionPolicy/data±
*Data/RetentionPolicy/databasedatabasevar"meta/data.go(†0µ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/RetentionPolicy/databaseÒ
*Data/RetentionPolicy/didivar"meta/data.go(ÿ0ı@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/RetentionPolicy/di•
*Data/RetentionPolicy/namenamevar"meta/data.go(†0µ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/RetentionPolicy/nameÇ
*Data/SetAdminPrivilegeSetAdminPrivilegefunc"meta/data.go(Òc0öe8R‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string, admin bool) error",
        "UnderlyingTypeString": "func(name string, admin bool) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7SetAdminPrivilege sets the admin privilege for a user.
ä./Data/SetAdminPrivilege®
*Data/SetAdminPrivilege/adminadminvar"meta/data.go(¢d0¨d@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetAdminPrivilege/adminÎ
*Data/SetAdminPrivilege/datadatavar"meta/data.go(˜c0Åd@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetAdminPrivilege/data©
*Data/SetAdminPrivilege/namenamevar"meta/data.go(ïd0†d@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetAdminPrivilege/nameÌ
*Data/SetAdminPrivilege/uiuivar"meta/data.go(∑d0Ãd@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetAdminPrivilege/uiπ
 *Data/SetDefaultRetentionPolicySetDefaultRetentionPolicyfunc"meta/data.go(‚,0¬/8Rﬁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZZ

text/plainLSetDefaultRetentionPolicy sets the default retention policy for a database.
ä ./Data/SetDefaultRetentionPolicy˚
%*#Data/SetDefaultRetentionPolicy/datadatavar"meta/data.go(Ë,0Ú,@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/SetDefaultRetentionPolicy/data≈
)*'Data/SetDefaultRetentionPolicy/databasedatabasevar"meta/data.go(é-0£-@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./Data/SetDefaultRetentionPolicy/databaseÖ
#*!Data/SetDefaultRetentionPolicy/didivar"meta/data.go(⁄-0˜-@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/SetDefaultRetentionPolicy/diπ
%*#Data/SetDefaultRetentionPolicy/namenamevar"meta/data.go(é-0£-@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/SetDefaultRetentionPolicy/name‰
*Data/SetPrivilegeSetPrivilegefunc"meta/data.go(ûa0µc8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "UnderlyingTypeString": "func(name string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZF

text/plain8SetPrivilege sets a privilege for a user on a database.
ä./Data/SetPrivilege·
*Data/SetPrivilege/datadatavar"meta/data.go(§a0Æa@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetPrivilege/data´
*Data/SetPrivilege/databasedatabasevar"meta/data.go(Ωa0“a@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetPrivilege/databaseü
*Data/SetPrivilege/namenamevar"meta/data.go(Ωa0“a@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetPrivilege/nameº
*Data/SetPrivilege/ppvar"meta/data.go(‘a0Ëa@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetPrivilege/p„
*Data/SetPrivilege/uiuivar"meta/data.go(Ûa0àb@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/SetPrivilege/ui◊
*Data/ShardGroupByTimestampShardGroupByTimestampfunc"meta/data.go(ä:0Â<8Rˆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "UnderlyingTypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zl

text/plain^ShardGroupByTimestamp returns the shard group on a database and policy for a given timestamp.
ä./Data/ShardGroupByTimestampÛ
!*Data/ShardGroupByTimestamp/datadatavar"meta/data.go(ê:0ö:@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/ShardGroupByTimestamp/dataΩ
%*#Data/ShardGroupByTimestamp/databasedatabasevar"meta/data.go(≤:0…:@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/ShardGroupByTimestamp/database¿
 *Data/ShardGroupByTimestamp/errerrvar"meta/data.go(ó;0…;@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/ShardGroupByTimestamp/err∑
#*!Data/ShardGroupByTimestamp/policypolicyvar"meta/data.go(≤:0…:@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Data/ShardGroupByTimestamp/policyé
 *Data/ShardGroupByTimestamp/rpirpivar"meta/data.go(ó;0…;@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/ShardGroupByTimestamp/rpiÓ
&*$Data/ShardGroupByTimestamp/timestamp	timestampvar"meta/data.go(À:0ﬁ:@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Data/ShardGroupByTimestamp/timestamp˚
*Data/ShardGroupsShardGroupsfunc"meta/data.go(è00–38RŒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, policy string) ([]github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "UnderlyingTypeString": "func(database string, policy string) ([]github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZV

text/plainHShardGroup returns a list of all shard groups on a database and policy.
ä./Data/ShardGroups 
*Data/ShardGroups/$data1/ggvar"meta/data.go(è00–3@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/$data1/gﬂ
*Data/ShardGroups/datadatavar"meta/data.go(ï00ü0@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/data©
*Data/ShardGroups/databasedatabasevar"meta/data.go(≠00ƒ0@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/database¨
*Data/ShardGroups/errerrvar"meta/data.go(˛00∞1@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/err˚
*Data/ShardGroups/groupsgroupsvar"meta/data.go(ô20“2@Rû{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/groups£
*Data/ShardGroups/policypolicyvar"meta/data.go(≠00ƒ0@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/policy˙
*Data/ShardGroups/rpirpivar"meta/data.go(˛00∞1@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/ShardGroups/rpiƒ
*Data/ShardGroupsByTimeRangeShardGroupsByTimeRangefunc"meta/data.go(Ü50ß98Ré{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, policy string, tmin time.Time, tmax time.Time) ([]github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "UnderlyingTypeString": "func(database string, policy string, tmin time.Time, tmax time.Time) ([]github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZΩ

text/plainÆShardGroupsByTimeRange returns a list of all shard groups on a database and policy that may contain data
for the specified time range. Shard groups are sorted by start time.
ä./Data/ShardGroupsByTimeRange‡
&*$Data/ShardGroupsByTimeRange/$data1/ggvar"meta/data.go(Ü50ß9@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Data/ShardGroupsByTimeRange/$data1/gı
"* Data/ShardGroupsByTimeRange/datadatavar"meta/data.go(å50ñ5@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Data/ShardGroupsByTimeRange/dataø
&*$Data/ShardGroupsByTimeRange/databasedatabasevar"meta/data.go(Ø50∆5@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Data/ShardGroupsByTimeRange/database¬
!*Data/ShardGroupsByTimeRange/errerrvar"meta/data.go(ñ60»6@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/ShardGroupsByTimeRange/errë
$*"Data/ShardGroupsByTimeRange/groupsgroupsvar"meta/data.go(±70Í7@Rû{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Data/ShardGroupsByTimeRange/groupsπ
$*"Data/ShardGroupsByTimeRange/policypolicyvar"meta/data.go(Ø50∆5@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Data/ShardGroupsByTimeRange/policyê
!*Data/ShardGroupsByTimeRange/rpirpivar"meta/data.go(ñ60»6@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/ShardGroupsByTimeRange/rpi·
"* Data/ShardGroupsByTimeRange/tmaxtmaxvar"meta/data.go(»50‹5@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Data/ShardGroupsByTimeRange/tmax·
"* Data/ShardGroupsByTimeRange/tmintminvar"meta/data.go(»50‹5@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Data/ShardGroupsByTimeRange/tminﬁ
*	Data/TermTermfield"meta/data.go(ª0À8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/Term‰
*Data/UnmarshalBinaryUnmarshalBinaryfunc"meta/data.go(›|0é~8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(buf []byte) error",
        "UnderlyingTypeString": "func(buf []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZG

text/plain9UnmarshalBinary decodes the object from a binary format.
ä./Data/UnmarshalBinary¬
!*Data/UnmarshalBinary/$data0/errerrvar"meta/data.go(≠}0Õ}@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/UnmarshalBinary/$data0/err¢
*Data/UnmarshalBinary/bufbufvar"meta/data.go(ˇ|0â}@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UnmarshalBinary/bufÁ
*Data/UnmarshalBinary/datadatavar"meta/data.go(„|0Ì|@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UnmarshalBinary/dataÙ	
*Data/UnmarshalBinary/pbpbvar"meta/data.go(ò}0®}@Rõ	{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.Data",
        "UnderlyingTypeString": "struct{Term *uint64 \"protobuf:\\\"varint,1,req\\\" json:\\\"Term,omitempty\\\"\"; Index *uint64 \"protobuf:\\\"varint,2,req\\\" json:\\\"Index,omitempty\\\"\"; ClusterID *uint64 \"protobuf:\\\"varint,3,req\\\" json:\\\"ClusterID,omitempty\\\"\"; Nodes []*github.com/influxdb/influxdb/meta/internal.NodeInfo \"protobuf:\\\"bytes,4,rep\\\" json:\\\"Nodes,omitempty\\\"\"; Databases []*github.com/influxdb/influxdb/meta/internal.DatabaseInfo \"protobuf:\\\"bytes,5,rep\\\" json:\\\"Databases,omitempty\\\"\"; Users []*github.com/influxdb/influxdb/meta/internal.UserInfo \"protobuf:\\\"bytes,6,rep\\\" json:\\\"Users,omitempty\\\"\"; MaxNodeID *uint64 \"protobuf:\\\"varint,7,req\\\" json:\\\"MaxNodeID,omitempty\\\"\"; MaxShardGroupID *uint64 \"protobuf:\\\"varint,8,req\\\" json:\\\"MaxShardGroupID,omitempty\\\"\"; MaxShardID *uint64 \"protobuf:\\\"varint,9,req\\\" json:\\\"MaxShardID,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UnmarshalBinary/pbô
*Data/UpdateRetentionPolicyUpdateRetentionPolicyfunc"meta/data.go(ﬁ$0ë,8R⁄{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "UnderlyingTypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZJ

text/plain<UpdateRetentionPolicy updates an existing retention policy.
ä./Data/UpdateRetentionPolicyÛ
!*Data/UpdateRetentionPolicy/datadatavar"meta/data.go(‰$0Ó$@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/UpdateRetentionPolicy/dataΩ
%*#Data/UpdateRetentionPolicy/databasedatabasevar"meta/data.go(Ü%0õ%@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Data/UpdateRetentionPolicy/database˝
*Data/UpdateRetentionPolicy/didivar"meta/data.go(’%0Ú%@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UpdateRetentionPolicy/di±
!*Data/UpdateRetentionPolicy/namenamevar"meta/data.go(Ü%0õ%@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Data/UpdateRetentionPolicy/nameé
 *Data/UpdateRetentionPolicy/rpirpivar"meta/data.go(∂&0’&@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/UpdateRetentionPolicy/rpií
 *Data/UpdateRetentionPolicy/rpurpuvar"meta/data.go(ù%0∑%@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Data/UpdateRetentionPolicy/rpuÚ
*Data/UpdateUser
UpdateUserfunc"meta/data.go(ü_0·`8R÷{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string, hash string) error",
        "UnderlyingTypeString": "func(name string, hash string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:UpdateUser updates the password hash of an existing user.
ä./Data/UpdateUserö
*Data/UpdateUser/$data0/iivar"meta/data.go(ü_0·`@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UpdateUser/$data0/i›
*Data/UpdateUser/datadatavar"meta/data.go(•_0Ø_@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UpdateUser/dataõ
*Data/UpdateUser/hashhashvar"meta/data.go(º_0Õ_@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UpdateUser/hashõ
*Data/UpdateUser/namenamevar"meta/data.go(º_0Õ_@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UpdateUser/nameÅ
*	Data/UserUserfunc"meta/data.go(≥X0◊Y8Rê{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(username string) *github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "func(username string) *github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z/

text/plain!User returns a user by username.
ä./Data/Useré
*Data/User/$data0/iivar"meta/data.go(≥X0◊Y@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/User/$data0/i—
*Data/User/datadatavar"meta/data.go(πX0√X@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/User/dataõ
*Data/User/usernameusernamevar"meta/data.go( X0ŸX@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/User/usernameÏ
*Data/UserPrivilegeUserPrivilegefunc"meta/data.go( g0¯i8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error)",
        "UnderlyingTypeString": "func(name string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZI

text/plain;UserPrivilege gets the privilege for a user on a database.
ä./Data/UserPrivilege©
*Data/UserPrivilege/$data1/dbdbvar"meta/data.go( g0¯i@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/$data1/dbÃ
*Data/UserPrivilege/$data1/ppvar"meta/data.go( g0¯i@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/$data1/p„
*Data/UserPrivilege/datadatavar"meta/data.go(–g0⁄g@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/data≠
*Data/UserPrivilege/databasedatabasevar"meta/data.go(Íg0ˇg@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/database°
*Data/UserPrivilege/namenamevar"meta/data.go(Íg0ˇg@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/nameÂ
*Data/UserPrivilege/uiuivar"meta/data.go(°h0∂h@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivilege/ui’
*Data/UserPrivilegesUserPrivilegesfunc"meta/data.go(Œe0äg8R∏{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(name string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error)",
        "UnderlyingTypeString": "func(name string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z=

text/plain/UserPrivileges gets the privileges for a user.
ä./Data/UserPrivilegesÂ
*Data/UserPrivileges/datadatavar"meta/data.go(‘e0ﬁe@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivileges/data£
*Data/UserPrivileges/namenamevar"meta/data.go(Ôe0˙e@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivileges/nameÁ
*Data/UserPrivileges/uiuivar"meta/data.go(¶f0ªf@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UserPrivileges/ui≠
*
Data/UsersUsersfield"meta/data.go(“0Ê8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Data",
        "TypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/UsersÍ
*Data/marshalmarshalfunc"meta/data.go( o0ÃuR‚{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.Data",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.Data",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./Data/marshalî
*Data/marshal/$data0/iivar"meta/data.go( o0Ãu@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/marshal/$data0/iî
*Data/marshal/$data1/iivar"meta/data.go( o0Ãu@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/marshal/$data1/iî
*Data/marshal/$data2/iivar"meta/data.go( o0Ãu@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/marshal/$data2/i◊
*Data/marshal/datadatavar"meta/data.go(–o0⁄o@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/marshal/data„
*Data/marshal/pbpbvar"meta/data.go(¯o0£r@Rö{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/marshal/pb˙
*Data/unmarshal	unmarshalfunc"meta/data.go(àv0à{RÊ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Data",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.Data)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.Data)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./Data/unmarshalò
*Data/unmarshal/$data0/iivar"meta/data.go(àv0à{@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data0/i˙
*Data/unmarshal/$data0/xxvar"meta/data.go(àv0à{@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data0/xò
*Data/unmarshal/$data1/iivar"meta/data.go(àv0à{@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data1/iÇ
*Data/unmarshal/$data1/xxvar"meta/data.go(àv0à{@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data1/xò
*Data/unmarshal/$data2/iivar"meta/data.go(àv0à{@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data2/i˙
*Data/unmarshal/$data2/xxvar"meta/data.go(àv0à{@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/$data2/x€
*Data/unmarshal/datadatavar"meta/data.go(év0òv@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/dataÁ
*Data/unmarshal/pbpbvar"meta/data.go(§v0µv@Rö{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Data/unmarshal/pbö
 *Database$statement_executor259Databasefunc"meta/statement_executor.go(É0Ø@Rû{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Database$statement_executor259â
*DatabaseInfoDatabaseInfotype"meta/data.go(úÉ0ÕÑ8RÂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDDatabaseInfo represents information about a database in the system.
ä./DatabaseInfoÅ
 *DatabaseInfo/ContinuousQueriesContinuousQueriesfield"meta/data.go(üÑ0ÀÑ8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "DatabaseInfo",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./DatabaseInfo/ContinuousQueriesÆ
%*#DatabaseInfo/DefaultRetentionPolicyDefaultRetentionPolicyfield"meta/data.go(“É0ÔÉ8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "DatabaseInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./DatabaseInfo/DefaultRetentionPolicy¯
*DatabaseInfo/NameNamefield"meta/data.go(≥É0–É8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "DatabaseInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/NameÅ
 *DatabaseInfo/RetentionPoliciesRetentionPoliciesfield"meta/data.go(ÒÉ0ùÑ8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "DatabaseInfo",
        "TypeString": "[]github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./DatabaseInfo/RetentionPolicies‹
*DatabaseInfo/RetentionPolicyRetentionPolicyfunc"meta/data.go(ÜÖ0€Ü8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "DatabaseInfo",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4RetentionPolicy returns a retention policy by name.
ä./DatabaseInfo/RetentionPolicy∂
'*%DatabaseInfo/RetentionPolicy/$data0/iivar"meta/data.go(ÜÖ0€Ü@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./DatabaseInfo/RetentionPolicy/$data0/iõ
!*DatabaseInfo/RetentionPolicy/didivar"meta/data.go(åÖ0õÖ@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./DatabaseInfo/RetentionPolicy/di∑
#*!DatabaseInfo/RetentionPolicy/namenamevar"meta/data.go(≠Ö0∏Ö@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./DatabaseInfo/RetentionPolicy/name±
*DatabaseInfo/ShardInfos
ShardInfosfunc"meta/data.go(†á0≈ã8R˝{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "DatabaseInfo",
        "TypeString": "func() []github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "func() []github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZN

text/plain@ShardInfos returns a list of all shards' info for the database.
ä./DatabaseInfo/ShardInfos«
F*DDatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/$data1/$data0/sisivar"meta/data.go(Ïâ0£ä@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äF./DatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/$data1/$data0/si‰
>*<DatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/$data1/kkvar"meta/data.go(†á0≈ã@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä>./DatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/$data1/ká
8*6DatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/sgsgvar"meta/data.go(÷à0Çâ@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./DatabaseInfo/ShardInfos/$data0/$data0/$data0/$data0/sg»
0*.DatabaseInfo/ShardInfos/$data0/$data0/$data0/jjvar"meta/data.go(†á0≈ã@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./DatabaseInfo/ShardInfos/$data0/$data0/$data0/j¨
"* DatabaseInfo/ShardInfos/$data0/iivar"meta/data.go(†á0≈ã@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./DatabaseInfo/ShardInfos/$data0/iá
%*#DatabaseInfo/ShardInfos/$data1/infoinfovar"meta/data.go(†á0≈ã@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./DatabaseInfo/ShardInfos/$data1/infoë
*DatabaseInfo/ShardInfos/didivar"meta/data.go(¶á0µá@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/ShardInfos/di˛
*DatabaseInfo/ShardInfos/infosinfosvar"meta/data.go(…ä0Ûä@Rî{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/ShardInfos/infosï
 *DatabaseInfo/ShardInfos/shardsshardsvar"meta/data.go(”á0Ùá@R®{
        "PkgName": "meta",
        "TypeString": "map[uint64]*github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "map[uint64]*github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./DatabaseInfo/ShardInfos/shardsÈ
*DatabaseInfo/cloneclonefunc"meta/data.go(Îã0ùêRÂ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "DatabaseInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z/

text/plain!clone returns a deep copy of di.
ä./DatabaseInfo/cloneæ
+*)DatabaseInfo/clone/$data0/$data0/$data0/iivar"meta/data.go(Îã0ùê@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./DatabaseInfo/clone/$data0/$data0/$data0/iæ
+*)DatabaseInfo/clone/$data1/$data0/$data0/iivar"meta/data.go(Îã0ùê@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./DatabaseInfo/clone/$data1/$data0/$data0/iá
*DatabaseInfo/clone/didivar"meta/data.go(Òã0Äå@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/clone/diê
*DatabaseInfo/clone/otherothervar"meta/data.go(öå0•å@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/clone/otherì
*DatabaseInfo/marshalmarshalfunc"meta/data.go(”ê0£ïR˘{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "DatabaseInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./DatabaseInfo/marshal¶
*DatabaseInfo/marshal/$data0/iivar"meta/data.go(”ê0£ï@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/marshal/$data0/i¶
*DatabaseInfo/marshal/$data1/iivar"meta/data.go(”ê0£ï@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/marshal/$data1/iã
*DatabaseInfo/marshal/didivar"meta/data.go(Ÿê0Ëê@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/marshal/diÖ
*DatabaseInfo/marshal/pbpbvar"meta/data.go(éë0¨ë@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/marshal/pb§
*DatabaseInfo/unmarshal	unmarshalfunc"meta/data.go(ﬂï0ØöR˛{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*DatabaseInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.DatabaseInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.DatabaseInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./DatabaseInfo/unmarshal∆
/*-DatabaseInfo/unmarshal/$data0/$data0/$data0/iivar"meta/data.go(ﬂï0Øö@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./DatabaseInfo/unmarshal/$data0/$data0/$data0/iæ
/*-DatabaseInfo/unmarshal/$data0/$data0/$data0/xxvar"meta/data.go(ﬂï0Øö@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./DatabaseInfo/unmarshal/$data0/$data0/$data0/x∆
/*-DatabaseInfo/unmarshal/$data1/$data0/$data0/iivar"meta/data.go(ﬂï0Øö@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./DatabaseInfo/unmarshal/$data1/$data0/$data0/iæ
/*-DatabaseInfo/unmarshal/$data1/$data0/$data0/xxvar"meta/data.go(ﬂï0Øö@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ContinuousQueryInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./DatabaseInfo/unmarshal/$data1/$data0/$data0/x˜
*DatabaseInfo/unmarshal/didivar"meta/data.go(Âï0ıï@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/unmarshal/diâ
*DatabaseInfo/unmarshal/pbpbvar"meta/data.go(Åñ0öñ@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./DatabaseInfo/unmarshal/pbâ
!*Databases$statement_executor306	Databasesfunc"meta/statement_executor.go(≤0’@Rä{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Databases$statement_executor306µ
*DefaultBindAddressDefaultBindAddressconst"meta/config.go(Ô0ã8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZD

text/plain6DefaultBindAddress is the default address to bind to.
ä./DefaultBindAddressΩ
*DefaultCommitTimeoutDefaultCommitTimeoutconst"meta/config.go(œ0˚8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBDefaultCommitTimeout is the default commit timeout for the store.
ä./DefaultCommitTimeout«
*DefaultElectionTimeoutDefaultElectionTimeoutconst"meta/config.go(ÿ0à8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZT

text/plainFDefaultElectionTimeout is the default election timeout for the store.
ä./DefaultElectionTimeoutÃ
*DefaultHeartbeatTimeoutDefaultHeartbeatTimeoutconst"meta/config.go(⁄0ã8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZV

text/plainHDefaultHeartbeatTimeout is the default heartbeat timeout for the store.
ä./DefaultHeartbeatTimeout∂
*DefaultHostnameDefaultHostnameconst"meta/config.go(ï0≤8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZN

text/plain@DefaultHostname is the default hostname if one is not provided.
ä./DefaultHostnameœ
*DefaultLeaderLeaseTimeoutDefaultLeaderLeaseTimeoutconst"meta/config.go(‘0Ü8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEDefaultLeaderLeaseTimeout is the default leader lease for the store.
ä./DefaultLeaderLeaseTimeout⁄
.*,DefaultRetentionPolicy$statement_executor432DefaultRetentionPolicyfunc"meta/statement_executor.go(∞0ı@R¥{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "UnderlyingTypeString": "func(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../DefaultRetentionPolicy$statement_executor432Ï
 *DefaultRetentionPolicyDurationDefaultRetentionPolicyDurationconst"meta/data.go(ª08RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zc

text/plainUDefaultRetentionPolicyDuration is the default value of RetentionPolicyInfo.Duration.
ä ./DefaultRetentionPolicyDuration
 *DefaultRetentionPolicyReplicaNDefaultRetentionPolicyReplicaNconst"meta/data.go(Ω0ﬂ8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zc

text/plainUDefaultRetentionPolicyReplicaN is the default value of RetentionPolicyInfo.ReplicaN.
ä ./DefaultRetentionPolicyReplicaNê
*DefaultSyncNodeDelayDefaultSyncNodeDelayconst"meta/store.go(Æ0–8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z$

text/plaintcp.Mux header bytes.
ä./DefaultSyncNodeDelay˘
,**DropContinuousQuery$statement_executor1291DropContinuousQueryfunc"meta/statement_executor.go(ã
0ª
@R⁄{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./DropContinuousQuery$statement_executor1291¿
$*"DropDatabase$statement_executor397DropDatabasefunc"meta/statement_executor.go(ç0¨@R∏{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./DropDatabase$statement_executor397˜
+*)DropRetentionPolicy$statement_executor739DropRetentionPolicyfunc"meta/statement_executor.go(„0ì@R⁄{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./DropRetentionPolicy$statement_executor739¥
 *DropUser$statement_executor930DropUserfunc"meta/statement_executor.go(¢0Ω@R∏{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./DropUser$statement_executor930¨
*ErrAuthenticateErrAuthenticatevar"meta/store.go(ùı0“ı8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7ErrAuthenticate is returned when authentication fails.
ä./ErrAuthenticateË
*ErrContinuousQueryExistsErrContinuousQueryExistsvar"meta/errors.go(’0ù8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zg

text/plainYErrContinuousQueryExists is returned when creating an already existing continuous query.
ä./ErrContinuousQueryExistsÒ
*ErrContinuousQueryNotFoundErrContinuousQueryNotFoundvar"meta/errors.go(Ä0≈8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zj

text/plain\ErrContinuousQueryNotFound is returned when removing a continuous query that doesn't exist.
ä./ErrContinuousQueryNotFoundƒ
*ErrDatabaseExistsErrDatabaseExistsvar"meta/errors.go(ﬁ0ó8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZX

text/plainJErrDatabaseExists is returned when creating an already existing database.
ä./ErrDatabaseExistsŸ
*ErrDatabaseNameRequiredErrDatabaseNameRequiredvar"meta/errors.go(ı	0≥
8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z[

text/plainMErrDatabaseNameRequired is returned when creating a database without a name.
ä./ErrDatabaseNameRequiredÕ
*ErrDatabaseNotFoundErrDatabaseNotFoundvar"meta/errors.go(Î0°	8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z[

text/plainMErrDatabaseNotFound is returned when mutating a database that doesn't exist.
ä./ErrDatabaseNotFound∞
*ErrNodeExistsErrNodeExistsvar"meta/errors.go(ô0 8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBErrNodeExists is returned when creating an already existing node.
ä./ErrNodeExistsπ
*ErrNodeNotFoundErrNodeNotFoundvar"meta/errors.go(ñ0ƒ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEErrNodeNotFound is returned when mutating a node that doesn't exist.
ä./ErrNodeNotFoundÛ
*ErrNodesRequiredErrNodesRequiredvar"meta/errors.go( 0Ö8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zâ

text/plain{ErrNodesRequired is returned when at least one node is required for an operation.
This occurs when creating a shard group.
ä./ErrNodesRequired˜
*ErrReplicationFactorTooLowErrReplicationFactorTooLowvar"meta/errors.go(È0Ω8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zp

text/plainbErrReplicationFactorTooLow is returned when the replication factor is not in an
acceptable range.
ä./ErrReplicationFactorTooLow´
"* ErrRetentionPolicyDurationTooLow ErrRetentionPolicyDurationTooLowvar"meta/errors.go(Û0¸8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zë

text/plainÇErrRetentionPolicyDurationTooLow is returned when updating a retention
policy that has a duration lower than the allowed minimum.
ä"./ErrRetentionPolicyDurationTooLowﬁ
*ErrRetentionPolicyExistsErrRetentionPolicyExistsvar"meta/errors.go(ë0Ÿ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z]

text/plainOErrRetentionPolicyExists is returned when creating an already existing policy.
ä./ErrRetentionPolicyExistsà
*ErrRetentionPolicyNameExistsErrRetentionPolicyNameExistsvar"meta/errors.go(ï0Ê8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z{

text/plainmErrRetentionPolicyNameExists is returned when renaming a policy to
the same name as another existing policy.
ä./ErrRetentionPolicyNameExistsÛ
 *ErrRetentionPolicyNameRequiredErrRetentionPolicyNameRequiredvar"meta/errors.go(–0ù8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z`

text/plainRErrRetentionPolicyNameRequired is returned when creating a policy without a name.
ä ./ErrRetentionPolicyNameRequiredÁ
*ErrRetentionPolicyNotFoundErrRetentionPolicyNotFoundvar"meta/errors.go(≤0˜8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z`

text/plainRErrRetentionPolicyNotFound is returned when mutating a policy that doesn't exist.
ä./ErrRetentionPolicyNotFoundœ
*ErrShardGroupExistsErrShardGroupExistsvar"meta/errors.go(õ0Ÿ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z]

text/plainOErrShardGroupExists is returned when creating an already existing shard group.
ä./ErrShardGroupExistsÿ
*ErrShardGroupNotFoundErrShardGroupNotFoundvar"meta/errors.go(≤0Ì8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z`

text/plainRErrShardGroupNotFound is returned when mutating a shard group that doesn't exist.
ä./ErrShardGroupNotFound≤
*ErrStoreClosedErrStoreClosedvar"meta/errors.go(Í0¢8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZO

text/plainAErrStoreClosed is returned when closing an already closed store.
ä./ErrStoreClosedß
*ErrStoreOpenErrStoreOpenvar"meta/errors.go(s0¢8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZK

text/plain=ErrStoreOpen is returned when opening an already open store.
ä./ErrStoreOpen±
*ErrTooManyPeersErrTooManyPeersvar"meta/errors.go(Ê0»8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZK

text/plain=ErrTooManyPeers is returned when more than 3 peers are used.
ä./ErrTooManyPeers∞
*ErrUserExistsErrUserExistsvar"meta/errors.go(ñ0«8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBErrUserExists is returned when creating an already existing user.
ä./ErrUserExistsπ
*ErrUserNotFoundErrUserNotFoundvar"meta/errors.go(ì0¡8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEErrUserNotFound is returned when mutating a user that doesn't exist.
ä./ErrUserNotFound…
*ErrUsernameRequiredErrUsernameRequiredvar"meta/errors.go(ë0∆8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZW

text/plainIErrUsernameRequired is returned when creating a user without a username.
ä./ErrUsernameRequiredÁ
*	ExecMagic	ExecMagicconst"meta/store.go(‚0Ù8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zë

text/plainÇExecMagic is the first 4 bytes sent to a remote exec connection to verify
that it is coming from a remote exec client connection.
ä./ExecMagic‚
*HashPasswordFnHashPasswordFntype"meta/store.go(Òƒ0•≈8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.HashPasswordFn",
        "UnderlyingTypeString": "func(password string) ([]byte, error)",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7HashPasswordFn represnets a password hashing function.
ä./HashPasswordFnË
*IsLeader$rpc543IsLeaderfunc"meta/rpc.go(ü0Æ@Rô{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./IsLeader$rpc543ù
*
JoinResult
JoinResulttype"meta/rpc.go(¸0Õ8R÷{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.JoinResult",
        "UnderlyingTypeString": "struct{RaftEnabled bool; RaftNodes []string; NodeID uint64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./JoinResultı
*JoinResult/NodeIDNodeIDfield"meta/rpc.go(π0À8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "JoinResult",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./JoinResult/NodeIDÄ
*JoinResult/RaftEnabledRaftEnabledfield"meta/rpc.go(ë0°8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "JoinResult",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./JoinResult/RaftEnabledÇ
*JoinResult/RaftNodes	RaftNodesfield"meta/rpc.go(£0∑8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "JoinResult",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./JoinResult/RaftNodesÊ
*Leader$rpc561Leaderfunc"meta/rpc.go(±0¿@Rù{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Leader$rpc561ƒ
*MarshalTimeMarshalTimefunc"meta/data.go(Å‰0‹‰8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t time.Time) int64",
        "UnderlyingTypeString": "func(t time.Time) int64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZX

text/plainJMarshalTime converts t to nanoseconds since epoch. A zero time returns 0.
ä./MarshalTime∫
*MarshalTime/ttvar"meta/data.go(í‰0ù‰@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./MarshalTime/t∞
'*%MaxAutoCreatedRetentionPolicyReplicaN%MaxAutoCreatedRetentionPolicyReplicaNconst"meta/store.go(£0Ã8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zå

text/plain~MaxAutoCreatedRetentionPolicyReplicaN is the maximum replication factor that will
be set for auto-created retention policies.
ä'./MaxAutoCreatedRetentionPolicyReplicaN§
*MaxMessageSizeMaxMessageSizeconst"meta/rpc.go(õ0¡8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:Max size of a message before we treat the size as invalid
ä./MaxMessageSize˙
*MaxRaftNodesMaxRaftNodesconst"meta/store.go(Ì	0Ü
8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainRaft configuration.
ä./MaxRaftNodes‘
*MinRetentionPolicyDurationMinRetentionPolicyDurationconst"meta/data.go(¿0Ê8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZW

text/plainIMinRetentionPolicyDuration represents the minimum duration for a policy.
ä./MinRetentionPolicyDurationˇ
*MuxExecHeaderMuxExecHeaderconst"meta/store.go(¬0”8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z$

text/plaintcp.Mux header bytes.
ä./MuxExecHeader¸
*MuxRPCHeaderMuxRPCHeaderconst"meta/store.go(’0Ê8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z$

text/plaintcp.Mux header bytes.
ä./MuxRPCHeaderˇ
*MuxRaftHeaderMuxRaftHeaderconst"meta/store.go(Ø0¿8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z$

text/plaintcp.Mux header bytes.
ä./MuxRaftHeaderñ
*	NewConfig	NewConfigfunc"meta/config.go(Ñ0û8Rœ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func() *github.com/influxdb/influxdb/meta.Config",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta.Config",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NewConfig’
*NewRetentionPolicyInfoNewRetentionPolicyInfofunc"meta/data.go(íù0ﬁû8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(name string) *github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "func(name string) *github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zf

text/plainXNewRetentionPolicyInfo returns a new instance of RetentionPolicyInfo with defaults set.
ä./NewRetentionPolicyInfo´
*NewRetentionPolicyInfo/namenamevar"meta/data.go(Æù0πù@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NewRetentionPolicyInfo/name†

*NewStoreNewStorefunc"meta/store.go(û0À8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(c *github.com/influxdb/influxdb/meta.Config) *github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "func(c *github.com/influxdb/influxdb/meta.Config) *github.com/influxdb/influxdb/meta.Store",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z8

text/plain*NewStore returns a new instance of Store.
ä
./NewStore™
*NewStore/$store0/passwordpasswordvar"meta/store.go(à0ó@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NewStore/$store0/passwordÀ
*
NewStore/ccvar"meta/store.go(¨0µ@Rå{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Config",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NewStore/c…
*
NewStore/ssvar"meta/store.go(¡0≥@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NewStore/s‰
*NodeByHost$rpc681
NodeByHostfunc"meta/rpc.go(©0”@Rè{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeByHost$rpc681Õ

*NodeInfoNodeInfotype"meta/data.go(‹~0â8R∑{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "struct{ID uint64; Host string}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDNodeInfo represents information about a single node in the cluster.
ä
./NodeInfoÍ
*NodeInfo/HostHostfield"meta/data.go(¸~0á8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "NodeInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/Host‰
*NodeInfo/IDIDfield"meta/data.go(Ô~0˙~8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "NodeInfo",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/ID”
*NodeInfo/cloneclonefunc"meta/data.go(Ø0‡RŸ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "NodeInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z/

text/plain!clone returns a deep copy of ni.
ä./NodeInfo/cloneœ
*NodeInfo/clone/ninivar"meta/data.go(µ0¿@RÇ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "struct{ID uint64; Host string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/clone/niˇ
*NodeInfo/marshalmarshalfunc"meta/data.go(ñÄ0ÆÅRÌ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "NodeInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./NodeInfo/marshal’
*NodeInfo/marshal/ninivar"meta/data.go(úÄ0ßÄ@RÇ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "struct{ID uint64; Host string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/marshal/niı
*NodeInfo/marshal/pbpbvar"meta/data.go(…Ä0„Ä@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/marshal/pbê
*NodeInfo/unmarshal	unmarshalfunc"meta/data.go(ÍÅ0ŒÇRÚ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*NodeInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.NodeInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.NodeInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./NodeInfo/unmarshalÁ
*NodeInfo/unmarshal/ninivar"meta/data.go(Å0¸Å@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/unmarshal/ni˘
*NodeInfo/unmarshal/pbpbvar"meta/data.go(àÇ0ùÇ@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./NodeInfo/unmarshal/pbı
*Nodes$statement_executor200Nodesfunc"meta/statement_executor.go(»0„@RÇ{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func() ([]github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func() ([]github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Nodes$statement_executor200˘
*Peers$rpc579Peersfunc"meta/rpc.go(√0‹@R≥{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Peers$rpc579≠
*Peers$statement_executor230Peersfunc"meta/statement_executor.go(Ê0ˇ@R∫{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Peers$statement_executor230ü
*ReplyReplytype"meta/rpc.go(‘0ç8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Reply",
        "UnderlyingTypeString": "interface{GetHeader() *github.com/influxdb/influxdb/meta/internal.ResponseHeader}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Reply‡
*Reply/GetHeader	GetHeaderfunc"meta/rpc.go(Á0ã8Rê{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "Reply",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.ResponseHeader",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.ResponseHeader",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Reply/GetHeaderˆ
*RetentionPolicyInfoRetentionPolicyInfotype"meta/data.go(˚ö0µú8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBRetentionPolicyInfo represents metadata about a retention policy.
ä./RetentionPolicyInfoÙ
(*&RetentionPolicyInfo/DeletedShardGroupsDeletedShardGroupsfunc"meta/data.go(◊•0”ß8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyInfo",
        "TypeString": "func() []*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "func() []*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZW

text/plainIDeletedShardGroups returns the Shard Groups which are marked as deleted.
ä(./RetentionPolicyInfo/DeletedShardGroups 
1*/RetentionPolicyInfo/DeletedShardGroups/$data0/iivar"meta/data.go(◊•0”ß@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./RetentionPolicyInfo/DeletedShardGroups/$data0/i´
/*-RetentionPolicyInfo/DeletedShardGroups/groupsgroupsvar"meta/data.go(°¶0≈¶@R†{
        "PkgName": "meta",
        "TypeString": "[]*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./RetentionPolicyInfo/DeletedShardGroups/groups®
,**RetentionPolicyInfo/DeletedShardGroups/rpirpivar"meta/data.go(›•0ı•@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./RetentionPolicyInfo/DeletedShardGroups/rpiü
*RetentionPolicyInfo/DurationDurationfield"meta/data.go(Ãõ0Ïõ8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyInfo",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyInfo/Durationü
(*&RetentionPolicyInfo/ExpiredShardGroupsExpiredShardGroupsfunc"meta/data.go(ü¢0â•8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyInfo",
        "TypeString": "func(t time.Time) []*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "func(t time.Time) []*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zl

text/plain^ExpiredShardGroups returns the Shard Groups which are considered expired, for the given time.
ä(./RetentionPolicyInfo/ExpiredShardGroups 
1*/RetentionPolicyInfo/ExpiredShardGroups/$data0/iivar"meta/data.go(ü¢0â•@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./RetentionPolicyInfo/ExpiredShardGroups/$data0/i´
/*-RetentionPolicyInfo/ExpiredShardGroups/groupsgroupsvar"meta/data.go(Ù¢0ò£@R†{
        "PkgName": "meta",
        "TypeString": "[]*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./RetentionPolicyInfo/ExpiredShardGroups/groups®
,**RetentionPolicyInfo/ExpiredShardGroups/rpirpivar"meta/data.go(•¢0Ω¢@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./RetentionPolicyInfo/ExpiredShardGroups/rpi
**(RetentionPolicyInfo/ExpiredShardGroups/ttvar"meta/data.go(“¢0›¢@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./RetentionPolicyInfo/ExpiredShardGroups/tç
*RetentionPolicyInfo/NameNamefield"meta/data.go(ôõ0≤õ8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyInfo/Nameì
*RetentionPolicyInfo/ReplicaNReplicaNfield"meta/data.go(¥õ0 õ8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyInfo",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyInfo/ReplicaNØ
+*)RetentionPolicyInfo/ShardGroupByTimestampShardGroupByTimestampfunc"meta/data.go(ºü0º°8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyInfo",
        "TypeString": "func(timestamp time.Time) *github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "func(timestamp time.Time) *github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zg

text/plainYShardGroupByTimestamp returns the shard group in the policy that contains the timestamp.
ä+./RetentionPolicyInfo/ShardGroupByTimestamp–
4*2RetentionPolicyInfo/ShardGroupByTimestamp/$data0/iivar"meta/data.go(ºü0º°@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./RetentionPolicyInfo/ShardGroupByTimestamp/$data0/iÆ
/*-RetentionPolicyInfo/ShardGroupByTimestamp/rpirpivar"meta/data.go(¬ü0⁄ü@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./RetentionPolicyInfo/ShardGroupByTimestamp/rpié
5*3RetentionPolicyInfo/ShardGroupByTimestamp/timestamp	timestampvar"meta/data.go(Úü0Ö†@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./RetentionPolicyInfo/ShardGroupByTimestamp/timestampΩ
(*&RetentionPolicyInfo/ShardGroupDurationShardGroupDurationfield"meta/data.go(Óõ0éú8R≤{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyInfo",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./RetentionPolicyInfo/ShardGroupDuration˙
!*RetentionPolicyInfo/ShardGroupsShardGroupsfield"meta/data.go(êú0≥ú8RÑ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyInfo",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./RetentionPolicyInfo/ShardGroupsç
*RetentionPolicyInfo/cloneclonefunc"meta/data.go(•∞0¿≤R˙{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "RetentionPolicyInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z0

text/plain"clone returns a deep copy of rpi.
ä./RetentionPolicyInfo/cloneÃ
2*0RetentionPolicyInfo/clone/$data0/$data0/$data0/iivar"meta/data.go(•∞0¿≤@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./RetentionPolicyInfo/clone/$data0/$data0/$data0/i¯
!*RetentionPolicyInfo/clone/otherothervar"meta/data.go(„∞0Ô∞@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./RetentionPolicyInfo/clone/otherÚ
*RetentionPolicyInfo/clone/rpirpivar"meta/data.go(´∞0¬∞@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyInfo/clone/rpi∑
*RetentionPolicyInfo/marshalmarshalfunc"meta/data.go(â®0É¨Rè{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./RetentionPolicyInfo/marshal¥
&*$RetentionPolicyInfo/marshal/$data0/iivar"meta/data.go(â®0É¨@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./RetentionPolicyInfo/marshal/$data0/iË
(*&RetentionPolicyInfo/marshal/$data0/sgisgivar"meta/data.go(â®0É¨@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./RetentionPolicyInfo/marshal/$data0/sgi°
 *RetentionPolicyInfo/marshal/pbpbvar"meta/data.go(‘®0›™@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./RetentionPolicyInfo/marshal/pbí
!*RetentionPolicyInfo/marshal/rpirpivar"meta/data.go(è®0ß®@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./RetentionPolicyInfo/marshal/rpi«
*RetentionPolicyInfo/unmarshal	unmarshalfunc"meta/data.go(ø¨0˛ØRì{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./RetentionPolicyInfo/unmarshal‘
6*4RetentionPolicyInfo/unmarshal/$data0/$data0/$data0/iivar"meta/data.go(ø¨0˛Ø@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./RetentionPolicyInfo/unmarshal/$data0/$data0/$data0/i¬
6*4RetentionPolicyInfo/unmarshal/$data0/$data0/$data0/xxvar"meta/data.go(ø¨0˛Ø@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./RetentionPolicyInfo/unmarshal/$data0/$data0/$data0/x•
"* RetentionPolicyInfo/unmarshal/pbpbvar"meta/data.go(È¨0â≠@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./RetentionPolicyInfo/unmarshal/pbñ
#*!RetentionPolicyInfo/unmarshal/rpirpivar"meta/data.go(≈¨0›¨@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./RetentionPolicyInfo/unmarshal/rpiß
*RetentionPolicyMinDurationRetentionPolicyMinDurationconst"meta/store.go(Ô0ö8RÇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z)

text/plainRetention policy settings.
ä./RetentionPolicyMinDuration¶
*RetentionPolicyUpdateRetentionPolicyUpdatetype"meta/store.go(–¨0™≠8R‚{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "struct{Name *string; Duration *time.Duration; ReplicaN *int}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZV

text/plainHRetentionPolicyUpdate represents retention policy fields to be updated.
ä./RetentionPolicyUpdate∞
 *RetentionPolicyUpdate/DurationDurationfield"meta/store.go(Ç≠0ô≠8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyUpdate",
        "TypeString": "*time.Duration",
        "UnderlyingTypeString": "*time.Duration",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./RetentionPolicyUpdate/Durationñ
*RetentionPolicyUpdate/NameNamefield"meta/store.go(¨0Ä≠8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyUpdate",
        "TypeString": "*string",
        "UnderlyingTypeString": "*string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyUpdate/Nameú
 *RetentionPolicyUpdate/ReplicaNReplicaNfield"meta/store.go(õ≠0®≠8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "RetentionPolicyUpdate",
        "TypeString": "*int",
        "UnderlyingTypeString": "*int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./RetentionPolicyUpdate/ReplicaN√
#*!RetentionPolicyUpdate/SetDurationSetDurationfunc"meta/store.go(˝≠0—Æ8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyUpdate",
        "TypeString": "func(v time.Duration)",
        "UnderlyingTypeString": "func(v time.Duration)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./RetentionPolicyUpdate/SetDuration£
'*%RetentionPolicyUpdate/SetDuration/rpurpuvar"meta/store.go(ÉÆ0ùÆ@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./RetentionPolicyUpdate/SetDuration/rpuø
%*#RetentionPolicyUpdate/SetDuration/vvvar"meta/store.go(´Æ0∫Æ@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./RetentionPolicyUpdate/SetDuration/v©
*RetentionPolicyUpdate/SetNameSetNamefunc"meta/store.go(¨≠0¸≠8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyUpdate",
        "TypeString": "func(v string)",
        "UnderlyingTypeString": "func(v string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./RetentionPolicyUpdate/SetNameõ
#*!RetentionPolicyUpdate/SetName/rpurpuvar"meta/store.go(≤≠0Ã≠@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./RetentionPolicyUpdate/SetName/rpu±
!*RetentionPolicyUpdate/SetName/vvvar"meta/store.go(÷≠0ﬁ≠@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./RetentionPolicyUpdate/SetName/vØ
#*!RetentionPolicyUpdate/SetReplicaNSetReplicaNfunc"meta/store.go(“Æ0¶Ø8Rµ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*RetentionPolicyUpdate",
        "TypeString": "func(v int)",
        "UnderlyingTypeString": "func(v int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./RetentionPolicyUpdate/SetReplicaN£
'*%RetentionPolicyUpdate/SetReplicaN/rpurpuvar"meta/store.go(ÿÆ0ÚÆ@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./RetentionPolicyUpdate/SetReplicaN/rpu≥
%*#RetentionPolicyUpdate/SetReplicaN/vvvar"meta/store.go(ÄØ0ÖØ@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./RetentionPolicyUpdate/SetReplicaN/vç
*	SaltBytes	SaltBytesconst"meta/store.go(ù0´8RÜ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0SaltBytes is the number of bytes used for salts
ä./SaltBytesÒ
**(SetAdminPrivilege$statement_executor1030SetAdminPrivilegefunc"meta/statement_executor.go(Ü0∫@Rÿ{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(username string, admin bool) error",
        "UnderlyingTypeString": "func(username string, admin bool) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./SetAdminPrivilege$statement_executor1030â
1*/SetDefaultRetentionPolicy$statement_executor682SetDefaultRetentionPolicyfunc"meta/statement_executor.go(™0‡@R⁄{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./SetDefaultRetentionPolicy$statement_executor682–
$*"SetPrivilege$statement_executor960SetPrivilegefunc"meta/statement_executor.go(¿0É@R»{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "UnderlyingTypeString": "func(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./SetPrivilege$statement_executor960¬
*ShardGroupInfoShardGroupInfotype"meta/data.go(“∑0”∏8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z∆

text/plain∑ShardGroupInfo represents metadata about a shard group. The DeletedAt field is important
because it makes it clear that a ShardGroup has been marked as deleted, and allow the system
to be sure that a ShardGroup is not simply missing. If the DeletedAt is set, the system can
safely delete any associated shards.
ä./ShardGroupInfoè
*ShardGroupInfo/ContainsContainsfunc"meta/data.go(Øª0∏º8R‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func(timestamp time.Time) bool",
        "UnderlyingTypeString": "func(timestamp time.Time) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZW

text/plainIContains return true if the shard group contains data for the timestamp.
ä./ShardGroupInfo/ContainsÄ
*ShardGroupInfo/Contains/sgisgivar"meta/data.go(µª0»ª@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Contains/sgiÍ
#*!ShardGroupInfo/Contains/timestamp	timestampvar"meta/data.go(”ª0Êª@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./ShardGroupInfo/Contains/timestamp◊
*ShardGroupInfo/DeletedDeletedfunc"meta/data.go(’æ0¢ø8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:Deleted returns whether this ShardGroup has been deleted.
ä./ShardGroupInfo/Deleted˛
*ShardGroupInfo/Deleted/sgisgivar"meta/data.go(€æ0Óæ@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Deleted/sgiª
*ShardGroupInfo/DeletedAt	DeletedAtfield"meta/data.go(ß∏0∫∏8R’{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardGroupInfo",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/DeletedAtµ
*ShardGroupInfo/EndTimeEndTimefield"meta/data.go(í∏0•∏8R’{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardGroupInfo",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/EndTime¯
*ShardGroupInfo/IDIDfield"meta/data.go(Î∑0˚∑8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardGroupInfo",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/IDµ
*ShardGroupInfo/OverlapsOverlapsfunc"meta/data.go(öΩ0ñæ8RÊ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func(min time.Time, max time.Time) bool",
        "UnderlyingTypeString": "func(min time.Time, max time.Time) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zk

text/plain]Overlaps return whether the shard group contains data for the time range between min and max
ä./ShardGroupInfo/Overlapsÿ
*ShardGroupInfo/Overlaps/maxmaxvar"meta/data.go(æΩ0–Ω@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Overlaps/maxÿ
*ShardGroupInfo/Overlaps/minminvar"meta/data.go(æΩ0–Ω@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Overlaps/minÄ
*ShardGroupInfo/Overlaps/sgisgivar"meta/data.go(†Ω0≥Ω@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Overlaps/sgi¥
*ShardGroupInfo/ShardForShardForfunc"meta/data.go(Ï¡0’¬8Rí{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func(hash uint64) github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "func(hash uint64) github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0ShardFor returns the ShardInfo for a Point hash
ä./ShardGroupInfo/ShardFor≠
*ShardGroupInfo/ShardFor/hashhashvar"meta/data.go(é¬0ô¬@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/ShardFor/hash˙
*ShardGroupInfo/ShardFor/ssvar"meta/data.go(Ú¡0É¬@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/ShardFor/s“
*ShardGroupInfo/ShardsShardsfield"meta/data.go(º∏0—∏8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardGroupInfo",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/Shardsª
*ShardGroupInfo/StartTime	StartTimefield"meta/data.go(˝∑0ê∏8R’{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardGroupInfo",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/StartTimeÙ
*ShardGroupInfo/cloneclonefunc"meta/data.go(…ø0∑¡RÎ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardGroupInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z0

text/plain"clone returns a deep copy of sgi.
ä./ShardGroupInfo/clone¬
-*+ShardGroupInfo/clone/$data0/$data0/$data0/iivar"meta/data.go(…ø0∑¡@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./ShardGroupInfo/clone/$data0/$data0/$data0/i“
*ShardGroupInfo/clone/otherothervar"meta/data.go(˝ø0â¿@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/clone/otherÃ
*ShardGroupInfo/clone/sgisgivar"meta/data.go(œø0·ø@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/clone/sgiû
*ShardGroupInfo/marshalmarshalfunc"meta/data.go(ã√0√∆RÄ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./ShardGroupInfo/marshal™
!*ShardGroupInfo/marshal/$data0/iivar"meta/data.go(ã√0√∆@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./ShardGroupInfo/marshal/$data0/iç
*ShardGroupInfo/marshal/pbpbvar"meta/data.go(Ã√0±≈@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/marshal/pb˛
*ShardGroupInfo/marshal/sgisgivar"meta/data.go(ë√0§√@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/marshal/sgiÆ
*ShardGroupInfo/unmarshal	unmarshalfunc"meta/data.go(ˇ∆0ä RÑ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardGroupInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ShardGroupInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ShardGroupInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./ShardGroupInfo/unmarshal 
1*/ShardGroupInfo/unmarshal/$data0/$data0/$data0/iivar"meta/data.go(ˇ∆0ä @R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./ShardGroupInfo/unmarshal/$data0/$data0/$data0/iÆ
1*/ShardGroupInfo/unmarshal/$data0/$data0/$data0/xxvar"meta/data.go(ˇ∆0ä @R§{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./ShardGroupInfo/unmarshal/$data0/$data0/$data0/xë
*ShardGroupInfo/unmarshal/pbpbvar"meta/data.go(§«0ø«@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/unmarshal/pbÇ
*ShardGroupInfo/unmarshal/sgisgivar"meta/data.go(Ö«0ò«@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfo/unmarshal/sgi´
*ShardGroupInfosShardGroupInfostype"meta/data.go(⁄∏0˙∏8R“{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfos",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfosÅ
*ShardGroupInfos/LenLenfunc"meta/data.go(¸∏0∫π8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardGroupInfos",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/LenÛ
*ShardGroupInfos/Len/aavar"meta/data.go(Çπ0ìπ@Rù{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfos",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Len/aû
*ShardGroupInfos/LessLessfunc"meta/data.go(ªπ0ò∫8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardGroupInfos",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Lessı
*ShardGroupInfos/Less/aavar"meta/data.go(¡π0“π@Rù{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfos",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Less/aò
*ShardGroupInfos/Less/iivar"meta/data.go(Ÿπ0·π@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Less/iò
*ShardGroupInfos/Less/jjvar"meta/data.go(Ÿπ0·π@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Less/jî
*ShardGroupInfos/SwapSwapfunc"meta/data.go(ô∫0·∫8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardGroupInfos",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Swapı
*ShardGroupInfos/Swap/aavar"meta/data.go(ü∫0∞∫@Rù{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfos",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Swap/aò
*ShardGroupInfos/Swap/iivar"meta/data.go(∑∫0ø∫@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Swap/iò
*ShardGroupInfos/Swap/jjvar"meta/data.go(∑∫0ø∫@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardGroupInfos/Swap/j¬
*	ShardInfo	ShardInfotype"meta/data.go(¡ 0˘ 8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z;

text/plain-ShardInfo represents metadata about a shard.
ä./ShardInfoÈ
*ShardInfo/IDIDfield"meta/data.go(’ 0‰ 8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardInfo",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/IDÊ
*ShardInfo/OwnedByOwnedByfunc"meta/data.go(ΩÀ0 Ã8R¬{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardInfo",
        "TypeString": "func(nodeID uint64) bool",
        "UnderlyingTypeString": "func(nodeID uint64) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZM

text/plain?OwnedBy returns whether the shard's owner IDs includes nodeID.
ä./ShardInfo/OwnedBy©
*ShardInfo/OwnedBy/$data0/ididvar"meta/data.go(ΩÀ0 Ã@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/OwnedBy/$data0/idß
*ShardInfo/OwnedBy/nodeIDnodeIDvar"meta/data.go(ŸÀ0ÊÀ@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/OwnedBy/nodeIDﬁ
*ShardInfo/OwnedBy/sisivar"meta/data.go(√À0œÀ@Râ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/OwnedBy/siˇ
*ShardInfo/OwnerIDsOwnerIDsfield"meta/data.go(Ê 0˜ 8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "ShardInfo",
        "TypeString": "[]uint64",
        "UnderlyingTypeString": "[]uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/OwnerIDs⁄
*ShardInfo/cloneclonefunc"meta/data.go(Ã0™ŒR‹{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z/

text/plain!clone returns a deep copy of si.
ä./ShardInfo/clone„
*ShardInfo/clone/otherothervar"meta/data.go(ôÕ0§Õ@Râ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/clone/other⁄
*ShardInfo/clone/sisivar"meta/data.go(ˆÃ0ÇÕ@Râ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/clone/siÑ
*ShardInfo/marshalmarshalfunc"meta/data.go(‡Œ0¨–R{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "ShardInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./ShardInfo/marshal˘
*ShardInfo/marshal/pbpbvar"meta/data.go(ïœ0Õœ@R§{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/marshal/pbﬁ
*ShardInfo/marshal/sisivar"meta/data.go(ÊŒ0ÚŒ@Râ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/marshal/siï
*ShardInfo/unmarshal	unmarshalfunc"meta/data.go(Ë–0ê“Rı{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*ShardInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ShardInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.ShardInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./ShardInfo/unmarshal˝
*ShardInfo/unmarshal/pbpbvar"meta/data.go(á—0ù—@R§{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/unmarshal/pbÎ
*ShardInfo/unmarshal/sisivar"meta/data.go(Ó–0˚–@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./ShardInfo/unmarshal/si«
*StatementExecutorStatementExecutortype"meta/statement_executor.go(ò0¿
8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "struct{Store interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEStatementExecutor translates InfluxQL queries to meta store methods.
ä./StatementExecutor∆
$*"StatementExecutor/ExecuteStatementExecuteStatementfunc"meta/statement_executor.go(Ñ0è8RÎ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt github.com/influxdb/influxdb/influxql.Statement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZM

text/plain?ExecuteStatement executes stmt against the meta store as user.
ä$./StatementExecutor/ExecuteStatement¢
&*$StatementExecutor/ExecuteStatement/eevar"meta/statement_executor.go(ä0û@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./StatementExecutor/ExecuteStatement/eˇ
)*'StatementExecutor/ExecuteStatement/stmtstmtvar"meta/statement_executor.go(±0»@Rˆ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Statement",
        "UnderlyingTypeString": "interface{RequiredPrivileges() github.com/influxdb/influxdb/influxql.ExecutionPrivileges; stmt(); github.com/influxdb/influxdb/influxql.Node}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./StatementExecutor/ExecuteStatement/stmt∏
*StatementExecutor/StoreStorefield"meta/statement_executor.go(¥0æ
8RÃ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "StatementExecutor",
        "TypeString": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "UnderlyingTypeString": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./StatementExecutor/Store¡
8*6StatementExecutor/executeAlterRetentionPolicyStatement$executeAlterRetentionPolicyStatementfunc"meta/statement_executor.go(ñ>0∆BR˚{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.AlterRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.AlterRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./StatementExecutor/executeAlterRetentionPolicyStatement 
:*8StatementExecutor/executeAlterRetentionPolicyStatement/eevar"meta/statement_executor.go(ú>0∞>@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä:./StatementExecutor/executeAlterRetentionPolicyStatement/eÜ
<*:StatementExecutor/executeAlterRetentionPolicyStatement/errerrvar"meta/statement_executor.go(ó@0⁄@@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä<./StatementExecutor/executeAlterRetentionPolicyStatement/errÿ
<*:StatementExecutor/executeAlterRetentionPolicyStatement/rpurpuvar"meta/statement_executor.go(ô?0Û?@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä<./StatementExecutor/executeAlterRetentionPolicyStatement/rpuÛ
=*;StatementExecutor/executeAlterRetentionPolicyStatement/stmtstmtvar"meta/statement_executor.go(◊>0É?@R¬{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.AlterRetentionPolicyStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.AlterRetentionPolicyStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeAlterRetentionPolicyStatement/stmt¿
9*7StatementExecutor/executeCreateContinuousQueryStatement%executeCreateContinuousQueryStatementfunc"meta/statement_executor.go(âI0ÓJR˜{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateContinuousQueryStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateContinuousQueryStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeCreateContinuousQueryStatementÃ
;*9StatementExecutor/executeCreateContinuousQueryStatement/eevar"meta/statement_executor.go(èI0£I@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeCreateContinuousQueryStatement/eÓ
;*9StatementExecutor/executeCreateContinuousQueryStatement/qqvar"meta/statement_executor.go(ÀI0ıI@Rƒ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.CreateContinuousQueryStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.CreateContinuousQueryStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeCreateContinuousQueryStatement/qù
2*0StatementExecutor/executeCreateDatabaseStatementexecuteCreateDatabaseStatementfunc"meta/statement_executor.go(ë0ëRÈ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./StatementExecutor/executeCreateDatabaseStatementæ
4*2StatementExecutor/executeCreateDatabaseStatement/eevar"meta/statement_executor.go(ó0´@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./StatementExecutor/executeCreateDatabaseStatement/e˙
6*4StatementExecutor/executeCreateDatabaseStatement/errerrvar"meta/statement_executor.go(Ö0≠@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./StatementExecutor/executeCreateDatabaseStatement/err“
4*2StatementExecutor/executeCreateDatabaseStatement/qqvar"meta/statement_executor.go(Ã0Ô@R∂{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.CreateDatabaseStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.CreateDatabaseStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./StatementExecutor/executeCreateDatabaseStatement/q∆
9*7StatementExecutor/executeCreateRetentionPolicyStatement%executeCreateRetentionPolicyStatementfunc"meta/statement_executor.go(ﬂ90î>R˝{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.CreateRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.CreateRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeCreateRetentionPolicyStatementÃ
;*9StatementExecutor/executeCreateRetentionPolicyStatement/eevar"meta/statement_executor.go(Â90˘9@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeCreateRetentionPolicyStatement/eà
=*;StatementExecutor/executeCreateRetentionPolicyStatement/errerrvar"meta/statement_executor.go(Ô;0™<@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeCreateRetentionPolicyStatement/err÷
=*;StatementExecutor/executeCreateRetentionPolicyStatement/rpirpivar"meta/statement_executor.go(‰:0å;@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeCreateRetentionPolicyStatement/rpi˜
>*<StatementExecutor/executeCreateRetentionPolicyStatement/stmtstmtvar"meta/statement_executor.go(°:0Œ:@Rƒ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.CreateRetentionPolicyStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.CreateRetentionPolicyStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä>./StatementExecutor/executeCreateRetentionPolicyStatement/stmtâ
.*,StatementExecutor/executeCreateUserStatementexecuteCreateUserStatementfunc"meta/statement_executor.go(≠)0˜*R·{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.CreateUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../StatementExecutor/executeCreateUserStatement∂
0*.StatementExecutor/executeCreateUserStatement/eevar"meta/statement_executor.go(≥)0«)@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./StatementExecutor/executeCreateUserStatement/eÚ
2*0StatementExecutor/executeCreateUserStatement/errerrvar"meta/statement_executor.go(ô*0“*@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./StatementExecutor/executeCreateUserStatement/err¬
0*.StatementExecutor/executeCreateUserStatement/qqvar"meta/statement_executor.go(‰)0É*@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.CreateUserStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.CreateUserStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./StatementExecutor/executeCreateUserStatement/q∂
7*5StatementExecutor/executeDropContinuousQueryStatement#executeDropContinuousQueryStatementfunc"meta/statement_executor.go(J0√LRÛ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.DropContinuousQueryStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.DropContinuousQueryStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./StatementExecutor/executeDropContinuousQueryStatement»
9*7StatementExecutor/executeDropContinuousQueryStatement/eevar"meta/statement_executor.go(ˆJ0äK@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeDropContinuousQueryStatement/eÊ
9*7StatementExecutor/executeDropContinuousQueryStatement/qqvar"meta/statement_executor.go(∞K0ÿK@R¿{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropContinuousQueryStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropContinuousQueryStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeDropContinuousQueryStatement/qì
0*.StatementExecutor/executeDropDatabaseStatementexecuteDropDatabaseStatementfunc"meta/statement_executor.go(ì0øRÂ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.DropDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.DropDatabaseStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./StatementExecutor/executeDropDatabaseStatement∫
2*0StatementExecutor/executeDropDatabaseStatement/eevar"meta/statement_executor.go(ô0≠@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./StatementExecutor/executeDropDatabaseStatement/e 
2*0StatementExecutor/executeDropDatabaseStatement/qqvar"meta/statement_executor.go(Ã0Ì@R≤{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropDatabaseStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropDatabaseStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./StatementExecutor/executeDropDatabaseStatement/q∂
7*5StatementExecutor/executeDropRetentionPolicyStatement#executeDropRetentionPolicyStatementfunc"meta/statement_executor.go(»B0ïDRÛ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.DropRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.DropRetentionPolicyStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./StatementExecutor/executeDropRetentionPolicyStatement»
9*7StatementExecutor/executeDropRetentionPolicyStatement/eevar"meta/statement_executor.go(ŒB0‚B@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeDropRetentionPolicyStatement/eÊ
9*7StatementExecutor/executeDropRetentionPolicyStatement/qqvar"meta/statement_executor.go(àC0∞C@R¿{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropRetentionPolicyStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropRetentionPolicyStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeDropRetentionPolicyStatement/qˇ
,**StatementExecutor/executeDropUserStatementexecuteDropUserStatementfunc"meta/statement_executor.go(∑,0◊-R›{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.DropUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.DropUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./StatementExecutor/executeDropUserStatement≤
.*,StatementExecutor/executeDropUserStatement/eevar"meta/statement_executor.go(Ω,0—,@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../StatementExecutor/executeDropUserStatement/e∫
.*,StatementExecutor/executeDropUserStatement/qqvar"meta/statement_executor.go(Ï,0â-@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.DropUserStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.DropUserStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../StatementExecutor/executeDropUserStatement/qè
.*,StatementExecutor/executeGrantAdminStatementexecuteGrantAdminStatementfunc"meta/statement_executor.go(¨20Â3RÁ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.GrantAdminStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.GrantAdminStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../StatementExecutor/executeGrantAdminStatement∂
0*.StatementExecutor/executeGrantAdminStatement/eevar"meta/statement_executor.go(≤20∆2@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./StatementExecutor/executeGrantAdminStatement/eÀ
3*1StatementExecutor/executeGrantAdminStatement/stmtstmtvar"meta/statement_executor.go(„20Ö3@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.GrantAdminStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.GrantAdminStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeGrantAdminStatement/stmtˆ
)*'StatementExecutor/executeGrantStatementexecuteGrantStatementfunc"meta/statement_executor.go(Ì00™2R›{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.GrantStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.GrantStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./StatementExecutor/executeGrantStatement¨
+*)StatementExecutor/executeGrantStatement/eevar"meta/statement_executor.go(Û00á1@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./StatementExecutor/executeGrantStatement/e∑
.*,StatementExecutor/executeGrantStatement/stmtstmtvar"meta/statement_executor.go(ü10º1@R§{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.GrantStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.GrantStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../StatementExecutor/executeGrantStatement/stmtî
/*-StatementExecutor/executeRevokeAdminStatementexecuteRevokeAdminStatementfunc"meta/statement_executor.go(°80›9RÈ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.RevokeAdminStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.RevokeAdminStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeRevokeAdminStatement∏
1*/StatementExecutor/executeRevokeAdminStatement/eevar"meta/statement_executor.go(ß80ª8@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeRevokeAdminStatement/eœ
4*2StatementExecutor/executeRevokeAdminStatement/stmtstmtvar"meta/statement_executor.go(Ÿ80¸8@R∞{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.RevokeAdminStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.RevokeAdminStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./StatementExecutor/executeRevokeAdminStatement/stmt˚
**(StatementExecutor/executeRevokeStatementexecuteRevokeStatementfunc"meta/statement_executor.go(Á30ü8Rﬂ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.RevokeStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.RevokeStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./StatementExecutor/executeRevokeStatementæ
X*VStatementExecutor/executeRevokeStatement/$statement_executor0/$statement_executor0/errerrvar"meta/statement_executor.go(ı50®6@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äX./StatementExecutor/executeRevokeStatement/$statement_executor0/$statement_executor0/err˙
V*TStatementExecutor/executeRevokeStatement/$statement_executor0/$statement_executor0/ppvar"meta/statement_executor.go(ı50®6@Rö{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Privilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äV./StatementExecutor/executeRevokeStatement/$statement_executor0/$statement_executor0/pÆ
,**StatementExecutor/executeRevokeStatement/eevar"meta/statement_executor.go(Ì30Å4@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./StatementExecutor/executeRevokeStatement/eÅ
/*-StatementExecutor/executeRevokeStatement/privprivvar"meta/statement_executor.go(Œ40Î4@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeRevokeStatement/privª
/*-StatementExecutor/executeRevokeStatement/stmtstmtvar"meta/statement_executor.go(ö40∏4@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.RevokeStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.RevokeStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeRevokeStatement/stmt¢
3*1StatementExecutor/executeSetPasswordUserStatementexecuteSetPasswordUserStatementfunc"meta/statement_executor.go(˘*0µ,RÎ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.SetPasswordUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.SetPasswordUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeSetPasswordUserStatement¿
5*3StatementExecutor/executeSetPasswordUserStatement/eevar"meta/statement_executor.go(ˇ*0ì+@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeSetPasswordUserStatement/e÷
5*3StatementExecutor/executeSetPasswordUserStatement/qqvar"meta/statement_executor.go(µ+0Ÿ+@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.SetPasswordUserStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.SetPasswordUserStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeSetPasswordUserStatement/q∆
9*7StatementExecutor/executeShowContinuousQueriesStatement%executeShowContinuousQueriesStatementfunc"meta/statement_executor.go(≈L0‡PR˝{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowContinuousQueriesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowContinuousQueriesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeShowContinuousQueriesStatementæ
|*zStatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/$statement_executor0/$statement_executor0/cqicqivar"meta/statement_executor.go(≈L0‡P@Rê{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ContinuousQueryInfo",
        "UnderlyingTypeString": "struct{Name string; Query string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä|./StatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/$statement_executor0/$statement_executor0/cqií
g*eStatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/$statement_executor0/rowrowvar"meta/statement_executor.go(⁄N0°O@Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äg./StatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/$statement_executor0/rowá
Q*OStatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/didivar"meta/statement_executor.go(≈L0‡P@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äQ./StatementExecutor/executeShowContinuousQueriesStatement/$statement_executor1/di 
=*;StatementExecutor/executeShowContinuousQueriesStatement/disdisvar"meta/statement_executor.go( M0ÈM@Rö{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeShowContinuousQueriesStatement/disÃ
;*9StatementExecutor/executeShowContinuousQueriesStatement/eevar"meta/statement_executor.go(ÀL0ﬂL@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeShowContinuousQueriesStatement/eà
=*;StatementExecutor/executeShowContinuousQueriesStatement/errerrvar"meta/statement_executor.go( M0ÈM@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeShowContinuousQueriesStatement/err≈
>*<StatementExecutor/executeShowContinuousQueriesStatement/rowsrowsvar"meta/statement_executor.go(§N0ΩN@Rí{
        "PkgName": "meta",
        "TypeString": "[]*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä>./StatementExecutor/executeShowContinuousQueriesStatement/rows˜
>*<StatementExecutor/executeShowContinuousQueriesStatement/stmtstmtvar"meta/statement_executor.go(áM0¥M@Rƒ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowContinuousQueriesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowContinuousQueriesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä>./StatementExecutor/executeShowContinuousQueriesStatement/stmtò
1*/StatementExecutor/executeShowDatabasesStatementexecuteShowDatabasesStatementfunc"meta/statement_executor.go(¡0ﬂ!RÁ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowDatabasesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowDatabasesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowDatabasesStatement˜
I*GStatementExecutor/executeShowDatabasesStatement/$statement_executor1/didivar"meta/statement_executor.go(¡0ﬂ!@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äI./StatementExecutor/executeShowDatabasesStatement/$statement_executor1/di∫
5*3StatementExecutor/executeShowDatabasesStatement/disdisvar"meta/statement_executor.go(≥0“@Rö{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeShowDatabasesStatement/disº
3*1StatementExecutor/executeShowDatabasesStatement/eevar"meta/statement_executor.go(«0€@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeShowDatabasesStatement/e¯
5*3StatementExecutor/executeShowDatabasesStatement/errerrvar"meta/statement_executor.go(≥0“@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeShowDatabasesStatement/errŒ
3*1StatementExecutor/executeShowDatabasesStatement/qqvar"meta/statement_executor.go(˚0ù@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowDatabasesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowDatabasesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeShowDatabasesStatement/qÆ
5*3StatementExecutor/executeShowDatabasesStatement/rowrowvar"meta/statement_executor.go(ç 0œ @Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeShowDatabasesStatement/row¨
5*3StatementExecutor/executeShowGrantsForUserStatement!executeShowGrantsForUserStatementfunc"meta/statement_executor.go(·!0ó%RÔ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowGrantsForUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowGrantsForUserStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeShowGrantsForUserStatementí
L*JStatementExecutor/executeShowGrantsForUserStatement/$statement_executor1/ddvar"meta/statement_executor.go(·!0ó%@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äL./StatementExecutor/executeShowGrantsForUserStatement/$statement_executor1/d∏
L*JStatementExecutor/executeShowGrantsForUserStatement/$statement_executor1/ppvar"meta/statement_executor.go(·!0ó%@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äL./StatementExecutor/executeShowGrantsForUserStatement/$statement_executor1/pƒ
7*5StatementExecutor/executeShowGrantsForUserStatement/eevar"meta/statement_executor.go(Á!0˚!@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./StatementExecutor/executeShowGrantsForUserStatement/eÄ
9*7StatementExecutor/executeShowGrantsForUserStatement/errerrvar"meta/statement_executor.go(€"0Ü#@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeShowGrantsForUserStatement/errŸ
:*8StatementExecutor/executeShowGrantsForUserStatement/privprivvar"meta/statement_executor.go(€"0Ü#@RÆ{
        "PkgName": "meta",
        "TypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä:./StatementExecutor/executeShowGrantsForUserStatement/privﬁ
7*5StatementExecutor/executeShowGrantsForUserStatement/qqvar"meta/statement_executor.go(ü"0≈"@Rº{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowGrantsForUserStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowGrantsForUserStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./StatementExecutor/executeShowGrantsForUserStatement/q∂
9*7StatementExecutor/executeShowGrantsForUserStatement/rowrowvar"meta/statement_executor.go(¡#0Å$@Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeShowGrantsForUserStatement/row¿
9*7StatementExecutor/executeShowRetentionPoliciesStatement%executeShowRetentionPoliciesStatementfunc"meta/statement_executor.go(óD0áIR˜{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowRetentionPoliciesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowRetentionPoliciesStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä9./StatementExecutor/executeShowRetentionPoliciesStatement‰
R*PStatementExecutor/executeShowRetentionPoliciesStatement/$statement_executor1/rpirpivar"meta/statement_executor.go(óD0áI@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äR./StatementExecutor/executeShowRetentionPoliciesStatement/$statement_executor1/rpi≈
<*:StatementExecutor/executeShowRetentionPoliciesStatement/didivar"meta/statement_executor.go(ôE0¿E@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä<./StatementExecutor/executeShowRetentionPoliciesStatement/diÃ
;*9StatementExecutor/executeShowRetentionPoliciesStatement/eevar"meta/statement_executor.go(ùD0±D@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeShowRetentionPoliciesStatement/eà
=*;StatementExecutor/executeShowRetentionPoliciesStatement/errerrvar"meta/statement_executor.go(ôE0¿E@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeShowRetentionPoliciesStatement/errÓ
;*9StatementExecutor/executeShowRetentionPoliciesStatement/qqvar"meta/statement_executor.go(ŸD0ÉE@Rƒ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowRetentionPoliciesStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowRetentionPoliciesStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./StatementExecutor/executeShowRetentionPoliciesStatement/qæ
=*;StatementExecutor/executeShowRetentionPoliciesStatement/rowrowvar"meta/statement_executor.go(∆F0òG@Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä=./StatementExecutor/executeShowRetentionPoliciesStatement/rowé
/*-StatementExecutor/executeShowServersStatementexecuteShowServersStatementfunc"meta/statement_executor.go(ô%0´)R„{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowServersStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowServersStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeShowServersStatement≈
G*EStatementExecutor/executeShowServersStatement/$statement_executor2/ninivar"meta/statement_executor.go(ô%0´)@RÇ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "struct{ID uint64; Host string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äG./StatementExecutor/executeShowServersStatement/$statement_executor2/ni∏
1*/StatementExecutor/executeShowServersStatement/eevar"meta/statement_executor.go(ü%0≥%@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowServersStatement/eÙ
3*1StatementExecutor/executeShowServersStatement/errerrvar"meta/statement_executor.go(á&0¢&@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeShowServersStatement/errÆ
3*1StatementExecutor/executeShowServersStatement/nisnisvar"meta/statement_executor.go(á&0¢&@Rí{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeShowServersStatement/nisÏ
5*3StatementExecutor/executeShowServersStatement/peerspeersvar"meta/statement_executor.go(›&0˙&@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä5./StatementExecutor/executeShowServersStatement/peers∆
1*/StatementExecutor/executeShowServersStatement/qqvar"meta/statement_executor.go(—%0Ò%@R∞{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowServersStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowServersStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowServersStatement/q™
3*1StatementExecutor/executeShowServersStatement/rowrowvar"meta/statement_executor.go(µ'0˙'@Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./StatementExecutor/executeShowServersStatement/rowä
-*+StatementExecutor/executeShowStatsStatementexecuteShowStatsStatementfunc"meta/statement_executor.go(‚P0ûRRÂ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowStatsStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(stmt *github.com/influxdb/influxdb/influxql.ShowStatsStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./StatementExecutor/executeShowStatsStatement¥
/*-StatementExecutor/executeShowStatsStatement/eevar"meta/statement_executor.go(ËP0¸P@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeShowStatsStatement/e«
2*0StatementExecutor/executeShowStatsStatement/stmtstmtvar"meta/statement_executor.go(òQ0πQ@R¨{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowStatsStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowStatsStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./StatementExecutor/executeShowStatsStatement/stmtÑ
-*+StatementExecutor/executeShowUsersStatementexecuteShowUsersStatementfunc"meta/statement_executor.go(Ÿ-0Î0Rﬂ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*StatementExecutor",
        "TypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowUsersStatement) *github.com/influxdb/influxdb/influxql.Result",
        "UnderlyingTypeString": "func(q *github.com/influxdb/influxdb/influxql.ShowUsersStatement) *github.com/influxdb/influxdb/influxql.Result",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./StatementExecutor/executeShowUsersStatementñ
E*CStatementExecutor/executeShowUsersStatement/$statement_executor1/uiuivar"meta/statement_executor.go(Ÿ-0Î0@R◊{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "struct{Name string; Hash string; Admin bool; Privileges map[string]github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äE./StatementExecutor/executeShowUsersStatement/$statement_executor1/ui¥
/*-StatementExecutor/executeShowUsersStatement/eevar"meta/statement_executor.go(ﬂ-0Û-@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.StatementExecutor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeShowUsersStatement/e
1*/StatementExecutor/executeShowUsersStatement/errerrvar"meta/statement_executor.go(√.0ﬁ.@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowUsersStatement/erræ
/*-StatementExecutor/executeShowUsersStatement/qqvar"meta/statement_executor.go(è.0≠.@R¨{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.ShowUsersStatement",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.ShowUsersStatement",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./StatementExecutor/executeShowUsersStatement/q¶
1*/StatementExecutor/executeShowUsersStatement/rowrowvar"meta/statement_executor.go(ô/0—/@Ré{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Row",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowUsersStatement/row™
1*/StatementExecutor/executeShowUsersStatement/uisuisvar"meta/statement_executor.go(√.0ﬁ.@Rí{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./StatementExecutor/executeShowUsersStatement/uisâ	
*StoreStoretype"meta/store.go(º
0ª8Rï{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; path string; opened bool; id uint64; peers []string; data *github.com/influxdb/influxdb/meta.Data; rpc *github.com/influxdb/influxdb/meta.rpc; RemoteAddr net.Addr; raftState github.com/influxdb/influxdb/meta.raftState; ready chan struct{}; err chan error; closing chan struct{}; wg sync.WaitGroup; changed chan struct{}; clusterTracingEnabled bool; retentionAutoCreate bool; RaftListener net.Listener; ExecListener net.Listener; RPCListener net.Listener; Addr net.Addr; HeartbeatTimeout time.Duration; ElectionTimeout time.Duration; LeaderLeaseTimeout time.Duration; CommitTimeout time.Duration; authCache map[string]github.com/influxdb/influxdb/meta.authUser; hashPassword github.com/influxdb/influxdb/meta.HashPasswordFn; Logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z8

text/plain*Store represents a raft-backed metastore.
ä./Store–
*Store/AddPeerAddPeerfunc"meta/store.go(–l0†m8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(addr string) error",
        "UnderlyingTypeString": "func(addr string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7AddPeer adds addr to the list of peers in the cluster.
ä./Store/AddPeerò
*Store/AddPeer/addraddrvar"meta/store.go(Ël0Ûl@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/AddPeer/addr”
*Store/AddPeer/ssvar"meta/store.go(÷l0ﬁl@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/AddPeer/sá
*Store/AdminUserExistsAdminUserExistsfunc"meta/store.go(ÄÛ0›Ù8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (exists bool, err error)",
        "UnderlyingTypeString": "func() (exists bool, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDAdminUserExists returns true if an admin user exists on the system.
ä./Store/AdminUserExistsª
)*'Store/AdminUserExists/$store0/$store0/iivar"meta/store.go(æÛ0”Ù@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./Store/AdminUserExists/$store0/$store0/i¸
$*"Store/AdminUserExists/$store0/datadatavar"meta/store.go(–Û0⁄Û@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/AdminUserExists/$store0/dataπ
*Store/AdminUserExists/errerrvar"meta/store.go(∞Û0πÛ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/AdminUserExists/err¨
*Store/AdminUserExists/existsexistsvar"meta/store.go(£Û0ÆÛ@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/AdminUserExists/existsÂ
*Store/AdminUserExists/ssvar"meta/store.go(ÜÛ0éÛ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/AdminUserExists/sÖ
*Store/AuthenticateAuthenticatefunc"meta/store.go(úˆ0Ó˝8R”{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(username string, password string) (ui *github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "UnderlyingTypeString": "func(username string, password string) (ui *github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEAuthenticate retrieves a user with a matching username and password.
ä./Store/Authenticate„
0*.Store/Authenticate/$store0/$store1/$store0/errerrvar"meta/store.go(§˘0‘˘@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./Store/Authenticate/$store0/$store1/$store0/err⁄
3*1Store/Authenticate/$store0/$store1/$store0/hashedhashedvar"meta/store.go(§˘0‘˘@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./Store/Authenticate/$store0/$store1/$store0/hashed¸
'*%Store/Authenticate/$store0/$store1/auauvar"meta/store.go(¬¯0·¯@RÑ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.authUser",
        "UnderlyingTypeString": "struct{salt []byte; hash []byte}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/Authenticate/$store0/$store1/au∫
'*%Store/Authenticate/$store0/$store1/okokvar"meta/store.go(¬¯0·¯@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/Authenticate/$store0/$store1/ok”
(*&Store/Authenticate/$store0/$store2/errerrvar"meta/store.go(ã˚0—˚@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Authenticate/$store0/$store2/errˆ
!*Store/Authenticate/$store0/datadatavar"meta/store.go(É˜0ç˜@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/Authenticate/$store0/data√
 *Store/Authenticate/$store0/errerrvar"meta/store.go(Ω¸0Ë¸@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/Authenticate/$store0/err∫
#*!Store/Authenticate/$store0/hashedhashedvar"meta/store.go(Ω¸0Ë¸@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/Authenticate/$store0/hashed¥
!*Store/Authenticate/$store0/saltsaltvar"meta/store.go(Ω¸0Ë¸@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/Authenticate/$store0/saltı
*Store/Authenticate/$store0/uuvar"meta/store.go(Œ˜0Ê˜@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/$store0/u≥
*Store/Authenticate/errerrvar"meta/store.go(„ˆ0Ïˆ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/err∞
*Store/Authenticate/passwordpasswordvar"meta/store.go(πˆ0“ˆ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/passwordﬂ
*Store/Authenticate/ssvar"meta/store.go(¢ˆ0™ˆ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/sË
*Store/Authenticate/uiuivar"meta/store.go(’ˆ0·ˆ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/ui∞
*Store/Authenticate/usernameusernamevar"meta/store.go(πˆ0“ˆ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Authenticate/usernameº
*Store/CloseClosefunc"meta/store.go(´M0ÄN8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZM

text/plain?Close closes the store and shuts down the node in the cluster.
ä./Store/Closeœ
*Store/Close/ssvar"meta/store.go(±M0πM@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Close/sñ
*Store/ClusterID	ClusterIDfunc"meta/store.go(¥ã0¿å8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (id uint64, err error)",
        "UnderlyingTypeString": "func() (id uint64, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zw

text/plainiClusterID returns the unique identifier for the cluster.
This is generated once a node has been created.
ä./Store/ClusterID
*Store/ClusterID/$store0/datadatavar"meta/store.go(¸ã0Üå@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ClusterID/$store0/data≠
*Store/ClusterID/errerrvar"meta/store.go(‹ã0Âã@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ClusterID/errò
*Store/ClusterID/ididvar"meta/store.go(—ã0⁄ã@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ClusterID/idŸ
*Store/ClusterID/ssvar"meta/store.go(∫ã0¬ã@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ClusterID/s∆
*Store/CreateContinuousQueryCreateContinuousQueryfunc"meta/store.go(ÂÈ0ªÏ8R˚{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string, query string) error",
        "UnderlyingTypeString": "func(database string, name string, query string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCCreateContinuousQuery creates a new continuous query on the store.
ä./Store/CreateContinuousQuery¬
&*$Store/CreateContinuousQuery/databasedatabasevar"meta/store.go(ãÍ0ßÍ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/CreateContinuousQuery/database∂
"* Store/CreateContinuousQuery/namenamevar"meta/store.go(ãÍ0ßÍ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/CreateContinuousQuery/nameπ
#*!Store/CreateContinuousQuery/queryqueryvar"meta/store.go(ãÍ0ßÍ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/CreateContinuousQuery/queryÒ
*Store/CreateContinuousQuery/ssvar"meta/store.go(ÎÈ0ÛÈ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateContinuousQuery/s 
*Store/CreateDatabaseCreateDatabasefunc"meta/store.go(Ãû0îß8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4CreateDatabase creates a new database in the store.
ä./Store/CreateDatabase«
"* Store/CreateDatabase/$store0/errerrvar"meta/store.go(ïü0º†@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/CreateDatabase/$store0/err™
;*9Store/CreateDatabase/$store1/$store0/$store0/$store0/datadatavar"meta/store.go(Ì°0˜°@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./Store/CreateDatabase/$store1/$store0/$store0/$store0/dataÁ
2*0Store/CreateDatabase/$store1/$store0/$store0/errerrvar"meta/store.go(⁄°0Æ¢@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./Store/CreateDatabase/$store1/$store0/$store0/errÁ
2*0Store/CreateDatabase/$store1/$store0/$store2/errerrvar"meta/store.go(Ñ•0∞•@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./Store/CreateDatabase/$store1/$store0/$store2/errÁ
2*0Store/CreateDatabase/$store1/$store0/$store3/errerrvar"meta/store.go(â¶0–¶@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./Store/CreateDatabase/$store1/$store0/$store3/errì
,**Store/CreateDatabase/$store1/$store0/nodeNnodeNvar"meta/store.go(À°0‘°@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZL

text/plain>Read node count.
Retention policies must be fully replicated.
ä,./Store/CreateDatabase/$store1/$store0/nodeN•
**(Store/CreateDatabase/$store1/$store0/rpirpivar"meta/store.go(˙£0∂§@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/CreateDatabase/$store1/$store0/rpi®
*Store/CreateDatabase/namenamevar"meta/store.go(Îû0ˆû@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateDatabase/name„
*Store/CreateDatabase/ssvar"meta/store.go(“û0⁄û@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateDatabase/sí
!*Store/CreateDatabaseIfNotExistsCreateDatabaseIfNotExistsfunc"meta/store.go(Ùß0Ë™8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "UnderlyingTypeString": "func(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zi

text/plain[CreateDatabaseIfNotExists creates a new database in the store if it doesn't already exist.
ä!./Store/CreateDatabaseIfNotExistsö
,**Store/CreateDatabaseIfNotExists/$store0/didivar"meta/store.go(®0ã©@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./Store/CreateDatabaseIfNotExists/$store0/di›
-*+Store/CreateDatabaseIfNotExists/$store0/errerrvar"meta/store.go(®0ã©@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./Store/CreateDatabaseIfNotExists/$store0/errä
$*"Store/CreateDatabaseIfNotExists/didivar"meta/store.go(˘©0ö™@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/CreateDatabaseIfNotExists/diÕ
%*#Store/CreateDatabaseIfNotExists/errerrvar"meta/store.go(˘©0ö™@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Store/CreateDatabaseIfNotExists/erræ
&*$Store/CreateDatabaseIfNotExists/namenamevar"meta/store.go(û®0©®@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/CreateDatabaseIfNotExists/name˘
#*!Store/CreateDatabaseIfNotExists/ssvar"meta/store.go(˙ß0Ç®@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/CreateDatabaseIfNotExists/sÆ
*Store/CreateNode
CreateNodefunc"meta/store.go(ëì0⁄ï8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z:

text/plain,CreateNode creates a new node in the store.
ä./Store/CreateNodeø
*Store/CreateNode/$store0/errerrvar"meta/store.go(“ì0öï@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateNode/$store0/err†
*Store/CreateNode/hosthostvar"meta/store.go(¨ì0∑ì@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateNode/host€
*Store/CreateNode/ssvar"meta/store.go(óì0üì@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateNode/s˛
*Store/CreateRetentionPolicyCreateRetentionPolicyfunc"meta/store.go(Ü∑0¥ª8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "UnderlyingTypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainECreateRetentionPolicy creates a new retention policy for a database.
ä./Store/CreateRetentionPolicy’
)*'Store/CreateRetentionPolicy/$store1/errerrvar"meta/store.go(Ú∏0‡∫@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./Store/CreateRetentionPolicy/$store1/err¬
&*$Store/CreateRetentionPolicy/databasedatabasevar"meta/store.go(¨∑0ª∑@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/CreateRetentionPolicy/databaseì
!*Store/CreateRetentionPolicy/rpirpivar"meta/store.go(Ω∑0’∑@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/CreateRetentionPolicy/rpiÒ
*Store/CreateRetentionPolicy/ssvar"meta/store.go(å∑0î∑@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateRetentionPolicy/s∫
(*&Store/CreateRetentionPolicyIfNotExists CreateRetentionPolicyIfNotExistsfunc"meta/store.go(ôº0ˇø8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "UnderlyingTypeString": "func(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zn

text/plain`CreateRetentionPolicyIfNotExists creates a new policy in the store if it doesn't already exist.
ä(./Store/CreateRetentionPolicyIfNotExistsÎ
4*2Store/CreateRetentionPolicyIfNotExists/$store0/errerrvar"meta/store.go(øΩ0Ω@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./Store/CreateRetentionPolicyIfNotExists/$store0/errπ
4*2Store/CreateRetentionPolicyIfNotExists/$store0/rpirpivar"meta/store.go(øΩ0Ω@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./Store/CreateRetentionPolicyIfNotExists/$store0/rpiÿ
1*/Store/CreateRetentionPolicyIfNotExists/databasedatabasevar"meta/store.go( º0Ÿº@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./Store/CreateRetentionPolicyIfNotExists/database€
,**Store/CreateRetentionPolicyIfNotExists/errerrvar"meta/store.go(ﬁæ0íø@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./Store/CreateRetentionPolicyIfNotExists/errØ
.*,Store/CreateRetentionPolicyIfNotExists/otherothervar"meta/store.go(ﬁæ0íø@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../Store/CreateRetentionPolicyIfNotExists/other©
,**Store/CreateRetentionPolicyIfNotExists/rpirpivar"meta/store.go(€º0Ûº@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./Store/CreateRetentionPolicyIfNotExists/rpiá
**(Store/CreateRetentionPolicyIfNotExists/ssvar"meta/store.go(üº0ßº@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/CreateRetentionPolicyIfNotExists/s√
*Store/CreateShardGroupCreateShardGroupfunc"meta/store.go(°Õ0˝–8R˜{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "UnderlyingTypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Za

text/plainSCreateShardGroup creates a new shard group in a retention policy for a given time.
ä./Store/CreateShardGroupÀ
$*"Store/CreateShardGroup/$store0/errerrvar"meta/store.go(èŒ0ö–@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/CreateShardGroup/$store0/err∏
!*Store/CreateShardGroup/databasedatabasevar"meta/store.go(¬Õ0ŸÕ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/CreateShardGroup/database≤
*Store/CreateShardGroup/policypolicyvar"meta/store.go(¬Õ0ŸÕ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateShardGroup/policyÁ
*Store/CreateShardGroup/ssvar"meta/store.go(ßÕ0ØÕ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateShardGroup/sÈ
"* Store/CreateShardGroup/timestamp	timestampvar"meta/store.go(€Õ0ÓÕ@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/CreateShardGroup/timestampÂ
#*!Store/CreateShardGroupIfNotExistsCreateShardGroupIfNotExistsfunc"meta/store.go(÷—0Ï’8R˜{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "UnderlyingTypeString": "func(database string, policy string, timestamp time.Time) (*github.com/influxdb/influxdb/meta.ShardGroupInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zb

text/plainTCreateShardGroupIfNotExists creates a new shard group if one doesn't already exist.
ä#./Store/CreateShardGroupIfNotExists·
/*-Store/CreateShardGroupIfNotExists/$store0/errerrvar"meta/store.go(˙“0∫”@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./Store/CreateShardGroupIfNotExists/$store0/err•
/*-Store/CreateShardGroupIfNotExists/$store0/sgisgivar"meta/store.go(˙“0∫”@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./Store/CreateShardGroupIfNotExists/$store0/sgiŒ
,**Store/CreateShardGroupIfNotExists/databasedatabasevar"meta/store.go(Ç“0ô“@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./Store/CreateShardGroupIfNotExists/database—
'*%Store/CreateShardGroupIfNotExists/errerrvar"meta/store.go(º‘0˜‘@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/CreateShardGroupIfNotExists/err»
**(Store/CreateShardGroupIfNotExists/policypolicyvar"meta/store.go(Ç“0ô“@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/CreateShardGroupIfNotExists/policy˝
%*#Store/CreateShardGroupIfNotExists/ssvar"meta/store.go(‹—0‰—@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Store/CreateShardGroupIfNotExists/sï
'*%Store/CreateShardGroupIfNotExists/sgisgivar"meta/store.go(º‘0˜‘@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/CreateShardGroupIfNotExists/sgiˇ
-*+Store/CreateShardGroupIfNotExists/timestamp	timestampvar"meta/store.go(õ“0Æ“@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./Store/CreateShardGroupIfNotExists/timestampË
*Store/CreateUser
CreateUserfunc"meta/store.go(∑Ç0”Ü8R’{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "UnderlyingTypeString": "func(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z:

text/plain,CreateUser creates a new user in the store.
ä./Store/CreateUserø
*Store/CreateUser/$store1/errerrvar"meta/store.go(∫Ñ0ôÜ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/$store1/errü
*Store/CreateUser/adminadminvar"meta/store.go(ÈÇ0ÛÇ@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/adminØ
*Store/CreateUser/errerrvar"meta/store.go(∏É0›É@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/err†
*Store/CreateUser/hashhashvar"meta/store.go(∏É0›É@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/hash†
*Store/CreateUser/namenamevar"meta/store.go(“Ç0ÁÇ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/name¨
*Store/CreateUser/passwordpasswordvar"meta/store.go(“Ç0ÁÇ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/password€
*Store/CreateUser/ssvar"meta/store.go(ΩÇ0≈Ç@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/CreateUser/s∑
*Store/DatabaseDatabasefunc"meta/store.go(˛ö0Õú8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) (di *github.com/influxdb/influxdb/meta.DatabaseInfo, err error)",
        "UnderlyingTypeString": "func(name string) (di *github.com/influxdb/influxdb/meta.DatabaseInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z3

text/plain%Database returns a database by name.
ä./Store/DatabaseÓ
*Store/Database/$store0/datadatavar"meta/store.go(◊õ0·õ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Database/$store0/dataË
*Store/Database/didivar"meta/store.go(•õ0µõ@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Database/di´
*Store/Database/errerrvar"meta/store.go(∑õ0¿õ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Database/errú
*Store/Database/namenamevar"meta/store.go(óõ0¢õ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Database/name◊
*Store/Database/ssvar"meta/store.go(Ñõ0åõ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Database/sÆ
*Store/Databases	Databasesfunc"meta/store.go(˝ú0ìû8Rü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (dis []github.com/influxdb/influxdb/meta.DatabaseInfo, err error)",
        "UnderlyingTypeString": "func() (dis []github.com/influxdb/influxdb/meta.DatabaseInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z9

text/plain+Databases returns a list of all databases.
ä./Store/Databases
*Store/Databases/$store0/datadatavar"meta/store.go(Œù0ÿù@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Databases/$store0/dataÔ
*Store/Databases/disdisvar"meta/store.go(öù0¨ù@Rö{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Databases/dis≠
*Store/Databases/errerrvar"meta/store.go(Æù0∑ù@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Databases/errŸ
*Store/Databases/ssvar"meta/store.go(Éù0ãù@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Databases/s†
*Store/DefaultRetentionPolicyDefaultRetentionPolicyfunc"meta/store.go(ø∞0„≥8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "UnderlyingTypeString": "func(database string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZZ

text/plainLDefaultRetentionPolicy returns the default retention policy for a database.
ä./Store/DefaultRetentionPolicy…
0*.Store/DefaultRetentionPolicy/$store0/$store1/iivar"meta/store.go(†±0Ÿ≥@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./Store/DefaultRetentionPolicy/$store0/$store1/iä
+*)Store/DefaultRetentionPolicy/$store0/datadatavar"meta/store.go(≤±0º±@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./Store/DefaultRetentionPolicy/$store0/dataî
)*'Store/DefaultRetentionPolicy/$store0/didivar"meta/store.go(»±0Â±@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./Store/DefaultRetentionPolicy/$store0/diƒ
'*%Store/DefaultRetentionPolicy/databasedatabasevar"meta/store.go(Ê∞0ı∞@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/DefaultRetentionPolicy/database«
"* Store/DefaultRetentionPolicy/errerrvar"meta/store.go(í±0õ±@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/DefaultRetentionPolicy/errï
"* Store/DefaultRetentionPolicy/rpirpivar"meta/store.go(¯∞0ê±@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/DefaultRetentionPolicy/rpiÛ
 *Store/DefaultRetentionPolicy/ssvar"meta/store.go(≈∞0Õ∞@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/DefaultRetentionPolicy/s‘
*Store/DeleteNode
DeleteNodefunc"meta/store.go(åô0‘ö8Rπ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(id uint64) error",
        "UnderlyingTypeString": "func(id uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4DeleteNode removes a node from the metastore by id.
ä./Store/DeleteNodeö
*Store/DeleteNode/ididvar"meta/store.go(ßô0∞ô@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DeleteNode/id€
*Store/DeleteNode/ssvar"meta/store.go(íô0öô@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DeleteNode/s∏
*Store/DeleteShardGroupDeleteShardGroupfunc"meta/store.go(∑÷0äŸ8R˘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string, id uint64) error",
        "UnderlyingTypeString": "func(database string, policy string, id uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZT

text/plainFDeleteShardGroup removes an existing shard group from a policy by ID.
ä./Store/DeleteShardGroup∏
!*Store/DeleteShardGroup/databasedatabasevar"meta/store.go(ÿ÷0Ô÷@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/DeleteShardGroup/database¶
*Store/DeleteShardGroup/ididvar"meta/store.go(Ò÷0˙÷@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DeleteShardGroup/id≤
*Store/DeleteShardGroup/policypolicyvar"meta/store.go(ÿ÷0Ô÷@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DeleteShardGroup/policyÁ
*Store/DeleteShardGroup/ssvar"meta/store.go(Ω÷0≈÷@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DeleteShardGroup/s†
*Store/DropContinuousQueryDropContinuousQueryfunc"meta/store.go(ˇÏ0§Ô8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZM

text/plain?DropContinuousQuery removes a continuous query from the store.
ä./Store/DropContinuousQueryæ
$*"Store/DropContinuousQuery/databasedatabasevar"meta/store.go(£Ì0∏Ì@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/DropContinuousQuery/database≤
 *Store/DropContinuousQuery/namenamevar"meta/store.go(£Ì0∏Ì@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/DropContinuousQuery/nameÌ
*Store/DropContinuousQuery/ssvar"meta/store.go(ÖÌ0çÌ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropContinuousQuery/sÊ
*Store/DropDatabaseDropDatabasefunc"meta/store.go(©´0ˇ¨8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZJ

text/plain<DropDatabase removes a database from the metastore by name.
ä./Store/DropDatabase§
*Store/DropDatabase/namenamevar"meta/store.go(∆´0—´@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropDatabase/nameﬂ
*Store/DropDatabase/ssvar"meta/store.go(Ø´0∑´@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropDatabase/sü
*Store/DropRetentionPolicyDropRetentionPolicyfunc"meta/store.go(≤…0◊À8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZL

text/plain>DropRetentionPolicy removes a policy from a database by name.
ä./Store/DropRetentionPolicyæ
$*"Store/DropRetentionPolicy/databasedatabasevar"meta/store.go(÷…0Î…@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/DropRetentionPolicy/database≤
 *Store/DropRetentionPolicy/namenamevar"meta/store.go(÷…0Î…@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/DropRetentionPolicy/nameÌ
*Store/DropRetentionPolicy/ssvar"meta/store.go(∏…0¿…@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropRetentionPolicy/s“
*Store/DropUserDropUserfunc"meta/store.go(åá0“à8RΩ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) error",
        "UnderlyingTypeString": "func(name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4DropUser removes a user from the metastore by name.
ä./Store/DropUserú
*Store/DropUser/namenamevar"meta/store.go(•á0∞á@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropUser/name◊
*Store/DropUser/ssvar"meta/store.go(íá0öá@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/DropUser/s¡
*	Store/ErrErrfunc"meta/store.go(äg0Ωg8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() \u003c-chan error",
        "UnderlyingTypeString": "func() \u003c-chan error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z@

text/plain2Err returns a channel for all out-of-band errors.
ä./Store/ErrÀ
*Store/Err/ssvar"meta/store.go(êg0òg@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Err/s∫
*Store/GetHashPasswordFnGetHashPasswordFnfunc"meta/store.go(Î≈0‹∆8R˝{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() github.com/influxdb/influxdb/meta.HashPasswordFn",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.HashPasswordFn",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZO

text/plainAGetHashPasswordFn returns the current password hashing function.
ä./Store/GetHashPasswordFnÈ
*Store/GetHashPasswordFn/ssvar"meta/store.go(Ò≈0˘≈@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/GetHashPasswordFn/sµ
*Store/IDPathIDPathfunc"meta/store.go(í 0ÿ 8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZA

text/plain3IDPath returns the path to the local node ID file.
ä./Store/IDPath—
*Store/IDPath/ssvar"meta/store.go(ò 0† @Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/IDPath/s¿
*Store/IsLeaderIsLeaderfunc"meta/store.go(˛g0èi8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZJ

text/plain<IsLeader returns true if the store is currently the leader.
ä./Store/IsLeader’
*Store/IsLeader/ssvar"meta/store.go(Ñh0åh@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/IsLeader/sÍ
*Store/LeaderLeaderfunc"meta/store.go(ˇi0ãk8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zv

text/plainhLeader returns what the store thinks is the current leader. An empty
string indicates no leader exists.
ä./Store/Leader—
*Store/Leader/ssvar"meta/store.go(Öj0çj@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Leader/sÔ
*Store/MarshalBinaryMarshalBinaryfunc"meta/store.go(Õâ0√ä8Rª{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDMarshalBinary encodes the store's data to a binary protobuf format.
ä./Store/MarshalBinary·
*Store/MarshalBinary/ssvar"meta/store.go(”â0€â@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/MarshalBinary/sï
*
Store/NodeNodefunc"meta/store.go(¯ç0∑è8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(id uint64) (ni *github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "UnderlyingTypeString": "func(id uint64) (ni *github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z)

text/plainNode returns a node by id.
ä./Store/NodeÊ
*Store/Node/$store0/datadatavar"meta/store.go(«é0—é@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Node/$store0/data£
*Store/Node/errerrvar"meta/store.go(ßé0∞é@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Node/erré
*Store/Node/ididvar"meta/store.go(çé0ñé@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Node/idÿ
*Store/Node/ninivar"meta/store.go(ôé0•é@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Node/niœ
*Store/Node/ssvar"meta/store.go(˛ç0Üé@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Node/s∑
*Store/NodeByHost
NodeByHostfunc"meta/store.go(„è0≤ë8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(host string) (ni *github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "UnderlyingTypeString": "func(host string) (ni *github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z5

text/plain'NodeByHost returns a node by hostname.
ä./Store/NodeByHostÚ
*Store/NodeByHost/$store0/datadatavar"meta/store.go(∫ê0ƒê@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeByHost/$store0/dataØ
*Store/NodeByHost/errerrvar"meta/store.go(öê0£ê@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeByHost/err†
*Store/NodeByHost/hosthostvar"meta/store.go(˛è0âê@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeByHost/host‰
*Store/NodeByHost/ninivar"meta/store.go(åê0òê@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeByHost/ni€
*Store/NodeByHost/ssvar"meta/store.go(Èè0Òè@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeByHost/sÂ
*Store/NodeIDNodeIDfunc"meta/store.go(©ç0ÿç8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zo

text/plainaNodeID returns the identifier for the local node.
Panics if the node has not joined the cluster.
ä./Store/NodeID”
*Store/NodeID/ssvar"meta/store.go(Øç0∑ç@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/NodeID/sé
*Store/NodesNodesfunc"meta/store.go(⁄ë0‡í8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (a []github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "UnderlyingTypeString": "func() (a []github.com/influxdb/influxdb/meta.NodeInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z1

text/plain#Nodes returns a list of all nodes.
ä./Store/NodesË
*Store/Nodes/$store0/datadatavar"meta/store.go(°í0´í@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Nodes/$store0/dataŸ
*Store/Nodes/aavar"meta/store.go(Ûë0ˇë@Rí{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Nodes/a•
*Store/Nodes/errerrvar"meta/store.go(Åí0äí@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Nodes/err—
*Store/Nodes/ssvar"meta/store.go(‡ë0Ëë@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Nodes/s•
*
Store/OpenOpenfunc"meta/store.go(à!0û.8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z9

text/plain+Open opens and initializes the raft store.
ä./Store/Open—
(*&Store/Open/$store2/$store0/$store1/errerrvar"meta/store.go(Ø&0√&@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Open/$store2/$store0/$store1/err—
(*&Store/Open/$store2/$store0/$store2/errerrvar"meta/store.go(¶'0æ'@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Open/$store2/$store0/$store2/err—
(*&Store/Open/$store2/$store0/$store3/errerrvar"meta/store.go(ú(0Ø(@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Open/$store2/$store0/$store3/err—
(*&Store/Open/$store2/$store0/$store4/errerrvar"meta/store.go(ó)0¨)@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Open/$store2/$store0/$store4/err—
(*&Store/Open/$store2/$store0/$store5/errerrvar"meta/store.go(ò*0©*@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./Store/Open/$store2/$store0/$store5/err±
*Store/Open/$store2/errerrvar"meta/store.go(Î$0˜*@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Open/$store2/err±
*Store/Open/$store3/errerrvar"meta/store.go(º,0“,@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Open/$store3/errÕ
*Store/Open/ssvar"meta/store.go(é!0ñ!@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Open/s‘
*
Store/PathPathfunc"meta/store.go(´0⁄8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zf

text/plainXPath returns the root path when open.
Returns an empty string when the store is closed.
ä./Store/PathÕ
*Store/Path/ssvar"meta/store.go(±0π@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Path/s≈
*Store/PeersPeersfunc"meta/store.go(’m0¬n8Rø{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0Peers returns the list of peers in the cluster.
ä./Store/Peersœ
*Store/Peers/ssvar"meta/store.go(€m0„m@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Peers/sÔ
*Store/PrecreateShardGroupsPrecreateShardGroupsfunc"meta/store.go(´ö0¸£8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(cutoff time.Time) error",
        "UnderlyingTypeString": "func(cutoff time.Time) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z∞

text/plain°PrecreateShardGroups creates shard groups whose endtime is before the cutoff time passed in. This
avoid the need for these shards to be created when data for the corresponding time range arrives.
Shard creation involves Raft consensus, and precreation avoids taking the hit at write-time.
ä./Store/PrecreateShardGroups„
p*nStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/errerrvar"meta/store.go(Åû0 û@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äp./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/errß
p*nStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/sgisgivar"meta/store.go(Åû0 û@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äp./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/sgi„
p*nStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/errerrvar"meta/store.go(—†0•°@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äp./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/err∂
u*sStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/newGroupnewGroupvar"meta/store.go(—†0•°@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äu./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/newGroupú
w*uStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/nextShardGroupTimenextShardGroupTimevar"meta/store.go(çù0≈ù@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äw./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store0/nextShardGroupTime≥
N*LStore/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/ggvar"meta/store.go(´ö0¸£@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äN./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/$store0/$store0/g≤
?*=Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/rprpvar"meta/store.go(´ö0¸£@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä?./Store/PrecreateShardGroups/$store0/$store0/$store0/$store0/rp∏
/*-Store/PrecreateShardGroups/$store0/$store0/didivar"meta/store.go(´ö0¸£@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./Store/PrecreateShardGroups/$store0/$store0/diÜ
)*'Store/PrecreateShardGroups/$store0/datadatavar"meta/store.go(˜ö0Åõ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./Store/PrecreateShardGroups/$store0/dataË
#*!Store/PrecreateShardGroups/cutoffcutoffvar"meta/store.go(–ö0‡ö@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/PrecreateShardGroups/cutoffÔ
*Store/PrecreateShardGroups/ssvar"meta/store.go(±ö0πö@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/PrecreateShardGroups/s·
*Store/ReadyReadyfunc"meta/store.go(ôf0”f8R≈{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() \u003c-chan struct{}",
        "UnderlyingTypeString": "func() \u003c-chan struct{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZT

text/plainFReady returns a channel that is closed once the store is initialized.
ä./Store/Readyœ
*Store/Ready/ssvar"meta/store.go(üf0ßf@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Ready/sé
*Store/RetentionPoliciesRetentionPoliciesfunc"meta/store.go(≥¥0º∂8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string) (a []github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "UnderlyingTypeString": "func(database string) (a []github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZY

text/plainKRetentionPolicies returns a list of all retention policies for a database.
ä./Store/RetentionPoliciesÄ
&*$Store/RetentionPolicies/$store0/datadatavar"meta/store.go(†µ0™µ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/RetentionPolicies/$store0/dataä
$*"Store/RetentionPolicies/$store0/didivar"meta/store.go(∂µ0”µ@Rò{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.DatabaseInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/RetentionPolicies/$store0/diá
*Store/RetentionPolicies/aavar"meta/store.go(Á¥0˛¥@R®{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicies/a∫
"* Store/RetentionPolicies/databasedatabasevar"meta/store.go(’¥0‰¥@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/RetentionPolicies/databaseΩ
*Store/RetentionPolicies/errerrvar"meta/store.go(Äµ0âµ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicies/errÈ
*Store/RetentionPolicies/ssvar"meta/store.go(π¥0¡¥@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicies/sú
*Store/RetentionPolicyRetentionPolicyfunc"meta/store.go(«≠0ÓØ8R„{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "UnderlyingTypeString": "func(database string, name string) (rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCRetentionPolicy returns a retention policy for a database by name.
ä./Store/RetentionPolicy¸
$*"Store/RetentionPolicy/$store0/datadatavar"meta/store.go(πÆ0√Æ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/RetentionPolicy/$store0/data∂
 *Store/RetentionPolicy/databasedatabasevar"meta/store.go(Á≠0¸≠@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/RetentionPolicy/databaseπ
*Store/RetentionPolicy/errerrvar"meta/store.go(ôÆ0¢Æ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicy/err™
*Store/RetentionPolicy/namenamevar"meta/store.go(Á≠0¸≠@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicy/nameá
*Store/RetentionPolicy/rpirpivar"meta/store.go(ˇ≠0óÆ@R¶{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicy/rpiÂ
*Store/RetentionPolicy/ssvar"meta/store.go(Õ≠0’≠@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/RetentionPolicy/sû
*Store/SetAdminPrivilegeSetAdminPrivilegefunc"meta/store.go(Çê0§í8R›{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(username string, admin bool) error",
        "UnderlyingTypeString": "func(username string, admin bool) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainESetAdminPrivilege sets the admin privilege for a user on a database.
ä./Store/SetAdminPrivilege≠
*Store/SetAdminPrivilege/adminadminvar"meta/store.go(µê0øê@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetAdminPrivilege/adminÈ
*Store/SetAdminPrivilege/ssvar"meta/store.go(àê0êê@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetAdminPrivilege/s∫
"* Store/SetAdminPrivilege/usernameusernamevar"meta/store.go(§ê0≥ê@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/SetAdminPrivilege/usernameπ
*Store/SetDataSetDatafunc"meta/store.go(‡§0ù¶8Rˇ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(data *github.com/influxdb/influxdb/meta.Data) error",
        "UnderlyingTypeString": "func(data *github.com/influxdb/influxdb/meta.Data) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zj

text/plain\SetData force overwrites the root data.
This should only be used when restoring a snapshot.
ä./Store/SetData‹
*Store/SetData/datadatavar"meta/store.go(¯§0Ç•@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetData/data’
*Store/SetData/ssvar"meta/store.go(Ê§0Ó§@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetData/sø
!*Store/SetDefaultRetentionPolicySetDefaultRetentionPolicyfunc"meta/store.go(–¿0ç√8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string) error",
        "UnderlyingTypeString": "func(database string, name string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZZ

text/plainLSetDefaultRetentionPolicy sets the default retention policy for a database.
ä!./Store/SetDefaultRetentionPolicy 
**(Store/SetDefaultRetentionPolicy/databasedatabasevar"meta/store.go(˙¿0è¡@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/SetDefaultRetentionPolicy/databaseæ
&*$Store/SetDefaultRetentionPolicy/namenamevar"meta/store.go(˙¿0è¡@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/SetDefaultRetentionPolicy/name˘
#*!Store/SetDefaultRetentionPolicy/ssvar"meta/store.go(÷¿0ﬁ¿@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/SetDefaultRetentionPolicy/s≥
*Store/SetHashPasswordFnSetHashPasswordFnfunc"meta/store.go(ó«0Ü»8RÅ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(fn github.com/influxdb/influxdb/meta.HashPasswordFn)",
        "UnderlyingTypeString": "func(fn github.com/influxdb/influxdb/meta.HashPasswordFn)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZD

text/plain6SetHashPasswordFn sets the password hashing function.
ä./Store/SetHashPasswordFnÒ
*Store/SetHashPasswordFn/fnfnvar"meta/store.go(π«0 «@Rè{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.HashPasswordFn",
        "UnderlyingTypeString": "func(password string) ([]byte, error)",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetHashPasswordFn/fnÈ
*Store/SetHashPasswordFn/ssvar"meta/store.go(ù«0•«@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetHashPasswordFn/s–
*Store/SetPeersSetPeersfunc"meta/store.go(æk0îl8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(addrs []string) error",
        "UnderlyingTypeString": "func(addrs []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z<

text/plain.SetPeers sets a list of peers in the cluster.
ä./Store/SetPeers°
*Store/SetPeers/addrsaddrsvar"meta/store.go(◊k0Âk@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPeers/addrs’
*Store/SetPeers/ssvar"meta/store.go(ƒk0Ãk@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPeers/sÚ
*Store/SetPrivilegeSetPrivilegefunc"meta/store.go(Íå0∏è8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "UnderlyingTypeString": "func(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZF

text/plain8SetPrivilege sets a privilege for a user on a database.
ä./Store/SetPrivilege∞
*Store/SetPrivilege/databasedatabasevar"meta/store.go(áç0†ç@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPrivilege/database¡
*Store/SetPrivilege/ppvar"meta/store.go(¢ç0∂ç@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPrivilege/pﬂ
*Store/SetPrivilege/ssvar"meta/store.go(å0¯å@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPrivilege/s∞
*Store/SetPrivilege/usernameusernamevar"meta/store.go(áç0†ç@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/SetPrivilege/username÷
*Store/ShardGroupByTimestampShardGroupByTimestampfunc"meta/store.go( ‚0úÂ8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string, timestamp time.Time) (sgi *github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "UnderlyingTypeString": "func(database string, policy string, timestamp time.Time) (sgi *github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZU

text/plainGShardGroupByTimestamp returns a shard group for a policy by timestamp.
ä./Store/ShardGroupByTimestampà
**(Store/ShardGroupByTimestamp/$store0/datadatavar"meta/store.go(‘„0ﬁ„@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/ShardGroupByTimestamp/$store0/data¬
&*$Store/ShardGroupByTimestamp/databasedatabasevar"meta/store.go(‚0á„@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/ShardGroupByTimestamp/database≈
!*Store/ShardGroupByTimestamp/errerrvar"meta/store.go(¥„0Ω„@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/ShardGroupByTimestamp/errº
$*"Store/ShardGroupByTimestamp/policypolicyvar"meta/store.go(‚0á„@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./Store/ShardGroupByTimestamp/policyÒ
*Store/ShardGroupByTimestamp/ssvar"meta/store.go(–‚0ÿ‚@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroupByTimestamp/sâ
!*Store/ShardGroupByTimestamp/sgisgivar"meta/store.go(ü„0≤„@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/ShardGroupByTimestamp/sgiÛ
'*%Store/ShardGroupByTimestamp/timestamp	timestampvar"meta/store.go(â„0ú„@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/ShardGroupByTimestamp/timestampè
*Store/ShardGroupsShardGroupsfunc"meta/store.go(ŸŸ0√€8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "UnderlyingTypeString": "func(database string, policy string) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZX

text/plainJShardGroups returns a list of all shard groups for a policy by timestamp.
ä./Store/ShardGroupsÙ
 *Store/ShardGroups/$store0/datadatavar"meta/store.go(√⁄0Õ⁄@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/ShardGroups/$store0/dataÒ
*Store/ShardGroups/aavar"meta/store.go(è⁄0°⁄@Rû{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroups/aÆ
*Store/ShardGroups/databasedatabasevar"meta/store.go(ıŸ0å⁄@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroups/database±
*Store/ShardGroups/errerrvar"meta/store.go(£⁄0¨⁄@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroups/err®
*Store/ShardGroups/policypolicyvar"meta/store.go(ıŸ0å⁄@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroups/policy›
*Store/ShardGroups/ssvar"meta/store.go(ﬂŸ0ÁŸ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardGroups/s¥
*Store/ShardGroupsByTimeRangeShardGroupsByTimeRangefunc"meta/store.go(◊‹0®ﬂ8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, policy string, tmin time.Time, tmax time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "UnderlyingTypeString": "func(database string, policy string, tmin time.Time, tmax time.Time) (a []github.com/influxdb/influxdb/meta.ShardGroupInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zõ

text/plainåShardGroupsByTimeRange returns a slice of ShardGroups that may contain data for the given time range. ShardGroups
are sorted by start time.
ä./Store/ShardGroupsByTimeRangeä
+*)Store/ShardGroupsByTimeRange/$store0/datadatavar"meta/store.go(‚›0Ï›@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./Store/ShardGroupsByTimeRange/$store0/dataá
 *Store/ShardGroupsByTimeRange/aavar"meta/store.go(Æ›0¿›@Rû{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/ShardGroupsByTimeRange/aƒ
'*%Store/ShardGroupsByTimeRange/databasedatabasevar"meta/store.go(˛‹0ï›@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./Store/ShardGroupsByTimeRange/database«
"* Store/ShardGroupsByTimeRange/errerrvar"meta/store.go(¬›0À›@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/ShardGroupsByTimeRange/erræ
%*#Store/ShardGroupsByTimeRange/policypolicyvar"meta/store.go(˛‹0ï›@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Store/ShardGroupsByTimeRange/policyÛ
 *Store/ShardGroupsByTimeRange/ssvar"meta/store.go(›‹0Â‹@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/ShardGroupsByTimeRange/sÊ
#*!Store/ShardGroupsByTimeRange/tmaxtmaxvar"meta/store.go(ó›0´›@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/ShardGroupsByTimeRange/tmaxÊ
#*!Store/ShardGroupsByTimeRange/tmintminvar"meta/store.go(ó›0´›@RÙ{
        "PkgName": "meta",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/ShardGroupsByTimeRange/tminæ
*Store/ShardOwner
ShardOwnerfunc"meta/store.go(ûÂ0ùÈ8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(shardID uint64) (database string, policy string, sgi *github.com/influxdb/influxdb/meta.ShardGroupInfo)",
        "UnderlyingTypeString": "func(shardID uint64) (database string, policy string, sgi *github.com/influxdb/influxdb/meta.ShardGroupInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner›
U*SStore/ShardOwner/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/shshvar"meta/store.go(ûÂ0ùÈ@Râ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardInfo",
        "UnderlyingTypeString": "struct{ID uint64; OwnerIDs []uint64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äU./Store/ShardOwner/$store0/$store0/$store0/$store0/$store0/$store0/$store0/$store1/shü
D*BStore/ShardOwner/$store0/$store0/$store0/$store0/$store0/$store0/ggvar"meta/store.go(ûÂ0ùÈ@RÓ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "struct{ID uint64; StartTime time.Time; EndTime time.Time; DeletedAt time.Time; Shards []github.com/influxdb/influxdb/meta.ShardInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äD./Store/ShardOwner/$store0/$store0/$store0/$store0/$store0/$store0/g°
6*4Store/ShardOwner/$store0/$store0/$store0/$store0/rpirpivar"meta/store.go(ûÂ0ùÈ@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./Store/ShardOwner/$store0/$store0/$store0/$store0/rpiß
&*$Store/ShardOwner/$store0/$store0/dbidbivar"meta/store.go(ûÂ0ùÈ@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/ShardOwner/$store0/$store0/dbiÚ
*Store/ShardOwner/$store0/datadatavar"meta/store.go(áÊ0ëÊ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/$store0/data¨
*Store/ShardOwner/databasedatabasevar"meta/store.go( Â0·Â@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/database¶
*Store/ShardOwner/policypolicyvar"meta/store.go( Â0·Â@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/policy€
*Store/ShardOwner/ssvar"meta/store.go(§Â0¨Â@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/sÛ
*Store/ShardOwner/sgisgivar"meta/store.go(„Â0ˆÂ@Rú{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.ShardGroupInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/sgi©
*Store/ShardOwner/shardIDshardIDvar"meta/store.go(πÂ0«Â@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/ShardOwner/shardID∂
*Store/SnapshotSnapshotfunc"meta/store.go(ø`0Ça8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0Snapshot saves a snapshot of the current state.
ä./Store/Snapshot’
*Store/Snapshot/ssvar"meta/store.go(≈`0Õ`@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Snapshot/s 
*Store/UpdateNode
UpdateNodefunc"meta/store.go(ëñ0”ò8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(id uint64, host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(id uint64, host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z@

text/plain2UpdateNode updates an existing node in the store.
ä./Store/UpdateNodeø
*Store/UpdateNode/$store0/errerrvar"meta/store.go(›ñ0ìò@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateNode/$store0/err†
*Store/UpdateNode/hosthostvar"meta/store.go(∑ñ0¬ñ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateNode/hostö
*Store/UpdateNode/ididvar"meta/store.go(¨ñ0µñ@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateNode/id€
*Store/UpdateNode/ssvar"meta/store.go(óñ0üñ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateNode/sü
*Store/UpdateRetentionPolicyUpdateRetentionPolicyfunc"meta/store.go(Œ√0Ô»8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "UnderlyingTypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZJ

text/plain<UpdateRetentionPolicy updates an existing retention policy.
ä./Store/UpdateRetentionPolicy◊
3*1Store/UpdateRetentionPolicy/$store1/$store0/valuevaluevar"meta/store.go(§≈0¡≈@Rƒ{
        "PkgName": "meta",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./Store/UpdateRetentionPolicy/$store1/$store0/valueŸ
3*1Store/UpdateRetentionPolicy/$store2/$store0/valuevaluevar"meta/store.go(å∆0™∆@R∆{
        "PkgName": "meta",
        "TypeString": "uint32",
        "UnderlyingTypeString": "uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./Store/UpdateRetentionPolicy/$store2/$store0/value¬
&*$Store/UpdateRetentionPolicy/databasedatabasevar"meta/store.go(Ù√0âƒ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/UpdateRetentionPolicy/database¬
&*$Store/UpdateRetentionPolicy/durationdurationvar"meta/store.go(¯ƒ0á≈@R∆{
        "PkgName": "meta",
        "TypeString": "*int64",
        "UnderlyingTypeString": "*int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/UpdateRetentionPolicy/duration∂
"* Store/UpdateRetentionPolicy/namenamevar"meta/store.go(Ù√0âƒ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/UpdateRetentionPolicy/name¡
%*#Store/UpdateRetentionPolicy/newNamenewNamevar"meta/store.go(¥ƒ0√ƒ@R»{
        "PkgName": "meta",
        "TypeString": "*string",
        "UnderlyingTypeString": "*string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Store/UpdateRetentionPolicy/newNameƒ
&*$Store/UpdateRetentionPolicy/replicaNreplicaNvar"meta/store.go(ﬂ≈0Ô≈@R»{
        "PkgName": "meta",
        "TypeString": "*uint32",
        "UnderlyingTypeString": "*uint32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/UpdateRetentionPolicy/replicaNó
!*Store/UpdateRetentionPolicy/rpurpuvar"meta/store.go(ãƒ0•ƒ@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./Store/UpdateRetentionPolicy/rpuÒ
*Store/UpdateRetentionPolicy/ssvar"meta/store.go(‘√0‹√@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateRetentionPolicy/s¯
*Store/UpdateUser
UpdateUserfunc"meta/store.go(ââ0≠å8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string, password string) error",
        "UnderlyingTypeString": "func(name string, password string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z@

text/plain2UpdateUser updates an existing user in the store.
ä./Store/UpdateUserØ
*Store/UpdateUser/errerrvar"meta/store.go(Òâ0ñä@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateUser/err†
*Store/UpdateUser/hashhashvar"meta/store.go(Òâ0ñä@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateUser/hash†
*Store/UpdateUser/namenamevar"meta/store.go(§â0πâ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateUser/name¨
*Store/UpdateUser/passwordpasswordvar"meta/store.go(§â0πâ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateUser/password€
*Store/UpdateUser/ssvar"meta/store.go(èâ0óâ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UpdateUser/sõ
*
Store/UserUserfunc"meta/store.go(∆Ô0âÒ8R©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(name string) (ui *github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "UnderlyingTypeString": "func(name string) (ui *github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z+

text/plainUser returns a user by name.
ä./Store/UserÊ
*Store/User/$store0/datadatavar"meta/store.go(ó0°@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/User/$store0/data£
*Store/User/errerrvar"meta/store.go(˜Ô0Ä@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/User/errî
*Store/User/namenamevar"meta/store.go(€Ô0ÊÔ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/User/nameœ
*Store/User/ssvar"meta/store.go(ÃÔ0‘Ô@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/User/sÿ
*Store/User/uiuivar"meta/store.go(ÈÔ0ıÔ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/User/uiÎ
*Store/UserCount	UserCountfunc"meta/store.go(Ôñ0ˇó8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (count int, err error)",
        "UnderlyingTypeString": "func() (count int, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZL

text/plain>UserCount returns the number of users defined in the cluster.
ä./Store/UserCount
*Store/UserCount/$store0/datadatavar"meta/store.go(∑ó0¡ó@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserCount/$store0/dataõ
*Store/UserCount/countcountvar"meta/store.go(åó0ïó@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserCount/count≠
*Store/UserCount/errerrvar"meta/store.go(óó0†ó@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserCount/errŸ
*Store/UserCount/ssvar"meta/store.go(ıñ0˝ñ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserCount/sˇ
*Store/UserPrivilegeUserPrivilegefunc"meta/store.go(€î0¨ñ8R€{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(username string, database string) (p *github.com/influxdb/influxdb/influxql.Privilege, err error)",
        "UnderlyingTypeString": "func(username string, database string) (p *github.com/influxdb/influxdb/influxql.Privilege, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4UserPrivilege returns the privilege for a database.
ä./Store/UserPrivilege¯
"* Store/UserPrivilege/$store0/datadatavar"meta/store.go(Ãï0÷ï@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/UserPrivilege/$store0/data≤
*Store/UserPrivilege/databasedatabasevar"meta/store.go(˘î0íï@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivilege/databaseµ
*Store/UserPrivilege/errerrvar"meta/store.go(¨ï0µï@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivilege/errÒ
*Store/UserPrivilege/ppvar"meta/store.go(ïï0™ï@Rö{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/influxql.Privilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivilege/p·
*Store/UserPrivilege/ssvar"meta/store.go(·î0Èî@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivilege/s≤
*Store/UserPrivilege/usernameusernamevar"meta/store.go(˘î0íï@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivilege/username
*Store/UserPrivilegesUserPrivilegesfunc"meta/store.go(Ÿí0¢î8RÕ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(username string) (p map[string]github.com/influxdb/influxdb/influxql.Privilege, err error)",
        "UnderlyingTypeString": "func(username string) (p map[string]github.com/influxdb/influxdb/influxql.Privilege, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z>

text/plain0UserPrivileges returns a list of all databases.
ä./Store/UserPrivileges˙
#*!Store/UserPrivileges/$store0/datadatavar"meta/store.go(Àì0’ì@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/UserPrivileges/$store0/data∑
*Store/UserPrivileges/errerrvar"meta/store.go(´ì0¥ì@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivileges/errá
*Store/UserPrivileges/ppvar"meta/store.go(äì0©ì@RÆ{
        "PkgName": "meta",
        "TypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivileges/p„
*Store/UserPrivileges/ssvar"meta/store.go(ﬂí0Áí@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivileges/s¥
*Store/UserPrivileges/usernameusernamevar"meta/store.go(¯í0áì@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/UserPrivileges/usernameé
*Store/UsersUsersfunc"meta/store.go(±Ò0∑Ú8Rì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() (a []github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "UnderlyingTypeString": "func() (a []github.com/influxdb/influxdb/meta.UserInfo, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z1

text/plain#Users returns a list of all users.
ä./Store/UsersË
*Store/Users/$store0/datadatavar"meta/store.go(¯Ò0ÇÚ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Users/$store0/dataŸ
*Store/Users/aavar"meta/store.go( Ò0÷Ò@Rí{
        "PkgName": "meta",
        "TypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Users/a•
*Store/Users/errerrvar"meta/store.go(ÿÒ0·Ò@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Users/err—
*Store/Users/ssvar"meta/store.go(∑Ò0øÒ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/Users/s‹
*Store/VisitRetentionPoliciesVisitRetentionPoliciesfunc"meta/store.go(Å‡0˛·8R˝{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(f func(d github.com/influxdb/influxdb/meta.DatabaseInfo, r github.com/influxdb/influxdb/meta.RetentionPolicyInfo))",
        "UnderlyingTypeString": "func(f func(d github.com/influxdb/influxdb/meta.DatabaseInfo, r github.com/influxdb/influxdb/meta.RetentionPolicyInfo))",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zb

text/plainTVisitRetentionPolicies calls the given function with full retention policy details.
ä./Store/VisitRetentionPolicies∂
A*?Store/VisitRetentionPolicies/$store0/$store0/$store0/$store0/rprpvar"meta/store.go(Å‡0˛·@Rä{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyInfo",
        "UnderlyingTypeString": "struct{Name string; ReplicaN int; Duration time.Duration; ShardGroupDuration time.Duration; ShardGroups []github.com/influxdb/influxdb/meta.ShardGroupInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äA./Store/VisitRetentionPolicies/$store0/$store0/$store0/$store0/rpº
1*/Store/VisitRetentionPolicies/$store0/$store0/didivar"meta/store.go(Å‡0˛·@R∞{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.DatabaseInfo",
        "UnderlyingTypeString": "struct{Name string; DefaultRetentionPolicy string; RetentionPolicies []github.com/influxdb/influxdb/meta.RetentionPolicyInfo; ContinuousQueries []github.com/influxdb/influxdb/meta.ContinuousQueryInfo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./Store/VisitRetentionPolicies/$store0/$store0/diä
+*)Store/VisitRetentionPolicies/$store0/datadatavar"meta/store.go(Ê‡0‡@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./Store/VisitRetentionPolicies/$store0/dataÅ
 *Store/VisitRetentionPolicies/ffvar"meta/store.go(®‡0’‡@Rò{
        "PkgName": "meta",
        "TypeString": "func(d github.com/influxdb/influxdb/meta.DatabaseInfo, r github.com/influxdb/influxdb/meta.RetentionPolicyInfo)",
        "UnderlyingTypeString": "func(d github.com/influxdb/influxdb/meta.DatabaseInfo, r github.com/influxdb/influxdb/meta.RetentionPolicyInfo)",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/VisitRetentionPolicies/fÛ
 *Store/VisitRetentionPolicies/ssvar"meta/store.go(á‡0è‡@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/VisitRetentionPolicies/sÇ
*Store/WaitForDataChangedWaitForDataChangedfunc"meta/store.go(ÊN0∂P8Rß{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zl

text/plain^WaitForDataChanged will block the current goroutine until the metastore index has
be updated.
ä./Store/WaitForDataChanged≈
"* Store/WaitForDataChanged/changedchangedvar"meta/store.go(¢O0∂O@R‘{
        "PkgName": "meta",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/WaitForDataChanged/changedÈ
*Store/WaitForDataChanged/ssvar"meta/store.go(ÏN0ÙN@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/WaitForDataChanged/s•
*Store/WaitForLeaderWaitForLeaderfunc"meta/store.go(a0Œe8R—{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(timeout time.Duration) error",
        "UnderlyingTypeString": "func(timeout time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zt

text/plainfWaitForLeader sleeps until a leader is found or a timeout occurs.
timeout == 0 means to wait forever.
ä./Store/WaitForLeaderﬂ
*Store/WaitForLeader/ssvar"meta/store.go(ˆa0˛a@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/WaitForLeader/s∂
*Store/WaitForLeader/tickertickervar"meta/store.go(≠c0›c@R“{
        "PkgName": "meta",
        "TypeString": "*time.Ticker",
        "UnderlyingTypeString": "*time.Ticker",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/WaitForLeader/ticker≥
*Store/WaitForLeader/timeouttimeoutvar"meta/store.go(éb0£b@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/WaitForLeader/timeout±
*Store/WaitForLeader/timertimervar"meta/store.go(«b0Êb@R–{
        "PkgName": "meta",
        "TypeString": "*time.Timer",
        "UnderlyingTypeString": "*time.Timer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/WaitForLeader/timerß
*Store/applyapplyfunc"meta/store.go(î¥0⁄¥Rù{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4apply applies a serialized command to the raft log.
ä./Store/applyç
*Store/apply/bbvar"meta/store.go(™¥0≤¥@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/apply/b—
*Store/apply/ssvar"meta/store.go(ö¥0¢¥@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/apply/s¶
*Store/cachedData
cachedDatafunc"meta/store.go(¢¬0É√R—{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/cachedData€
*Store/cachedData/ssvar"meta/store.go(®¬0∞¬@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/cachedData/s≈
*Store/changeStatechangeStatefunc"meta/store.go(™H0ﬂJRÔ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(state github.com/influxdb/influxdb/meta.raftState) error",
        "UnderlyingTypeString": "func(state github.com/influxdb/influxdb/meta.raftState) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeStateø
*Store/changeState/$store0/errerrvar"meta/store.go(„H0˝H@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeState/$store0/errø
*Store/changeState/$store1/errerrvar"meta/store.go(ƒI0ﬂI@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeState/$store1/errø
*Store/changeState/$store2/errerrvar"meta/store.go(ôJ0≤J@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeState/$store2/err€
*Store/changeState/ssvar"meta/store.go(∞H0∏H@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeState/sá
*Store/changeState/statestatevar"meta/store.go(∆H0’H@R™{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.raftState",
        "UnderlyingTypeString": "interface{addPeer(addr string) error; apply(b []byte) error; close() error; initialize() error; invalidate() error; isLeader() bool; lastIndex() uint64; leader() string; open() error; peers() ([]string, error); remove() error; setPeers(addrs []string) error; snapshot() error; sync(index uint64, timeout time.Duration) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/changeState/state—
*Store/closeclosefunc"meta/store.go(∏P0ÌRRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/closeœ
*Store/close/ssvar"meta/store.go(æP0∆P@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/close/sÁ
*Store/createLocalNodecreateLocalNodefunc"meta/store.go(ËY0Å^Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zv

text/plainhcreateLocalNode creates the node for this local instance.
Writes the id of the node to file on success.
ä./Store/createLocalNode«
#*!Store/createLocalNode/$store0/errerrvar"meta/store.go(´Z0ƒZ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/createLocalNode/$store0/err«
#*!Store/createLocalNode/$store2/errerrvar"meta/store.go(¨\0«\@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/createLocalNode/$store2/err∑
*Store/createLocalNode/errerrvar"meta/store.go(ù[0À[@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/createLocalNode/errÏ
*Store/createLocalNode/ninivar"meta/store.go(ù[0À[@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/createLocalNode/ni„
*Store/createLocalNode/ssvar"meta/store.go(ÓY0ˆY@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/createLocalNode/sÈ
*Store/createRootDircreateRootDirfunc"meta/store.go(É^0Œ^Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/createRootDirﬂ
*Store/createRootDir/ssvar"meta/store.go(â^0ë^@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/createRootDir/sÔ
*Store/enableLocalRaftenableLocalRaftfunc"meta/store.go(éE0ÿFRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableLocalRaftÆ
"* Store/enableLocalRaft/$store0/okokvar"meta/store.go(ºE0›E@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/enableLocalRaft/$store0/okÓ
*Store/enableLocalRaft/lrlrvar"meta/store.go(¢F0ºF@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableLocalRaft/lr„
*Store/enableLocalRaft/ssvar"meta/store.go(îE0úE@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableLocalRaft/sÚ
*Store/enableRemoteRaftenableRemoteRaftfunc"meta/store.go(⁄F0®HRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableRemoteRaft∞
#*!Store/enableRemoteRaft/$store0/okokvar"meta/store.go(âG0´G@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./Store/enableRemoteRaft/$store0/okÚ
*Store/enableRemoteRaft/rrrrvar"meta/store.go(ÒG0åH@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableRemoteRaft/rrÂ
*Store/enableRemoteRaft/ssvar"meta/store.go(‡F0ËF@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/enableRemoteRaft/s‘
*
Store/execexecfunc"meta/store.go(ØØ0€≥Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(typ github.com/influxdb/influxdb/meta/internal.Command_Type, desc *github.com/gogo/protobuf/proto.ExtensionDesc, value interface{}) error",
        "UnderlyingTypeString": "func(typ github.com/influxdb/influxdb/meta/internal.Command_Type, desc *github.com/gogo/protobuf/proto.ExtensionDesc, value interface{}) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/execã
*Store/exec/bbvar"meta/store.go(Œ±0Í±@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/bÎ
*Store/exec/cmdcmdvar"meta/store.go(™∞0Œ∞@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/cmd‚
*Store/exec/descdescvar"meta/store.go(ﬂØ0¯Ø@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/gogo/protobuf/proto.ExtensionDesc",
        "UnderlyingTypeString": "*github.com/gogo/protobuf/proto.ExtensionDesc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/desc£
*Store/exec/errerrvar"meta/store.go(–∞0˚∞@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/errœ
*Store/exec/ssvar"meta/store.go(µØ0ΩØ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/s¡
*Store/exec/typtypvar"meta/store.go(ƒØ0›Ø@Rˆ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.Command_Type",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/typ°
*Store/exec/valuevaluevar"meta/store.go(˙Ø0ã∞@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/exec/valueœ
*Store/handleExecConnhandleExecConnfunc"meta/store.go(ˇr0€ÑRõ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(conn net.Conn)",
        "UnderlyingTypeString": "func(conn net.Conn)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDhandleExecConn reads a command from the connection and executes it.
ä./Store/handleExecConnÂ
2*0Store/handleExecConn/$store0/$store0/$store2/errerrvar"meta/store.go(›w0ôx@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./Store/handleExecConn/$store0/$store0/$store2/err’
**(Store/handleExecConn/$store0/$store0/errerrvar"meta/store.go(Åv0∆v@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store0/$store0/err…
1*/Store/handleExecConn/$store0/$store0/leaderConn
leaderConnvar"meta/store.go(Åv0∆v@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./Store/handleExecConn/$store0/$store0/leaderConn’
**(Store/handleExecConn/$store1/$store0/errerrvar"meta/store.go(Ây0Éz@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store1/$store0/err’
**(Store/handleExecConn/$store1/$store1/errerrvar"meta/store.go(œ{0˛{@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store1/$store1/err’
**(Store/handleExecConn/$store1/$store2/errerrvar"meta/store.go(Ô|0è}@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store1/$store2/err’
**(Store/handleExecConn/$store1/$store3/errerrvar"meta/store.go(è~0ø~@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store1/$store3/err’
**(Store/handleExecConn/$store1/$store4/errerrvar"meta/store.go(∂0…@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./Store/handleExecConn/$store1/$store4/err≠
 *Store/handleExecConn/$store1/bbvar"meta/store.go(Ày0ﬂy@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/handleExecConn/$store1/b≥
"* Store/handleExecConn/$store1/bufbufvar"meta/store.go(“|0È|@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/handleExecConn/$store1/buf”
!*Store/handleExecConn/$store1/szszvar"meta/store.go(¿{0…{@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z!

text/plainRead command size.
ä!./Store/handleExecConn/$store1/szØ
 *Store/handleExecConn/$store3/bbvar"meta/store.go(éÇ0¨Ç@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./Store/handleExecConn/$store3/b«
"* Store/handleExecConn/$store3/errerrvar"meta/store.go(éÇ0¨Ç@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./Store/handleExecConn/$store3/erró
*Store/handleExecConn/connconnvar"meta/store.go(ûs0´s@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/handleExecConn/conn∂
*Store/handleExecConn/errerrvar"meta/store.go(ôy0îÄ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/handleExecConn/errä
*Store/handleExecConn/resprespvar"meta/store.go(∑Ä0ÕÄ@RÄ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.Response",
        "UnderlyingTypeString": "struct{OK *bool \"protobuf:\\\"varint,1,req\\\" json:\\\"OK,omitempty\\\"\"; Error *string \"protobuf:\\\"bytes,2,opt\\\" json:\\\"Error,omitempty\\\"\"; Index *uint64 \"protobuf:\\\"varint,3,opt\\\" json:\\\"Index,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z&

text/plainBuild response message.
ä./Store/handleExecConn/resp·
*Store/handleExecConn/ssvar"meta/store.go(Ös0çs@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/handleExecConn/s˛
*Store/hashWithSalthashWithSaltfunc"meta/store.go(≠˛0·ˇRŸ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(salt []byte, password string) ([]byte, error)",
        "UnderlyingTypeString": "func(salt []byte, password string) ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:hashWithSalt returns a salted hash of password using salt
ä./Store/hashWithSalt˜
*Store/hashWithSalt/hasherhashervar"meta/store.go(˚˛0ëˇ@Rì{
        "PkgName": "meta",
        "TypeString": "hash.Hash",
        "UnderlyingTypeString": "interface{BlockSize() int; Reset(); Size() int; Sum(b []byte) []byte; io.Writer}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/hashWithSalt/hasher∞
*Store/hashWithSalt/passwordpasswordvar"meta/store.go(◊˛0Ê˛@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/hashWithSalt/passwordﬂ
*Store/hashWithSalt/ssvar"meta/store.go(≥˛0ª˛@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/hashWithSalt/s§
*Store/hashWithSalt/saltsaltvar"meta/store.go( ˛0’˛@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/hashWithSalt/saltÄ
*
Store/initinitfunc"meta/store.go(†W0¯XRÅ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zª

text/plain¨init initializes the store in a separate goroutine.
This occurs when the store first creates or joins a cluster.
The ready channel is closed once the store is initialized.
ä./Store/init±
*Store/init/$store0/errerrvar"meta/store.go(ﬂW0˘W@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/init/$store0/errÕ
*Store/init/ssvar"meta/store.go(¶W0ÆW@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/init/s√
*Store/initialize
initializefunc"meta/store.go(†L0ÁLRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Za

text/plainSinitialize attempts to bootstrap the raft store if there are no committed entries.
ä./Store/initializeŸ
*Store/initialize/ssvar"meta/store.go(¶L0ÆL@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/initialize/s‚
*Store/invalidate
invalidatefunc"meta/store.go(ÊÆ0≠ØRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/invalidate€
*Store/invalidate/ssvar"meta/store.go(ÏÆ0ÙÆ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/invalidate/s„
*Store/joinClusterjoinClusterfunc"meta/store.go(¸:0åERç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/joinClusterˇ
?*=Store/joinCluster/$store2/$store0/$store0/$store0/$store1/errerrvar"meta/store.go(àB0®B@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä?./Store/joinCluster/$store2/$store0/$store0/$store0/$store1/errü
O*MStore/joinCluster/$store2/$store0/$store0/$store0/$store2/$store0/$store0/errerrvar"meta/store.go(·C0¸C@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äO./Store/joinCluster/$store2/$store0/$store0/$store0/$store2/$store0/$store0/errÔ
7*5Store/joinCluster/$store2/$store0/$store0/$store0/errerrvar"meta/store.go(ô?0Ã?@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./Store/joinCluster/$store2/$store0/$store0/$store0/err´
7*5Store/joinCluster/$store2/$store0/$store0/$store0/resresvar"meta/store.go(ô?0Ã?@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.JoinResult",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.JoinResult",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./Store/joinCluster/$store2/$store0/$store0/$store0/res–
0*.Store/joinCluster/$store2/$store0/$store0/joinjoinvar"meta/store.go(¸:0åE@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./Store/joinCluster/$store2/$store0/$store0/join€
*Store/joinCluster/ssvar"meta/store.go(Ç;0ä;@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/joinCluster/s≤
*Store/loadState	loadStatefunc"meta/store.go(ó50˙:Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZS

text/plainEloadState sets the appropriate raftState from our persistent storage
ä./Store/loadStateÀ
%*#Store/loadState/$store2/$store1/errerrvar"meta/store.go(©90‹9@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./Store/loadState/$store2/$store1/err´
*Store/loadState/errerrvar"meta/store.go(º50¸5@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/loadState/err£
*Store/loadState/peerspeersvar"meta/store.go(º50¸5@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/loadState/peers◊
*Store/loadState/ssvar"meta/store.go(ù50•5@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/loadState/sè
*Store/openRaftopenRaftfunc"meta/store.go(âK0»KRç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z3

text/plain%openRaft initializes the raft store.
ä./Store/openRaft’
*Store/openRaft/ssvar"meta/store.go(èK0óK@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/openRaft/s
*
Store/readreadfunc"meta/store.go(“®0®≠R˘{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(fn func(*github.com/influxdb/influxdb/meta.Data) error) error",
        "UnderlyingTypeString": "func(fn func(*github.com/influxdb/influxdb/meta.Data) error) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z±

text/plain¢read executes a function with the current metadata.
If an error is returned then the cache is invalidated and retried.

The error returned by the retry is passed through to the original caller
unless the error is errInvalidate. A nil error is passed through when
errInvalidate is returned.
ä./Store/read≥
*Store/read/$store0/errerrvar"meta/store.go(≠™0º™@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/$store0/err≥
*Store/read/$store1/errerrvar"meta/store.go(ö´0Ø´@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/$store1/err≥
*Store/read/$store2/errerrvar"meta/store.go(‘¨0„¨@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/$store2/err÷
*Store/read/datadatavar"meta/store.go(∑©0≈©@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/dataË
*Store/read/fnfnvar"meta/store.go(Á®0˚®@R†{
        "PkgName": "meta",
        "TypeString": "func(*github.com/influxdb/influxdb/meta.Data) error",
        "UnderlyingTypeString": "func(*github.com/influxdb/influxdb/meta.Data) error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/fnœ
*Store/read/ssvar"meta/store.go(ÿ®0‡®@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/read/sï
*Store/readIDreadIDfunc"meta/store.go(£S0ÈURç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1readID reads the local node ID from the ID file.
ä./Store/readIDç
*Store/readID/bbvar"meta/store.go(≈S0ÍS@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/readID/b•
*Store/readID/errerrvar"meta/store.go(≈S0ÍS@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/readID/errê
*Store/readID/ididvar"meta/store.go(„T0íU@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/readID/id—
*Store/readID/ssvar"meta/store.go(©S0±S@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/readID/sº
*Store/remoteExec
remoteExecfunc"meta/store.go(ôµ0Ú¿Rù{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:remoteExec sends an encoded command to the remote leader.
ä./Store/remoteExecœ
&*$Store/remoteExec/$store4/$store1/errerrvar"meta/store.go(Í∫0Åª@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./Store/remoteExec/$store4/$store1/errø
*Store/remoteExec/$store4/errerrvar"meta/store.go(‚π0ù∫@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/$store4/errø
*Store/remoteExec/$store5/errerrvar"meta/store.go(Óª0ùº@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/$store5/errø
*Store/remoteExec/$store6/errerrvar"meta/store.go(ˇº0üΩ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/$store6/errø
*Store/remoteExec/$store7/errerrvar"meta/store.go(òæ0∫æ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/$store7/errø
*Store/remoteExec/$store8/errerrvar"meta/store.go(Ä¿0≠¿@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/$store8/erró
*Store/remoteExec/bbvar"meta/store.go(¥µ0ºµ@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/bù
*Store/remoteExec/bufbufvar"meta/store.go(„º0˙º@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/bufë
*Store/remoteExec/connconnvar"meta/store.go(Ì∂0®∑@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/connØ
*Store/remoteExec/errerrvar"meta/store.go(Ì∂0®∑@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/err¶
*Store/remoteExec/leaderleadervar"meta/store.go(Óµ0å∂@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/leader˛
*Store/remoteExec/resprespvar"meta/store.go(˝Ω0ìæ@RÄ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.Response",
        "UnderlyingTypeString": "struct{OK *bool \"protobuf:\\\"varint,1,req\\\" json:\\\"OK,omitempty\\\"\"; Error *string \"protobuf:\\\"bytes,2,opt\\\" json:\\\"Error,omitempty\\\"\"; Index *uint64 \"protobuf:\\\"varint,3,opt\\\" json:\\\"Index,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainUnmarshal response.
ä./Store/remoteExec/resp€
*Store/remoteExec/ssvar"meta/store.go(üµ0ßµ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/remoteExec/sø
*Store/remoteExec/szszvar"meta/store.go(‡ª0Èª@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z#

text/plainRead response bytes.
ä./Store/remoteExec/szÜ
*Store/saltedHash
saltedHashfunc"meta/store.go(úÄ0ÜÇRÎ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(password string) (salt []byte, hash []byte, err error)",
        "UnderlyingTypeString": "func(password string) (salt []byte, hash []byte, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZD

text/plain6saltedHash returns a salt and salted hash of password
ä./Store/saltedHashØ
*Store/saltedHash/errerrvar"meta/store.go(‹Ä0ÂÄ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/saltedHash/err†
*Store/saltedHash/hashhashvar"meta/store.go(…Ä0⁄Ä@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/saltedHash/hash¨
*Store/saltedHash/passwordpasswordvar"meta/store.go(∑Ä0∆Ä@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/saltedHash/password€
*Store/saltedHash/ssvar"meta/store.go(¢Ä0™Ä@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/saltedHash/s†
*Store/saltedHash/saltsaltvar"meta/store.go(…Ä0⁄Ä@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/saltedHash/salt⁄
*Store/serveExecListenerserveExecListenerfunc"meta/store.go(´o0∂rRÅ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zo

text/plainaserveExecListener processes remote exec connections.
This function runs in a separate goroutine.
ä./Store/serveExecListenerΩ
.*,Store/serveExecListener/$store0/$store0/connconnvar"meta/store.go(èp0≥p@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../Store/serveExecListener/$store0/$store0/conn€
-*+Store/serveExecListener/$store0/$store0/errerrvar"meta/store.go(èp0≥p@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./Store/serveExecListener/$store0/$store0/errÁ
*Store/serveExecListener/ssvar"meta/store.go(±o0πo@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/serveExecListener/sÿ
*Store/serveRPCListenerserveRPCListenerfunc"meta/store.go(√Ö0ÑâRÅ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zn

text/plain`serveRPCListener processes remote exec connections.
This function runs in a separate goroutine.
ä./Store/serveRPCListenerΩ
-*+Store/serveRPCListener/$store0/$store0/connconnvar"meta/store.go(¶Ü0…Ü@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./Store/serveRPCListener/$store0/$store0/conn€
,**Store/serveRPCListener/$store0/$store0/errerrvar"meta/store.go(¶Ü0…Ü@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./Store/serveRPCListener/$store0/$store0/errÁ
*Store/serveRPCListener/ssvar"meta/store.go(…Ö0—Ö@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/serveRPCListener/s„
*
Store/syncsyncfunc"meta/store.go(¥¡0†¬R”{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(index uint64, timeout time.Duration) error",
        "UnderlyingTypeString": "func(index uint64, timeout time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZK

text/plain=sync polls the state machine until it reaches a given index.
ä./Store/syncó
*Store/sync/indexindexvar"meta/store.go(…¡0’¡@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/sync/indexœ
*Store/sync/ssvar"meta/store.go(∫¡0¬¡@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/sync/s£
*Store/sync/timeouttimeoutvar"meta/store.go(◊¡0Ï¡@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/sync/timeout
*Store/syncNodeInfosyncNodeInfofunc"meta/store.go(ü/0Õ4Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zá

text/plainysyncNodeInfo continuously tries to update the current nodes hostname
in the meta store.  It will retry until successful.
ä./Store/syncNodeInfoÅ
@*>Store/syncNodeInfo/$store0/$store0/$store0/$store0/$store0/errerrvar"meta/store.go(˙/0ì0@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä@./Store/syncNodeInfo/$store0/$store0/$store0/$store0/$store0/errÒ
8*6Store/syncNodeInfo/$store0/$store0/$store0/$store0/errerrvar"meta/store.go(∫00—0@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./Store/syncNodeInfo/$store0/$store0/$store0/$store0/err¶
7*5Store/syncNodeInfo/$store0/$store0/$store0/$store0/ninivar"meta/store.go(∫00—0@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä7./Store/syncNodeInfo/$store0/$store0/$store0/$store0/ni·
0*.Store/syncNodeInfo/$store0/$store0/$store0/errerrvar"meta/store.go(ﬁ/0Æ3@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./Store/syncNodeInfo/$store0/$store0/$store0/err›
*Store/syncNodeInfo/ssvar"meta/store.go(•/0≠/@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/syncNodeInfo/sı
*Store/writeNodeIDwriteNodeIDfunc"meta/store.go(–^0ä`Rü{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*Store",
        "TypeString": "func(id uint64) error",
        "UnderlyingTypeString": "func(id uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/writeNodeIDø
*Store/writeNodeID/$store0/errerrvar"meta/store.go(É_0õ_@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/writeNodeID/$store0/errö
*Store/writeNodeID/ididvar"meta/store.go(Ï^0ı^@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/writeNodeID/id€
*Store/writeNodeID/ssvar"meta/store.go(÷^0ﬁ^@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Store/writeNodeID/sÚ
*TestRPCFetchDataTestRPCFetchDatafunc"meta/rpc_test.go(40‰8HRì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData∂
!*TestRPCFetchData/$rpc_test2/expexpvar"meta/rpc_test.go(˚0å@HR∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./TestRPCFetchData/$rpc_test2/expÚ
*TestRPCFetchData/clientRPC	clientRPCvar"meta/rpc_test.go(€0≥@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/clientRPC≤
*TestRPCFetchData/errerrvar"meta/rpc_test.go(÷0ˇ@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/errﬂ
*TestRPCFetchData/mdmdvar"meta/rpc_test.go(÷0ˇ@HRà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/mdÒ
*TestRPCFetchData/serverRPC	serverRPCvar"meta/rpc_test.go(\0§@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/serverRPCÓ
*TestRPCFetchData/srvsrvvar"meta/rpc_test.go(ß0…@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/srv†
*TestRPCFetchData/ttvar"meta/rpc_test.go(J0V@HRŒ{
        "PkgName": "meta",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchData/t†
!*TestRPCFetchDataMatchesBlockingTestRPCFetchDataMatchesBlockingfunc"meta/rpc_test.go(€
0‚8HRì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./TestRPCFetchDataMatchesBlockingÍ
;*9TestRPCFetchDataMatchesBlocking/$rpc_test0/$rpc_test2/expexpvar"meta/rpc_test.go(Í0¸@HR∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä;./TestRPCFetchDataMatchesBlocking/$rpc_test0/$rpc_test2/expÊ
0*.TestRPCFetchDataMatchesBlocking/$rpc_test0/errerrvar"meta/rpc_test.go(ø0Á@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./TestRPCFetchDataMatchesBlocking/$rpc_test0/errì
/*-TestRPCFetchDataMatchesBlocking/$rpc_test0/mdmdvar"meta/rpc_test.go(ø0Á@HRà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./TestRPCFetchDataMatchesBlocking/$rpc_test0/mdê
+*)TestRPCFetchDataMatchesBlocking/clientRPC	clientRPCvar"meta/rpc_test.go(ƒ0π@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./TestRPCFetchDataMatchesBlocking/clientRPCá
$*"TestRPCFetchDataMatchesBlocking/fsfsvar"meta/rpc_test.go(ë0Ê@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./TestRPCFetchDataMatchesBlocking/fsê
+*)TestRPCFetchDataMatchesBlocking/serverRPC	serverRPCvar"meta/rpc_test.go(Ë0ä@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./TestRPCFetchDataMatchesBlocking/serverRPCå
%*#TestRPCFetchDataMatchesBlocking/srvsrvvar"meta/rpc_test.go(ç0Ø@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./TestRPCFetchDataMatchesBlocking/srv¿
#*!TestRPCFetchDataMatchesBlocking/ttvar"meta/rpc_test.go(Ä0å@HRŒ{
        "PkgName": "meta",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./TestRPCFetchDataMatchesBlocking/t©
$*"TestRPCFetchDataMatchesBlocking/wgwgvar"meta/rpc_test.go(‡0Ò@HRà{
        "PkgName": "meta",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z*

text/plainKick off the fetching block
ä$./TestRPCFetchDataMatchesBlocking/wgö
*TestRPCFetchDataMatchesLeaderTestRPCFetchDataMatchesLeaderfunc"meta/rpc_test.go(Ê0Ÿ
8HRì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCFetchDataMatchesLeaderå
)*'TestRPCFetchDataMatchesLeader/clientRPC	clientRPCvar"meta/rpc_test.go(ú0ë	@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./TestRPCFetchDataMatchesLeader/clientRPCÃ
#*!TestRPCFetchDataMatchesLeader/errerrvar"meta/rpc_test.go(¥	0›	@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./TestRPCFetchDataMatchesLeader/err˘
"* TestRPCFetchDataMatchesLeader/mdmdvar"meta/rpc_test.go(¥	0›	@HRà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./TestRPCFetchDataMatchesLeader/mdå
)*'TestRPCFetchDataMatchesLeader/serverRPC	serverRPCvar"meta/rpc_test.go(ö0‚@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./TestRPCFetchDataMatchesLeader/serverRPCà
#*!TestRPCFetchDataMatchesLeader/srvsrvvar"meta/rpc_test.go(Â0á@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./TestRPCFetchDataMatchesLeader/srvº
!*TestRPCFetchDataMatchesLeader/ttvar"meta/rpc_test.go(â0ï@HRŒ{
        "PkgName": "meta",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./TestRPCFetchDataMatchesLeader/t‰
*TestRPCJoinTestRPCJoinfunc"meta/rpc_test.go(‰0Œ8HRì{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin®
*TestRPCJoin/$rpc_test1/expexpvar"meta/rpc_test.go(0˚@HR¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/$rpc_test1/exp¶
*TestRPCJoin/$rpc_test2/expexpvar"meta/rpc_test.go(È0Ò@HR¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/$rpc_test2/exp¨
*TestRPCJoin/$rpc_test3/expexpvar"meta/rpc_test.go(·0ˆ@HR∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/$rpc_test3/exp¨
*TestRPCJoin/$rpc_test4/expexpvar"meta/rpc_test.go(‚0Ù@HR∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/$rpc_test4/expË
*TestRPCJoin/clientRPC	clientRPCvar"meta/rpc_test.go(0Â@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/clientRPC®
*TestRPCJoin/errerrvar"meta/rpc_test.go(Ë0∞@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/errﬂ
*TestRPCJoin/fsfsvar"meta/rpc_test.go(Ü0í@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/fs‰
*TestRPCJoin/resresvar"meta/rpc_test.go(Ë0∞@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.JoinResult",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.JoinResult",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/resË
*TestRPCJoin/serverRPC	serverRPCvar"meta/rpc_test.go(î0∂@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/serverRPC‰
*TestRPCJoin/srvsrvvar"meta/rpc_test.go(π0€@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/srvò
*TestRPCJoin/ttvar"meta/rpc_test.go(ı0Å@HRŒ{
        "PkgName": "meta",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./TestRPCJoin/t⁄
*UnmarshalTimeUnmarshalTimefunc"meta/data.go(æÂ0™Ê8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(v int64) time.Time",
        "UnderlyingTypeString": "func(v int64) time.Time",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zh

text/plainZUnmarshalTime converts nanoseconds since epoch to time.
A zero value returns a zero time.
ä./UnmarshalTimeé
*UnmarshalTime/vvvar"meta/data.go(—Â0ÿÂ@Rƒ{
        "PkgName": "meta",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UnmarshalTime/v˘
-*+UpdateRetentionPolicy$statement_executor601UpdateRetentionPolicyfunc"meta/statement_executor.go(Ÿ0ß@R÷{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "UnderlyingTypeString": "func(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./UpdateRetentionPolicy$statement_executor601‹
"* UpdateUser$statement_executor888
UpdateUserfunc"meta/statement_executor.go(¯0ü@R⁄{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(name string, password string) error",
        "UnderlyingTypeString": "func(name string, password string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./UpdateUser$statement_executor888ô

*UserInfoUserInfotype"meta/data.go(ı◊0Èÿ8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "struct{Name string; Hash string; Admin bool; Privileges map[string]github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZG

text/plain9UserInfo represents metadata about a user in the system.
ä
./UserInfoÎ
*UserInfo/AdminAdminfield"meta/data.go(Æÿ0Ωÿ8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "UserInfo",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/AdminË
*UserInfo/Authorize	Authorizefunc"meta/data.go(±Ÿ0Ü€8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*UserInfo",
        "TypeString": "func(privilege github.com/influxdb/influxdb/influxql.Privilege, database string) bool",
        "UnderlyingTypeString": "func(privilege github.com/influxdb/influxdb/influxql.Privilege, database string) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCAuthorize returns true if the user is authorized and false if not.
ä./UserInfo/AuthorizeØ
*UserInfo/Authorize/databasedatabasevar"meta/data.go(ÌŸ0¸Ÿ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Authorize/databaseô
*UserInfo/Authorize/okokvar"meta/data.go(¶⁄0∆⁄@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Authorize/ok¿
*UserInfo/Authorize/ppvar"meta/data.go(¶⁄0∆⁄@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Authorize/pÿ
*UserInfo/Authorize/privilege	privilegevar"meta/data.go(œŸ0ÎŸ@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Authorize/privilegeÁ
*UserInfo/Authorize/uiuivar"meta/data.go(∑Ÿ0√Ÿ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Authorize/uiÏ
*UserInfo/HashHashfield"meta/data.go(õÿ0¨ÿ8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "UserInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/HashÏ
*UserInfo/NameNamefield"meta/data.go(àÿ0ôÿ8R°{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "UserInfo",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/NameÊ
*UserInfo/Privileges
Privilegesfield"meta/data.go(øÿ0Áÿ8Râ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "UserInfo",
        "TypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/influxql.Privilege",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/Privileges’
*UserInfo/cloneclonefunc"meta/data.go(¨€0ä›RŸ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "UserInfo",
        "TypeString": "func() github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z/

text/plain!clone returns a deep copy of si.
ä./UserInfo/cloneº
'*%UserInfo/clone/$data0/$data0/$data0/kkvar"meta/data.go(¨€0ä›@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./UserInfo/clone/$data0/$data0/$data0/k‚
'*%UserInfo/clone/$data0/$data0/$data0/vvvar"meta/data.go(¨€0ä›@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./UserInfo/clone/$data0/$data0/$data0/vØ
*UserInfo/clone/otherothervar"meta/data.go(”€0ﬁ€@R◊{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "struct{Name string; Hash string; Admin bool; Privileges map[string]github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/clone/other¶
*UserInfo/clone/uiuivar"meta/data.go(≤€0Ω€@R◊{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "struct{Name string; Hash string; Admin bool; Privileges map[string]github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/clone/uiˇ
*UserInfo/marshalmarshalfunc"meta/data.go(¿›0À‡RÌ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "UserInfo",
        "TypeString": "func() *github.com/influxdb/influxdb/meta/internal.UserInfo",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta/internal.UserInfo",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1marshal serializes to a protobuf representation.
ä./UserInfo/marshalπ
"* UserInfo/marshal/$data0/databasedatabasevar"meta/data.go(¿›0À‡@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./UserInfo/marshal/$data0/database‚
#*!UserInfo/marshal/$data0/privilege	privilegevar"meta/data.go(¿›0À‡@RÏ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/influxql.Privilege",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./UserInfo/marshal/$data0/privilegeı
*UserInfo/marshal/pbpbvar"meta/data.go(Û›0Óﬁ@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/marshal/pb™
*UserInfo/marshal/uiuivar"meta/data.go(∆›0—›@R◊{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "struct{Name string; Hash string; Admin bool; Privileges map[string]github.com/influxdb/influxdb/influxql.Privilege}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/marshal/uiê
*UserInfo/unmarshal	unmarshalfunc"meta/data.go(á·0≤„RÚ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*UserInfo",
        "TypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.UserInfo)",
        "UnderlyingTypeString": "func(pb *github.com/influxdb/influxdb/meta/internal.UserInfo)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7unmarshal deserializes from a protobuf representation.
ä./UserInfo/unmarshalé
*UserInfo/unmarshal/$data0/ppvar"meta/data.go(á·0≤„@R¨{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UserPrivilege",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UserPrivilege",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/unmarshal/$data0/p˘
*UserInfo/unmarshal/pbpbvar"meta/data.go(•·0∫·@R¢{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/unmarshal/pbÁ
*UserInfo/unmarshal/uiuivar"meta/data.go(ç·0ô·@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.UserInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./UserInfo/unmarshal/ui◊
&*$UserPrivilege$statement_executor1158UserPrivilegefunc"meta/statement_executor.go(Ü	0À	@R {
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error)",
        "UnderlyingTypeString": "func(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./UserPrivilege$statement_executor1158Ã
'*%UserPrivileges$statement_executor1085UserPrivilegesfunc"meta/statement_executor.go(Ω0É	@Rº{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error)",
        "UnderlyingTypeString": "func(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./UserPrivileges$statement_executor1085ı
*Users$statement_executor791Usersfunc"meta/statement_executor.go(ó0≤@RÇ{
        "PkgName": "meta",
        "Receiver": "interface{CreateContinuousQuery(database string, name string, query string) error; CreateDatabase(name string) (*DatabaseInfo, error); CreateRetentionPolicy(database string, rpi *github.com/influxdb/influxdb/meta.RetentionPolicyInfo) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); CreateUser(name string, password string, admin bool) (*github.com/influxdb/influxdb/meta.UserInfo, error); Database(name string) (*github.com/influxdb/influxdb/meta.DatabaseInfo, error); Databases() ([]github.com/influxdb/influxdb/meta.DatabaseInfo, error); DefaultRetentionPolicy(database string) (*github.com/influxdb/influxdb/meta.RetentionPolicyInfo, error); DropContinuousQuery(database string, name string) error; DropDatabase(name string) error; DropRetentionPolicy(database string, name string) error; DropUser(name string) error; Nodes() ([]github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); SetAdminPrivilege(username string, admin bool) error; SetDefaultRetentionPolicy(database string, name string) error; SetPrivilege(username string, database string, p github.com/influxdb/influxdb/influxql.Privilege) error; UpdateRetentionPolicy(database string, name string, rpu *github.com/influxdb/influxdb/meta.RetentionPolicyUpdate) error; UpdateUser(name string, password string) error; UserPrivilege(username string, database string) (*github.com/influxdb/influxdb/influxql.Privilege, error); UserPrivileges(username string) (map[string]github.com/influxdb/influxdb/influxql.Privilege, error); Users() ([]github.com/influxdb/influxdb/meta.UserInfo, error)}",
        "TypeString": "func() ([]github.com/influxdb/influxdb/meta.UserInfo, error)",
        "UnderlyingTypeString": "func() ([]github.com/influxdb/influxdb/meta.UserInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./Users$statement_executor791à
*WaitForDataChanged$rpc726WaitForDataChangedfunc"meta/rpc.go(÷0@Rõ{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./WaitForDataChanged$rpc726ÿ
*assertassertfunc"meta/store.go(˝Ø0Ä±Rπ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(condition bool, msg string, v ...interface{})",
        "UnderlyingTypeString": "func(condition bool, msg string, v ...interface{})",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z`

text/plainRassert will panic with a given formatted message if the given condition is false.
ä./assertó
*assert/condition	conditionvar"meta/store.go(â∞0ó∞@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./assert/conditionâ
*
assert/msgmsgvar"meta/store.go(ô∞0£∞@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./assert/msgë

*assert/vvvar"meta/store.go(•∞0µ∞@R‘{
        "PkgName": "meta",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./assert/v‡

*authUserauthUsertype"meta/store.go(¬0ÔRü{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.authUser",
        "UnderlyingTypeString": "struct{salt []byte; hash []byte}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./authUserœ
*authUser/hashhashfield"meta/store.go(‚0ÌRá{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "authUser",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./authUser/hashœ
*authUser/saltsaltfield"meta/store.go(’0‡Rá{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "authUser",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./authUser/saltÇ
*brokerbrokerfunc"meta/proxy.go(‹	0ÆRÌ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(dst net.Conn, src net.Conn, srcClosed chan struct{}, errors chan error)",
        "UnderlyingTypeString": "func(dst net.Conn, src net.Conn, srcClosed chan struct{}, errors chan error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZX

text/plainJThis does the actual data transfer.
The broker only closes the Read side.
ä./broker©
*broker/$proxy1/errerrvar"meta/proxy.go(‡0Ú@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/$proxy1/err¯
*
broker/dstdstvar"meta/proxy.go(Ë	0˘	@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/dstô
*
broker/errerrvar"meta/proxy.go(õ0∂@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/errò
*broker/errorserrorsvar"meta/proxy.go(î
0•
@RŒ{
        "PkgName": "meta",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/errors¯
*
broker/srcsrcvar"meta/proxy.go(Ë	0˘	@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/srcß
*broker/srcClosed	srcClosedvar"meta/proxy.go(˚	0í
@R‘{
        "PkgName": "meta",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./broker/srcClosed∏
*btou64btou64func"meta/rpc.go(¢Z0ÂZRˇ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(b []byte) uint64",
        "UnderlyingTypeString": "func(b []byte) uint64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./btou64ˇ

*btou64/bbvar"meta/rpc.go(ÆZ0∂Z@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./btou64/b¥
*cachedData$rpc522
cachedDatafunc"meta/rpc.go(ä0ú@Rﬂ{
        "PkgName": "meta",
        "Receiver": "interface{AddPeer(host string) error; CreateNode(host string) (*NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "TypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./cachedData$rpc522“

*containscontainsfunc"meta/rpc.go(ÁZ0‹[Rì{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(s []string, e string) bool",
        "UnderlyingTypeString": "func(s []string, e string) bool",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./containsè
*contains/$rpc0/aavar"meta/rpc.go(ÁZ0‹[@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./contains/$rpc0/aÉ
*
contains/eevar"meta/rpc.go(Å[0â[@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./contains/eá
*
contains/ssvar"meta/rpc.go(ıZ0ˇZ@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./contains/s◊
*errInvalidateerrInvalidatevar"meta/store.go(∂Æ0‰ÆRÚ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zë

text/plainÇerrInvalidate is returned to read() when the cache should be invalidated
but an error should not be passed through to the caller.
ä./errInvalidateë
*	errLookup	errLookupvar"meta/errors.go(∂0ÿRÙ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "map[string]error",
        "UnderlyingTypeString": "map[string]error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZW

text/plainIerrLookup stores a mapping of error strings to well defined error types.
ä./errLookupô
*errserrsvar"meta/errors.go(Œ0‰R‰{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "[7]error",
        "UnderlyingTypeString": "[7]error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./errs∆
*	fakeStore	fakeStoretype"meta/rpc_test.go(’0œHR˝{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; leader string; newNodeID uint64; md *github.com/influxdb/influxdb/meta.Data; blockChan chan struct{}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStoreö
*fakeStore/AddPeerAddPeerfunc"meta/rpc_test.go(Ã$0â%8HR¡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func(host string) error",
        "UnderlyingTypeString": "func(host string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/AddPeerË
*fakeStore/AddPeer/ffvar"meta/rpc_test.go(“$0ﬁ$@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/AddPeer/f•
*fakeStore/AddPeer/hosthostvar"meta/rpc_test.go(Ë$0Û$@HR∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/AddPeer/hostÅ
*fakeStore/CreateNode
CreateNodefunc"meta/rpc_test.go(ä%0Ä&8HRü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/CreateNodeÓ
*fakeStore/CreateNode/ffvar"meta/rpc_test.go(ê%0ú%@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/CreateNode/f´
*fakeStore/CreateNode/hosthostvar"meta/rpc_test.go(©%0¥%@HR∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/CreateNode/hostÖ
*fakeStore/IsLeaderIsLeaderfunc"meta/rpc_test.go(¯"0∂#8HR©{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/IsLeaderÍ
*fakeStore/IsLeader/ffvar"meta/rpc_test.go(˛"0ä#@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/IsLeader/fÉ
*fakeStore/LeaderLeaderfunc"meta/rpc_test.go(∑#0˘#8HR≠{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/LeaderÊ
*fakeStore/Leader/ffvar"meta/rpc_test.go(Ω#0…#@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/Leader/fÅ
*fakeStore/NodeByHost
NodeByHostfunc"meta/rpc_test.go(Å&0”&8HRü{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "UnderlyingTypeString": "func(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/NodeByHostÓ
*fakeStore/NodeByHost/ffvar"meta/rpc_test.go(á&0ì&@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/NodeByHost/f´
*fakeStore/NodeByHost/hosthostvar"meta/rpc_test.go(†&0´&@HR∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/NodeByHost/hostñ
*fakeStore/PeersPeersfunc"meta/rpc_test.go(˙#0À$8HR√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/Peers‰
*fakeStore/Peers/ffvar"meta/rpc_test.go(Ä$0å$@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/Peers/f•
*fakeStore/WaitForDataChangedWaitForDataChangedfunc"meta/rpc_test.go(‘&0°'8HR´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/WaitForDataChanged˛
 *fakeStore/WaitForDataChanged/ffvar"meta/rpc_test.go(⁄&0Ê&@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./fakeStore/WaitForDataChanged/fÙ
*fakeStore/blockChan	blockChanfield"meta/rpc_test.go(∂0ÕHRñ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "fakeStore",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/blockChanµ
*fakeStore/cachedData
cachedDatafunc"meta/rpc_test.go(õ"0ˆ"HR’{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*fakeStore",
        "TypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/meta.Data",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/cachedDataÓ
*fakeStore/cachedData/ffvar"meta/rpc_test.go(°"0≠"@HRí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.fakeStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/cachedData/f›
*fakeStore/leaderleaderfield"meta/rpc_test.go(Å0ëHRà{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "fakeStore",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/leaderì
*fakeStore/mdmdfield"meta/rpc_test.go(•0¥HR {
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "fakeStore",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/mdÆ
*fakeStore/mumufield"meta/rpc_test.go(È0ˇHRÂ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "fakeStore",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/muÊ
*fakeStore/newNodeID	newNodeIDfield"meta/rpc_test.go(ì0£HRà{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "fakeStore",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./fakeStore/newNodeIDï
*init$errors3807initfunc"meta/errors.go(⁄0ß@R«{
        "PkgName": "meta",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./init$errors3807æ
*init$errors3807/$errors0/errerrvar"meta/errors.go(⁄0ß@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./init$errors3807/$errors0/errç
*leaderDialTimeoutleaderDialTimeoutconst"meta/rpc.go(√0ÁRË{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:Max size of a message before we treat the size as invalid
ä./leaderDialTimeoutë
*	localRaft	localRafttype"meta/state.go(Ò0”R€{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "struct{wg sync.WaitGroup; closing chan struct{}; store *github.com/influxdb/influxdb/meta.Store; raft *github.com/hashicorp/raft.Raft; transport *github.com/hashicorp/raft.NetworkTransport; peerStore github.com/hashicorp/raft.PeerStore; raftStore *github.com/hashicorp/raft-boltdb.BoltStore; raftLayer *github.com/influxdb/influxdb/meta.raftLayer}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zp

text/plainblocalRaft is a consensus strategy that uses a local raft implementation for
consensus operations.
ä./localRaft¿
*localRaft/addPeeraddPeerfunc"meta/state.go(Œ80∆:Rß{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func(addr string) error",
        "UnderlyingTypeString": "func(addr string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7addPeer adds addr to the list of peers in the cluster.
ä./localRaft/addPeerŸ
*localRaft/addPeer/$state2/futfutvar"meta/state.go(Ô90ä:@RÚ{
        "PkgName": "meta",
        "TypeString": "github.com/hashicorp/raft.Future",
        "UnderlyingTypeString": "interface{Error() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/addPeer/$state2/fut†
*localRaft/addPeer/addraddrvar"meta/state.go(Í80ı8@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/addPeer/addrØ
*localRaft/addPeer/errerrvar"meta/state.go(Ä90°9@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/addPeer/errß
*localRaft/addPeer/peerspeersvar"meta/state.go(Ä90°9@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/addPeer/peers„
*localRaft/addPeer/rrvar"meta/state.go(‘80‡8@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/addPeer/r±
*localRaft/applyapplyfunc"meta/state.go(◊/0ÿ2R°{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4apply applies a serialized command to the raft log.
ä./localRaft/applyª
*localRaft/apply/$state0/errerrvar"meta/state.go(∑00«0@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/$state0/errª
*localRaft/apply/$state1/errerrvar"meta/state.go(ÿ10Ô1@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/$state1/err¢
*localRaft/apply/$state1/okokvar"meta/state.go(ÿ10Ô1@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/$state1/okì
*localRaft/apply/bbvar"meta/state.go(Ò/0˘/@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/bÔ
*localRaft/apply/ffvar"meta/state.go(õ00≤0@R¢{
        "PkgName": "meta",
        "TypeString": "github.com/hashicorp/raft.ApplyFuture",
        "UnderlyingTypeString": "interface{Response() interface{}; github.com/hashicorp/raft.Future}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/fﬂ
*localRaft/apply/rrvar"meta/state.go(›/0È/@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/r¶
*localRaft/apply/resprespvar"meta/state.go(ø10”1@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/apply/resp›
*localRaft/closeclosefunc"meta/state.go(Á(0ç,Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/close€
-*+localRaft/close/$state2/$state0/$state0/errerrvar"meta/state.go(Â*0Ö+@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./localRaft/close/$state2/$state0/$state0/errﬂ
*localRaft/close/rrvar"meta/state.go(Ì(0˘(@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/close/rÈ
*localRaft/closingclosingfield"meta/state.go(ü0∂Rñ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/closingÏ
*localRaft/initialize
initializefunc"meta/state.go(è,0û/Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/initialize≈
"* localRaft/initialize/$state0/errerrvar"meta/state.go(ï-0∫-@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./localRaft/initialize/$state0/errπ
$*"localRaft/initialize/$state0/indexindexvar"meta/state.go(ï-0∫-@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./localRaft/initialize/$state0/index≈
"* localRaft/initialize/$state1/errerrvar"meta/state.go(µ.0œ.@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./localRaft/initialize/$state1/errÈ
*localRaft/initialize/rrvar"meta/state.go(ï,0°,@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/initialize/r·
*localRaft/initialize/ssvar"meta/state.go(π,0≈,@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/initialize/sÏ
*localRaft/invalidate
invalidatefunc"meta/state.go(ê0’Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/invalidateµ
*localRaft/invalidate/errerrvar"meta/state.go(‰0è@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/invalidate/err‚
*localRaft/invalidate/msmsvar"meta/state.go(‰0è@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/invalidate/msÈ
*localRaft/invalidate/rrvar"meta/state.go(ñ0¢@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/invalidate/r‰
*localRaft/isLeaderisLeaderfunc"meta/state.go(å=0ˇ=Rè{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/isLeaderÂ
*localRaft/isLeader/rrvar"meta/state.go(í=0û=@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/isLeader/rÎ
*localRaft/lastIndex	lastIndexfunc"meta/state.go(⁄20ü3Rì{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/lastIndexÁ
*localRaft/lastIndex/rrvar"meta/state.go(‡20Ï2@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/lastIndex/r‚
*localRaft/leaderleaderfunc"meta/state.go(ß<0ä=Rì{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/leader·
*localRaft/leader/rrvar"meta/state.go(≠<0π<@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/leader/rÚ
*localRaft/logLeaderChangeslogLeaderChangesfunc"meta/state.go(ø%0Â(RÖ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/logLeaderChangesÅ
@*>localRaft/logLeaderChanges/$state0/$state0/$state0/$state0/errerrvar"meta/state.go(Ø'0∆'@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä@./localRaft/logLeaderChanges/$state0/$state0/$state0/$state0/err˘
B*@localRaft/logLeaderChanges/$state0/$state0/$state0/$state0/peerspeersvar"meta/state.go(Ø'0∆'@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äB./localRaft/logLeaderChanges/$state0/$state0/$state0/$state0/peersı
*localRaft/logLeaderChanges/rrvar"meta/state.go(≈%0—%@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/logLeaderChanges/r⁄
*localRaft/openopenfunc"meta/state.go(◊0Ω%Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/openŸ
,**localRaft/open/$state3/$state0/$state0/errerrvar"meta/state.go(Å0Ω@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./localRaft/open/$state3/$state0/$state0/err÷
*localRaft/open/configconfigvar"meta/state.go(…0Á@R¸{
        "PkgName": "meta",
        "TypeString": "*github.com/hashicorp/raft.Config",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.Config",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/config©
*localRaft/open/errerrvar"meta/state.go(¢0√@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/err°
*localRaft/open/peerspeersvar"meta/state.go(¢0√@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/peers›
*localRaft/open/rrvar"meta/state.go(›0È@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/r∆
*localRaft/open/raravar"meta/state.go(€#0Ω$@R¯{
        "PkgName": "meta",
        "TypeString": "*github.com/hashicorp/raft.Raft",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.Raft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/ra’
*localRaft/open/ssvar"meta/state.go(ù0©@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/sı
*localRaft/open/snapshots	snapshotsvar"meta/state.go(¶"0˚"@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/hashicorp/raft.FileSnapshotStore",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.FileSnapshotStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/snapshotsÁ
*localRaft/open/storestorevar"meta/state.go(Â 0¨!@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/hashicorp/raft-boltdb.BoltStore",
        "UnderlyingTypeString": "*github.com/hashicorp/raft-boltdb.BoltStore",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/open/store∂
*localRaft/peerStore	peerStorefield"meta/state.go(Ç0öR›{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "github.com/hashicorp/raft.PeerStore",
        "UnderlyingTypeString": "interface{Peers() ([]string, error); SetPeers([]string) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/peerStoreı
*localRaft/peerspeersfunc"meta/state.go(ÿ;0•<R©{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/peersﬂ
*localRaft/peers/rrvar"meta/state.go(ﬁ;0Í;@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/peers/rÑ
*localRaft/raftraftfield"meta/state.go( 0ﬁR∫{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "*github.com/hashicorp/raft.Raft",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.Raft",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/raft≠
*localRaft/raftLayer	raftLayerfield"meta/state.go(Ω0—R‘{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/raftLayer´
*localRaft/raftStore	raftStorefield"meta/state.go(ú0ªR“{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "*github.com/hashicorp/raft-boltdb.BoltStore",
        "UnderlyingTypeString": "*github.com/hashicorp/raft-boltdb.BoltStore",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/raftStore‡
*localRaft/removeremovefunc"meta/state.go(’0¶Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/removeΩ
*localRaft/remove/$state0/errerrvar"meta/state.go(˛0π	@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/remove/$state0/errΩ
*localRaft/remove/$state1/errerrvar"meta/state.go(‹	0ö
@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/remove/$state1/errΩ
*localRaft/remove/$state2/errerrvar"meta/state.go(Ω
0˙
@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/remove/$state2/err·
*localRaft/remove/rrvar"meta/state.go(€0Á@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/remove/r¿
*localRaft/setPeerssetPeersfunc"meta/state.go(˘:0÷;R≠{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func(addrs []string) error",
        "UnderlyingTypeString": "func(addrs []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z<

text/plain.setPeers sets a list of peers in the cluster.
ä./localRaft/setPeers©
*localRaft/setPeers/addrsaddrsvar"meta/state.go(ñ;0§;@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/setPeers/addrsÂ
*localRaft/setPeers/rrvar"meta/state.go(ˇ:0ã;@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/setPeers/rÊ
*localRaft/snapshotsnapshotfunc"meta/state.go(∂70í8Rë{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/snapshot‘
*localRaft/snapshot/futurefuturevar"meta/state.go(ﬁ70˘7@RÚ{
        "PkgName": "meta",
        "TypeString": "github.com/hashicorp/raft.Future",
        "UnderlyingTypeString": "interface{Error() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/snapshot/futureÂ
*localRaft/snapshot/rrvar"meta/state.go(º70»7@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/snapshot/rô
*localRaft/storestorefield"meta/state.go(∏0»RÃ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/store†
*localRaft/syncsyncfunc"meta/state.go(°30¥7R◊{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func(index uint64, timeout time.Duration) error",
        "UnderlyingTypeString": "func(index uint64, timeout time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync∞
#*!localRaft/sync/$state0/$state0/okokvar"meta/state.go(®60À6@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./localRaft/sync/$state0/$state0/okù
*localRaft/sync/indexindexvar"meta/state.go(∫30∆3@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync/index›
*localRaft/sync/rrvar"meta/state.go(ß30≥3@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync/r¨
*localRaft/sync/tickertickervar"meta/state.go(Ë30ò4@R“{
        "PkgName": "meta",
        "TypeString": "*time.Ticker",
        "UnderlyingTypeString": "*time.Ticker",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync/ticker©
*localRaft/sync/timeouttimeoutvar"meta/state.go(»30›3@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync/timeoutß
*localRaft/sync/timertimervar"meta/state.go(∞40œ4@R–{
        "PkgName": "meta",
        "TypeString": "*time.Timer",
        "UnderlyingTypeString": "*time.Timer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/sync/timer´
*localRaft/transport	transportfield"meta/state.go(‡0ÄR“{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "*github.com/hashicorp/raft.NetworkTransport",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.NetworkTransport",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/transport¿
*localRaft/updateMetaDataupdateMetaDatafunc"meta/state.go(®0éRŸ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*localRaft",
        "TypeString": "func(ms *github.com/influxdb/influxdb/meta.Data)",
        "UnderlyingTypeString": "func(ms *github.com/influxdb/influxdb/meta.Data)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/updateMetaDataÍ
*localRaft/updateMetaData/msmsvar"meta/state.go(À0”@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/updateMetaData/msÒ
*localRaft/updateMetaData/rrvar"meta/state.go(Æ0∫@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.localRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/updateMetaData/r≥
"* localRaft/updateMetaData/updatedupdatedvar"meta/state.go(ı0Ö@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./localRaft/updateMetaData/updatedé
*localRaft/wgwgfield"meta/state.go(Ö0ùR {
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "localRaft",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./localRaft/wg≠
*lookupErrorlookupErrorfunc"meta/errors.go(Ç0ÎRˇ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(err error) error",
        "UnderlyingTypeString": "func(err error) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Za

text/plainSlookupError returns a known error reference, if one exists.
Otherwise returns err.
ä./lookupError∞
*lookupError/$errors0/eevar"meta/errors.go(™0…@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./lookupError/$errors0/eù
*lookupError/$errors0/okokvar"meta/errors.go(™0…@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./lookupError/$errors0/ok§
*lookupError/errerrvar"meta/errors.go(ì0ú@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./lookupError/errà
*newRaftLayernewRaftLayerfunc"meta/store.go(§•0◊¶R˜{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(ln net.Listener, addr net.Addr) *github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "func(ln net.Listener, addr net.Addr) *github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z@

text/plain2newRaftLayer returns a new instance of raftLayer.
ä./newRaftLayer¿
*newRaftLayer/addraddrvar"meta/store.go(«•0‘•@RÓ{
        "PkgName": "meta",
        "TypeString": "net.Addr",
        "UnderlyingTypeString": "interface{Network() string; String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newRaftLayer/addr›
*newRaftLayer/lnlnvar"meta/store.go(∂•0≈•@Rë{
        "PkgName": "meta",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newRaftLayer/lnÇ
*newTestServernewTestServerfunc"meta/rpc_test.go(¿0ΩHR≠{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(t *testing.T, rpc *github.com/influxdb/influxdb/meta.rpc) *github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "func(t *testing.T, rpc *github.com/influxdb/influxdb/meta.rpc) *github.com/influxdb/influxdb/meta.testServer",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newTestServer¨
*newTestServer/errerrvar"meta/rpc_test.go(˙0•@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newTestServer/err‚
*newTestServer/lnlnvar"meta/rpc_test.go(˙0•@HRë{
        "PkgName": "meta",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newTestServer/ln⁄
*newTestServer/rpcrpcvar"meta/rpc_test.go(·0È@HRÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newTestServer/rpcú
*newTestServer/ttvar"meta/rpc_test.go(”0ﬂ@HRŒ{
        "PkgName": "meta",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./newTestServer/t£
*proxyproxyfunc"meta/proxy.go(U0ä	R±{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(dst *net.TCPConn, src *net.TCPConn) error",
        "UnderlyingTypeString": "func(dst *net.TCPConn, src *net.TCPConn) error",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z9

text/plain+proxy brokers a connection from src to dst
ä./proxy«
#*!proxy/$proxy0/$proxy0/$proxy0/errerrvar"meta/proxy.go(Ì0¸@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./proxy/$proxy0/$proxy0/$proxy0/errÆ
*proxy/clientClosedclientClosedvar"meta/proxy.go(‰0ä@R‘{
        "PkgName": "meta",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./proxy/clientClosedè
*	proxy/dstdstvar"meta/proxy.go(`0u@R“{
        "PkgName": "meta",
        "TypeString": "*net.TCPConn",
        "UnderlyingTypeString": "*net.TCPConn",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./proxy/dstñ
*proxy/errorserrorsvar"meta/proxy.go(å0©@RŒ{
        "PkgName": "meta",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./proxy/errorsÆ
*proxy/serverClosedserverClosedvar"meta/proxy.go(º0‚@R‘{
        "PkgName": "meta",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./proxy/serverClosedè
*	proxy/srcsrcvar"meta/proxy.go(`0u@R“{
        "PkgName": "meta",
        "TypeString": "*net.TCPConn",
        "UnderlyingTypeString": "*net.TCPConn",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./proxy/srcÆ
*proxy/waitForwaitForvar"meta/proxy.go(î0©@R‘{
        "PkgName": "meta",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zå

text/plain˝wait for one half of the proxy to exit, then trigger a shutdown of the
other half by calling CloseRead(). This will break the read loop in the
broker and allow us to fully close the connection cleanly without a
"use of closed network connection" error.
ä./proxy/waitForÍ
*	raftLayer	raftLayertype"meta/store.go(á§0Ì§R–{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "struct{ln net.Listener; addr net.Addr; conn chan net.Conn; closed chan struct{}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZR

text/plainDraftLayer wraps the connection so it can be re-used for forwarding.
ä./raftLayerÃ
*raftLayer/AcceptAcceptfunc"meta/store.go(·™0®´8R√{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*raftLayer",
        "TypeString": "func() (net.Conn, error)",
        "UnderlyingTypeString": "func() (net.Conn, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z4

text/plain&Accept waits for the next connection.
ä./raftLayer/Accept„
*raftLayer/Accept/llvar"meta/store.go(Á™0Û™@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Accept/lº
*raftLayer/AddrAddrfunc"meta/store.go(äß0øß8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*raftLayer",
        "TypeString": "func() net.Addr",
        "UnderlyingTypeString": "func() net.Addr",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z<

text/plain.Addr returns the local address for the layer.
ä./raftLayer/Addrﬂ
*raftLayer/Addr/llvar"meta/store.go(êß0úß@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Addr/l£
*raftLayer/CloseClosefunc"meta/store.go(≈´0˛´8R´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*raftLayer",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z&

text/plainClose closes the layer.
ä./raftLayer/Close·
*raftLayer/Close/llvar"meta/store.go(À´0◊´@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Close/lã
*raftLayer/DialDialfunc"meta/store.go(Îß0∂™8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*raftLayer",
        "TypeString": "func(addr string, timeout time.Duration) (net.Conn, error)",
        "UnderlyingTypeString": "func(addr string, timeout time.Duration) (net.Conn, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z5

text/plain'Dial creates a new network connection.
ä./raftLayer/Dialú
*raftLayer/Dial/addraddrvar"meta/store.go(Ñ®0è®@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Dial/addrç
*raftLayer/Dial/connconnvar"meta/store.go(Ω®0Ô®@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Dial/conn´
*raftLayer/Dial/errerrvar"meta/store.go(Ω®0Ô®@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Dial/errﬂ
*raftLayer/Dial/llvar"meta/store.go(Òß0˝ß@Rí{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.raftLayer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Dial/l´
*raftLayer/Dial/timeouttimeoutvar"meta/store.go(ë®0¶®@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/Dial/timeout¸
*raftLayer/addraddrfield"meta/store.go(∞§0ø§R∞{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "raftLayer",
        "TypeString": "net.Addr",
        "UnderlyingTypeString": "interface{Network() string; String() string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/addrË
*raftLayer/closedclosedfield"meta/store.go(◊§0Î§Rñ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "raftLayer",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/closed‚
*raftLayer/connconnfield"meta/store.go(¡§0’§Rñ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "raftLayer",
        "TypeString": "chan net.Conn",
        "UnderlyingTypeString": "chan net.Conn",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/connô
*raftLayer/lnlnfield"meta/store.go(õ§0Æ§R”{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "raftLayer",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftLayer/lnÍ
*raftLogCacheSizeraftLogCacheSizeconst"meta/store.go(0ã	RÏ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainRaft configuration.
ä./raftLogCacheSize˘
*raftSnapshotsRetainedraftSnapshotsRetainedconst"meta/store.go(ç	0¶	RÏ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainRaft configuration.
ä./raftSnapshotsRetainedÙ
*	raftState	raftStatetype"meta/state.go(Ø0ÇR≈{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.raftState",
        "UnderlyingTypeString": "interface{addPeer(addr string) error; apply(b []byte) error; close() error; initialize() error; invalidate() error; isLeader() bool; lastIndex() uint64; leader() string; open() error; peers() ([]string, error); remove() error; setPeers(addrs []string) error; snapshot() error; sync(index uint64, timeout time.Duration) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZË

text/plainŸraftState abstracts the interaction of the raft consensus layer
across local or remote nodes.  It is a form of the state design pattern and allows
the meta.Store to change its behavior with the raft layer at runtime.
ä./raftState¯
*raftState/addPeeraddPeerfunc"meta/state.go(Î0ÖR¶{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func(addr string) error",
        "UnderlyingTypeString": "func(addr string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/addPeer†
*raftState/addPeer/addraddrvar"meta/state.go(Û0˛@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/addPeer/addrÏ
*raftState/applyapplyfunc"meta/state.go(Ÿ0ÓR†{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/applyì
*raftState/apply/bbvar"meta/state.go(ﬂ0Á@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/apply/b‹
*raftState/closeclosefunc"meta/state.go(∂0√Rê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/closeÎ
*raftState/initialize
initializefunc"meta/state.go(‰0ˆRê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/initializeÎ
*raftState/invalidate
invalidatefunc"meta/state.go(¢0¥Rê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/invalidate„
*raftState/isLeaderisLeaderfunc"meta/state.go(â0òRé{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/isLeaderÍ
*raftState/lastIndex	lastIndexfunc"meta/state.go(≈0◊Rí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/lastIndex·
*raftState/leaderleaderfunc"meta/state.go(¯0áRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/leaderŸ
*raftState/openopenfunc"meta/state.go(∆0“Rê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/openÙ
*raftState/peerspeersfunc"meta/state.go(á0†R®{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/peersﬂ
*raftState/removeremovefunc"meta/state.go(‘0‚Rê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/removeÅ
*raftState/setPeerssetPeersfunc"meta/state.go(À0ÈR¨{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func(addrs []string) error",
        "UnderlyingTypeString": "func(addrs []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/setPeers©
*raftState/setPeers/addrsaddrsvar"meta/state.go(‘0‚@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/setPeers/addrsÂ
*raftState/snapshotsnapshotfunc"meta/state.go(0ÄRê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/snapshotü
*raftState/syncsyncfunc"meta/state.go(ö0…R÷{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "raftState",
        "TypeString": "func(index uint64, timeout time.Duration) error",
        "UnderlyingTypeString": "func(index uint64, timeout time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/syncù
*raftState/sync/indexindexvar"meta/state.go(ü0´@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/sync/index©
*raftState/sync/timeouttimeoutvar"meta/state.go(≠0¬@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./raftState/sync/timeoutˆ
*raftTransportMaxPoolraftTransportMaxPoolconst"meta/store.go(®	0¡	RÏ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainRaft configuration.
ä./raftTransportMaxPoolÚ
*raftTransportTimeoutraftTransportTimeoutconst"meta/store.go(√	0Î	RË{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z"

text/plainRaft configuration.
ä./raftTransportTimeoutÎ
*readPeersJSONreadPeersJSONfunc"meta/state.go(œQ0‰TRõ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(path string) ([]string, error)",
        "UnderlyingTypeString": "func(path string) ([]string, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON∑
*readPeersJSON/$state2/errerrvar"meta/state.go(íT0´T@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON/$state2/errï
*readPeersJSON/bufbufvar"meta/state.go(ñR0∑R@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON/bufµ
*readPeersJSON/decdecvar"meta/state.go(·S0çT@RÊ{
        "PkgName": "meta",
        "TypeString": "*encoding/json.Decoder",
        "UnderlyingTypeString": "*encoding/json.Decoder",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON/decß
*readPeersJSON/errerrvar"meta/state.go(ñR0∑R@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON/errò
*readPeersJSON/pathpathvar"meta/state.go(‚Q0ÌQ@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./readPeersJSON/path¿
*readPeersJSON/peerspeersvar"meta/state.go(—S0ﬂS@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z

text/plainDecode the peers
ä./readPeersJSON/peersÎ
*
remoteRaft
remoteRafttype"meta/state.go(È>0å?R∑{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "struct{store *github.com/influxdb/influxdb/meta.Store}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zk

text/plain]remoteRaft is a consensus strategy that uses a remote raft cluster for
consensus operations.
ä./remoteRaft√
*remoteRaft/addPeeraddPeerfunc"meta/state.go(ÆF0ôGR®{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func(addr string) error",
        "UnderlyingTypeString": "func(addr string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZE

text/plain7addPeer adds addr to the list of peers in the cluster.
ä./remoteRaft/addPeer¢
*remoteRaft/addPeer/addraddrvar"meta/state.go(ÀF0÷F@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/addPeer/addrÁ
*remoteRaft/addPeer/rrvar"meta/state.go(¥F0¡F@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/addPeer/r¥
*remoteRaft/applyapplyfunc"meta/state.go(ëL0ÅMR¢{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4apply applies a serialized command to the raft log.
ä./remoteRaft/applyï
*remoteRaft/apply/bbvar"meta/state.go(¨L0¥L@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/apply/b„
*remoteRaft/apply/rrvar"meta/state.go(óL0§L@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/apply/r‡
*remoteRaft/closeclosefunc"meta/state.go(¶K0ÿKRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/close„
*remoteRaft/close/rrvar"meta/state.go(¨K0πK@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/close/rÔ
*remoteRaft/initialize
initializefunc"meta/state.go(ÉM0∫MRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/initializeÌ
*remoteRaft/initialize/rrvar"meta/state.go(âM0ñM@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/initialize/rÔ
*remoteRaft/invalidate
invalidatefunc"meta/state.go(¨B0»CRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/invalidate∑
*remoteRaft/invalidate/errerrvar"meta/state.go(◊B0ÇC@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/invalidate/err‰
*remoteRaft/invalidate/msmsvar"meta/state.go(◊B0ÇC@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/invalidate/msÌ
*remoteRaft/invalidate/rrvar"meta/state.go(≤B0øB@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/invalidate/rÁ
*remoteRaft/isLeaderisLeaderfunc"meta/state.go(…N0ˇNRê{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() bool",
        "UnderlyingTypeString": "func() bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/isLeaderÈ
*remoteRaft/isLeader/rrvar"meta/state.go(œN0‹N@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/isLeader/rÓ
*remoteRaft/lastIndex	lastIndexfunc"meta/state.go(ÅO0œORî{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() uint64",
        "UnderlyingTypeString": "func() uint64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/lastIndexÎ
*remoteRaft/lastIndex/rrvar"meta/state.go(áO0îO@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/lastIndex/rÂ
*remoteRaft/leaderleaderfunc"meta/state.go(ºM0«NRî{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() string",
        "UnderlyingTypeString": "func() string",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/leaderÂ
*remoteRaft/leader/rrvar"meta/state.go(¬M0œM@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/leader/r›
*remoteRaft/openopenfunc"meta/state.go(êH0§KRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/openª
*remoteRaft/open/$state0/errerrvar"meta/state.go(∏H0ÿH@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/open/$state0/err€
-*+remoteRaft/open/$state1/$state0/$state0/errerrvar"meta/state.go(‘I0˛I@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./remoteRaft/open/$state1/$state0/$state0/errà
,**remoteRaft/open/$state1/$state0/$state0/msmsvar"meta/state.go(‘I0˛I@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./remoteRaft/open/$state1/$state0/$state0/ms·
*remoteRaft/open/rrvar"meta/state.go(ñH0£H@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/open/r¯
*remoteRaft/peerspeersfunc"meta/state.go(õG0éHR™{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() ([]string, error)",
        "UnderlyingTypeString": "func() ([]string, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/peers„
*remoteRaft/peers/rrvar"meta/state.go(°G0ÆG@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/peers/r„
*remoteRaft/removeremovefunc"meta/state.go(é?0¡?Rí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/removeÂ
*remoteRaft/remove/rrvar"meta/state.go(î?0°?@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/remove/rÖ
*remoteRaft/setPeerssetPeersfunc"meta/state.go( C0ÚERÆ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func(addrs []string) error",
        "UnderlyingTypeString": "func(addrs []string) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/setPeers√
!*remoteRaft/setPeers/$state0/errerrvar"meta/state.go(ÃD0‰D@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./remoteRaft/setPeers/$state0/err´
*remoteRaft/setPeers/addrsaddrsvar"meta/state.go(ËC0ˆC@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/setPeers/addrsö
*remoteRaft/setPeers/bufbufvar"meta/state.go(ôD0©D@Rü{
        "PkgName": "meta",
        "TypeString": "bytes.Buffer",
        "UnderlyingTypeString": "struct{buf []byte; off int; runeBytes [4]byte; bootstrap [64]byte; lastRead bytes.readOp}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z

text/plainConvert to JSON
ä./remoteRaft/setPeers/buf¡
*remoteRaft/setPeers/encencvar"meta/state.go(´D0«D@RÊ{
        "PkgName": "meta",
        "TypeString": "*encoding/json.Encoder",
        "UnderlyingTypeString": "*encoding/json.Encoder",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/setPeers/encÈ
*remoteRaft/setPeers/rrvar"meta/state.go(–C0›C@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/setPeers/rÈ
*remoteRaft/snapshotsnapshotfunc"meta/state.go(„P0ÕQRí{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/snapshotÈ
*remoteRaft/snapshot/rrvar"meta/state.go(ÈP0ˆP@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/snapshot/rú
*remoteRaft/storestorefield"meta/state.go(˛>0ä?RÕ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "remoteRaft",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/store£
*remoteRaft/syncsyncfunc"meta/state.go(—O0·PRÿ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func(index uint64, timeout time.Duration) error",
        "UnderlyingTypeString": "func(index uint64, timeout time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/syncü
*remoteRaft/sync/indexindexvar"meta/state.go(ÎO0˜O@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/sync/index·
*remoteRaft/sync/rrvar"meta/state.go(◊O0‰O@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/sync/r´
*remoteRaft/sync/timeouttimeoutvar"meta/state.go(˘O0éP@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/sync/timeout√
*remoteRaft/updateMetaDataupdateMetaDatafunc"meta/state.go(√?0™BR⁄{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*remoteRaft",
        "TypeString": "func(ms *github.com/influxdb/influxdb/meta.Data)",
        "UnderlyingTypeString": "func(ms *github.com/influxdb/influxdb/meta.Data)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/updateMetaDataÏ
*remoteRaft/updateMetaData/msmsvar"meta/state.go(Á?0Ô?@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/updateMetaData/msı
*remoteRaft/updateMetaData/rrvar"meta/state.go(…?0÷?@Rî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.remoteRaft",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./remoteRaft/updateMetaData/rµ
#*!remoteRaft/updateMetaData/updatedupdatedvar"meta/state.go(ë@0°@@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./remoteRaft/updateMetaData/updatedÑ
*rpcrpctype"meta/rpc.go(∂0ıRÅ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "struct{logger *log.Logger; tracingEnabled bool; store interface{AddPeer(host string) error; CreateNode(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainCrpc handles request/response style messaging between cluster nodes
ä./rpcÚ

*rpc/callcallfunc"meta/rpc.go(âG0πXRÕ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(dest string, req github.com/gogo/protobuf/proto.Message) (github.com/gogo/protobuf/proto.Message, error)",
        "UnderlyingTypeString": "func(dest string, req github.com/gogo/protobuf/proto.Message) (github.com/gogo/protobuf/proto.Message, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zh

text/plainZcall sends an encoded request to the remote leader and returns
an encoded response value.
ä
./rpc/callê
*rpc/call/$rpc10/okokvar"meta/rpc.go(ÜW0üW@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/$rpc10/okâ
*rpc/call/$rpc10/replyreplyvar"meta/rpc.go(ÜW0üW@R≤{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Reply",
        "UnderlyingTypeString": "interface{GetHeader() *github.com/influxdb/influxdb/meta/internal.ResponseHeader}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/$rpc10/replyß
*rpc/call/$rpc4/errerrvar"meta/rpc.go(ΩM0ÂM@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/$rpc4/errè
*rpc/call/$rpc6/expexpvar"meta/rpc.go(–O0ŸO@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/$rpc6/expß
*rpc/call/$rpc9/errerrvar"meta/rpc.go(öV0ºV@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/$rpc9/errÉ
*
rpc/call/bbvar"meta/rpc.go(∂L0“L@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/b˝
*rpc/call/connconnvar"meta/rpc.go(•J0·J@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/connå
*rpc/call/datadatavar"meta/rpc.go(¥N0’N@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/dataå
*rpc/call/destdestvar"meta/rpc.go(úG0ßG@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/destõ
*rpc/call/errerrvar"meta/rpc.go(•J0·J@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/err√
*
rpc/call/rrvar"meta/rpc.go(èG0ïG@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/r÷
*rpc/call/reqreqvar"meta/rpc.go(©G0∫G@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/reqŸ
*rpc/call/resprespvar"meta/rpc.go(◊S0ÈS@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/respÍ
*rpc/call/rpcTyperpcTypevar"meta/rpc.go(¯G0êH@RÒ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.RPCType",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z(

text/plainDetermine type of request
ä./rpc/call/rpcTypeÜ
*rpc/call/szszvar"meta/rpc.go(¸P0ìQ@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/call/sz∑
*rpc/fetchMetaDatafetchMetaDatafunc"meta/rpc.go(≥80Ê@R˚{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(blocking bool) (*github.com/influxdb/influxdb/meta.Data, error)",
        "UnderlyingTypeString": "func(blocking bool) (*github.com/influxdb/influxdb/meta.Data, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zd

text/plainVfetchMetaData returns the latest copy of the meta store data from the current
leader.
ä./rpc/fetchMetaData—
)*'rpc/fetchMetaData/$rpc3/$rpc0/$rpc1/errerrvar"meta/rpc.go(ü>0≈>@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./rpc/fetchMetaData/$rpc3/$rpc0/$rpc1/errÚ
"* rpc/fetchMetaData/$rpc3/$rpc0/msmsvar"meta/rpc.go(å>0ô>@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./rpc/fetchMetaData/$rpc3/$rpc0/ms¶
*rpc/fetchMetaData/blockingblockingvar"meta/rpc.go(œ80‹8@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/blocking‡
*rpc/fetchMetaData/datadatavar"meta/rpc.go(±:0Õ:@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/data≠
*rpc/fetchMetaData/errerrvar"meta/rpc.go(ç;0´<@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/err°
*rpc/fetchMetaData/indexindexvar"meta/rpc.go(ù:0Ø:@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/index§
*rpc/fetchMetaData/leaderleadervar"meta/rpc.go(¿90⁄9@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/leader’
*rpc/fetchMetaData/rrvar"meta/rpc.go(π80ø8@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/rÎ
*rpc/fetchMetaData/resprespvar"meta/rpc.go(ç;0´<@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/respû
*rpc/fetchMetaData/termtermvar"meta/rpc.go(ù:0Ø:@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/fetchMetaData/termª
*rpc/handleFetchDatahandleFetchDatafunc"meta/rpc.go(Ñ$0¯(Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(req *github.com/influxdb/influxdb/meta/internal.FetchDataRequest) (*github.com/influxdb/influxdb/meta/internal.FetchDataResponse, error)",
        "UnderlyingTypeString": "func(req *github.com/influxdb/influxdb/meta/internal.FetchDataRequest) (*github.com/influxdb/influxdb/meta/internal.FetchDataResponse, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZP

text/plainBhandleFetchData handles a request for the current nodes meta data
ä./rpc/handleFetchData’
+*)rpc/handleFetchData/$rpc0/$rpc0/$rpc2/errerrvar"meta/rpc.go(Ì&0ê'@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./rpc/handleFetchData/$rpc0/$rpc0/$rpc2/errô
*rpc/handleFetchData/bbvar"meta/rpc.go(Ú$0˝$@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleFetchData/b‰
*rpc/handleFetchData/datadatavar"meta/rpc.go(Ä%0ä%@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleFetchData/data±
*rpc/handleFetchData/errerrvar"meta/rpc.go(ç%0ó%@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleFetchData/errŸ
*rpc/handleFetchData/rrvar"meta/rpc.go(ä$0ê$@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleFetchData/rã
*rpc/handleFetchData/reqreqvar"meta/rpc.go(¢$0¿$@R≤{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.FetchDataRequest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.FetchDataRequest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleFetchData/req£
*rpc/handleJoinRequesthandleJoinRequestfunc"meta/rpc.go(µ)0π5R˘{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(req *github.com/influxdb/influxdb/meta/internal.JoinRequest) (*github.com/influxdb/influxdb/meta/internal.JoinResponse, error)",
        "UnderlyingTypeString": "func(req *github.com/influxdb/influxdb/meta/internal.JoinRequest) (*github.com/influxdb/influxdb/meta/internal.JoinResponse, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZF

text/plain8handleJoinRequest handles a request to join the cluster
ä./rpc/handleJoinRequest¡
!*rpc/handleJoinRequest/$rpc0/errerrvar"meta/rpc.go(î+0æ+@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./rpc/handleJoinRequest/$rpc0/err¸
"* rpc/handleJoinRequest/$rpc0/nodenodevar"meta/rpc.go(î+0æ+@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./rpc/handleJoinRequest/$rpc0/nodeπ
#*!rpc/handleJoinRequest/$rpc0/peerspeersvar"meta/rpc.go(Ñ.0°.@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./rpc/handleJoinRequest/$rpc0/peersµ
*rpc/handleJoinRequest/errerrvar"meta/rpc.go(»*0Í1@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/err
*rpc/handleJoinRequest/nodenodevar"meta/rpc.go(»*0Í1@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/node¨
*rpc/handleJoinRequest/nodeIDnodeIDvar"meta/rpc.go(Ì10Ä2@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/nodeID≠
*rpc/handleJoinRequest/peerspeersvar"meta/rpc.go(Ò20é3@R {
        "PkgName": "meta",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/peers›
*rpc/handleJoinRequest/rrvar"meta/rpc.go(ª)0¡)@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/rÖ
*rpc/handleJoinRequest/reqreqvar"meta/rpc.go(’)0Ó)@R®{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.JoinRequest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.JoinRequest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleJoinRequest/req¬
*rpc/handleRPCConnhandleRPCConnfunc"meta/rpc.go(ˇ0óRô{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(conn net.Conn)",
        "UnderlyingTypeString": "func(conn net.Conn)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZQ

text/plainChandleRPCConn reads a command from the connection and executes it.
ä./rpc/handleRPCConn≈
#*!rpc/handleRPCConn/$rpc1/$rpc0/errerrvar"meta/rpc.go(ä0π@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./rpc/handleRPCConn/$rpc1/$rpc0/err≈
#*!rpc/handleRPCConn/$rpc1/$rpc3/errerrvar"meta/rpc.go(ë0±@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./rpc/handleRPCConn/$rpc1/$rpc3/err›
/*-rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/$rpc0/errerrvar"meta/rpc.go(ï0∂@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/$rpc0/err—
)*'rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/errerrvar"meta/rpc.go(§0»@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/errí
)*'rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/reqreqvar"meta/rpc.go(Ò0é@Rô{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.FetchDataRequest",
        "UnderlyingTypeString": "struct{Index *uint64 \"protobuf:\\\"varint,1,req\\\" json:\\\"Index,omitempty\\\"\"; Term *uint64 \"protobuf:\\\"varint,2,req\\\" json:\\\"Term,omitempty\\\"\"; Blocking *bool \"protobuf:\\\"varint,3,opt,def=0\\\" json:\\\"Blocking,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/req∞
**(rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/resprespvar"meta/rpc.go(§0»@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.FetchDataResponse",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.FetchDataResponse",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./rpc/handleRPCConn/$rpc1/$rpc4/$rpc0/resp›
/*-rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/$rpc0/errerrvar"meta/rpc.go(™0À@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/$rpc0/err—
)*'rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/errerrvar"meta/rpc.go(∏0ﬁ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/errÊ
)*'rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/reqreqvar"meta/rpc.go(ã0£@RÌ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.JoinRequest",
        "UnderlyingTypeString": "struct{Addr *string \"protobuf:\\\"bytes,1,req\\\" json:\\\"Addr,omitempty\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/req¶
**(rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/resprespvar"meta/rpc.go(∏0ﬁ@R™{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.JoinResponse",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.JoinResponse",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./rpc/handleRPCConn/$rpc1/$rpc4/$rpc1/respß
*rpc/handleRPCConn/$rpc1/bufbufvar"meta/rpc.go(Ù0ã@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/$rpc1/bufﬁ
!*rpc/handleRPCConn/$rpc1/rpcTyperpcTypevar"meta/rpc.go(Æ0€@RÒ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.RPCType",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./rpc/handleRPCConn/$rpc1/rpcType«
*rpc/handleRPCConn/$rpc1/szszvar"meta/rpc.go(˚0Ñ@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z!

text/plainRead request size.
ä./rpc/handleRPCConn/$rpc1/sz†
*rpc/handleRPCConn/$rpc3/okokvar"meta/rpc.go(‘0Ì@R¬{
        "PkgName": "meta",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/$rpc3/okô
*rpc/handleRPCConn/$rpc3/replyreplyvar"meta/rpc.go(‘0Ì@R≤{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.Reply",
        "UnderlyingTypeString": "interface{GetHeader() *github.com/influxdb/influxdb/meta/internal.ResponseHeader}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/$rpc3/replyè
*rpc/handleRPCConn/connconnvar"meta/rpc.go(õ0®@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/conn≠
*rpc/handleRPCConn/errerrvar"meta/rpc.go(ô0·@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/err’
*rpc/handleRPCConn/rrvar"meta/rpc.go(Ö0ã@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/rÎ
*rpc/handleRPCConn/resprespvar"meta/rpc.go(ô0·@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/resp∆
*rpc/handleRPCConn/typtypvar"meta/rpc.go(ô0·@RÒ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.RPCType",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/handleRPCConn/typ‚

*rpc/joinjoinfunc"meta/rpc.go(“A0ßFR≥{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(localAddr string, remoteAddr string) (*github.com/influxdb/influxdb/meta.JoinResult, error)",
        "UnderlyingTypeString": "func(localAddr string, remoteAddr string) (*github.com/influxdb/influxdb/meta.JoinResult, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zr

text/plaindjoin attempts to join a cluster at remoteAddr using localAddr as the current
node's cluster address
ä
./rpc/joinõ
*rpc/join/errerrvar"meta/rpc.go(ﬂB0ÉC@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/errõ
*rpc/join/localAddr	localAddrvar"meta/rpc.go(ÂA0ÅB@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/localAddr√
*
rpc/join/rrvar"meta/rpc.go(ÿA0ﬁA@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/rû
*rpc/join/remoteAddr
remoteAddrvar"meta/rpc.go(ÂA0ÅB@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/remoteAddrÎ
*rpc/join/reqreqvar"meta/rpc.go(õB0‹B@R®{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.JoinRequest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.JoinRequest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/reqŸ
*rpc/join/resprespvar"meta/rpc.go(ﬂB0ÉC@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/join/respŒ
*
rpc/loggerloggerfield"meta/rpc.go(ƒ0ﬁRå{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "rpc",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/loggerº

*rpc/packpackfunc"meta/rpc.go(•60’7Rç{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(typ github.com/influxdb/influxdb/meta/internal.RPCType, b []byte) []byte",
        "UnderlyingTypeString": "func(typ github.com/influxdb/influxdb/meta/internal.RPCType, b []byte) []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zr

text/plaindpack returns a TLV style byte slice encoding the size of the payload, the RPC type
and the RPC data
ä
./rpc/packÉ
*
rpc/pack/bbvar"meta/rpc.go(Œ60÷6@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/pack/bâ
*rpc/pack/bufbufvar"meta/rpc.go(‚60É7@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/pack/buf√
*
rpc/pack/rrvar"meta/rpc.go(´60±6@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/pack/r¥
*rpc/pack/typtypvar"meta/rpc.go(∏60Ã6@RÒ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.RPCType",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/pack/typø
*rpc/proxyLeaderproxyLeaderfunc"meta/rpc.go(–0∑R°{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(conn *net.TCPConn)",
        "UnderlyingTypeString": "func(conn *net.TCPConn)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZL

text/plain>proxyLeader proxies the connection to the current raft leader
ä./rpc/proxyLeaderµ
*rpc/proxyLeader/$rpc2/errerrvar"meta/rpc.go(∑
0‰
@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/proxyLeader/$rpc2/err¶
*rpc/proxyLeader/connconnvar"meta/rpc.go(Í0˚@R“{
        "PkgName": "meta",
        "TypeString": "*net.TCPConn",
        "UnderlyingTypeString": "*net.TCPConn",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/proxyLeader/conn©
*rpc/proxyLeader/errerrvar"meta/rpc.go(À0ô	@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/proxyLeader/errù
*rpc/proxyLeader/leaderConn
leaderConnvar"meta/rpc.go(À0ô	@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/proxyLeader/leaderConn—
*rpc/proxyLeader/rrvar"meta/rpc.go(÷0‹@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/proxyLeader/r˚
*rpc/sendError	sendErrorfunc"meta/rpc.go(µ!0Ω#R±{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(conn net.Conn, msg string)",
        "UnderlyingTypeString": "func(conn net.Conn, msg string)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendErrorá
*rpc/sendError/connconnvar"meta/rpc.go(Õ!0⁄!@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendError/connì
*rpc/sendError/msgmsgvar"meta/rpc.go(‹!0Ê!@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendError/msgÕ
*rpc/sendError/rrvar"meta/rpc.go(ª!0¡!@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendError/r¸
*rpc/sendError/resprespvar"meta/rpc.go(Ä"0Ü#@R¨{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.ErrorResponse",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.ErrorResponse",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendError/resp∂
*rpc/sendResponsesendResponsefunc"meta/rpc.go(ô0≥!R„{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(conn net.Conn, typ github.com/influxdb/influxdb/meta/internal.RPCType, resp github.com/gogo/protobuf/proto.Message)",
        "UnderlyingTypeString": "func(conn net.Conn, typ github.com/influxdb/influxdb/meta/internal.RPCType, resp github.com/gogo/protobuf/proto.Message)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse∑
*rpc/sendResponse/$rpc1/errerrvar"meta/rpc.go(ø 0Â @Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/$rpc1/errô
*rpc/sendResponse/bufbufvar"meta/rpc.go(ú0ª@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/bufç
*rpc/sendResponse/connconnvar"meta/rpc.go(¥0¡@R∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/conn´
*rpc/sendResponse/errerrvar"meta/rpc.go(ú0ª@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/err”
*rpc/sendResponse/rrvar"meta/rpc.go(ü0•@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/rÈ
*rpc/sendResponse/resprespvar"meta/rpc.go(Ÿ0Î@Rì{
        "PkgName": "meta",
        "TypeString": "github.com/gogo/protobuf/proto.Message",
        "UnderlyingTypeString": "interface{ProtoMessage(); Reset(); String() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/respƒ
*rpc/sendResponse/typtypvar"meta/rpc.go(√0◊@RÒ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.RPCType",
        "UnderlyingTypeString": "int32",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/sendResponse/typ’
*	rpc/storestorefield"meta/rpc.go(ˆ0ÛRñ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "rpc",
        "TypeString": "interface{AddPeer(host string) error; CreateNode(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "UnderlyingTypeString": "interface{AddPeer(host string) error; CreateNode(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); IsLeader() bool; Leader() string; NodeByHost(host string) (*github.com/influxdb/influxdb/meta.NodeInfo, error); Peers() ([]string, error); WaitForDataChanged() error; cachedData() *github.com/influxdb/influxdb/meta.Data}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/storeê
*rpc/traceClustertraceClusterfunc"meta/rpc.go(ªX0ºYRΩ{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*rpc",
        "TypeString": "func(msg string, args ...interface{})",
        "UnderlyingTypeString": "func(msg string, args ...interface{})",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/traceCluster™
*rpc/traceCluster/argsargsvar"meta/rpc.go(‚X0ıX@R‘{
        "PkgName": "meta",
        "TypeString": "[]interface{}",
        "UnderlyingTypeString": "[]interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/traceCluster/argsô
*rpc/traceCluster/msgmsgvar"meta/rpc.go(÷X0‡X@R∆{
        "PkgName": "meta",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/traceCluster/msg”
*rpc/traceCluster/rrvar"meta/rpc.go(¡X0«X@RÜ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/traceCluster/rÿ
*rpc/tracingEnabledtracingEnabledfield"meta/rpc.go(‡0ÛR˛{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "rpc",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./rpc/tracingEnabled·
*shardGroupDurationshardGroupDurationfunc"meta/data.go(õ≥0àµRõ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(d time.Duration) time.Duration",
        "UnderlyingTypeString": "func(d time.Duration) time.Duration",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zd

text/plainVshardGroupDuration returns the duration for a shard group based on a policy duration.
ä./shardGroupDuration†
*shardGroupDuration/ddvar"meta/data.go(≥≥0¬≥@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./shardGroupDuration/d£	

*storeFSMstoreFSMtype"meta/store.go(‚»0»R˛{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; path string; opened bool; id uint64; peers []string; data *github.com/influxdb/influxdb/meta.Data; rpc *github.com/influxdb/influxdb/meta.rpc; RemoteAddr net.Addr; raftState github.com/influxdb/influxdb/meta.raftState; ready chan struct{}; err chan error; closing chan struct{}; wg sync.WaitGroup; changed chan struct{}; clusterTracingEnabled bool; retentionAutoCreate bool; RaftListener net.Listener; ExecListener net.Listener; RPCListener net.Listener; Addr net.Addr; HeartbeatTimeout time.Duration; ElectionTimeout time.Duration; LeaderLeaseTimeout time.Duration; CommitTimeout time.Duration; authCache map[string]github.com/influxdb/influxdb/meta.authUser; hashPassword github.com/influxdb/influxdb/meta.HashPasswordFn; Logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z`

text/plainRstoreFSM represents the finite state machine used by Store to interact with Raft.
ä
./storeFSM∆
*storeFSM/AddrAddrfield"meta/store.go(0˝8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "net.Addr",
        "UnderlyingTypeString": "interface{Network() string; String() string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z4

text/plain&The advertised hostname of the store.
ä./storeFSM/Addrƒ
*storeFSM/ApplyApplyfunc"meta/store.go(Ú»0¥€8Rˆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(l *github.com/hashicorp/raft.Log) interface{}",
        "UnderlyingTypeString": "func(l *github.com/hashicorp/raft.Log) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Applyª
*storeFSM/Apply/$store0/errerrvar"meta/store.go(∆…0Í…@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/$store0/errÈ
*storeFSM/Apply/cmdcmdvar"meta/store.go(≠…0¡…@Rñ{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "struct{Type *github.com/influxdb/influxdb/meta/internal.Command_Type \"protobuf:\\\"varint,1,req,name=type,enum=internal.Command_Type\\\" json:\\\"type,omitempty\\\"\"; XXX_extensions map[int32]github.com/gogo/protobuf/proto.Extension \"json:\\\"-\\\"\"; XXX_unrecognized []byte \"json:\\\"-\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/cmd£
*storeFSM/Apply/errerrvar"meta/store.go(ÉÀ0ñ⁄@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/err„
*storeFSM/Apply/fsmfsmvar"meta/store.go(¯»0Ö…@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/fsm√
*storeFSM/Apply/llvar"meta/store.go(ç…0ò…@Rˆ{
        "PkgName": "meta",
        "TypeString": "*github.com/hashicorp/raft.Log",
        "UnderlyingTypeString": "*github.com/hashicorp/raft.Log",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/l◊
*storeFSM/Apply/ssvar"meta/store.go(Ã 0ﬁ @Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Apply/sŸ
*storeFSM/CommitTimeoutCommitTimeoutfield"meta/store.go(ô0¥8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZN

text/plain@The amount of time without an apply before sending a heartbeat.
ä./storeFSM/CommitTimeout‹
*storeFSM/ElectionTimeoutElectionTimeoutfield"meta/store.go(¢0ø8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZK

text/plain=The amount of time before a candidate starts a new election.
ä./storeFSM/ElectionTimeoutÀ
*storeFSM/ExecListenerExecListenerfield"meta/store.go(Ÿ0Ú8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/ExecListenerﬁ
*storeFSM/HeartbeatTimeoutHeartbeatTimeoutfield"meta/store.go(¿0ﬁ8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZJ

text/plain<The amount of time before a follower starts a new election.
ä./storeFSM/HeartbeatTimeoutê
*storeFSM/LeaderLeaseTimeoutLeaderLeaseTimeoutfield"meta/store.go(≤0“8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zv

text/plainhThe amount of time without communication to the cluster before a
leader steps down to a follower state.
ä./storeFSM/LeaderLeaseTimeout¯
*storeFSM/LoggerLoggerfield"meta/store.go(ß0π8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Loggerä
*storeFSM/RPCListenerRPCListenerfield"meta/store.go(´0√8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z@

text/plain2The listener for higher-level, cluster operations
ä./storeFSM/RPCListenerö
*storeFSM/RaftListenerRaftListenerfield"meta/store.go(æ0◊8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZM

text/plain?The listeners to accept raft and remote exec connections from.
ä./storeFSM/RaftListenerÊ
*storeFSM/RemoteAddr
RemoteAddrfield"meta/store.go(±0ƒ8R∆{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "net.Addr",
        "UnderlyingTypeString": "interface{Network() string; String() string}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZB

text/plain4The address used by other nodes to reach this node.
ä./storeFSM/RemoteAddrú
*storeFSM/RestoreRestorefunc"meta/store.go(‰õ0˜û8R»{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(r io.ReadCloser) error",
        "UnderlyingTypeString": "func(r io.ReadCloser) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restoreø
*storeFSM/Restore/$store1/errerrvar"meta/store.go(óù0µù@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/$store1/erró
*storeFSM/Restore/bbvar"meta/store.go(Øú0 ú@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/b‚
*storeFSM/Restore/datadatavar"meta/store.go(Éù0íù@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/dataØ
*storeFSM/Restore/errerrvar"meta/store.go(Øú0 ú@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/errÁ
*storeFSM/Restore/fsmfsmvar"meta/store.go(Íõ0˜õ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/fsm∑
*storeFSM/Restore/rrvar"meta/store.go(Åú0êú@RÊ{
        "PkgName": "meta",
        "TypeString": "io.ReadCloser",
        "UnderlyingTypeString": "interface{io.Closer; io.Reader}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Restore/r”
*storeFSM/SnapshotSnapshotfunc"meta/store.go(µö0‚õ8R¸{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func() (github.com/hashicorp/raft.FSMSnapshot, error)",
        "UnderlyingTypeString": "func() (github.com/hashicorp/raft.FSMSnapshot, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/SnapshotÈ
*storeFSM/Snapshot/fsmfsmvar"meta/store.go(ªö0»ö@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Snapshot/fsm›
*storeFSM/Snapshot/ssvar"meta/store.go(Úö0Ñõ@Rä{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Store",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Store",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/Snapshot/s™
,**storeFSM/applyCreateContinuousQueryCommand!applyCreateContinuousQueryCommandfunc"meta/store.go(¶Ç0–ÖRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applyCreateContinuousQueryCommandÛ
8*6storeFSM/applyCreateContinuousQueryCommand/$store0/errerrvar"meta/store.go(√Ñ0ëÖ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./storeFSM/applyCreateContinuousQueryCommand/$store0/err´
0*.storeFSM/applyCreateContinuousQueryCommand/cmdcmdvar"meta/store.go(›Ç0ÚÇ@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateContinuousQueryCommand/cmd€
0*.storeFSM/applyCreateContinuousQueryCommand/extextvar"meta/store.go(ÉÉ0’É@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateContinuousQueryCommand/extõ
0*.storeFSM/applyCreateContinuousQueryCommand/fsmfsmvar"meta/store.go(¨Ç0πÇ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateContinuousQueryCommand/fsmô
2*0storeFSM/applyCreateContinuousQueryCommand/otherothervar"meta/store.go(•Ñ0æÑ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./storeFSM/applyCreateContinuousQueryCommand/otherœ
.*,storeFSM/applyCreateContinuousQueryCommand/vvvar"meta/store.go(◊É0àÑ@R {
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateContinuousQueryCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateContinuousQueryCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyCreateContinuousQueryCommand/vï
%*#storeFSM/applyCreateDatabaseCommandapplyCreateDatabaseCommandfunc"meta/store.go(ÑÂ0ÛÁRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateDatabaseCommandÂ
1*/storeFSM/applyCreateDatabaseCommand/$store0/errerrvar"meta/store.go(åÁ0¥Á@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä1./storeFSM/applyCreateDatabaseCommand/$store0/errù
)*'storeFSM/applyCreateDatabaseCommand/cmdcmdvar"meta/store.go(¥Â0…Â@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyCreateDatabaseCommand/cmdÕ
)*'storeFSM/applyCreateDatabaseCommand/extextvar"meta/store.go(⁄Â0•Ê@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyCreateDatabaseCommand/extç
)*'storeFSM/applyCreateDatabaseCommand/fsmfsmvar"meta/store.go(äÂ0óÂ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyCreateDatabaseCommand/fsmã
+*)storeFSM/applyCreateDatabaseCommand/otherothervar"meta/store.go(ÓÊ0áÁ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyCreateDatabaseCommand/other≥
'*%storeFSM/applyCreateDatabaseCommand/vvvar"meta/store.go(ßÊ0—Ê@Rº{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateDatabaseCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateDatabaseCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyCreateDatabaseCommand/vâ
!*storeFSM/applyCreateNodeCommandapplyCreateNodeCommandfunc"meta/store.go(∂€0®ﬂRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyCreateNodeCommand›
-*+storeFSM/applyCreateNodeCommand/$store0/errerrvar"meta/store.go(≤›0÷›@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyCreateNodeCommand/$store0/errï
%*#storeFSM/applyCreateNodeCommand/cmdcmdvar"meta/store.go(‚€0˜€@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateNodeCommand/cmd≈
%*#storeFSM/applyCreateNodeCommand/extextvar"meta/store.go(à‹0œ‹@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateNodeCommand/extÖ
%*#storeFSM/applyCreateNodeCommand/fsmfsmvar"meta/store.go(º€0…€@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateNodeCommand/fsmÉ
'*%storeFSM/applyCreateNodeCommand/otherothervar"meta/store.go(î›0≠›@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyCreateNodeCommand/other£
#*!storeFSM/applyCreateNodeCommand/vvvar"meta/store.go(—‹0˜‹@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateNodeCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateNodeCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyCreateNodeCommand/v™
,**storeFSM/applyCreateRetentionPolicyCommand!applyCreateRetentionPolicyCommandfunc"meta/store.go(ﬁÍ0ıÔRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applyCreateRetentionPolicyCommandÛ
8*6storeFSM/applyCreateRetentionPolicyCommand/$store0/errerrvar"meta/store.go(ôÌ0∂Ô@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./storeFSM/applyCreateRetentionPolicyCommand/$store0/err´
0*.storeFSM/applyCreateRetentionPolicyCommand/cmdcmdvar"meta/store.go(ïÎ0™Î@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateRetentionPolicyCommand/cmd€
0*.storeFSM/applyCreateRetentionPolicyCommand/extextvar"meta/store.go(ªÎ0çÏ@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateRetentionPolicyCommand/extõ
0*.storeFSM/applyCreateRetentionPolicyCommand/fsmfsmvar"meta/store.go(‰Í0ÒÍ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyCreateRetentionPolicyCommand/fsmô
2*0storeFSM/applyCreateRetentionPolicyCommand/otherothervar"meta/store.go(˚Ï0îÌ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./storeFSM/applyCreateRetentionPolicyCommand/other¿
/*-storeFSM/applyCreateRetentionPolicyCommand/pbpbvar"meta/store.go(¬Ï0ﬁÏ@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.RetentionPolicyInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./storeFSM/applyCreateRetentionPolicyCommand/pbœ
.*,storeFSM/applyCreateRetentionPolicyCommand/vvvar"meta/store.go(èÏ0¿Ï@R {
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateRetentionPolicyCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateRetentionPolicyCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyCreateRetentionPolicyCommand/võ
'*%storeFSM/applyCreateShardGroupCommandapplyCreateShardGroupCommandfunc"meta/store.go(Ÿ˚0ÉˇRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyCreateShardGroupCommandÈ
3*1storeFSM/applyCreateShardGroupCommand/$store0/errerrvar"meta/store.go(Á˝0ƒ˛@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./storeFSM/applyCreateShardGroupCommand/$store0/err°
+*)storeFSM/applyCreateShardGroupCommand/cmdcmdvar"meta/store.go(ã¸0†¸@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyCreateShardGroupCommand/cmd—
+*)storeFSM/applyCreateShardGroupCommand/extextvar"meta/store.go(±¸0˛¸@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyCreateShardGroupCommand/extë
+*)storeFSM/applyCreateShardGroupCommand/fsmfsmvar"meta/store.go(ﬂ˚0Ï˚@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyCreateShardGroupCommand/fsmè
-*+storeFSM/applyCreateShardGroupCommand/otherothervar"meta/store.go(…˝0‚˝@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyCreateShardGroupCommand/otherª
)*'storeFSM/applyCreateShardGroupCommand/vvvar"meta/store.go(Ä˝0¨˝@R¿{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateShardGroupCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateShardGroupCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyCreateShardGroupCommand/vâ
!*storeFSM/applyCreateUserCommandapplyCreateUserCommandfunc"meta/store.go(Ëà0‚ãRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyCreateUserCommand›
-*+storeFSM/applyCreateUserCommand/$store0/errerrvar"meta/store.go(‰ä0£ã@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyCreateUserCommand/$store0/errï
%*#storeFSM/applyCreateUserCommand/cmdcmdvar"meta/store.go(îâ0©â@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateUserCommand/cmd≈
%*#storeFSM/applyCreateUserCommand/extextvar"meta/store.go(∫â0Åä@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateUserCommand/extÖ
%*#storeFSM/applyCreateUserCommand/fsmfsmvar"meta/store.go(Óà0˚à@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyCreateUserCommand/fsmÉ
'*%storeFSM/applyCreateUserCommand/otherothervar"meta/store.go(∆ä0ﬂä@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyCreateUserCommand/other£
#*!storeFSM/applyCreateUserCommand/vvvar"meta/store.go(Éä0©ä@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.CreateUserCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.CreateUserCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyCreateUserCommand/vâ
!*storeFSM/applyDeleteNodeCommandapplyDeleteNodeCommandfunc"meta/store.go(•‚0ÇÂRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyDeleteNodeCommand›
-*+storeFSM/applyDeleteNodeCommand/$store0/errerrvar"meta/store.go(°‰0√‰@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyDeleteNodeCommand/$store0/errï
%*#storeFSM/applyDeleteNodeCommand/cmdcmdvar"meta/store.go(—‚0Ê‚@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyDeleteNodeCommand/cmd≈
%*#storeFSM/applyDeleteNodeCommand/extextvar"meta/store.go(˜‚0æ„@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyDeleteNodeCommand/extÖ
%*#storeFSM/applyDeleteNodeCommand/fsmfsmvar"meta/store.go(´‚0∏‚@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyDeleteNodeCommand/fsmÉ
'*%storeFSM/applyDeleteNodeCommand/otherothervar"meta/store.go(É‰0ú‰@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyDeleteNodeCommand/other£
#*!storeFSM/applyDeleteNodeCommand/vvvar"meta/store.go(¿„0Ê„@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DeleteNodeCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DeleteNodeCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyDeleteNodeCommand/võ
'*%storeFSM/applyDeleteShardGroupCommandapplyDeleteShardGroupCommandfunc"meta/store.go(Öˇ0§ÇRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyDeleteShardGroupCommandÈ
3*1storeFSM/applyDeleteShardGroupCommand/$store0/errerrvar"meta/store.go(ìÅ0ÂÅ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä3./storeFSM/applyDeleteShardGroupCommand/$store0/err°
+*)storeFSM/applyDeleteShardGroupCommand/cmdcmdvar"meta/store.go(∑ˇ0Ãˇ@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyDeleteShardGroupCommand/cmd—
+*)storeFSM/applyDeleteShardGroupCommand/extextvar"meta/store.go(›ˇ0™Ä@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyDeleteShardGroupCommand/extë
+*)storeFSM/applyDeleteShardGroupCommand/fsmfsmvar"meta/store.go(ãˇ0òˇ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyDeleteShardGroupCommand/fsmè
-*+storeFSM/applyDeleteShardGroupCommand/otherothervar"meta/store.go(ıÄ0éÅ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyDeleteShardGroupCommand/otherª
)*'storeFSM/applyDeleteShardGroupCommand/vvvar"meta/store.go(¨Ä0ÿÄ@R¿{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DeleteShardGroupCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DeleteShardGroupCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyDeleteShardGroupCommand/v§
**(storeFSM/applyDropContinuousQueryCommandapplyDropContinuousQueryCommandfunc"meta/store.go(“Ö0ÊàRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./storeFSM/applyDropContinuousQueryCommandÔ
6*4storeFSM/applyDropContinuousQueryCommand/$store0/errerrvar"meta/store.go(Èá0ßà@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./storeFSM/applyDropContinuousQueryCommand/$store0/errß
.*,storeFSM/applyDropContinuousQueryCommand/cmdcmdvar"meta/store.go(áÜ0úÜ@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropContinuousQueryCommand/cmd◊
.*,storeFSM/applyDropContinuousQueryCommand/extextvar"meta/store.go(≠Ü0˝Ü@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropContinuousQueryCommand/extó
.*,storeFSM/applyDropContinuousQueryCommand/fsmfsmvar"meta/store.go(ÿÖ0ÂÖ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropContinuousQueryCommand/fsmï
0*.storeFSM/applyDropContinuousQueryCommand/otherothervar"meta/store.go(Àá0‰á@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyDropContinuousQueryCommand/other«
,**storeFSM/applyDropContinuousQueryCommand/vvvar"meta/store.go(ˇÜ0Æá@R∆{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DropContinuousQueryCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DropContinuousQueryCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applyDropContinuousQueryCommand/vè
#*!storeFSM/applyDropDatabaseCommandapplyDropDatabaseCommandfunc"meta/store.go(ıÁ0‹ÍRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyDropDatabaseCommand·
/*-storeFSM/applyDropDatabaseCommand/$store0/errerrvar"meta/store.go(˜È0ùÍ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./storeFSM/applyDropDatabaseCommand/$store0/errô
'*%storeFSM/applyDropDatabaseCommand/cmdcmdvar"meta/store.go(£Ë0∏Ë@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyDropDatabaseCommand/cmd…
'*%storeFSM/applyDropDatabaseCommand/extextvar"meta/store.go(…Ë0íÈ@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyDropDatabaseCommand/extâ
'*%storeFSM/applyDropDatabaseCommand/fsmfsmvar"meta/store.go(˚Á0àË@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyDropDatabaseCommand/fsmá
)*'storeFSM/applyDropDatabaseCommand/otherothervar"meta/store.go(ŸÈ0ÚÈ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applyDropDatabaseCommand/other´
%*#storeFSM/applyDropDatabaseCommand/vvvar"meta/store.go(îÈ0ºÈ@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DropDatabaseCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DropDatabaseCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyDropDatabaseCommand/v§
**(storeFSM/applyDropRetentionPolicyCommandapplyDropRetentionPolicyCommandfunc"meta/store.go(˜Ô0ãÛRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./storeFSM/applyDropRetentionPolicyCommandÔ
6*4storeFSM/applyDropRetentionPolicyCommand/$store0/errerrvar"meta/store.go(éÚ0ÃÚ@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./storeFSM/applyDropRetentionPolicyCommand/$store0/errß
.*,storeFSM/applyDropRetentionPolicyCommand/cmdcmdvar"meta/store.go(¨0¡@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropRetentionPolicyCommand/cmd◊
.*,storeFSM/applyDropRetentionPolicyCommand/extextvar"meta/store.go(“0¢Ò@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropRetentionPolicyCommand/extó
.*,storeFSM/applyDropRetentionPolicyCommand/fsmfsmvar"meta/store.go(˝Ô0ä@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyDropRetentionPolicyCommand/fsmï
0*.storeFSM/applyDropRetentionPolicyCommand/otherothervar"meta/store.go(Ò0âÚ@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyDropRetentionPolicyCommand/other«
,**storeFSM/applyDropRetentionPolicyCommand/vvvar"meta/store.go(§Ò0”Ò@R∆{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DropRetentionPolicyCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DropRetentionPolicyCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applyDropRetentionPolicyCommand/vÉ
*storeFSM/applyDropUserCommandapplyDropUserCommandfunc"meta/store.go(‰ã0ﬁéRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/applyDropUserCommandŸ
+*)storeFSM/applyDropUserCommand/$store0/errerrvar"meta/store.go(⁄ç0¸ç@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä+./storeFSM/applyDropUserCommand/$store0/errë
#*!storeFSM/applyDropUserCommand/cmdcmdvar"meta/store.go(éå0£å@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyDropUserCommand/cmd¡
#*!storeFSM/applyDropUserCommand/extextvar"meta/store.go(¥å0˘å@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyDropUserCommand/extÅ
#*!storeFSM/applyDropUserCommand/fsmfsmvar"meta/store.go(Íã0˜ã@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyDropUserCommand/fsmˇ
%*#storeFSM/applyDropUserCommand/otherothervar"meta/store.go(ºç0’ç@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyDropUserCommand/otherõ
!*storeFSM/applyDropUserCommand/vvvar"meta/store.go(˚å0üç@R∞{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.DropUserCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.DropUserCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyDropUserCommand/vû
(*&storeFSM/applySetAdminPrivilegeCommandapplySetAdminPrivilegeCommandfunc"meta/store.go(îï0†òRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä(./storeFSM/applySetAdminPrivilegeCommandÎ
4*2storeFSM/applySetAdminPrivilegeCommand/$store0/errerrvar"meta/store.go(•ó0‚ó@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./storeFSM/applySetAdminPrivilegeCommand/$store0/err£
,**storeFSM/applySetAdminPrivilegeCommand/cmdcmdvar"meta/store.go(«ï0‹ï@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applySetAdminPrivilegeCommand/cmd”
,**storeFSM/applySetAdminPrivilegeCommand/extextvar"meta/store.go(Ìï0ªñ@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applySetAdminPrivilegeCommand/extì
,**storeFSM/applySetAdminPrivilegeCommand/fsmfsmvar"meta/store.go(öï0ßï@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applySetAdminPrivilegeCommand/fsmë
.*,storeFSM/applySetAdminPrivilegeCommand/otherothervar"meta/store.go(áó0†ó@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applySetAdminPrivilegeCommand/otherø
**(storeFSM/applySetAdminPrivilegeCommand/vvvar"meta/store.go(Ωñ0Íñ@R¬{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.SetAdminPrivilegeCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.SetAdminPrivilegeCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä*./storeFSM/applySetAdminPrivilegeCommand/vÄ
*storeFSM/applySetDataCommandapplySetDataCommandfunc"meta/store.go(¢ò0≥öRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/applySetDataCommandè
"* storeFSM/applySetDataCommand/cmdcmdvar"meta/store.go(Àò0‡ò@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./storeFSM/applySetDataCommand/cmdø
"* storeFSM/applySetDataCommand/extextvar"meta/store.go(Òò0µô@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./storeFSM/applySetDataCommand/extˇ
"* storeFSM/applySetDataCommand/fsmfsmvar"meta/store.go(®ò0µò@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä"./storeFSM/applySetDataCommand/fsmó
 *storeFSM/applySetDataCommand/vvvar"meta/store.go(∑ô0⁄ô@RÆ{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.SetDataCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.SetDataCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä ./storeFSM/applySetDataCommand/v∂
0*.storeFSM/applySetDefaultRetentionPolicyCommand%applySetDefaultRetentionPolicyCommandfunc"meta/store.go(çÛ0πˆRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applySetDefaultRetentionPolicyCommand˚
<*:storeFSM/applySetDefaultRetentionPolicyCommand/$store0/errerrvar"meta/store.go(∂ı0˙ı@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä<./storeFSM/applySetDefaultRetentionPolicyCommand/$store0/err≥
4*2storeFSM/applySetDefaultRetentionPolicyCommand/cmdcmdvar"meta/store.go(»Û0›Û@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./storeFSM/applySetDefaultRetentionPolicyCommand/cmd„
4*2storeFSM/applySetDefaultRetentionPolicyCommand/extextvar"meta/store.go(ÓÛ0ƒÙ@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./storeFSM/applySetDefaultRetentionPolicyCommand/ext£
4*2storeFSM/applySetDefaultRetentionPolicyCommand/fsmfsmvar"meta/store.go(ìÛ0†Û@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä4./storeFSM/applySetDefaultRetentionPolicyCommand/fsm°
6*4storeFSM/applySetDefaultRetentionPolicyCommand/otherothervar"meta/store.go(òı0±ı@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä6./storeFSM/applySetDefaultRetentionPolicyCommand/otherﬂ
2*0storeFSM/applySetDefaultRetentionPolicyCommand/vvvar"meta/store.go(∆Ù0˚Ù@R“{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.SetDefaultRetentionPolicyCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.SetDefaultRetentionPolicyCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./storeFSM/applySetDefaultRetentionPolicyCommand/vè
#*!storeFSM/applySetPrivilegeCommandapplySetPrivilegeCommandfunc"meta/store.go(Òë0íïRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applySetPrivilegeCommand·
/*-storeFSM/applySetPrivilegeCommand/$store0/errerrvar"meta/store.go(Ûì0‘î@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä/./storeFSM/applySetPrivilegeCommand/$store0/errô
'*%storeFSM/applySetPrivilegeCommand/cmdcmdvar"meta/store.go(üí0¥í@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applySetPrivilegeCommand/cmd…
'*%storeFSM/applySetPrivilegeCommand/extextvar"meta/store.go(≈í0éì@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applySetPrivilegeCommand/extâ
'*%storeFSM/applySetPrivilegeCommand/fsmfsmvar"meta/store.go(˜ë0Ñí@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applySetPrivilegeCommand/fsmá
)*'storeFSM/applySetPrivilegeCommand/otherothervar"meta/store.go(’ì0Óì@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä)./storeFSM/applySetPrivilegeCommand/other´
%*#storeFSM/applySetPrivilegeCommand/vvvar"meta/store.go(êì0∏ì@R∏{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.SetPrivilegeCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.SetPrivilegeCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applySetPrivilegeCommand/vâ
!*storeFSM/applyUpdateNodeCommandapplyUpdateNodeCommandfunc"meta/store.go(™ﬂ0£‚Rä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyUpdateNodeCommandï
%*#storeFSM/applyUpdateNodeCommand/cmdcmdvar"meta/store.go(÷ﬂ0Îﬂ@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateNodeCommand/cmd≈
%*#storeFSM/applyUpdateNodeCommand/extextvar"meta/store.go(¸ﬂ0√‡@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateNodeCommand/extÖ
%*#storeFSM/applyUpdateNodeCommand/fsmfsmvar"meta/store.go(∞ﬂ0Ωﬂ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateNodeCommand/fsmÇ
$*"storeFSM/applyUpdateNodeCommand/ninivar"meta/store.go(£·0æ·@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.NodeInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./storeFSM/applyUpdateNodeCommand/niÉ
'*%storeFSM/applyUpdateNodeCommand/otherothervar"meta/store.go(à·0°·@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyUpdateNodeCommand/other£
#*!storeFSM/applyUpdateNodeCommand/vvvar"meta/store.go(≈‡0Î‡@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateNodeCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateNodeCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyUpdateNodeCommand/v™
,**storeFSM/applyUpdateRetentionPolicyCommand!applyUpdateRetentionPolicyCommandfunc"meta/store.go(ªˆ0◊˚Rä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä,./storeFSM/applyUpdateRetentionPolicyCommand˝
B*@storeFSM/applyUpdateRetentionPolicyCommand/$store0/$store0/valuevaluevar"meta/store.go(Ç˘0©˘@RÃ{
        "PkgName": "meta",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äB./storeFSM/applyUpdateRetentionPolicyCommand/$store0/$store0/valueÒ
B*@storeFSM/applyUpdateRetentionPolicyCommand/$store1/$store0/valuevaluevar"meta/store.go(ﬂ˘0¸˘@R¿{
        "PkgName": "meta",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }äB./storeFSM/applyUpdateRetentionPolicyCommand/$store1/$store0/valueÛ
8*6storeFSM/applyUpdateRetentionPolicyCommand/$store2/errerrvar"meta/store.go(“˙0ò˚@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä8./storeFSM/applyUpdateRetentionPolicyCommand/$store2/err´
0*.storeFSM/applyUpdateRetentionPolicyCommand/cmdcmdvar"meta/store.go(Úˆ0á˜@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyUpdateRetentionPolicyCommand/cmd€
0*.storeFSM/applyUpdateRetentionPolicyCommand/extextvar"meta/store.go(ò˜0Í˜@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyUpdateRetentionPolicyCommand/extõ
0*.storeFSM/applyUpdateRetentionPolicyCommand/fsmfsmvar"meta/store.go(¡ˆ0Œˆ@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyUpdateRetentionPolicyCommand/fsmô
2*0storeFSM/applyUpdateRetentionPolicyCommand/otherothervar"meta/store.go(¥˙0Õ˙@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä2./storeFSM/applyUpdateRetentionPolicyCommand/other∏
0*.storeFSM/applyUpdateRetentionPolicyCommand/rpurpuvar"meta/store.go(∫¯0Á¯@R≠{
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.RetentionPolicyUpdate",
        "UnderlyingTypeString": "struct{Name *string; Duration *time.Duration; ReplicaN *int}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä0./storeFSM/applyUpdateRetentionPolicyCommand/rpuœ
.*,storeFSM/applyUpdateRetentionPolicyCommand/vvvar"meta/store.go(Ï˜0ù¯@R {
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateRetentionPolicyCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateRetentionPolicyCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSM/applyUpdateRetentionPolicyCommand/vâ
!*storeFSM/applyUpdateUserCommandapplyUpdateUserCommandfunc"meta/store.go(‡é0ÔëRä{
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSM",
        "TypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "UnderlyingTypeString": "func(cmd *github.com/influxdb/influxdb/meta/internal.Command) interface{}",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./storeFSM/applyUpdateUserCommand›
-*+storeFSM/applyUpdateUserCommand/$store0/errerrvar"meta/store.go(‹ê0çë@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä-./storeFSM/applyUpdateUserCommand/$store0/errï
%*#storeFSM/applyUpdateUserCommand/cmdcmdvar"meta/store.go(åè0°è@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.Command",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateUserCommand/cmd≈
%*#storeFSM/applyUpdateUserCommand/extextvar"meta/store.go(≤è0˘è@R–{
        "PkgName": "meta",
        "TypeString": "interface{}",
        "UnderlyingTypeString": "interface{}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateUserCommand/extÖ
%*#storeFSM/applyUpdateUserCommand/fsmfsmvar"meta/store.go(Êé0Ûé@Rê{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSM",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä%./storeFSM/applyUpdateUserCommand/fsmÉ
'*%storeFSM/applyUpdateUserCommand/otherothervar"meta/store.go(æê0◊ê@Rà{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä'./storeFSM/applyUpdateUserCommand/other£
#*!storeFSM/applyUpdateUserCommand/vvvar"meta/store.go(˚è0°ê@R¥{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateUserCommand",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta/internal.UpdateUserCommand",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä#./storeFSM/applyUpdateUserCommand/vﬂ
*storeFSM/authCache	authCachefield"meta/store.go(—0ÓR‚{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "map[string]github.com/influxdb/influxdb/meta.authUser",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/meta.authUser",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z$

text/plainAuthentication cache.
ä./storeFSM/authCache„
*storeFSM/changedchangedfield"meta/store.go(∑0ÃRí{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/changed„
*storeFSM/closingclosingfield"meta/store.go(à0ùRí{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/closing˜
 *storeFSM/clusterTracingEnabledclusterTracingEnabledfield"meta/store.go(√0›RÄ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zz

text/plainlclusterTracingEnabled controls whether low-level cluster communcation is logged.
Useful for troubleshooting
ä ./storeFSM/clusterTracingEnabledë
*storeFSM/datadatafield"meta/store.go(·0ÎR…{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "storeFSM",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/data—
*storeFSM/errerrfield"meta/store.go(Ù0ÜRå{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/errœ
*storeFSM/hashPasswordhashPasswordfield"meta/store.go(â0§RÕ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "github.com/influxdb/influxdb/meta.HashPasswordFn",
        "UnderlyingTypeString": "func(password string) ([]byte, error)",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Zü

text/plainêhashPassword generates a cryptographically secure hash for password.
Returns an error if the password is invalid or a hash cannot be generated.
ä./storeFSM/hashPassword∆
*storeFSM/ididfield"meta/store.go(˛
0áRÑ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/id£
*storeFSM/mumufield"meta/store.go(Ã
0ﬂ
R·{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/muŒ
*storeFSM/openedopenedfield"meta/store.go(
0˚
RÄ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/openedÃ
*storeFSM/pathpathfield"meta/store.go(·
0Ó
RÑ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/pathî
*storeFSM/peerspeersfield"meta/store.go(–0ﬁRà{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "[]string",
        "UnderlyingTypeString": "[]string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }Z?

text/plain1All peers in cluster. Used during bootstrapping.
ä./storeFSM/peersø
*storeFSM/raftState	raftStatefield"meta/store.go(«0⁄RË{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "github.com/influxdb/influxdb/meta.raftState",
        "UnderlyingTypeString": "interface{addPeer(addr string) error; apply(b []byte) error; close() error; initialize() error; invalidate() error; isLeader() bool; lastIndex() uint64; leader() string; open() error; peers() ([]string, error); remove() error; setPeers(addrs []string) error; snapshot() error; sync(index uint64, timeout time.Duration) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/raftState›
*storeFSM/readyreadyfield"meta/store.go(›0ÚRí{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/readyı
*storeFSM/retentionAutoCreateretentionAutoCreatefield"meta/store.go(‡0¯RÄ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/retentionAutoCreateâ
*storeFSM/rpcrpcfield"meta/store.go(Ó0ˆRƒ{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/rpcà
*storeFSM/wgwgfield"meta/store.go(ü0µR∆{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "Store",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSM/wgñ
*storeFSMSnapshotstoreFSMSnapshottype"meta/store.go(˛û0•üRª{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.storeFSMSnapshot",
        "UnderlyingTypeString": "struct{Data *github.com/influxdb/influxdb/meta.Data}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot«
*storeFSMSnapshot/DataDatafield"meta/store.go(ôü0£ü8RÎ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "storeFSMSnapshot",
        "TypeString": "*github.com/influxdb/influxdb/meta.Data",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.Data",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/DataÏ
*storeFSMSnapshot/PersistPersistfunc"meta/store.go(ßü0”¢8Rà{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSMSnapshot",
        "TypeString": "func(sink github.com/hashicorp/raft.SnapshotSink) error",
        "UnderlyingTypeString": "func(sink github.com/hashicorp/raft.SnapshotSink) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/Persistﬂ
.*,storeFSMSnapshot/Persist/$store0/$store1/errerrvar"meta/store.go(˘†0ê°@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSMSnapshot/Persist/$store0/$store1/errﬂ
.*,storeFSMSnapshot/Persist/$store0/$store2/errerrvar"meta/store.go(Ã°0ﬂ°@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä../storeFSMSnapshot/Persist/$store0/$store2/errœ
&*$storeFSMSnapshot/Persist/$store0/errerrvar"meta/store.go(ï†0µ†@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä&./storeFSMSnapshot/Persist/$store0/err∑
$*"storeFSMSnapshot/Persist/$store0/ppvar"meta/store.go(ï†0µ†@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä$./storeFSMSnapshot/Persist/$store0/pø
*storeFSMSnapshot/Persist/errerrvar"meta/store.go(Îü0í¢@Rÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/Persist/errÅ
*storeFSMSnapshot/Persist/ssvar"meta/store.go(≠ü0¿ü@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSMSnapshot",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSMSnapshot",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/Persist/sÄ
*storeFSMSnapshot/Persist/sinksinkvar"meta/store.go( ü0‡ü@Rñ{
        "PkgName": "meta",
        "TypeString": "github.com/hashicorp/raft.SnapshotSink",
        "UnderlyingTypeString": "interface{Cancel() error; ID() string; io.WriteCloser}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/Persist/sink‘
*storeFSMSnapshot/ReleaseReleasefunc"meta/store.go(í£0π£8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*storeFSMSnapshot",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ZH

text/plain:Release is invoked when we are finished with the snapshot
ä./storeFSMSnapshot/ReleaseÅ
*storeFSMSnapshot/Release/ssvar"meta/store.go(ò£0´£@R†{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.storeFSMSnapshot",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.storeFSMSnapshot",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./storeFSMSnapshot/Release/sπ
*
testServer
testServertype"meta/rpc_test.go(÷0æHRÌ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "struct{Listener net.Listener; Ready chan struct{}; rpc *github.com/influxdb/influxdb/meta.rpc; t *testing.T}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServerı
*testServer/CloseClosefunc"meta/rpc_test.go(ø0Û8HR†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*testServer",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/CloseË
*testServer/Close/ssvar"meta/rpc_test.go(≈0“@HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Close/sÕ
*testServer/ListenerListenerfield"meta/rpc_test.go(Î0Ä8HRÓ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "testServer",
        "TypeString": "net.Listener",
        "UnderlyingTypeString": "interface{Accept() (c net.Conn, err error); Addr() net.Addr; Close() error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Listenerá
*testServer/ReadyReadyfield"meta/rpc_test.go(Ç0ò8HR±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "testServer",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Readyı
*testServer/ServeServefunc"meta/rpc_test.go(ı0ô"8HR†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "meta",
        "Receiver": "*testServer",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Serve»
!*testServer/Serve/$rpc_test1/errerrvar"meta/rpc_test.go(¨!0¬!@HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä!./testServer/Serve/$rpc_test1/errö
*testServer/Serve/bbvar"meta/rpc_test.go(ì!0ß!@HR∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Serve/bî
*testServer/Serve/connconnvar"meta/rpc_test.go(• 0≈ @HR∑{
        "PkgName": "meta",
        "TypeString": "net.Conn",
        "UnderlyingTypeString": "interface{Close() error; LocalAddr() net.Addr; Read(b []byte) (n int, err error); RemoteAddr() net.Addr; SetDeadline(t time.Time) error; SetReadDeadline(t time.Time) error; SetWriteDeadline(t time.Time) error; Write(b []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Serve/conn≤
*testServer/Serve/errerrvar"meta/rpc_test.go(• 0≈ @HRÿ{
        "PkgName": "meta",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Serve/errË
*testServer/Serve/ssvar"meta/rpc_test.go(˚0à @HRî{
        "PkgName": "meta",
        "TypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.testServer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/Serve/só
*testServer/rpcrpcfield"meta/rpc_test.go(ö0ßHR…{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "testServer",
        "TypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/meta.rpc",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/rpcŸ
*testServer/ttfield"meta/rpc_test.go(©0ºHRë{
        "PkgScope": true,
        "PkgName": "meta",
        "FieldOfStruct": "testServer",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./testServer/t∏
*u64tobu64tobfunc"meta/rpc.go(æY0†ZRˇ{
        "PkgScope": true,
        "PkgName": "meta",
        "TypeString": "func(v uint64) []byte",
        "UnderlyingTypeString": "func(v uint64) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä./u64tobˇ

*u64tob/bbvar"meta/rpc.go(ﬁY0ÚY@R∆{
        "PkgName": "meta",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./u64tob/bˇ

*u64tob/vvvar"meta/rpc.go( Y0“Y@R∆{
        "PkgName": "meta",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/meta"
      }ä
./u64tob/v