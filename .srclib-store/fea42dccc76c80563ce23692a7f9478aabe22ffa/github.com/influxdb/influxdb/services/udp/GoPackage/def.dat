é
*$service/$service0/ppvar"services/udp/service.go(Ò0é@R±{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/cluster.WritePointsRequest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/cluster.WritePointsRequest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./$service/$service0/pÂ
*.udppackage"services/udp8Rª{
        "Exported": true,
        "PkgName": "udp",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä.¯
*ConfigConfigtype"services/udp/config.go(>0∞8R≥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config˛
*Config/BatchSize	BatchSizefield"services/udp/config.go(Õ0˚8R†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Config",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config/BatchSize∞
*Config/BatchTimeoutBatchTimeoutfield"services/udp/config.go(˝0Æ8R…{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config/BatchTimeoutâ
*Config/BindAddressBindAddressfield"services/udp/config.go(t0ú8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config/BindAddressÅ
*Config/DatabaseDatabasefield"services/udp/config.go(ü0À8R¶{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config/Database¯
*Config/EnabledEnabledfield"services/udp/config.go(O0r8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Config/Enabledü
*
NewService
NewServicefunc"services/udp/service.go(±0ü8RÃ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "TypeString": "func(c github.com/influxdb/influxdb/services/udp.Config) *github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/udp.Config) *github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./NewServiceÀ
*NewService/ccvar"services/udp/service.go(¡0…@R˛{
        "PkgName": "udp",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./NewService/c±
	*ServiceServicetype"services/udp/service.go(ª0Ø8RÁ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "struct{conn *net.UDPConn; addr *net.UDPAddr; wg sync.WaitGroup; done chan struct{}; batcher *github.com/influxdb/influxdb/tsdb.PointBatcher; config github.com/influxdb/influxdb/services/udp.Config; PointsWriter interface{WritePoints(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error}; Logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }Z~

text/plainpService represents here an UDP service
that will listen for incoming packets
formatted with the inline protocol
ä	./Serviceá
*Service/AddrAddrfunc"services/udp/service.go(û0“8R∂{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func() net.Addr",
        "UnderlyingTypeString": "func() net.Addr",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Addrˆ
*Service/Addr/ssvar"services/udp/service.go(§0Æ@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Addr/sÑ
*Service/CloseClosefunc"services/udp/service.go(Ö0ü8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Close¯
*Service/Close/ssvar"services/udp/service.go(ã0ï@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Close/sâ
*Service/LoggerLoggerfield"services/udp/service.go(õ0≠8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Loggerç
*Service/OpenOpenfunc"services/udp/service.go(°0È8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func() (err error)",
        "UnderlyingTypeString": "func() (err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Open∂
*Service/Open/errerrvar"services/udp/service.go(ª0ƒ@Rﬂ{
        "PkgName": "udp",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Open/errˆ
*Service/Open/ssvar"services/udp/service.go(ß0±@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/Open/sµ
*Service/PointsWriterPointsWriterfield"services/udp/service.go( 0ò8RÀ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "interface{WritePoints(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error}",
        "UnderlyingTypeString": "interface{WritePoints(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/PointsWriterÍ
*Service/SetLogger	SetLoggerfunc"services/udp/service.go(‡0ú8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func(l *log.Logger)",
        "UnderlyingTypeString": "func(l *log.Logger)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ZJ

text/plain<SetLogger sets the internal logger to the logger passed in.
ä./Service/SetLogger≤
*Service/SetLogger/llvar"services/udp/service.go(¸0â@R◊{
        "PkgName": "udp",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/SetLogger/lÄ
*Service/SetLogger/ssvar"services/udp/service.go(Ê0@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/SetLogger/sÈ
*Service/addraddrfield"services/udp/service.go(‡0ÒRô{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "*net.UDPAddr",
        "UnderlyingTypeString": "*net.UDPAddr",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/addr∏
*Service/batcherbatcherfield"services/udp/service.go(ù0∑Rﬂ{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/tsdb.PointBatcher",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/batcherî
*Service/configconfigfield"services/udp/service.go(π0«Ræ{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "github.com/influxdb/influxdb/services/udp.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; BindAddress string \"toml:\\\"bind-address\\\"\"; Database string \"toml:\\\"database\\\"\"; BatchSize int \"toml:\\\"batch-size\\\"\"; BatchTimeout github.com/influxdb/influxdb/toml.Duration \"toml:\\\"batch-timeout\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/configÈ
*Service/connconnfield"services/udp/service.go(Õ0ﬁRô{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "*net.UDPConn",
        "UnderlyingTypeString": "*net.UDPConn",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/connÎ
*Service/donedonefield"services/udp/service.go(à0öRõ{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/done‹
*Service/serveservefunc"services/udp/service.go(Œ0ÉRä{
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/serveû
3*1Service/serve/$service0/$service0/$service3/pointpointvar"services/udp/service.go(Œ0É@RÉ{
        "PkgName": "udp",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä3./Service/serve/$service0/$service0/$service3/pointŒ
'*%Service/serve/$service0/$service0/bufbufvar"services/udp/service.go(ö0º@RÕ{
        "PkgName": "udp",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä'./Service/serve/$service0/$service0/buf‡
'*%Service/serve/$service0/$service0/errerrvar"services/udp/service.go(π0›@Rﬂ{
        "PkgName": "udp",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä'./Service/serve/$service0/$service0/err¬
%*#Service/serve/$service0/$service0/nnvar"services/udp/service.go(π0›@R«{
        "PkgName": "udp",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä%./Service/serve/$service0/$service0/nù
**(Service/serve/$service0/$service0/pointspointsvar"services/udp/service.go(Ω0Â@Rì{
        "PkgName": "udp",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä*./Service/serve/$service0/$service0/points¯
*Service/serve/ssvar"services/udp/service.go(‘0ﬁ@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/serve/sô
*
Service/wgwgfield"services/udp/service.go(Û0ÜRœ{
        "PkgScope": true,
        "PkgName": "udp",
        "FieldOfStruct": "Service",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/wgÓ
*Service/writePointswritePointsfunc"services/udp/service.go(Î0ÃRä{
        "PkgScope": true,
        "PkgName": "udp",
        "Receiver": "*Service",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/writePoints∫
9*7Service/writePoints/$service0/$service0/$service0/batchbatchvar"services/udp/service.go(∫0‘@Rì{
        "PkgName": "udp",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä9./Service/writePoints/$service0/$service0/$service0/batchÄ
7*5Service/writePoints/$service0/$service0/$service0/errerrvar"services/udp/service.go(Ÿ0∞@Rﬂ{
        "PkgName": "udp",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä7./Service/writePoints/$service0/$service0/$service0/errÑ
*Service/writePoints/ssvar"services/udp/service.go(Ò0˚@R•{
        "PkgName": "udp",
        "TypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/udp.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./Service/writePoints/sÍ
*UDPBufferSizeUDPBufferSizeconst"services/udp/service.go(û0≥8Rç{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "udp",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./UDPBufferSize¨
*WritePoints$service485WritePointsfunc"services/udp/service.go(Â0ï@R¿{
        "PkgName": "udp",
        "Receiver": "interface{WritePoints(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error}",
        "TypeString": "func(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error",
        "UnderlyingTypeString": "func(p *github.com/influxdb/influxdb/cluster.WritePointsRequest) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/udp"
      }ä./WritePoints$service485