€
)*'$processor_test/$processor_test0/nodeIDnodeIDvar"services/hh/processor_test.go(è0•@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./$processor_test/$processor_test0/nodeID°
)*'$processor_test/$processor_test0/pointspointsvar"services/hh/processor_test.go(ß0∫@HRë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./$processor_test/$processor_test0/pointsﬁ
**($processor_test/$processor_test0/shardIDshardIDvar"services/hh/processor_test.go(è0•@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./$processor_test/$processor_test0/shardIDπ
*$service/$service1/ownerIDownerIDvar"services/hh/service.go(0á@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./$service/$service1/ownerID¸
*$service/$service1/pointspointsvar"services/hh/service.go(â0ú@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./$service/$service1/pointsπ
*$service/$service1/shardIDshardIDvar"services/hh/service.go(0á@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./$service/$service1/shardID∂
*$service/$service3/whenwhenvar"services/hh/service.go(«0Ÿ@R—{
        "PkgName": "hh",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./$service/$service3/when£
*.hhpackage"services/hh8Rπ{
        "Exported": true,
        "PkgName": "hh",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z@

text/plain2Package hh implements a hinted handoff for writes
ä.å
*BenchmarkQueueAppendBenchmarkQueueAppendfunc"services/hh/queue_test.go(\0˙8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(b *testing.B)",
        "UnderlyingTypeString": "func(b *testing.B)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./BenchmarkQueueAppend‚
'*%BenchmarkQueueAppend/$queue_test2/errerrvar"services/hh/queue_test.go(Å0ê@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä'./BenchmarkQueueAppend/$queue_test2/errñ
A*?BenchmarkQueueAppend/$queue_test3/$queue_test0/$queue_test0/errerrvar"services/hh/queue_test.go(0ù@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äA./BenchmarkQueueAppend/$queue_test3/$queue_test0/$queue_test0/errƒ
%*#BenchmarkQueueAppend/$queue_test3/iivar"services/hh/queue_test.go(‘0⁄@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./BenchmarkQueueAppend/$queue_test3/i∑
*BenchmarkQueueAppend/bbvar"services/hh/queue_test.go(v0Ç@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.B",
        "UnderlyingTypeString": "*testing.B",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./BenchmarkQueueAppend/b∂
*BenchmarkQueueAppend/dirdirvar"services/hh/queue_test.go(á0±@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./BenchmarkQueueAppend/dir»
*BenchmarkQueueAppend/errerrvar"services/hh/queue_test.go(á0±@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./BenchmarkQueueAppend/errÇ
*BenchmarkQueueAppend/qqvar"services/hh/queue_test.go(í0π@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./BenchmarkQueueAppend/qΩ
*ConfigConfigtype"services/hh/config.go(û0÷8R¯{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; Dir string \"toml:\\\"dir\\\"\"; MaxSize int64 \"toml:\\\"max-size\\\"\"; MaxAge github.com/influxdb/influxdb/toml.Duration \"toml:\\\"max-age\\\"\"; RetryRateLimit int64 \"toml:\\\"retry-rate-limit\\\"\"; RetryInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"retry-interval\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ConfigÔ
*
Config/DirDirfield"services/hh/config.go(ﬁ0á8R§{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/Dir˜
*Config/EnabledEnabledfield"services/hh/config.go(Ø0‹8R†{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/Enabledõ
*Config/MaxAgeMaxAgefield"services/hh/config.go(π0Ê8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/MaxAge˘
*Config/MaxSizeMaxSizefield"services/hh/config.go(â0∑8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/MaxSize∞
*Config/RetryIntervalRetryIntervalfield"services/hh/config.go(†0‘8R«{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "github.com/influxdb/influxdb/toml.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/RetryIntervalé
*Config/RetryRateLimitRetryRateLimitfield"services/hh/config.go(Ë0û8R¢{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Config",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Config/RetryRateLimitá
*DefaultMaxAgeDefaultMaxAgeconst"services/hh/config.go(Ê0à8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z¢

text/plainìDefaultMaxAge is the default maximum amount of time that a hinted handoff write
can stay in the queue.  After this time, the write will be purged.
ä./DefaultMaxAgeÀ
*DefaultMaxSizeDefaultMaxSizeconst"services/hh/config.go(•0»8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z`

text/plainRDefaultMaxSize is the default maximum size of all hinted handoff queues in bytes.
ä./DefaultMaxSize˝
*DefaultRetryIntervalDefaultRetryIntervalconst"services/hh/config.go(Û0ï8Rá{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZÉ

text/plainuDefaultRetryInterval is the default amout of time the system waits before
attempting to flush hinted handoff queues.
ä./DefaultRetryInterval”
*DefaultRetryRateLimitDefaultRetryRateLimitconst"services/hh/config.go(⁄0Û8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z“

text/plain√DefaultRetryRateLimit is the default rate that hinted handoffs will be retried.
The rate is in bytes per second and applies across all nodes when retried.   A
value of 0 disables the rate limit.
ä./DefaultRetryRateLimitã
*ErrHintedHandoffDisabledErrHintedHandoffDisabledvar"services/hh/service.go(l0¨8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ErrHintedHandoffDisabledﬂ
*
ErrNotOpen
ErrNotOpenvar"services/hh/queue.go(~0´8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ErrNotOpenÊ
*ErrQueueFullErrQueueFullvar"services/hh/queue.go(≠0Ÿ8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ErrQueueFullÏ
*ErrSegmentFullErrSegmentFullvar"services/hh/queue.go(€0â8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ErrSegmentFullÆ
*	NewConfig	NewConfigfunc"services/hh/config.go(ÿ0–
8R‡{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func() github.com/influxdb/influxdb/services/hh.Config",
        "UnderlyingTypeString": "func() github.com/influxdb/influxdb/services/hh.Config",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewConfigË
*NewProcessorNewProcessorfunc"services/hh/processor.go(Ω0∞8Ré{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(dir string, writer github.com/influxdb/influxdb/services/hh.shardWriter, options github.com/influxdb/influxdb/services/hh.ProcessorOptions) (*github.com/influxdb/influxdb/services/hh.Processor, error)",
        "UnderlyingTypeString": "func(dir string, writer github.com/influxdb/influxdb/services/hh.shardWriter, options github.com/influxdb/influxdb/services/hh.ProcessorOptions) (*github.com/influxdb/influxdb/services/hh.Processor, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessorÕ
*NewProcessor/$processor0/errerrvar"services/hh/processor.go(Ü0£@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/$processor0/errÕ
*NewProcessor/$processor1/errerrvar"services/hh/processor.go(È0˛@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/$processor1/err£
*NewProcessor/dirdirvar"services/hh/processor.go(œ0Ÿ@RÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/dirá
*NewProcessor/optionsoptionsvar"services/hh/processor.go(Ô0á@R£{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.ProcessorOptions",
        "UnderlyingTypeString": "struct{MaxSize int64; RetryRateLimit int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/options˜
*NewProcessor/ppvar"services/hh/processor.go(†0Æ@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/p¡
*NewProcessor/writerwritervar"services/hh/processor.go(€0Ì@R‡{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.shardWriter",
        "UnderlyingTypeString": "interface{WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewProcessor/writer…
*NewRateLimiterNewRateLimiterfunc"services/hh/limiter.go(÷0À8R˙{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(limit int64) *github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "func(limit int64) *github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZÓ

text/plainﬂNewRateLimiter returns a new limiter configured to restrict a process to the limit per second.
limit is the maximum amount that can be used per second.  The limit should be > 0.  A limit
<= 0, will not limit the processes.
ä./NewRateLimiter©
*NewRateLimiter/limitlimitvar"services/hh/limiter.go(Í0ı@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewRateLimiter/limit∆
*
NewService
NewServicefunc"services/hh/service.go(¯0©8R∂{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(c github.com/influxdb/influxdb/services/hh.Config, w github.com/influxdb/influxdb/services/hh.shardWriter) *github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "func(c github.com/influxdb/influxdb/services/hh.Config, w github.com/influxdb/influxdb/services/hh.shardWriter) *github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z<

text/plain.NewService returns a new instance of Service.
ä./NewServiceè
*NewService/ccvar"services/hh/service.go(à0ê@R√{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; Dir string \"toml:\\\"dir\\\"\"; MaxSize int64 \"toml:\\\"max-size\\\"\"; MaxAge github.com/influxdb/influxdb/toml.Duration \"toml:\\\"max-age\\\"\"; RetryRateLimit int64 \"toml:\\\"retry-rate-limit\\\"\"; RetryInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"retry-interval\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewService/cØ
*NewService/errerrvar"services/hh/service.go(à0á@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewService/errâ
*NewService/processor	processorvar"services/hh/service.go(à0á@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewService/processorÌ
*NewService/ssvar"services/hh/service.go(≠0Ü@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewService/s¨
*NewService/wwvar"services/hh/service.go(í0ü@R‡{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.shardWriter",
        "UnderlyingTypeString": "interface{WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./NewService/w˘
*Process$service422Processfunc"services/hh/service.go(¶0µ@Rö{
        "PkgName": "hh",
        "Receiver": "interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Process$service422È
*	Processor	Processortype"services/hh/processor.go(£0Ì8Rò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; dir string; maxSize int64; maxAge time.Duration; retryRateLimit int64; queues map[uint64]*github.com/influxdb/influxdb/services/hh.queue; writer github.com/influxdb/influxdb/services/hh.shardWriter; Logger *log.Logger}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processoré
*Processor/LoggerLoggerfield"services/hh/processor.go(Ÿ0Î8R±{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/Loggerè
*Processor/ProcessProcessfunc"services/hh/processor.go(Ω0÷8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/Process¡
I*GProcessor/Process/$processor0/$processor0/$processor0/$processor0/startstartvar"services/hh/processor.go(Ë0˜@R˘{
        "PkgName": "hh",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äI./Processor/Process/$processor0/$processor0/$processor0/$processor0/startˇ
w*uProcessor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor1/$processor0/$processor0/errerrvar"services/hh/processor.go(¯0ä@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äw./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor1/$processor0/$processor0/errœ
_*]Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor2/errerrvar"services/hh/processor.go(Ù0ß@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä_./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor2/errœ
_*]Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor3/errerrvar"services/hh/processor.go(˛0ê@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä_./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/$processor3/err•
S*QProcessor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/bufbufvar"services/hh/processor.go(Ë0ˇ@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äS./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/buf∑
S*QProcessor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/errerrvar"services/hh/processor.go(Ë0ˇ@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äS./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/errÙ
V*TProcessor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/pointspointsvar"services/hh/processor.go(ˆ0£@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äV./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/points±
W*UProcessor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/shardIDshardIDvar"services/hh/processor.go(ˆ0£@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äW./Processor/Process/$processor0/$processor0/$processor0/$processor1/$processor0/shardID◊
?*=Processor/Process/$processor0/$processor0/$processor0/limiterlimitervar"services/hh/processor.go(É0Æ@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä?./Processor/Process/$processor0/$processor0/$processor0/limiter˛
>*<Processor/Process/$processor0/$processor0/$processor0/nodeIDnodeIDvar"services/hh/processor.go(›0Í@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä>./Processor/Process/$processor0/$processor0/$processor0/nodeID¡
9*7Processor/Process/$processor0/$processor0/$processor0/qqvar"services/hh/processor.go(Ï0Ù@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä9./Processor/Process/$processor0/$processor0/$processor0/q∂
<*:Processor/Process/$processor0/$processor0/$processor0/sentsentvar"services/hh/processor.go(∫0¬@R≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZB

text/plain4Log how many writes we successfully sent at the end
ä<./Processor/Process/$processor0/$processor0/$processor0/sent©
=*;Processor/Process/$processor0/$processor0/$processor0/startstartvar"services/hh/processor.go(∆0Ÿ@R˘{
        "PkgName": "hh",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä=./Processor/Process/$processor0/$processor0/$processor0/startŒ
&*$Processor/Process/$processor0/nodeIDnodeIDvar"services/hh/processor.go(Ω0÷@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä&./Processor/Process/$processor0/nodeIDë
!*Processor/Process/$processor0/qqvar"services/hh/processor.go(Ω0÷@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./Processor/Process/$processor0/qÔ
/*-Processor/Process/$processor1/$processor0/errerrvar"services/hh/processor.go(ï0°@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä/./Processor/Process/$processor1/$processor0/errÅ
*Processor/Process/ppvar"services/hh/processor.go(√0œ@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/Process/pµ
*Processor/Process/resresvar"services/hh/processor.go(â0Ø@R”{
        "PkgName": "hh",
        "TypeString": "chan error",
        "UnderlyingTypeString": "chan error",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/Process/res»
*Processor/PurgeOlderThanPurgeOlderThanfunc"services/hh/processor.go(›!0…#8R‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(when time.Duration) error",
        "UnderlyingTypeString": "func(when time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/PurgeOlderThanï
B*@Processor/PurgeOlderThan/$processor0/$processor0/$processor0/errerrvar"services/hh/processor.go(Ê"0ò#@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äB./Processor/PurgeOlderThan/$processor0/$processor0/$processor0/err´
,**Processor/PurgeOlderThan/$processor0/queuequeuevar"services/hh/processor.go(›!0…#@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä,./Processor/PurgeOlderThan/$processor0/queueè
*Processor/PurgeOlderThan/ppvar"services/hh/processor.go(„!0Ô!@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/PurgeOlderThan/pƒ
*Processor/PurgeOlderThan/whenwhenvar"services/hh/processor.go(Ä"0í"@R—{
        "PkgName": "hh",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/PurgeOlderThan/when∏
*Processor/WriteShard
WriteShardfunc"services/hh/processor.go(£0ª8R–{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShardı
2*0Processor/WriteShard/$processor0/$processor0/errerrvar"services/hh/processor.go(®0±@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä2./Processor/WriteShard/$processor0/$processor0/err≠
*Processor/WriteShard/bbvar"services/hh/processor.go(˝0°@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/b¨
*Processor/WriteShard/okokvar"services/hh/processor.go(˘0ó@R«{
        "PkgName": "hh",
        "TypeString": "bool",
        "UnderlyingTypeString": "bool",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/okø
*Processor/WriteShard/ownerIDownerIDvar"services/hh/processor.go(¬0Ÿ@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/ownerIDá
*Processor/WriteShard/ppvar"services/hh/processor.go(©0µ@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/pÇ
*Processor/WriteShard/pointspointsvar"services/hh/processor.go(€0Ó@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/pointsã
*Processor/WriteShard/queuequeuevar"services/hh/processor.go(˘0ó@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/queueø
*Processor/WriteShard/shardIDshardIDvar"services/hh/processor.go(¬0Ÿ@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/WriteShard/shardIDˆ
*Processor/addQueueaddQueuefunc"services/hh/processor.go(É0°Rñ{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(nodeID uint64) (*github.com/influxdb/influxdb/services/hh.queue, error)",
        "UnderlyingTypeString": "func(nodeID uint64) (*github.com/influxdb/influxdb/services/hh.queue, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueueŸ
$*"Processor/addQueue/$processor0/errerrvar"services/hh/processor.go(¶0ƒ@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä$./Processor/addQueue/$processor0/errŸ
$*"Processor/addQueue/$processor2/errerrvar"services/hh/processor.go(º0œ@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä$./Processor/addQueue/$processor2/err¡
*Processor/addQueue/errerrvar"services/hh/processor.go(Í0ë@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueue/err∏
*Processor/addQueue/nodeIDnodeIDvar"services/hh/processor.go(†0≠@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueue/nodeIDÉ
*Processor/addQueue/ppvar"services/hh/processor.go(â0ï@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueue/p≤
*Processor/addQueue/pathpathvar"services/hh/processor.go(Â0°@RÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueue/pathá
*Processor/addQueue/queuequeuevar"services/hh/processor.go(Í0ë@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/addQueue/queueﬂ
*Processor/dirdirfield"services/hh/processor.go(…0ﬁRç{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/dir¸
*Processor/loadQueues
loadQueuesfunc"services/hh/processor.go(ƒ	0ÅRñ{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/loadQueuesç
>*<Processor/loadQueues/$processor1/$processor0/$processor1/errerrvar"services/hh/processor.go(¥0–@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä>./Processor/loadQueues/$processor1/$processor0/$processor1/errı
2*0Processor/loadQueues/$processor1/$processor0/errerrvar"services/hh/processor.go(‘
0â@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä2./Processor/loadQueues/$processor1/$processor0/errÏ
5*3Processor/loadQueues/$processor1/$processor0/nodeIDnodeIDvar"services/hh/processor.go(‘
0â@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä5./Processor/loadQueues/$processor1/$processor0/nodeIDΩ
'*%Processor/loadQueues/$processor1/filefilevar"services/hh/processor.go(ƒ	0Å@R∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä'./Processor/loadQueues/$processor1/file≈
*Processor/loadQueues/errerrvar"services/hh/processor.go(Ó	0ë
@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/loadQueues/err«
*Processor/loadQueues/filesfilesvar"services/hh/processor.go(Ó	0ë
@RŸ{
        "PkgName": "hh",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/loadQueues/filesá
*Processor/loadQueues/ppvar"services/hh/processor.go( 	0÷	@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/loadQueues/pÑ
*Processor/marshalWritemarshalWritefunc"services/hh/processor.go(ÿ0ÃRò{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(shardID uint64, points []github.com/influxdb/influxdb/tsdb.Point) []byte",
        "UnderlyingTypeString": "func(shardID uint64, points []github.com/influxdb/influxdb/tsdb.Point) []byte",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/marshalWriteˇ
&*$Processor/marshalWrite/$processor0/ppvar"services/hh/processor.go(ÿ0Ã@RÅ{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä&./Processor/marshalWrite/$processor0/p±
*Processor/marshalWrite/bbvar"services/hh/processor.go(®0º@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/marshalWrite/bã
*Processor/marshalWrite/ppvar"services/hh/processor.go(ﬁ0Í@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/marshalWrite/pÜ
*Processor/marshalWrite/pointspointsvar"services/hh/processor.go(â0ú@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/marshalWrite/points√
 *Processor/marshalWrite/shardIDshardIDvar"services/hh/processor.go(˘0á@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./Processor/marshalWrite/shardIDÓ
*Processor/maxAgemaxAgefield"services/hh/processor.go(ˆ0íRì{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "time.Duration",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/maxAgeÈ
*Processor/maxSizemaxSizefield"services/hh/processor.go(‡0ÙRã{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/maxSizeπ
*Processor/mumufield"services/hh/processor.go(∑0∆RÍ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/mu–
*Processor/queuesqueuesfield"services/hh/processor.go(´0√Rı{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "map[uint64]*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "map[uint64]*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/queues˛
*Processor/retryRateLimitretryRateLimitfield"services/hh/processor.go(î0®Rã{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/retryRateLimitÚ
*Processor/setOptions
setOptionsfunc"services/hh/processor.go(≤0¬	Rå{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(options github.com/influxdb/influxdb/services/hh.ProcessorOptions)",
        "UnderlyingTypeString": "func(options github.com/influxdb/influxdb/services/hh.ProcessorOptions)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/setOptionsó
*Processor/setOptions/optionsoptionsvar"services/hh/processor.go(—0È@R£{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.ProcessorOptions",
        "UnderlyingTypeString": "struct{MaxSize int64; RetryRateLimit int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/setOptions/optionsá
*Processor/setOptions/ppvar"services/hh/processor.go(∏0ƒ@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/setOptions/pÇ
*Processor/unmarshalWriteunmarshalWritefunc"services/hh/processor.go(Œ0€!Rê{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Processor",
        "TypeString": "func(b []byte) (uint64, []github.com/influxdb/influxdb/tsdb.Point, error)",
        "UnderlyingTypeString": "func(b []byte) (uint64, []github.com/influxdb/influxdb/tsdb.Point, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/unmarshalWriteµ
*Processor/unmarshalWrite/bbvar"services/hh/processor.go(Ò0˘@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/unmarshalWrite/bÕ
*Processor/unmarshalWrite/errerrvar"services/hh/processor.go(ñ!0º!@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/unmarshalWrite/err«
"* Processor/unmarshalWrite/ownerIDownerIDvar"services/hh/processor.go(Î 0î!@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./Processor/unmarshalWrite/ownerIDè
*Processor/unmarshalWrite/ppvar"services/hh/processor.go(‘0‡@R•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/unmarshalWrite/pä
!*Processor/unmarshalWrite/pointspointsvar"services/hh/processor.go(ñ!0º!@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./Processor/unmarshalWrite/points˝
*Processor/writerwriterfield"services/hh/processor.go(≈0◊R¢{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Processor",
        "TypeString": "github.com/influxdb/influxdb/services/hh.shardWriter",
        "UnderlyingTypeString": "interface{WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Processor/writeræ
*ProcessorOptionsProcessorOptionstype"services/hh/processor.go(Ù0ª8Rÿ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.ProcessorOptions",
        "UnderlyingTypeString": "struct{MaxSize int64; RetryRateLimit int64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ProcessorOptionsö
*ProcessorOptions/MaxSizeMaxSizefield"services/hh/processor.go(è0£8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "ProcessorOptions",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./ProcessorOptions/MaxSizeØ
!*ProcessorOptions/RetryRateLimitRetryRateLimitfield"services/hh/processor.go(•0π8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "ProcessorOptions",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./ProcessorOptions/RetryRateLimit≤
*PurgeOlderThan$service440PurgeOlderThanfunc"services/hh/service.go(∏0‡@Ræ{
        "PkgName": "hh",
        "Receiver": "interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "TypeString": "func(when time.Duration) error",
        "UnderlyingTypeString": "func(when time.Duration) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./PurgeOlderThan$service440Ò
	*ServiceServicetype"services/hh/service.go(≥0Â8R®{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; wg sync.WaitGroup; closing chan struct{}; Logger *log.Logger; cfg github.com/influxdb/influxdb/services/hh.Config; ShardWriter github.com/influxdb/influxdb/services/hh.shardWriter; HintedHandoff interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä	./ServiceÅ
*Service/CloseClosefunc"services/hh/service.go(ø
0À8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/CloseÛ
*Service/Close/ssvar"services/hh/service.go(≈
0œ
@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/Close/s’
*Service/HintedHandoffHintedHandofffield"services/hh/service.go(…0„8RÈ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "UnderlyingTypeString": "interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/HintedHandoffÜ
*Service/LoggerLoggerfield"services/hh/service.go(ã0ù8RØ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/Logger˛
*Service/OpenOpenfunc"services/hh/service.go(´0Ω
8RÆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/OpenÒ
*Service/Open/ssvar"services/hh/service.go(±0ª@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/Open/sÁ
*Service/SetLogger	SetLoggerfunc"services/hh/service.go(å0»8Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func(l *log.Logger)",
        "UnderlyingTypeString": "func(l *log.Logger)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZJ

text/plain<SetLogger sets the internal logger to the logger passed in.
ä./Service/SetLoggerØ
*Service/SetLogger/llvar"services/hh/service.go(®0µ@R’{
        "PkgName": "hh",
        "TypeString": "*log.Logger",
        "UnderlyingTypeString": "*log.Logger",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/SetLogger/l˚
*Service/SetLogger/ssvar"services/hh/service.go(í0ú@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/SetLogger/s†
*Service/ShardWriterShardWriterfield"services/hh/service.go(Ø0∆8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "github.com/influxdb/influxdb/services/hh.shardWriter",
        "UnderlyingTypeString": "interface{WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/ShardWriterê
*Service/WriteShard
WriteShardfunc"services/hh/service.go(ù0È8RŒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z^

text/plainPWriteShard queues the points write for shardID to node ownerID to handoff queue
ä./Service/WriteShardπ
*Service/WriteShard/ownerIDownerIDvar"services/hh/service.go(∫0—@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/WriteShard/ownerID¸
*Service/WriteShard/pointspointsvar"services/hh/service.go(”0Ê@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/WriteShard/points˝
*Service/WriteShard/ssvar"services/hh/service.go(£0≠@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/WriteShard/sπ
*Service/WriteShard/shardIDshardIDvar"services/hh/service.go(∫0—@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/WriteShard/shardIDœ
*Service/cfgcfgfield"services/hh/service.go(ü0¨RÉ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "github.com/influxdb/influxdb/services/hh.Config",
        "UnderlyingTypeString": "struct{Enabled bool \"toml:\\\"enabled\\\"\"; Dir string \"toml:\\\"dir\\\"\"; MaxSize int64 \"toml:\\\"max-size\\\"\"; MaxAge github.com/influxdb/influxdb/toml.Duration \"toml:\\\"max-age\\\"\"; RetryRateLimit int64 \"toml:\\\"retry-rate-limit\\\"\"; RetryInterval github.com/influxdb/influxdb/toml.Duration \"toml:\\\"retry-interval\\\"\"}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/cfgÒ
*Service/closingclosingfield"services/hh/service.go(Û0àRô{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "chan struct{}",
        "UnderlyingTypeString": "chan struct{}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/closingÁ
*Service/expireWritesexpireWritesfunc"services/hh/service.go(Ø0˘Rà{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zw

text/plainiexpireWrites will cause the handoff queues to remove writes that are older
than the configured threshold
ä./Service/expireWritesß
L*JService/expireWrites/$service0/$service0/$service0/$service0/$service0/errerrvar"services/hh/service.go(Ë0™@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äL./Service/expireWrites/$service0/$service0/$service0/$service0/$service0/errÅ
*Service/expireWrites/ssvar"services/hh/service.go(µ0ø@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/expireWrites/s∆
*Service/expireWrites/tickertickervar"services/hh/service.go(Ê0â@R◊{
        "PkgName": "hh",
        "TypeString": "*time.Ticker",
        "UnderlyingTypeString": "*time.Ticker",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/expireWrites/ticker±
*
Service/mumufield"services/hh/service.go(≈0ŸRË{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/muá
*Service/purgeWritespurgeWritesfunc"services/hh/service.go(ã0»Rà{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zô

text/plainäpurgeWrites will cause the handoff queues to remove writes that are no longer
valid.  e.g. queued writes for a node that has been removed
ä./Service/purgeWritesˇ
*Service/purgeWrites/ssvar"services/hh/service.go(ë0õ@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/purgeWrites/sÎ
*Service/retryWritesretryWritesfunc"services/hh/service.go(Î0æRà{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*Service",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/retryWrites•
K*IService/retryWrites/$service0/$service0/$service0/$service0/$service0/errerrvar"services/hh/service.go(º0‹@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äK./Service/retryWrites/$service0/$service0/$service0/$service0/$service0/errˇ
*Service/retryWrites/ssvar"services/hh/service.go(Ò0˚@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Service",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/retryWrites/sƒ
*Service/retryWrites/tickertickervar"services/hh/service.go(°0›@R◊{
        "PkgName": "hh",
        "TypeString": "*time.Ticker",
        "UnderlyingTypeString": "*time.Ticker",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/retryWrites/tickerñ
*
Service/wgwgfield"services/hh/service.go(€0ÒRÕ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "Service",
        "TypeString": "sync.WaitGroup",
        "UnderlyingTypeString": "struct{m sync.Mutex; counter int32; waiters int32; sema *uint32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./Service/wgÛ
*TestLimiterTestLimiterfunc"services/hh/limiter_test.go(+0·8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterÙ
*TestLimiter/llvar"services/hh/limiter_test.go(M0c@HR°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiter/l¶
*TestLimiter/ttvar"services/hh/limiter_test.go(<0H@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiter/tå
*TestLimiterExceededTestLimiterExceededfunc"services/hh/limiter_test.go(∫0≠8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterExceeded»
&*$TestLimiterExceeded/$limiter_test0/iivar"services/hh/limiter_test.go(É0â@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä&./TestLimiterExceeded/$limiter_test0/iæ
*TestLimiterExceeded/delaydelayvar"services/hh/limiter_test.go(π0’@HRÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterExceeded/delayÜ
*TestLimiterExceeded/llvar"services/hh/limiter_test.go(‰0˝@HR°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterExceeded/l∏
*TestLimiterExceeded/ttvar"services/hh/limiter_test.go(”0ﬂ@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterExceeded/tï
*TestLimiterWithinLimitTestLimiterWithinLimitfunc"services/hh/limiter_test.go(„0∏8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterWithinLimitŒ
)*'TestLimiterWithinLimit/$limiter_test1/iivar"services/hh/limiter_test.go(ı0˚@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./TestLimiterWithinLimit/$limiter_test1/i‘
+*)TestLimiterWithinLimit/$limiter_test2/expexpvar"services/hh/limiter_test.go(À0ÿ@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestLimiterWithinLimit/$limiter_test2/expƒ
*TestLimiterWithinLimit/delaydelayvar"services/hh/limiter_test.go(™0∆@HRÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterWithinLimit/delayå
*TestLimiterWithinLimit/llvar"services/hh/limiter_test.go(÷0Ô@HR°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterWithinLimit/læ
*TestLimiterWithinLimit/ttvar"services/hh/limiter_test.go(ˇ0ã@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestLimiterWithinLimit/të
*TestProcessorProcessTestProcessorProcessfunc"services/hh/processor_test.go(“0£8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess¯
<*:TestProcessorProcess/$processor_test1/$processor_test2/expexpvar"services/hh/processor_test.go(©0±@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä<./TestProcessorProcess/$processor_test1/$processor_test2/expÂ
.*,TestProcessorProcess/$processor_test1/nodeIDnodeIDvar"services/hh/processor_test.go(˛0î@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä../TestProcessorProcess/$processor_test1/nodeID´
.*,TestProcessorProcess/$processor_test1/pointspointsvar"services/hh/processor_test.go(ñ0©@HRë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä../TestProcessorProcess/$processor_test1/pointsË
/*-TestProcessorProcess/$processor_test1/shardIDshardIDvar"services/hh/processor_test.go(˛0î@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä/./TestProcessorProcess/$processor_test1/shardIDÓ
+*)TestProcessorProcess/$processor_test3/errerrvar"services/hh/processor_test.go(˜0≥@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestProcessorProcess/$processor_test3/errÓ
+*)TestProcessorProcess/$processor_test4/errerrvar"services/hh/processor_test.go(µ0«@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestProcessorProcess/$processor_test4/err÷
+*)TestProcessorProcess/$processor_test5/expexpvar"services/hh/processor_test.go(ñ0û@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestProcessorProcess/$processor_test5/expÓ
+*)TestProcessorProcess/$processor_test6/errerrvar"services/hh/processor_test.go(º0Œ@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestProcessorProcess/$processor_test6/err÷
+*)TestProcessorProcess/$processor_test7/expexpvar"services/hh/processor_test.go(º0ƒ@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestProcessorProcess/$processor_test7/expÄ
*TestProcessorProcess/countcountvar"services/hh/processor_test.go(≥0Ì@HR≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZD

text/plain6expected data to be queue and sent to the shardWriter
ä./TestProcessorProcess/count∫
*TestProcessorProcess/dirdirvar"services/hh/processor_test.go(˝0≠@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/dirÃ
*TestProcessorProcess/errerrvar"services/hh/processor_test.go(˝0≠@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/errí
 *TestProcessorProcess/expNodeID	expNodeIDvar"services/hh/processor_test.go(≥0Ì@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZD

text/plain6expected data to be queue and sent to the shardWriter
ä ./TestProcessorProcess/expNodeIDï
!*TestProcessorProcess/expShardID
expShardIDvar"services/hh/processor_test.go(≥0Ì@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZD

text/plain6expected data to be queue and sent to the shardWriter
ä!./TestProcessorProcess/expShardIDé
*TestProcessorProcess/ppvar"services/hh/processor_test.go(¿
0Ä@HR•{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.Processor",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/pÌ
*TestProcessorProcess/ptptvar"services/hh/processor_test.go(Ô0Œ@HRÅ{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "interface{AddField(name string, value interface{}); AddTag(key string, value string); Data() []byte; Fields() github.com/influxdb/influxdb/tsdb.Fields; HashID() uint64; Key() []byte; Name() string; SetData(buf []byte); SetName(string); SetTags(tags github.com/influxdb/influxdb/tsdb.Tags); SetTime(t time.Time); String() string; Tags() github.com/influxdb/influxdb/tsdb.Tags; Time() time.Time; UnixNano() int64}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/ptù
*TestProcessorProcess/shshvar"services/hh/processor_test.go(—0Ω
@HR±{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.fakeShardWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.fakeShardWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/shº
*TestProcessorProcess/ttvar"services/hh/processor_test.go(Ï0¯@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestProcessorProcess/t˚
*TestPurgeQueueTestPurgeQueuefunc"services/hh/queue_test.go(Ä20œ98HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue÷
!*TestPurgeQueue/$queue_test3/errerrvar"services/hh/queue_test.go(Â40Ù4@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./TestPurgeQueue/$queue_test3/err÷
!*TestPurgeQueue/$queue_test4/errerrvar"services/hh/queue_test.go(∑50’5@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./TestPurgeQueue/$queue_test4/errƒ
!*TestPurgeQueue/$queue_test6/expexpvar"services/hh/queue_test.go(Ò60˝6@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./TestPurgeQueue/$queue_test6/exp÷
!*TestPurgeQueue/$queue_test7/errerrvar"services/hh/queue_test.go(˝70†8@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä!./TestPurgeQueue/$queue_test7/err™
*TestPurgeQueue/curcurvar"services/hh/queue_test.go(î60´6@HRÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue/cur™
*TestPurgeQueue/dirdirvar"services/hh/queue_test.go(‡20ä3@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue/dirº
*TestPurgeQueue/errerrvar"services/hh/queue_test.go(‡20ä3@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue/errˆ
*TestPurgeQueue/qqvar"services/hh/queue_test.go(Ä40ù4@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue/q¨
*TestPurgeQueue/ttvar"services/hh/queue_test.go(î20†2@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestPurgeQueue/tñ
*TestQueueAdvancePastEndTestQueueAdvancePastEndfunc"services/hh/queue_test.go(Ë0¢"8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEndÿ
+*)TestQueueAdvancePastEnd/$queue_test10/expexpvar"services/hh/queue_test.go(Ù0Ä@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestQueueAdvancePastEnd/$queue_test10/expÍ
+*)TestQueueAdvancePastEnd/$queue_test12/errerrvar"services/hh/queue_test.go(Í 0¸ @HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./TestQueueAdvancePastEnd/$queue_test12/errË
**(TestQueueAdvancePastEnd/$queue_test2/errerrvar"services/hh/queue_test.go(õ0™@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAdvancePastEnd/$queue_test2/errË
**(TestQueueAdvancePastEnd/$queue_test3/errerrvar"services/hh/queue_test.go(¢0¿@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAdvancePastEnd/$queue_test3/errË
**(TestQueueAdvancePastEnd/$queue_test4/errerrvar"services/hh/queue_test.go(ˇ0ù@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAdvancePastEnd/$queue_test4/err÷
**(TestQueueAdvancePastEnd/$queue_test6/expexpvar"services/hh/queue_test.go(‹0Ë@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAdvancePastEnd/$queue_test6/expË
**(TestQueueAdvancePastEnd/$queue_test7/errerrvar"services/hh/queue_test.go(Œ0‡@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAdvancePastEnd/$queue_test7/errº
*TestQueueAdvancePastEnd/curcurvar"services/hh/queue_test.go(ˇ0ñ@HRÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEnd/curº
*TestQueueAdvancePastEnd/dirdirvar"services/hh/queue_test.go(ñ0¿@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEnd/dirŒ
*TestQueueAdvancePastEnd/errerrvar"services/hh/queue_test.go(ñ0¿@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEnd/errà
*TestQueueAdvancePastEnd/qqvar"services/hh/queue_test.go(∂0”@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEnd/qæ
*TestQueueAdvancePastEnd/ttvar"services/hh/queue_test.go(Ö0ë@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAdvancePastEnd/tñ
*TestQueueAppendMultipleTestQueueAppendMultiplefunc"services/hh/queue_test.go(Ï0Ê8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendMultipleË
**(TestQueueAppendMultiple/$queue_test2/errerrvar"services/hh/queue_test.go(ä0ô@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAppendMultiple/$queue_test2/errË
**(TestQueueAppendMultiple/$queue_test3/errerrvar"services/hh/queue_test.go(‹0˙@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAppendMultiple/$queue_test3/errË
**(TestQueueAppendMultiple/$queue_test4/errerrvar"services/hh/queue_test.go(º0⁄@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAppendMultiple/$queue_test4/errú
D*BTestQueueAppendMultiple/$queue_test5/$queue_test0/$queue_test2/errerrvar"services/hh/queue_test.go(ê0¢@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }äD./TestQueueAppendMultiple/$queue_test5/$queue_test0/$queue_test2/err
7*5TestQueueAppendMultiple/$queue_test5/$queue_test0/curcurvar"services/hh/queue_test.go(»0ﬂ@HRÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä7./TestQueueAppendMultiple/$queue_test5/$queue_test0/curÇ
7*5TestQueueAppendMultiple/$queue_test5/$queue_test0/errerrvar"services/hh/queue_test.go(»0ﬂ@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä7./TestQueueAppendMultiple/$queue_test5/$queue_test0/err÷
**(TestQueueAppendMultiple/$queue_test5/expexpvar"services/hh/queue_test.go(Ï0Ê@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./TestQueueAppendMultiple/$queue_test5/expº
*TestQueueAppendMultiple/dirdirvar"services/hh/queue_test.go(ö0ƒ@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendMultiple/dirŒ
*TestQueueAppendMultiple/errerrvar"services/hh/queue_test.go(ö0ƒ@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendMultiple/errà
*TestQueueAppendMultiple/qqvar"services/hh/queue_test.go(•0¬@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendMultiple/qæ
*TestQueueAppendMultiple/ttvar"services/hh/queue_test.go(â0ï@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendMultiple/tá
*TestQueueAppendOneTestQueueAppendOnefunc"services/hh/queue_test.go(¸0Í8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOneﬁ
%*#TestQueueAppendOne/$queue_test2/errerrvar"services/hh/queue_test.go(ï0§@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./TestQueueAppendOne/$queue_test2/errﬁ
%*#TestQueueAppendOne/$queue_test3/errerrvar"services/hh/queue_test.go(Á0Ü@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./TestQueueAppendOne/$queue_test3/err 
%*#TestQueueAppendOne/$queue_test5/expexpvar"services/hh/queue_test.go(ô
0∞
@HR…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./TestQueueAppendOne/$queue_test5/expÃ
%*#TestQueueAppendOne/$queue_test7/expexpvar"services/hh/queue_test.go(˚0à@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./TestQueueAppendOne/$queue_test7/exp≤
*TestQueueAppendOne/curcurvar"services/hh/queue_test.go(û0µ@HRÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/cur≤
*TestQueueAppendOne/dirdirvar"services/hh/queue_test.go(•0œ@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/dirƒ
*TestQueueAppendOne/errerrvar"services/hh/queue_test.go(•0œ@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/err≤
*TestQueueAppendOne/expexpvar"services/hh/queue_test.go(≈0„@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/exp˛
*TestQueueAppendOne/qqvar"services/hh/queue_test.go(∞0Õ@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/qß
*TestQueueAppendOne/statsstatsvar"services/hh/queue_test.go(Â0ˇ@HR∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/stats¥
*TestQueueAppendOne/ttvar"services/hh/queue_test.go(î0†@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueAppendOne/t¯
*TestQueueFullTestQueueFullfunc"services/hh/queue_test.go(§"0ê&8HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueFull‘
 *TestQueueFull/$queue_test2/errerrvar"services/hh/queue_test.go(À$0⁄$@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./TestQueueFull/$queue_test2/err‘
 *TestQueueFull/$queue_test3/errerrvar"services/hh/queue_test.go(ù%0ª%@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./TestQueueFull/$queue_test3/err®
*TestQueueFull/dirdirvar"services/hh/queue_test.go(»"0Ú"@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueFull/dir∫
*TestQueueFull/errerrvar"services/hh/queue_test.go(»"0Ú"@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueFull/errÙ
*TestQueueFull/qqvar"services/hh/queue_test.go(Ë#0É$@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueFull/q™
*TestQueueFull/ttvar"services/hh/queue_test.go(∑"0√"@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueFull/t˛
*TestQueueReopenTestQueueReopenfunc"services/hh/queue_test.go(í&0˛18HRò{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(t *testing.T)",
        "UnderlyingTypeString": "func(t *testing.T)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen⁄
#*!TestQueueReopen/$queue_test10/errerrvar"services/hh/queue_test.go(Ç/0†/@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./TestQueueReopen/$queue_test10/err⁄
#*!TestQueueReopen/$queue_test11/errerrvar"services/hh/queue_test.go(‚/0Ù/@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./TestQueueReopen/$queue_test11/err»
#*!TestQueueReopen/$queue_test13/expexpvar"services/hh/queue_test.go(ê10ú1@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./TestQueueReopen/$queue_test13/expÿ
"* TestQueueReopen/$queue_test2/errerrvar"services/hh/queue_test.go(Ω(0Ã(@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test2/errÿ
"* TestQueueReopen/$queue_test3/errerrvar"services/hh/queue_test.go(è)0≠)@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test3/err∆
"* TestQueueReopen/$queue_test5/expexpvar"services/hh/queue_test.go(…*0’*@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test5/expÿ
"* TestQueueReopen/$queue_test6/errerrvar"services/hh/queue_test.go(€+0Î+@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test6/errÿ
"* TestQueueReopen/$queue_test7/errerrvar"services/hh/queue_test.go(¨,0ª,@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test7/err∆
"* TestQueueReopen/$queue_test9/expexpvar"services/hh/queue_test.go(ê.0ú.@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./TestQueueReopen/$queue_test9/exp¨
*TestQueueReopen/curcurvar"services/hh/queue_test.go(Ï)0É*@HRÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen/cur¨
*TestQueueReopen/dirdirvar"services/hh/queue_test.go(∏&0‚&@HRÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen/diræ
*TestQueueReopen/errerrvar"services/hh/queue_test.go(∏&0‚&@HR›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen/err¯
*TestQueueReopen/qqvar"services/hh/queue_test.go(ÿ'0ı'@HRù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen/qÆ
*TestQueueReopen/ttvar"services/hh/queue_test.go(ß&0≥&@HR”{
        "PkgName": "hh",
        "TypeString": "*testing.T",
        "UnderlyingTypeString": "*testing.T",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./TestQueueReopen/t¢
*WriteShard$service357
WriteShardfunc"services/hh/service.go(Â0£@R∫{
        "PkgName": "hh",
        "Receiver": "interface{Process() error; PurgeOlderThan(when time.Duration) error; WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "TypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./WriteShard$service357∆
*btou64btou64func"services/hh/queue.go(‘t0óuRÑ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(b []byte) uint64",
        "UnderlyingTypeString": "func(b []byte) uint64",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./btou64ç

*btou64/bbvar"services/hh/queue.go(‡t0Ët@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä
./btou64/bÿ
*defaultSegmentSizedefaultSegmentSizeconst"services/hh/queue.go(ñ0ªRÒ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./defaultSegmentSizeÈ
*fakeShardWriterfakeShardWritertype"services/hh/processor_test.go(c0√HRÇ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.fakeShardWriter",
        "UnderlyingTypeString": "struct{ShardWriteFn func(shardID uint64, nodeID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./fakeShardWriterÿ
*fakeShardWriter/ShardWriteFnShardWriteFnfield"services/hh/processor_test.go(}0¡8HR◊{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "fakeShardWriter",
        "TypeString": "func(shardID uint64, nodeID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, nodeID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./fakeShardWriter/ShardWriteFnœ
*fakeShardWriter/WriteShard
WriteShardfunc"services/hh/processor_test.go(≈0–8HR‘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*fakeShardWriter",
        "TypeString": "func(shardID uint64, nodeID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, nodeID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./fakeShardWriter/WriteShard¶
*fakeShardWriter/WriteShard/ffvar"services/hh/processor_test.go(À0›@HR±{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.fakeShardWriter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.fakeShardWriter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./fakeShardWriter/WriteShard/fœ
#*!fakeShardWriter/WriteShard/nodeIDnodeIDvar"services/hh/processor_test.go(Í0Ä@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./fakeShardWriter/WriteShard/nodeIDï
#*!fakeShardWriter/WriteShard/pointspointsvar"services/hh/processor_test.go(Ç0ï@HRë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./fakeShardWriter/WriteShard/points“
$*"fakeShardWriter/WriteShard/shardIDshardIDvar"services/hh/processor_test.go(Í0Ä@HRÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä$./fakeShardWriter/WriteShard/shardID¿
*
footerSize
footerSizeconst"services/hh/queue.go(Ω0”RÒ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "untyped int",
        "UnderlyingTypeString": "untyped int",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./footerSizeè
	*limiterlimitertype"services/hh/limiter.go( 0lR {
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "struct{count int64; limit int64; start time.Time; delay float64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä	./limiterã
*limiter/DelayDelayfunc"services/hh/limiter.go(°0á	8Ræ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*limiter",
        "TypeString": "func() time.Duration",
        "UnderlyingTypeString": "func() time.Duration",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zx

text/plainjDelay returns the amount of time, up to 1 second, that caller should wait
to maintain the configured rate
ä./limiter/Delay‹
,**limiter/Delay/$limiter0/$limiter0/delayAdjdelayAdjvar"services/hh/limiter.go(Ï0§@RÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä,./limiter/Delay/$limiter0/$limiter0/delayAdj”
)*'limiter/Delay/$limiter0/$limiter0/deltadeltavar"services/hh/limiter.go(‡0ä@RÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./limiter/Delay/$limiter0/$limiter0/deltaÃ
(*&limiter/Delay/$limiter0/$limiter0/rateratevar"services/hh/limiter.go(ç0¥@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä(./limiter/Delay/$limiter0/$limiter0/rateÛ
*limiter/Delay/ttvar"services/hh/limiter.go(ß0±@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/Delay/tπ
*limiter/UpdateUpdatefunc"services/hh/limiter.go(Ô0Ø8R¥{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*limiter",
        "TypeString": "func(count int)",
        "UnderlyingTypeString": "func(count int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z-

text/plainUpdate updates the amount used
ä./limiter/Update•
*limiter/Update/countcountvar"services/hh/limiter.go(à0ë@R≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/Update/countı
*limiter/Update/ttvar"services/hh/limiter.go(ı0ˇ@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/Update/t∑
*limiter/clampclampfunc"services/hh/limiter.go(â	0ò
RÊ{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*limiter",
        "TypeString": "func(value float64, min float64, max float64) float64",
        "UnderlyingTypeString": "func(value float64, min float64, max float64) float64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/clamp•
*limiter/clamp/maxmaxvar"services/hh/limiter.go(°	0∏	@RÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/clamp/max•
*limiter/clamp/minminvar"services/hh/limiter.go(°	0∏	@RÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/clamp/minÛ
*limiter/clamp/ttvar"services/hh/limiter.go(è	0ô	@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.limiter",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/clamp/t´
*limiter/clamp/valuevaluevar"services/hh/limiter.go(°	0∏	@RÕ{
        "PkgName": "hh",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/clamp/valueŸ
*limiter/countcountfield"services/hh/limiter.go(20=Râ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "limiter",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/count›
*limiter/delaydelayfield"services/hh/limiter.go(]0jRç{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "limiter",
        "TypeString": "float64",
        "UnderlyingTypeString": "float64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/delayŸ
*limiter/limitlimitfield"services/hh/limiter.go(?0JRâ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "limiter",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/limitâ
*limiter/startstartfield"services/hh/limiter.go(L0[Rπ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "limiter",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./limiter/startÀ

*newQueuenewQueuefunc"services/hh/queue.go(é0ÿRä{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(dir string, maxSize int64) (*github.com/influxdb/influxdb/services/hh.queue, error)",
        "UnderlyingTypeString": "func(dir string, maxSize int64) (*github.com/influxdb/influxdb/services/hh.queue, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zw

text/plaininewQueue create a queue that will store segments in dir and that will
consume more than maxSize on disk.
ä
./newQueueó
*newQueue/dirdirvar"services/hh/queue.go(ú0¶@RÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newQueue/dir°
*newQueue/maxSizemaxSizevar"services/hh/queue.go(®0µ@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newQueue/maxSizeﬁ
*
newSegment
newSegmentfunc"services/hh/queue.go(™L0¢ORê{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(path string, maxSize int64) (*github.com/influxdb/influxdb/services/hh.segment, error)",
        "UnderlyingTypeString": "func(path string, maxSize int64) (*github.com/influxdb/influxdb/services/hh.segment, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegmentΩ
*newSegment/$queue2/errerrvar"services/hh/queue.go(ﬁN0ÌN@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/$queue2/err≠
*newSegment/errerrvar"services/hh/queue.go(ÎL0£M@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/errô
*newSegment/ffvar"services/hh/queue.go(ÎL0£M@Rœ{
        "PkgName": "hh",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/f•
*newSegment/maxSizemaxSizevar"services/hh/queue.go(«L0‘L@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/maxSizeû
*newSegment/pathpathvar"services/hh/queue.go(∫L0≈L@RÀ{
        "PkgName": "hh",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/pathÎ
*newSegment/ssvar"services/hh/queue.go(êN0ÿN@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/sê
*newSegment/statsstatsvar"services/hh/queue.go(ÃM0ÁM@R∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./newSegment/stats¿
*queuequeuetype"services/hh/queue.go(£0ÉR¸{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; dir string; head *github.com/influxdb/influxdb/services/hh.segment; tail *github.com/influxdb/influxdb/services/hh.segment; maxSegmentSize int64; maxSize int64; segments github.com/influxdb/influxdb/services/hh.segments}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZÇ

text/plainÛqueue is a bounded, disk-backed, append-only type that combines queue and
log semantics.  byte slices can be appended and read back in-order.
The queue maintains a pointer to the current head
byte slice and can re-read from the head until it has been advanced.

Internally, the queue writes byte slices to multiple segment files so
that disk space can be reclaimed. When a segment file is larger than
the max segment size, a new file is created.   Segments are removed
after their head pointer has advanced past the last entry.  The first
segment is the head, and the last segment is the tail.  Reads are from
the head segment and writes tail segment.

queues can have a max size configured such that when the size of all
segments on disk exceeds the size, write will fail.

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇHead ‚îÇ
‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îÇ
‚ñº
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇSegment 1 - 10MB ‚îÇ ‚îÇSegment 2 - 10MB ‚îÇ‚îÇSegment 3 - 10MB ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                         ‚ñ≤
                                                         ‚îÇ
                                                         ‚îÇ
                                                    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
                                                    ‚îÇTail ‚îÇ
                                                    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
ä./queue–
*queue/AdvanceAdvancefunc"services/hh/queue.go(å90Û:8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZO

text/plainAAdvance moves the head point to the next byte slice in the queue
ä./queue/Advance„
+*)queue/Advance/$queue1/$queue0/$queue0/errerrvar"services/hh/queue.go(Æ:0¡:@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä+./queue/Advance/$queue1/$queue0/$queue0/err≥
*queue/Advance/errerrvar"services/hh/queue.go(˝90î:@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Advance/errÌ
*queue/Advance/llvar"services/hh/queue.go(í90ö9@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Advance/l–
*queue/AppendAppendfunc"services/hh/queue.go(¶30ä78Rº{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZB

text/plain4Append appends a byte slice to the end of the queue
ä./queue/Append—
"* queue/Append/$queue2/$queue0/errerrvar"services/hh/queue.go(ä60®6@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./queue/Append/$queue2/$queue0/err°
&*$queue/Append/$queue2/$queue0/segmentsegmentvar"services/hh/queue.go(ä60®6@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä&./queue/Append/$queue2/$queue0/segment¡
*queue/Append/$queue2/errerrvar"services/hh/queue.go(◊50Ó5@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Append/$queue2/errô
*queue/Append/bbvar"services/hh/queue.go(Ω30≈3@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Append/bÎ
*queue/Append/llvar"services/hh/queue.go(¨30¥3@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Append/l∑
*queue/CloseClosefunc"services/hh/queue.go(≤0â8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z<

text/plain.Close stops the queue for reading and writing
ä./queue/Closeﬂ
)*'queue/Close/$queue0/$queue0/$queue0/errerrvar"services/hh/queue.go(ö0™@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./queue/Close/$queue0/$queue0/$queue0/err˝
*queue/Close/$queue0/ssvar"services/hh/queue.go(≤0â@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Close/$queue0/sÈ
*queue/Close/llvar"services/hh/queue.go(∏0¿@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Close/l„
*queue/CurrentCurrentfunc"services/hh/queue.go(œ70∆88R¿{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZN

text/plain@Current returns the current byte slice at the head of the queue
ä./queue/CurrentÌ
*queue/Current/llvar"services/hh/queue.go(’70›7@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Current/l≥
*
queue/OpenOpenfunc"services/hh/queue.go(ä0ˇ8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z;

text/plain-Open opens the queue for reading and writing
ä./queue/OpenÕ
 *queue/Open/$queue1/$queue0/errerrvar"services/hh/queue.go(≈0›@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./queue/Open/$queue1/$queue0/err≠
*queue/Open/errerrvar"services/hh/queue.go(Õ0Ó@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Open/errÁ
*queue/Open/llvar"services/hh/queue.go(ê0ò@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Open/lÇ
*queue/Open/segmentssegmentsvar"services/hh/queue.go(Õ0Ó@R£{
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.segments",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/Open/segments∞
*queue/PurgeOlderThanPurgeOlderThanfunc"services/hh/queue.go(©!0Î$8R»{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func(when time.Time) error",
        "UnderlyingTypeString": "func(when time.Time) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/PurgeOlderThan—
"* queue/PurgeOlderThan/$queue0/errerrvar"services/hh/queue.go(¿"0ÿ"@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./queue/PurgeOlderThan/$queue0/errÒ
2*0queue/PurgeOlderThan/$queue1/$queue0/$queue2/errerrvar"services/hh/queue.go(≥$0∆$@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä2./queue/PurgeOlderThan/$queue1/$queue0/$queue2/err·
**(queue/PurgeOlderThan/$queue1/$queue0/errerrvar"services/hh/queue.go(ß#0»#@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./queue/PurgeOlderThan/$queue1/$queue0/err˝
**(queue/PurgeOlderThan/$queue1/$queue0/modmodvar"services/hh/queue.go(ß#0»#@R˘{
        "PkgName": "hh",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./queue/PurgeOlderThan/$queue1/$queue0/modÊ
*queue/PurgeOlderThan/cutoffcutoffvar"services/hh/queue.go(˘"0ù#@R˘{
        "PkgName": "hh",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/PurgeOlderThan/cutoff˚
*queue/PurgeOlderThan/llvar"services/hh/queue.go(Ø!0∑!@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/PurgeOlderThan/l‡
*queue/PurgeOlderThan/whenwhenvar"services/hh/queue.go(»!0÷!@R˘{
        "PkgName": "hh",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/PurgeOlderThan/whenè
*queue/SetMaxSegmentSizeSetMaxSegmentSizefunc"services/hh/queue.go(ﬂ0ß!8R¿{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func(size int64) error",
        "UnderlyingTypeString": "func(size int64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z\

text/plainNSetMaxSegmentSize updates the max segment size for new and existing
segments.
ä./queue/SetMaxSegmentSizeï
#*!queue/SetMaxSegmentSize/$queue0/ssvar"services/hh/queue.go(ﬂ0ß!@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä#./queue/SetMaxSegmentSize/$queue0/sÁ
-*+queue/SetMaxSegmentSize/$queue1/$queue0/errerrvar"services/hh/queue.go(¡ 0ﬂ @R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä-./queue/SetMaxSegmentSize/$queue1/$queue0/err∑
1*/queue/SetMaxSegmentSize/$queue1/$queue0/segmentsegmentvar"services/hh/queue.go(¡ 0ﬂ @R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä1./queue/SetMaxSegmentSize/$queue1/$queue0/segmentÅ
*queue/SetMaxSegmentSize/llvar"services/hh/queue.go(Â0Ì@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/SetMaxSegmentSize/l∂
*queue/SetMaxSegmentSize/sizesizevar"services/hh/queue.go(Å0ã@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/SetMaxSegmentSize/sizeí
*queue/addSegment
addSegmentfunc"services/hh/queue.go(Ÿ&0û)R¸{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() (*github.com/influxdb/influxdb/services/hh.segment, error)",
        "UnderlyingTypeString": "func() (*github.com/influxdb/influxdb/services/hh.segment, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z:

text/plain,addSegment creates a new empty segment file
ä./queue/addSegmentπ
*queue/addSegment/errerrvar"services/hh/queue.go(ã'0´'@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/addSegment/errÛ
*queue/addSegment/llvar"services/hh/queue.go(ﬂ&0Á&@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/addSegment/l∞
*queue/addSegment/nextIDnextIDvar"services/hh/queue.go(ã'0´'@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/addSegment/nextIDâ
*queue/addSegment/segmentsegmentvar"services/hh/queue.go(‘'0∂(@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/addSegment/segment¸
*	queue/dirdirfield"services/hh/queue.go(Ê0Râ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z+

text/plainDirectory to create segments
ä./queue/dir¥
*queue/diskUsage	diskUsagefunc"services/hh/queue.go(´%0®&Rí{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZI

text/plain;diskUsage returns the total size on disk used by the queue
ä./queue/diskUsageÖ
*queue/diskUsage/$queue0/ssvar"services/hh/queue.go(´%0®&@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/diskUsage/$queue0/sÒ
*queue/diskUsage/llvar"services/hh/queue.go(±%0π%@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/diskUsage/l¶
*queue/diskUsage/sizesizevar"services/hh/queue.go(‘%0ﬁ%@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/diskUsage/sizeú
*
queue/headheadfield"services/hh/queue.go(ﬂ0ÚRﬂ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zr

text/plaindThe head and tail segments.  Reads are from the beginning of head,
writes are appended to the tail.
ä./queue/headî
*queue/loadSegmentsloadSegmentsfunc"services/hh/queue.go(À)0ª.R¸{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() (github.com/influxdb/influxdb/services/hh.segments, error)",
        "UnderlyingTypeString": "func() (github.com/influxdb/influxdb/services/hh.segments, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z6

text/plain(loadSegments loads all segments on disk
ä./queue/loadSegments›
(*&queue/loadSegments/$queue1/$queue0/errerrvar"services/hh/queue.go(ü,0“,@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä(./queue/loadSegments/$queue1/$queue0/err≠
,**queue/loadSegments/$queue1/$queue0/segmentsegmentvar"services/hh/queue.go(¯,0 -@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä,./queue/loadSegments/$queue1/$queue0/segment∂
$*"queue/loadSegments/$queue1/segmentsegmentvar"services/hh/queue.go(À)0ª.@R∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä$./queue/loadSegments/$queue1/segmentΩ
*queue/loadSegments/errerrvar"services/hh/queue.go(ö*0Ω*@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/loadSegments/errø
*queue/loadSegments/filesfilesvar"services/hh/queue.go(ö*0Ω*@RŸ{
        "PkgName": "hh",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/loadSegments/files˜
*queue/loadSegments/llvar"services/hh/queue.go(—)0Ÿ)@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/loadSegments/lî
*queue/loadSegments/segmentssegmentsvar"services/hh/queue.go(ˇ)0ó*@R•{
        "PkgName": "hh",
        "TypeString": "[]*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/loadSegments/segmentsÕ
*queue/maxSegmentSizemaxSegmentSizefield"services/hh/queue.go(»0‹Rá{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z]

text/plainOThe maximum size in bytes of a segment file before a new one should be created
ä./queue/maxSegmentSizeæ
*queue/maxSizemaxSizefield"services/hh/queue.go(º0…Rá{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zc

text/plainUThe maximum size allowed in bytes of all segments before writes will return
an error
ä./queue/maxSize©

*queue/mumufield"services/hh/queue.go(≥0¬RÊ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä
./queue/mu–
*queue/nextSegmentIDnextSegmentIDfunc"services/hh/queue.go(˜.0Ì2R¶{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() (uint64, error)",
        "UnderlyingTypeString": "func() (uint64, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZE

text/plain7nextSegmentID returns the next segment ID that is free
ä./queue/nextSegmentIDﬂ
)*'queue/nextSegmentID/$queue1/$queue0/errerrvar"services/hh/queue.go(¿10˚1@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä)./queue/nextSegmentID/$queue1/$queue0/errﬂ
/*-queue/nextSegmentID/$queue1/$queue0/segmentID	segmentIDvar"services/hh/queue.go(¿10˚1@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä/./queue/nextSegmentID/$queue1/$queue0/segmentID∏
%*#queue/nextSegmentID/$queue1/segmentsegmentvar"services/hh/queue.go(˜.0Ì2@R∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä%./queue/nextSegmentID/$queue1/segmentø
*queue/nextSegmentID/errerrvar"services/hh/queue.go(™/0–/@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/nextSegmentID/err˘
*queue/nextSegmentID/llvar"services/hh/queue.go(˝.0Ö/@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/nextSegmentID/l≥
*queue/nextSegmentID/maxIDmaxIDvar"services/hh/queue.go(˚/0á0@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/nextSegmentID/maxID 
*queue/nextSegmentID/segmentssegmentsvar"services/hh/queue.go(™/0–/@RŸ{
        "PkgName": "hh",
        "TypeString": "[]os.FileInfo",
        "UnderlyingTypeString": "[]os.FileInfo",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/nextSegmentID/segmentsÊ
*queue/segmentssegmentsfield"services/hh/queue.go(0ÅR·{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "github.com/influxdb/influxdb/services/hh.segments",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z.

text/plain The segments that exist on disk
ä./queue/segmentsú
*
queue/tailtailfield"services/hh/queue.go(ﬂ0ÚRﬂ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "queue",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Zr

text/plaindThe head and tail segments.  Reads are from the beginning of head,
writes are appended to the tail.
ä./queue/tailÊ
*queue/trimHeadtrimHeadfunc"services/hh/queue.go(ı:0¯<Rí{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*queue",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/trimHeadÂ
,**queue/trimHead/$queue0/$queue0/$queue0/errerrvar"services/hh/queue.go(÷;0Î;@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä,./queue/trimHead/$queue0/$queue0/$queue0/errÂ
,**queue/trimHead/$queue0/$queue0/$queue1/errerrvar"services/hh/queue.go(ë<0Æ<@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä,./queue/trimHead/$queue0/$queue0/$queue1/errÔ
*queue/trimHead/llvar"services/hh/queue.go(˚:0É;@Rù{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.queue",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./queue/trimHead/l∫
	*segmentsegmenttype"services/hh/queue.go(¢K0®LRˆ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "struct{mu sync.RWMutex; size int64; file *os.File; path string; pos int64; currentSize int64; maxSize int64}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z¸

text/plainÌSegment is a queue using a single file.  The structure of a segment is a series
lengths + block with a single footer point to the position in the segment of the
current head block.

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ         Block 1          ‚îÇ ‚îÇ         Block 2          ‚îÇ ‚îÇ   Footer   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇBlock 1 Len ‚îÇ‚îÇBlock 1 Body‚îÇ ‚îÇBlock 2 Len ‚îÇ‚îÇBlock 2 Body‚îÇ ‚îÇHead Offset ‚îÇ
‚îÇ  8 bytes   ‚îÇ‚îÇ  N bytes   ‚îÇ ‚îÇ  8 bytes   ‚îÇ‚îÇ  N bytes   ‚îÇ ‚îÇ  8 bytes   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

The footer holds the pointer to the head entry at the end of the segment to allow writes
to seek to the end and write sequentially (vs having to seek back to the beginning of
the segment to update the head pointer).  Reads must seek to the end then back into the
segment offset stored in the footer.

Segments store arbitrary byte slices and leave the serialization to the caller.  Segments
are created with a max size and will block writes when the segment is full.
ä	./segment´
*segment/SetMaxSegmentSizeSetMaxSegmentSizefunc"services/hh/queue.go(êj0˜j8R∂{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(size int64)",
        "UnderlyingTypeString": "func(size int64)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/SetMaxSegmentSizeâ
*segment/SetMaxSegmentSize/llvar"services/hh/queue.go(ñj0†j@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/SetMaxSegmentSize/l∫
 *segment/SetMaxSegmentSize/sizesizevar"services/hh/queue.go(¥j0æj@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./segment/SetMaxSegmentSize/size§
*segment/advanceadvancefunc"services/hh/queue.go(ˆ`0 fRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z9

text/plain+advance advances the current value pointer
ä./segment/advance«
*segment/advance/$queue2/errerrvar"services/hh/queue.go(b0çc@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/$queue2/err«
*segment/advance/$queue3/errerrvar"services/hh/queue.go(”c0Ùc@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/$queue3/err«
*segment/advance/$queue4/errerrvar"services/hh/queue.go(òd0¨d@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/$queue4/err«
*segment/advance/$queue5/errerrvar"services/hh/queue.go(›d0ıd@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/$queue5/err∑
*segment/advance/errerrvar"services/hh/queue.go(ñe0Øe@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/errı
*segment/advance/llvar"services/hh/queue.go(¸`0Üa@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/l£
*segment/advance/posposvar"services/hh/queue.go(Æc0Œc@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/pos¢
*segment/advance/szszvar"services/hh/queue.go(ñe0Øe@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/advance/sz≥
*segment/appendappendfunc"services/hh/queue.go(ÎV0Ì[R§{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }Z;

text/plain-append adds byte slice to the end of segment
ä./segment/append≈
*segment/append/$queue2/errerrvar"services/hh/queue.go(¨X0…X@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/$queue2/err≈
*segment/append/$queue3/errerrvar"services/hh/queue.go(ÌX0ëY@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/$queue3/err≈
*segment/append/$queue4/errerrvar"services/hh/queue.go(µY0ÀY@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/$queue4/err≈
*segment/append/$queue5/errerrvar"services/hh/queue.go(ÔY0íZ@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/$queue5/err≈
*segment/append/$queue6/errerrvar"services/hh/queue.go(∂Z0 Z@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/$queue6/errù
*segment/append/bbvar"services/hh/queue.go(ÑW0åW@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/bÛ
*segment/append/llvar"services/hh/queue.go(ÒV0˚V@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/append/l„
*segment/closeclosefunc"services/hh/queue.go(Ãf0„gRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/close√
*segment/close/$queue0/errerrvar"services/hh/queue.go(îg0©g@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/close/$queue0/errÒ
*segment/close/llvar"services/hh/queue.go(“f0‹f@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/close/l»
*segment/currentcurrentfunc"services/hh/queue.go(≠\0∆`R®{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() ([]byte, error)",
        "UnderlyingTypeString": "func() ([]byte, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ZI

text/plain;current returns byte slice that the current segment points
ä./segment/current«
*segment/current/$queue1/errerrvar"services/hh/queue.go(∫]0“]@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/$queue1/err«
*segment/current/$queue4/errerrvar"services/hh/queue.go(¸_0ë`@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/$queue4/errü
*segment/current/bbvar"services/hh/queue.go(‚_0˜_@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/b∑
*segment/current/errerrvar"services/hh/queue.go(ë^0™^@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/errı
*segment/current/llvar"services/hh/queue.go(≥\0Ω\@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/l¢
*segment/current/szszvar"services/hh/queue.go(ë^0™^@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/current/szÎ
*segment/currentSizecurrentSizefield"services/hh/queue.go(ÇL0ìLRâ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/currentSizeÔ
*segment/diskUsage	diskUsagefunc"services/hh/queue.go(¥i0éjRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/diskUsage˘
*segment/diskUsage/llvar"services/hh/queue.go(∫i0ƒi@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/diskUsage/l‹
*segment/filefilefield"services/hh/queue.go(“K0ﬂKRè{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/fileÈ
*segment/filePosfilePosfunc"services/hh/queue.go(ón0ÎnRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() int64",
        "UnderlyingTypeString": "func() int64",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/filePosı
*segment/filePos/llvar"services/hh/queue.go(ùn0ßn@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/filePos/lù
*segment/filePos/nnvar"services/hh/queue.go(ºn0ﬂn@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/filePos/ní
*segment/lastModifiedlastModifiedfunc"services/hh/queue.go(Âg0≤iRÆ{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() (time.Time, error)",
        "UnderlyingTypeString": "func() (time.Time, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/lastModified¡
*segment/lastModified/errerrvar"services/hh/queue.go(¡h0Âh@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/lastModified/errˇ
*segment/lastModified/llvar"services/hh/queue.go(Îg0ıg@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/lastModified/l§
*segment/lastModified/statsstatsvar"services/hh/queue.go(¡h0Âh@R∫{
        "PkgName": "hh",
        "TypeString": "os.FileInfo",
        "UnderlyingTypeString": "interface{IsDir() bool; ModTime() time.Time; Mode() os.FileMode; Name() string; Size() int64; Sys() interface{}}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/lastModified/statsﬂ
*segment/maxSizemaxSizefield"services/hh/queue.go(ïL0¶LRâ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/maxSizeØ
*
segment/mumufield"services/hh/queue.go(¥K0√KRË{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "sync.RWMutex",
        "UnderlyingTypeString": "struct{w sync.Mutex; writerSem uint32; readerSem uint32; readerCount int32; readerWait int32}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/mu‡
*segment/openopenfunc"services/hh/queue.go(§O0πVRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open·
**(segment/open/$queue0/$queue0/$queue0/errerrvar"services/hh/queue.go(¯P0õQ@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./segment/open/$queue0/$queue0/$queue0/err·
**(segment/open/$queue0/$queue0/$queue1/errerrvar"services/hh/queue.go(¬Q0÷Q@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./segment/open/$queue0/$queue0/$queue1/err¡
*segment/open/$queue1/errerrvar"services/hh/queue.go(¯R0ïS@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open/$queue1/err¡
*segment/open/$queue3/errerrvar"services/hh/queue.go(ãT0£T@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open/$queue3/err◊
**(segment/open/$queue4/$queue0/currentSizecurrentSizevar"services/hh/queue.go(ºU0ﬁU@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä*./segment/open/$queue4/$queue0/currentSize—
"* segment/open/$queue4/$queue0/errerrvar"services/hh/queue.go(ºU0ﬁU@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä"./segment/open/$queue4/$queue0/err±
*segment/open/errerrvar"services/hh/queue.go(∂S0–S@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open/errÔ
*segment/open/llvar"services/hh/queue.go(™O0¥O@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open/lü
*segment/open/posposvar"services/hh/queue.go(∂S0–S@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/open/posÿ
*segment/pathpathfield"services/hh/queue.go(·K0ÏKRã{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/path”
*segment/posposfield"services/hh/queue.go(ÔK0ÄLRâ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/posˇ
*segment/readBytes	readBytesfunc"services/hh/queue.go(¨r0ÓsR§{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readBytes£
*segment/readBytes/bbvar"services/hh/queue.go(»r0–r@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readBytes/bª
*segment/readBytes/errerrvar"services/hh/queue.go(€r0Ûr@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readBytes/err˘
*segment/readBytes/llvar"services/hh/queue.go(≤r0ºr@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readBytes/lù
*segment/readBytes/nnvar"services/hh/queue.go(€r0Ûr@R≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readBytes/nÜ
*segment/readUint64
readUint64func"services/hh/queue.go(Ìn0ápR®{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() (uint64, error)",
        "UnderlyingTypeString": "func() (uint64, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readUint64Õ
 *segment/readUint64/$queue0/errerrvar"services/hh/queue.go(∏o0Õo@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./segment/readUint64/$queue0/err•
*segment/readUint64/bbvar"services/hh/queue.go(üo0≥o@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readUint64/b˚
*segment/readUint64/llvar"services/hh/queue.go(Ûn0˝n@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/readUint64/lÚ
*segment/seekseekfunc"services/hh/queue.go(√k0émR¶{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(pos int64) error",
        "UnderlyingTypeString": "func(pos int64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seek±
*segment/seek/errerrvar"services/hh/queue.go(Ók0ïl@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seek/errÔ
*segment/seek/llvar"services/hh/queue.go(…k0”k@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seek/ló
*segment/seek/nnvar"services/hh/queue.go(Ók0ïl@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seek/nù
*segment/seek/posposvar"services/hh/queue.go(⁄k0„k@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seek/pos˚
*segment/seekEndseekEndfunc"services/hh/queue.go(êm0ïnR¶{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(pos int64) error",
        "UnderlyingTypeString": "func(pos int64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekEnd∑
*segment/seekEnd/errerrvar"services/hh/queue.go(æm0Âm@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekEnd/errı
*segment/seekEnd/llvar"services/hh/queue.go(ñm0†m@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekEnd/l£
*segment/seekEnd/posposvar"services/hh/queue.go(™m0≥m@R…{
        "PkgName": "hh",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekEnd/pos˚
*segment/seekToCurrentseekToCurrentfunc"services/hh/queue.go(˘j0¡kRî{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekToCurrentÅ
*segment/seekToCurrent/llvar"services/hh/queue.go(ˇj0âk@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/seekToCurrent/l÷
*segment/sizesizefield"services/hh/queue.go(∆K0–KRâ{
        "PkgScope": true,
        "PkgName": "hh",
        "FieldOfStruct": "segment",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/sizeÇ
*segment/writeBytes
writeBytesfunc"services/hh/queue.go(ﬁp0™rR§{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(b []byte) error",
        "UnderlyingTypeString": "func(b []byte) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeBytes•
*segment/writeBytes/bbvar"services/hh/queue.go(˚p0Éq@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeBytes/bΩ
*segment/writeBytes/errerrvar"services/hh/queue.go(éq0ßq@R›{
        "PkgName": "hh",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeBytes/err˚
*segment/writeBytes/llvar"services/hh/queue.go(‰p0Óp@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeBytes/lü
*segment/writeBytes/nnvar"services/hh/queue.go(éq0ßq@R≈{
        "PkgName": "hh",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeBytes/ná
*segment/writeUint64writeUint64func"services/hh/queue.go(âp0‹pR¶{
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "*segment",
        "TypeString": "func(sz uint64) error",
        "UnderlyingTypeString": "func(sz uint64) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeUint64˝
*segment/writeUint64/llvar"services/hh/queue.go(èp0ôp@R°{
        "PkgName": "hh",
        "TypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeUint64/l™
*segment/writeUint64/szszvar"services/hh/queue.go(ßp0∞p@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./segment/writeUint64/szÜ

*segmentssegmentstype"services/hh/queue.go(ä0ùRæ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.segments",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/services/hh.segment",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä
./segmentsŒ
*shardWritershardWritertype"services/hh/service.go(Ï0≈R˚{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "github.com/influxdb/influxdb/services/hh.shardWriter",
        "UnderlyingTypeString": "interface{WriteShard(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./shardWriterª
*shardWriter/WriteShard
WriteShardfunc"services/hh/service.go(Ö0√8R—{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "hh",
        "Receiver": "shardWriter",
        "TypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "UnderlyingTypeString": "func(shardID uint64, ownerID uint64, points []github.com/influxdb/influxdb/tsdb.Point) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./shardWriter/WriteShard¡
 *shardWriter/WriteShard/ownerIDownerIDvar"services/hh/service.go(ê0ß@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./shardWriter/WriteShard/ownerIDÑ
*shardWriter/WriteShard/pointspointsvar"services/hh/service.go(©0º@Rë{
        "PkgName": "hh",
        "TypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/tsdb.Point",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./shardWriter/WriteShard/points¡
 *shardWriter/WriteShard/shardIDshardIDvar"services/hh/service.go(ê0ß@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä ./shardWriter/WriteShard/shardID∆
*u64tobu64tobfunc"services/hh/queue.go(s0“tRÑ{
        "PkgScope": true,
        "PkgName": "hh",
        "TypeString": "func(v uint64) []byte",
        "UnderlyingTypeString": "func(v uint64) []byte",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä./u64tobç

*u64tob/bbvar"services/hh/queue.go(êt0§t@RÀ{
        "PkgName": "hh",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä
./u64tob/bç

*u64tob/vvvar"services/hh/queue.go(¸s0Ñt@RÀ{
        "PkgName": "hh",
        "TypeString": "uint64",
        "UnderlyingTypeString": "uint64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/services/hh"
      }ä
./u64tob/v