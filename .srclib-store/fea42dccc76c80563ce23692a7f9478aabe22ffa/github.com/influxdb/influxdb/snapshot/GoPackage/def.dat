Á
*.snapshotpackage"snapshot8Rº{
        "Exported": true,
        "PkgName": "snapshot",
        "TypeString": "",
        "Kind": "package",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä.ò
*FileFiletype"snapshot/snapshot.go(Â0û8Rù{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z;

text/plain-File represents a single file in a manifest.
ä./File•
*File/ModTimeModTimefield"snapshot/snapshot.go(ﬂ0Ü8R”{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "File",
        "TypeString": "time.Time",
        "UnderlyingTypeString": "struct{sec int64; nsec int32; loc *time.Location}",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./File/ModTimeÓ
*	File/NameNamefield"snapshot/snapshot.go(Ù0ì8R•{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "File",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./File/NameÏ
*	File/SizeSizefield"snapshot/snapshot.go(©0»8R£{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "File",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./File/SizeÎ
*
FileWriter
FileWritertype"snapshot/snapshot.go(‹d0åe8R»{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.FileWriter",
        "UnderlyingTypeString": "interface{io.Closer; io.WriterTo}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZQ

text/plainCFileWriter is the interface used for writing a file to a snapshot.
ä./FileWriter 
*FilesFilestype"snapshot/snapshot.go(”0ﬂ8RŒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Files",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z9

text/plain+Files represents a sortable list of files.
ä./FilesÒ
*	Files/LenLenfunc"snapshot/snapshot.go(·0ï8R™{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "Files",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Len·
*Files/Len/ppvar"snapshot/snapshot.go(Á0Ó@Rô{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Files",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Len/pé
*
Files/LessLessfunc"snapshot/snapshot.go(ñ0Ÿ8Rƒ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "Files",
        "TypeString": "func(i int, j int) bool",
        "UnderlyingTypeString": "func(i int, j int) bool",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Lessí
*Files/Less/iivar"snapshot/snapshot.go(™0≤@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Less/ií
*Files/Less/jjvar"snapshot/snapshot.go(™0≤@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Less/j„
*Files/Less/ppvar"snapshot/snapshot.go(ú0£@Rô{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Files",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Less/pÑ
*
Files/SwapSwapfunc"snapshot/snapshot.go(⁄0ò8R∫{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "Files",
        "TypeString": "func(i int, j int)",
        "UnderlyingTypeString": "func(i int, j int)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Swapí
*Files/Swap/iivar"snapshot/snapshot.go(Ó0ˆ@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Swap/ií
*Files/Swap/jjvar"snapshot/snapshot.go(Ó0ˆ@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Swap/j„
*Files/Swap/ppvar"snapshot/snapshot.go(‡0Á@Rô{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Files",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Files/Swap/pÉ

*ManifestManifesttype"snapshot/snapshot.go(ˇ0Ø8Rˆ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "struct{Files []github.com/influxdb/influxdb/snapshot.File \"json:\\\"files\\\"\"}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZA

text/plain3Manifest represents a list of files in a snapshot.
ä
./Manifestë
*Manifest/DiffDifffunc"snapshot/snapshot.go(ı0∫8R{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Manifest",
        "TypeString": "func(other *github.com/influxdb/influxdb/snapshot.Manifest) *github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "func(other *github.com/influxdb/influxdb/snapshot.Manifest) *github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZO

text/plainADiff returns a Manifest of files that are newer in m than other.
ä./Manifest/Diff˙
2*0Manifest/Diff/$snapshot0/$snapshot0/$snapshot0/bbvar"snapshot/snapshot.go(ı0∫@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä2./Manifest/Diff/$snapshot0/$snapshot0/$snapshot0/bŒ
*Manifest/Diff/$snapshot0/aavar"snapshot/snapshot.go(ı0∫@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Diff/$snapshot0/a˘
*Manifest/Diff/diffdiffvar"snapshot/snapshot.go(´0æ@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Diff/diff
*Manifest/Diff/mmvar"snapshot/snapshot.go(˚0Ü@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Diff/m¸
*Manifest/Diff/otherothervar"snapshot/snapshot.go(ç0ú@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Diff/other…
*Manifest/FilesFilesfield"snapshot/snapshot.go(í0≠8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "Manifest",
        "TypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "[]github.com/influxdb/influxdb/snapshot.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Filesƒ
*Manifest/MergeMergefunc"snapshot/snapshot.go(≥0Æ8R{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Manifest",
        "TypeString": "func(other *github.com/influxdb/influxdb/snapshot.Manifest) *github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "func(other *github.com/influxdb/influxdb/snapshot.Manifest) *github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z

text/plainqMerge returns a Manifest that combines m with other.
Only the newest file between the two snapshots is returned.
ä./Manifest/Merge¸
3*1Manifest/Merge/$snapshot0/$snapshot0/$snapshot0/bbvar"snapshot/snapshot.go(≥0Æ@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä3./Manifest/Merge/$snapshot0/$snapshot0/$snapshot0/b‹
3*1Manifest/Merge/$snapshot0/$snapshot0/$snapshot0/iivar"snapshot/snapshot.go(≥0Æ@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä3./Manifest/Merge/$snapshot0/$snapshot0/$snapshot0/i–
*Manifest/Merge/$snapshot0/aavar"snapshot/snapshot.go(≥0Æ@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Merge/$snapshot0/aÚ
*Manifest/Merge/mmvar"snapshot/snapshot.go(π0ƒ@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Merge/m˛
*Manifest/Merge/otherothervar"snapshot/snapshot.go(Ã0€@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Merge/other¯
*Manifest/Merge/retretvar"snapshot/snapshot.go(Í0¸@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Manifest/Merge/retí
*MultiReaderMultiReadertype"snapshot/snapshot.go(≤"0«$8Rï{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "struct{readers []*github.com/influxdb/influxdb/snapshot.Reader; files []*github.com/influxdb/influxdb/snapshot.File; manifest *github.com/influxdb/influxdb/snapshot.Manifest; index int; curr *github.com/influxdb/influxdb/snapshot.Reader}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Zß

text/plainòMultiReader reads from a collection of snapshots.
Only files with the highest index are read from the reader.
This type is not safe for concurrent use.
ä./MultiReader∆
*MultiReader/ManifestManifestfunc"snapshot/snapshot.go(”'0¢+8Rõ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*MultiReader",
        "TypeString": "func() (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "UnderlyingTypeString": "func() (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZG

text/plain9Manifest returns the combined manifest from all readers.
ä./MultiReader/Manifest
0*.MultiReader/Manifest/$snapshot1/$snapshot0/errerrvar"snapshot/snapshot.go(‘)0Ô)@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä0./MultiReader/Manifest/$snapshot1/$snapshot0/err∂
2*0MultiReader/Manifest/$snapshot1/$snapshot0/otherothervar"snapshot/snapshot.go(‘)0Ô)@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä2./MultiReader/Manifest/$snapshot1/$snapshot0/otherº
#*!MultiReader/Manifest/$snapshot1/iivar"snapshot/snapshot.go(”'0¢+@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä#./MultiReader/Manifest/$snapshot1/iì
$*"MultiReader/Manifest/$snapshot1/srsrvar"snapshot/snapshot.go(”'0¢+@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./MultiReader/Manifest/$snapshot1/srÅ
*MultiReader/Manifest/ssssvar"snapshot/snapshot.go(û)0Ø)@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Manifest/ssä
*MultiReader/Manifest/ssrssrvar"snapshot/snapshot.go(Ÿ'0È'@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Manifest/ssr°
*MultiReader/NextNextfunc"snapshot/snapshot.go(—+0—38Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*MultiReader",
        "TypeString": "func() (github.com/influxdb/influxdb/snapshot.File, error)",
        "UnderlyingTypeString": "func() (github.com/influxdb/influxdb/snapshot.File, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z8

text/plain*Next returns the next file in the reader.
ä./MultiReader/Next“
!*MultiReader/Next/$snapshot2/errerrvar"snapshot/snapshot.go(Ö.0õ.@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä!./MultiReader/Next/$snapshot2/errÑ
*MultiReader/Next/$snapshot3/ffvar"snapshot/snapshot.go(—+0—3@Rò{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/$snapshot3/f¥
*MultiReader/Next/$snapshot3/iivar"snapshot/snapshot.go(—+0—3@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/$snapshot3/iº
*MultiReader/Next/errerrvar"snapshot/snapshot.go(Å,0ö,@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/err¡
*MultiReader/Next/sfsfvar"snapshot/snapshot.go(ç/0¶/@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/sf¥
*MultiReader/Next/srsrvar"snapshot/snapshot.go(‡/0Í/@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z=

text/plain/Find the matching reader. Clear other readers.
ä./MultiReader/Next/sr˘
*MultiReader/Next/ssssvar"snapshot/snapshot.go(Å,0ö,@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/ssÇ
*MultiReader/Next/ssrssrvar"snapshot/snapshot.go(◊+0Á+@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Next/ssrÒ
*MultiReader/ReadReadfunc"snapshot/snapshot.go(å;0é<8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*MultiReader",
        "TypeString": "func(b []byte) (n int, err error)",
        "UnderlyingTypeString": "func(b []byte) (n int, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z:

text/plain,Read reads the current entry in the reader.
ä./MultiReader/Read§
*MultiReader/Read/bbvar"snapshot/snapshot.go(©;0±;@RŒ{
        "PkgName": "snapshot",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Read/bº
*MultiReader/Read/errerrvar"snapshot/snapshot.go(ª;0ƒ;@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Read/errû
*MultiReader/Read/nnvar"snapshot/snapshot.go(¥;0π;@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Read/nÇ
*MultiReader/Read/ssrssrvar"snapshot/snapshot.go(í;0¢;@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/Read/ssrµ
*MultiReader/currcurrfield"snapshot/snapshot.go(°$0±$R‡{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "MultiReader",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/curr∏
*MultiReader/filesfilesfield"snapshot/snapshot.go(˙"0â#R‡{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "MultiReader",
        "TypeString": "[]*github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/snapshot.File",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/files‰
*MultiReader/indexindexfield"snapshot/snapshot.go(Ë#0Ù#Rå{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "MultiReader",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/index≈
*MultiReader/manifestmanifestfield"snapshot/snapshot.go(Æ#0¿#R‰{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "MultiReader",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/manifestø
*MultiReader/nextFiles	nextFilesfunc"snapshot/snapshot.go(á40Ó6Rõ{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*MultiReader",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z?

text/plain1nextFiles queues up a next file for all readers.
ä./MultiReader/nextFilesû
G*EMultiReader/nextFiles/$snapshot0/$snapshot0/$snapshot0/$snapshot0/errerrvar"snapshot/snapshot.go(â50ù5@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }äG./MultiReader/nextFiles/$snapshot0/$snapshot0/$snapshot0/$snapshot0/err£
F*DMultiReader/nextFiles/$snapshot0/$snapshot0/$snapshot0/$snapshot0/sfsfvar"snapshot/snapshot.go(â50ù5@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }äF./MultiReader/nextFiles/$snapshot0/$snapshot0/$snapshot0/$snapshot0/sfæ
$*"MultiReader/nextFiles/$snapshot0/iivar"snapshot/snapshot.go(á40Ó6@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./MultiReader/nextFiles/$snapshot0/iï
%*#MultiReader/nextFiles/$snapshot0/srsrvar"snapshot/snapshot.go(á40Ó6@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä%./MultiReader/nextFiles/$snapshot0/srå
*MultiReader/nextFiles/ssrssrvar"snapshot/snapshot.go(ç40ù4@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/nextFiles/ssrÌ
*MultiReader/nextIndex	nextIndexfunc"snapshot/snapshot.go(Ÿ70€:Ró{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*MultiReader",
        "TypeString": "func() int",
        "UnderlyingTypeString": "func() int",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Zq

text/plaincnextIndex returns the index of the next reader to read from.
Returns -1 if all readers are at EOF.
ä./MultiReader/nextIndexé
$*"MultiReader/nextIndex/$snapshot0/ffvar"snapshot/snapshot.go(Ÿ70€:@Rò{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./MultiReader/nextIndex/$snapshot0/fæ
$*"MultiReader/nextIndex/$snapshot0/iivar"snapshot/snapshot.go(Ÿ70€:@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./MultiReader/nextIndex/$snapshot0/i¥
*MultiReader/nextIndex/indexindexvar"snapshot/snapshot.go(µ80¿8@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/nextIndex/indexå
*MultiReader/nextIndex/ssrssrvar"snapshot/snapshot.go(ﬂ70Ô7@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/nextIndex/ssr¬
*MultiReader/readersreadersfield"snapshot/snapshot.go(»"0Ÿ"R‰{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "MultiReader",
        "TypeString": "[]*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "[]*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./MultiReader/readers∆
*NewMultiReaderNewMultiReaderfunc"snapshot/snapshot.go(ï%0ï'8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func(readers ...io.Reader) *github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "func(readers ...io.Reader) *github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZW

text/plainINewMultiReader returns a new MultiReader reading from a list of readers.
ä./NewMultiReader∞
*NewMultiReader/$snapshot0/iivar"snapshot/snapshot.go(ï%0ï'@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./NewMultiReader/$snapshot0/i¯
*NewMultiReader/rrvar"snapshot/snapshot.go(œ%0≈&@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./NewMultiReader/rº
*NewMultiReader/readersreadersvar"snapshot/snapshot.go(©%0Ω%@Rÿ{
        "PkgName": "snapshot",
        "TypeString": "[]io.Reader",
        "UnderlyingTypeString": "[]io.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./NewMultiReader/readersÅ
*	NewReader	NewReaderfunc"snapshot/snapshot.go(Â0∏8Rı{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func(r io.Reader) *github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "func(r io.Reader) *github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z=

text/plain/NewReader returns a new Reader reading from r.
ä./NewReaderø
*NewReader/rrvar"snapshot/snapshot.go(Ù0ˇ@R˜{
        "PkgName": "snapshot",
        "TypeString": "io.Reader",
        "UnderlyingTypeString": "interface{Read(p []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./NewReader/rË
*	NewWriter	NewWriterfunc"snapshot/snapshot.go(…L0¡M8Rﬂ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func() *github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "func() *github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z:

text/plain,NewWriter returns a new instance of Writer.
ä./NewWriterª
*OpenFileMultiReaderOpenFileMultiReaderfunc"snapshot/snapshot.go(©=0éD8R´{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func(path string) (*github.com/influxdb/influxdb/snapshot.MultiReader, []io.Closer, error)",
        "UnderlyingTypeString": "func(path string) (*github.com/influxdb/influxdb/snapshot.MultiReader, []io.Closer, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z¢

text/plainìOpenFileMultiReader returns a MultiReader based on the path of the base snapshot.
Returns the underlying files which need to be closed separately.
ä./OpenFileMultiReaderö
E*COpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/errerrvar"snapshot/snapshot.go(ôA0¥A@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }äE./OpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/errÜ
C*AOpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/ffvar"snapshot/snapshot.go(ôA0¥A@R“{
        "PkgName": "snapshot",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }äC./OpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/fó
J*HOpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/filenamefilenamevar"snapshot/snapshot.go(Ì@0ïA@RŒ{
        "PkgName": "snapshot",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }äJ./OpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/$snapshot0/filenameÊ
8*6OpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/iivar"snapshot/snapshot.go(⁄@0‡@@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä8./OpenFileMultiReader/$snapshot0/$snapshot0/$snapshot1/iÓ
/*-OpenFileMultiReader/$snapshot0/$snapshot0/errerrvar"snapshot/snapshot.go(‰>0˚>@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä/./OpenFileMultiReader/$snapshot0/$snapshot0/err⁄
-*+OpenFileMultiReader/$snapshot0/$snapshot0/ffvar"snapshot/snapshot.go(‰>0˚>@R“{
        "PkgName": "snapshot",
        "TypeString": "*os.File",
        "UnderlyingTypeString": "*os.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä-./OpenFileMultiReader/$snapshot0/$snapshot0/fÿ
$*"OpenFileMultiReader/$snapshot0/errerrvar"snapshot/snapshot.go(™>0¢C@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./OpenFileMultiReader/$snapshot0/err∆
*OpenFileMultiReader/closersclosersvar"snapshot/snapshot.go(í>0•>@Rÿ{
        "PkgName": "snapshot",
        "TypeString": "[]io.Closer",
        "UnderlyingTypeString": "[]io.Closer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./OpenFileMultiReader/closers≥
*OpenFileMultiReader/pathpathvar"snapshot/snapshot.go(¬=0Õ=@RŒ{
        "PkgName": "snapshot",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./OpenFileMultiReader/path∆
*OpenFileMultiReader/readersreadersvar"snapshot/snapshot.go(˘=0å>@Rÿ{
        "PkgName": "snapshot",
        "TypeString": "[]io.Reader",
        "UnderlyingTypeString": "[]io.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./OpenFileMultiReader/readers¯
*ReadFileManifestReadFileManifestfunc"snapshot/snapshot.go(êE0¥H8Rã{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func(path string) (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "UnderlyingTypeString": "func(path string) (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Zà

text/plainzReadFileManifest returns a Manifest for a given base snapshot path.
This merges all incremental backup manifests as well.
ä./ReadFileManifestº
*ReadFileManifest/errerrvar"snapshot/snapshot.go(ÎE0óF@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./ReadFileManifest/err∫
*ReadFileManifest/filesfilesvar"snapshot/snapshot.go(ÎE0óF@Rÿ{
        "PkgName": "snapshot",
        "TypeString": "[]io.Closer",
        "UnderlyingTypeString": "[]io.Closer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./ReadFileManifest/files≠
*ReadFileManifest/pathpathvar"snapshot/snapshot.go(¶E0±E@RŒ{
        "PkgName": "snapshot",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./ReadFileManifest/path˘
*ReadFileManifest/ssssvar"snapshot/snapshot.go(∆G0ﬂG@R†{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./ReadFileManifest/ssÇ
*ReadFileManifest/ssrssrvar"snapshot/snapshot.go(ÎE0óF@R¶{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.MultiReader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./ReadFileManifest/ssr†
*ReaderReadertype"snapshot/snapshot.go(ˆ0±8R˚{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "struct{tr *archive/tar.Reader; manifest *github.com/influxdb/influxdb/snapshot.Manifest}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z_

text/plainQReader reads a snapshot from a Reader.
This type is not safe for concurrent use.
ä./Reader¶
*Reader/ManifestManifestfunc"snapshot/snapshot.go(Â0Ò8Rñ{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Reader",
        "TypeString": "func() (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "UnderlyingTypeString": "func() (*github.com/influxdb/influxdb/snapshot.Manifest, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z6

text/plain(Manifest returns the snapshot manifest.
ä./Reader/Manifest–
 *Reader/Manifest/$snapshot0/errerrvar"snapshot/snapshot.go(õ0≥@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä ./Reader/Manifest/$snapshot0/errÛ
*Reader/Manifest/srsrvar"snapshot/snapshot.go(Î0ı@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Manifest/srî
*Reader/NextNextfunc"snapshot/snapshot.go(Ÿ0Ù8Rå{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Reader",
        "TypeString": "func() (github.com/influxdb/influxdb/snapshot.File, error)",
        "UnderlyingTypeString": "func() (github.com/influxdb/influxdb/snapshot.File, error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z:

text/plain,Next returns the next file in the snapshot.
ä./Reader/Next»
*Reader/Next/$snapshot0/errerrvar"snapshot/snapshot.go(¥0Ã@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Next/$snapshot0/err™
*Reader/Next/$snapshot2/iivar"snapshot/snapshot.go(Ÿ0Ù@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Next/$snapshot2/i≤
*Reader/Next/errerrvar"snapshot/snapshot.go(ã0£@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Next/err∫
*Reader/Next/hdrhdrvar"snapshot/snapshot.go(ã0£@RË{
        "PkgName": "snapshot",
        "TypeString": "*archive/tar.Header",
        "UnderlyingTypeString": "*archive/tar.Header",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Next/hdrÎ
*Reader/Next/srsrvar"snapshot/snapshot.go(ﬂ0È@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Next/sr‰
*Reader/ReadReadfunc"snapshot/snapshot.go(ß0ä!8R⁄{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Reader",
        "TypeString": "func(b []byte) (n int, err error)",
        "UnderlyingTypeString": "func(b []byte) (n int, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z<

text/plain.Read reads the current entry in the snapshot.
ä./Reader/Read»
*Reader/Read/$snapshot0/errerrvar"snapshot/snapshot.go(è 0ß @R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Read/$snapshot0/errö
*Reader/Read/bbvar"snapshot/snapshot.go(æ0∆@RŒ{
        "PkgName": "snapshot",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Read/b≤
*Reader/Read/errerrvar"snapshot/snapshot.go(–0Ÿ@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Read/errî
*Reader/Read/nnvar"snapshot/snapshot.go(…0Œ@R»{
        "PkgName": "snapshot",
        "TypeString": "int",
        "UnderlyingTypeString": "int",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Read/nÎ
*Reader/Read/srsrvar"snapshot/snapshot.go(≠0∑@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/Read/sr∂
*Reader/manifestmanifestfield"snapshot/snapshot.go(ù0ØRﬂ{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "Reader",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/manifestû
*Reader/readManifestreadManifestfunc"snapshot/snapshot.go(ç0®Rñ{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Reader",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z£

text/plainîreadManifest reads the first entry from the snapshot and materializes the snapshot.
This is skipped if the snapshot manifest has already been read.
ä./Reader/readManifestÿ
$*"Reader/readManifest/$snapshot2/errerrvar"snapshot/snapshot.go(ê0ø@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä$./Reader/readManifest/$snapshot2/err¬
*Reader/readManifest/errerrvar"snapshot/snapshot.go(ï0≠@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/readManifest/err 
*Reader/readManifest/hdrhdrvar"snapshot/snapshot.go(ï0≠@RË{
        "PkgName": "snapshot",
        "TypeString": "*archive/tar.Header",
        "UnderlyingTypeString": "*archive/tar.Header",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/readManifest/hdrÿ
*Reader/readManifest/manifestmanifestvar"snapshot/snapshot.go(˙0ã@R¡{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "struct{Files []github.com/influxdb/influxdb/snapshot.File \"json:\\\"files\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z$

text/plainMaterialize manifest.
ä./Reader/readManifest/manifest˚
*Reader/readManifest/srsrvar"snapshot/snapshot.go(ì0ù@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Reader",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/readManifest/srÏ
*	Reader/trtrfield"snapshot/snapshot.go(á0õRß{
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "Reader",
        "TypeString": "*archive/tar.Reader",
        "UnderlyingTypeString": "*archive/tar.Reader",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Reader/trÃ
*WriterWritertype"snapshot/snapshot.go(÷I0òL8R¨{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "struct{Manifest *github.com/influxdb/influxdb/snapshot.Manifest; FileWriters map[string]github.com/influxdb/influxdb/snapshot.FileWriter}",
        "Kind": "type",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZZ

text/plainLWriter writes a snapshot and the underlying files to disk as a tar archive.
ä./Writeræ
*Writer/CloseClosefunc"snapshot/snapshot.go(ıM0›N8R∞{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Writer",
        "TypeString": "func() error",
        "UnderlyingTypeString": "func() error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z=

text/plain/Close closes all file writers on the snapshot.
ä./Writer/Close˙
*Writer/Close/$snapshot0/fwfwvar"snapshot/snapshot.go(ıM0›N@Rì{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.FileWriter",
        "UnderlyingTypeString": "interface{io.Closer; io.WriterTo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/Close/$snapshot0/fwÌ
*Writer/Close/swswvar"snapshot/snapshot.go(˚M0ÖN@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/Close/sw˚
*Writer/FileWritersFileWritersfield"snapshot/snapshot.go(ıK0ñL8Rë{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "Writer",
        "TypeString": "map[string]github.com/influxdb/influxdb/snapshot.FileWriter",
        "UnderlyingTypeString": "map[string]github.com/influxdb/influxdb/snapshot.FileWriter",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZÖ

text/plainwWriters for each file by filename.
Writers will be closed as they're processed and will close by the end of WriteTo().
ä./Writer/FileWriters’
*Writer/ManifestManifestfield"snapshot/snapshot.go(·J0ÛJ8R˘{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "FieldOfStruct": "Writer",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Manifest",
        "Kind": "field",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZÄ

text/plainrThe manifest to write from.
Removing files from the manifest after creation will cause those files to be ignored.
ä./Writer/ManifestÃ
*Writer/WriteToWriteTofunc"snapshot/snapshot.go(ÚR0ÜY8R‰{
        "Exported": true,
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Writer",
        "TypeString": "func(w io.Writer) (n int64, err error)",
        "UnderlyingTypeString": "func(w io.Writer) (n int64, err error)",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Zê

text/plainÅWriteTo writes the snapshot to the writer.
File writers are closed as they are written.
This function will always return n == 0.
ä./Writer/WriteToŒ
*Writer/WriteTo/$snapshot0/errerrvar"snapshot/snapshot.go(ÓU0ãV@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/$snapshot0/err˙
5*3Writer/WriteTo/$snapshot1/$snapshot0/$snapshot0/errerrvar"snapshot/snapshot.go(òW0µW@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä5./Writer/WriteTo/$snapshot1/$snapshot0/$snapshot0/err–
*Writer/WriteTo/$snapshot1/ffvar"snapshot/snapshot.go(ÚR0ÜY@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/$snapshot1/fŒ
*Writer/WriteTo/$snapshot2/errerrvar"snapshot/snapshot.go(•X0∂X@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/$snapshot2/err∏
*Writer/WriteTo/errerrvar"snapshot/snapshot.go(£S0¨S@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/errû
*Writer/WriteTo/nnvar"snapshot/snapshot.go(öS0°S@RÃ{
        "PkgName": "snapshot",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/nÒ
*Writer/WriteTo/swswvar"snapshot/snapshot.go(¯R0ÇS@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/swΩ
*Writer/WriteTo/twtwvar"snapshot/snapshot.go(ßU0ΩU@RË{
        "PkgName": "snapshot",
        "TypeString": "*archive/tar.Writer",
        "UnderlyingTypeString": "*archive/tar.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/tw 
*Writer/WriteTo/wwvar"snapshot/snapshot.go(åS0óS@R¯{
        "PkgName": "snapshot",
        "TypeString": "io.Writer",
        "UnderlyingTypeString": "interface{Write(p []byte) (n int, err error)}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/WriteTo/wä
*Writer/closeUnusedWriterscloseUnusedWritersfunc"snapshot/snapshot.go(‡O0ÊQRä{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Writer",
        "TypeString": "func()",
        "UnderlyingTypeString": "func()",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Zâ

text/plain{closeUnusedWriters closes all file writers not on the manifest.
This allows transactions on these files to be short lived.
ä./Writer/closeUnusedWritersí
>*<Writer/closeUnusedWriters/$snapshot0/$snapshot0/$snapshot0/ffvar"snapshot/snapshot.go(‡O0ÊQ@RË{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "struct{Name string \"json:\\\"name\\\"\"; Size int64 \"json:\\\"size\\\"\"; ModTime time.Time \"json:\\\"lastModified\\\"\"}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä>./Writer/closeUnusedWriters/$snapshot0/$snapshot0/$snapshot0/fî
)*'Writer/closeUnusedWriters/$snapshot0/fwfwvar"snapshot/snapshot.go(‡O0ÊQ@Rì{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.FileWriter",
        "UnderlyingTypeString": "interface{io.Closer; io.WriterTo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä)./Writer/closeUnusedWriters/$snapshot0/fw’
+*)Writer/closeUnusedWriters/$snapshot0/namenamevar"snapshot/snapshot.go(‡O0ÊQ@RŒ{
        "PkgName": "snapshot",
        "TypeString": "string",
        "UnderlyingTypeString": "string",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä+./Writer/closeUnusedWriters/$snapshot0/nameá
*Writer/closeUnusedWriters/swswvar"snapshot/snapshot.go(ÊO0O@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/closeUnusedWriters/sw¿
*Writer/writeFileTowriteFileTofunc"snapshot/snapshot.go(Ó]0èdR†{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Writer",
        "TypeString": "func(tw *archive/tar.Writer, f *github.com/influxdb/influxdb/snapshot.File) error",
        "UnderlyingTypeString": "func(tw *archive/tar.Writer, f *github.com/influxdb/influxdb/snapshot.File) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z?

text/plain1writeFileTo writes a single file to the archive.
ä./Writer/writeFileTo÷
#*!Writer/writeFileTo/$snapshot1/errerrvar"snapshot/snapshot.go(‚_0÷`@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä#./Writer/writeFileTo/$snapshot1/err÷
#*!Writer/writeFileTo/$snapshot2/errerrvar"snapshot/snapshot.go(‘a0Ìa@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä#./Writer/writeFileTo/$snapshot2/errø
"* Writer/writeFileTo/$snapshot2/nnnnvar"snapshot/snapshot.go(‘a0Ìa@RÃ{
        "PkgName": "snapshot",
        "TypeString": "int64",
        "UnderlyingTypeString": "int64",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä"./Writer/writeFileTo/$snapshot2/nn÷
#*!Writer/writeFileTo/$snapshot3/errerrvar"snapshot/snapshot.go(£c0¥c@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä#./Writer/writeFileTo/$snapshot3/errÚ
*Writer/writeFileTo/ffvar"snapshot/snapshot.go(ú^0£^@Rò{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.File",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeFileTo/f
*Writer/writeFileTo/fwfwvar"snapshot/snapshot.go(ÿ^0Ù^@Rì{
        "PkgName": "snapshot",
        "TypeString": "github.com/influxdb/influxdb/snapshot.FileWriter",
        "UnderlyingTypeString": "interface{io.Closer; io.WriterTo}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeFileTo/fw˘
*Writer/writeFileTo/swswvar"snapshot/snapshot.go(Ù]0˛]@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeFileTo/sw≈
*Writer/writeFileTo/twtwvar"snapshot/snapshot.go(å^0ö^@RË{
        "PkgName": "snapshot",
        "TypeString": "*archive/tar.Writer",
        "UnderlyingTypeString": "*archive/tar.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeFileTo/twÔ
*Writer/writeManifestTowriteManifestTofunc"snapshot/snapshot.go(ΩY0∏]R¬{
        "PkgScope": true,
        "PkgName": "snapshot",
        "Receiver": "*Writer",
        "TypeString": "func(tw *archive/tar.Writer) error",
        "UnderlyingTypeString": "func(tw *archive/tar.Writer) error",
        "Kind": "method",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }Z@

text/plain2writeManifestTo writes a manifest to the archive.
ä./Writer/writeManifestToﬁ
'*%Writer/writeManifestTo/$snapshot1/errerrvar"snapshot/snapshot.go(ô[0ö\@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä'./Writer/writeManifestTo/$snapshot1/errﬁ
'*%Writer/writeManifestTo/$snapshot2/errerrvar"snapshot/snapshot.go(›\0Ú\@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä'./Writer/writeManifestTo/$snapshot2/err∞
*Writer/writeManifestTo/bbvar"snapshot/snapshot.go(ñZ0πZ@RŒ{
        "PkgName": "snapshot",
        "TypeString": "[]byte",
        "UnderlyingTypeString": "[]byte",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeManifestTo/b»
*Writer/writeManifestTo/errerrvar"snapshot/snapshot.go(ñZ0πZ@R‡{
        "PkgName": "snapshot",
        "TypeString": "error",
        "UnderlyingTypeString": "interface{Error() string}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeManifestTo/errÅ
*Writer/writeManifestTo/swswvar"snapshot/snapshot.go(√Y0ÕY@Rú{
        "PkgName": "snapshot",
        "TypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "UnderlyingTypeString": "*github.com/influxdb/influxdb/snapshot.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeManifestTo/swÕ
*Writer/writeManifestTo/twtwvar"snapshot/snapshot.go(ﬂY0ÌY@RË{
        "PkgName": "snapshot",
        "TypeString": "*archive/tar.Writer",
        "UnderlyingTypeString": "*archive/tar.Writer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./Writer/writeManifestTo/twÀ

*closeAllcloseAllfunc"snapshot/snapshot.go(∂H0ÄIRÉ{
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "func(a []io.Closer)",
        "UnderlyingTypeString": "func(a []io.Closer)",
        "Kind": "func",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä
./closeAllø
*closeAll/$snapshot0/ccvar"snapshot/snapshot.go(∂H0ÄI@R„{
        "PkgName": "snapshot",
        "TypeString": "io.Closer",
        "UnderlyingTypeString": "interface{Close() error}",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./closeAll/$snapshot0/cû
*
closeAll/aavar"snapshot/snapshot.go(ƒH0—H@Rÿ{
        "PkgName": "snapshot",
        "TypeString": "[]io.Closer",
        "UnderlyingTypeString": "[]io.Closer",
        "Kind": "var",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ä./closeAll/aû
*manifestNamemanifestNameconst"snapshot/snapshot.go(©0¬R˙{
        "PkgScope": true,
        "PkgName": "snapshot",
        "TypeString": "untyped string",
        "UnderlyingTypeString": "untyped string",
        "Kind": "const",
        "PackageImportPath": "github.com/influxdb/influxdb/snapshot"
      }ZM

text/plain?manifestName is the name of the manifest file in the snapshot.
ä./manifestName