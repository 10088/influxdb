version: 2.1

executors:
  linux-amd64:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: large
    working_directory: /home/circleci/go/src/github.com/influxdata/influxdb
    environment:
      RUST_TARGET: x86_64-unknown-linux-musl

  linux-arm64:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: arm.large
    working_directory: /home/circleci/go/src/github.com/influxdata/influxdb
    environment:
      RUST_TARGET: aarch64-unknown-linux-musl
      NOASM: 1

workflows:
  version: 2
  build:
    jobs:
      - build:
          matrix:
            parameters:
              executor:
                - linux-amd64
                - linux-arm64
      - test:
          matrix:
            parameters:
              executor:
                - linux-amd64
                - linux-arm64

commands:
  linux-setup:
    steps:
      - run:
          name: Set GOPATH
          command: |
            GOPATH=/home/circleci/go
            echo "export GOPATH=${GOPATH}" >> $BASH_ENV
            mkdir -p ${GOPATH}/bin
            echo 'export PATH=${GOPATH}/bin:${PATH}' >> $BASH_ENV
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              bzr \
              clang \
              libprotobuf-dev \
              pkg-config \
              protobuf-compiler
      - run:
          name: Install Rust toolchain
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
            echo 'export PATH=${HOME}/.cargo/bin:${PATH}' >> $BASH_ENV

jobs:
  build:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - linux-setup
      - run:
          name: Install static build dependencies
          command: |
            sudo apt-get install -y --no-install-recommends musl-tools
            rustup target add ${RUST_TARGET}
      - run:
          name: Install pkg-config wrapper
          command: make pkg-config
      - run:
          name: Generate assets
          command: make generate
      - run:
          name: Build static binary
          command: |
            TAGS=osusergo,netgo,static_build
            if [ -n "$NOASM" ]; then
              TAGS="$TAGS,noasm"
            fi
            LDFLAGS=(
              -s -w
              -X main.version=dev
              -X "main.commit=$(git rev-parse --short HEAD)"
              -X "main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
              -extldflags '"-fno-PIC -static -Wl,-z,stack-size=8388608"'
            )
            PKG_CONFIG="$GOPATH/bin/pkg-config" go build -tags "$TAGS" -buildmode pie -ldflags "${LDFLAGS[@]}" ./cmd/influxd/
      - store_artifacts:
          path: dist

  test:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    parallelism: 8
    steps:
      - checkout
      - linux-setup
      - run:
          name: Download gotestsum
          command: |
            GOTESTSUM_VERSION=1.6.4
            GOTESTSUM_ARCHIVE=gotestsum_${GOTESTSUM_VERSION}_$(go env GOOS)_$(go env GOARCH).tar.gz
            GOTESTSUM_URL=https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/${GOTESTSUM_ARCHIVE}

            wget ${GOTESTSUM_URL}
            tar xzf ${GOTESTSUM_ARCHIVE}
            install gotestsum ${GOPATH}/bin/
      - run:
          name: Run race tests
          command: |
            GO_TEST_CMD="gotestsum --format standard-quiet --junitfile /tmp/test-results/gotestsum.xml -- -p=4"
            TESTFILES=($(go list ./... | circleci tests split --split-by=timings))
            make GO_TEST_CMD="$GO_TEST_CMD" GO_TEST_PATHS="${TESTFILES[*]}" test-go-race
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
