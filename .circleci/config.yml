version: 2.1

executors:
  amd64:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: large
    environment:
      GO111MODULE: "on"
      GO_VERSION: 1.15.12
      RUST_TARGET: x86_64-unknown-linux-musl

  arm64:
    machine:
      image: ubuntu-2004:202104-01
    resource_class: arm.large
    environment:
      GO111MODULE: "on"
      GO_VERSION: 1.15.12
      RUST_TARGET: aarch64-unknown-linux-musl
      NOASM: 1

  mac:
    macos:
      xcode: 12.4.0
    resource_class: medium
    environment:
      GO111MODULE: "on"
      GO_VERSION: 1.15.12

#  windows:
#    machine:
#      image: windows-server-2019-vs2019:stable
#      resource_class: windows.medium
#      shell: bash.exe

workflows:
  version: 2
  build-linux:
    jobs:
      - build-linux:
          matrix:
            parameters:
              executor:
                - amd64
                - arm64
      - build-mac
      - test-linux:
          matrix:
            parameters:
              executor:
                - amd64
                - arm64

commands:
  setup-common:
    steps:
      - run:
          name: Set GOPATH
          command: |
            GOPATH=/home/circleci/go
            echo "export GOPATH=${GOPATH}" >> $BASH_ENV
            mkdir -p ${GOPATH}/bin
            echo 'export PATH=${GOPATH}/bin:${PATH}' >> $BASH_ENV
      - run:
          name: Install Rust toolchain
          command: |
            curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
            echo 'export PATH=${HOME}/.cargo/bin:${PATH}' >> $BASH_ENV

  setup-linux:
    steps:
      - run:
          name: Install system dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends \
              bzr \
              clang \
              libprotobuf-dev \
              pkg-config \
              protobuf-compiler
      - run:
          name: Install Go
          command: |
            ARCHIVE=go${GO_VERSION}.linux-$(dpkg --print-architecture).tar.gz
            wget https://golang.org/dl/${ARCHIVE}
            tar -C /usr/local/go -xzf ${ARCHIVE}
            rm ${ARCHIVE}
            echo 'export PATH=/usr/local/go/bin:${PATH}' >> $BASH_ENV
      - setup-common

  setup-mac:
    steps:
      - run:
          name: Install system dependencies
          command: |
            brew update

            # `python@3.9` comes pre-installed on the macOS executor, and it includes the `six` package.
            # The protobuf formula hasn't caught up yet, and depends on the standalone `six` formula.
            # Attempting to install the `six` formula alongside `python@3.9` causes a linking error because
            # brew doesn't overwrite existing files.
            #
            # The brew help-text suggests deleting the conflicting file before running the `install`.
            rm '/usr/local/lib/python3.9/site-packages/six.py'

            brew install \
              bazaar \
              pkg-config \
              protobuf \
              wget
      - run:
          name: Install Go
          command: |
            ARCHIVE=go${GO_VERSION}.darwin-amd64.tar.gz
            wget https://golang.org/dl/${ARCHIVE}
            mkdir -p ${HOME}/.tools/go
            tar -C ${HOME}/.tools/go -xzf ${ARCHIVE}
            rm ${ARCHIVE}
            echo 'export PATH=${HOME}/.tools/go/bin:${PATH}' >> $BASH_ENV
      - setup-common

jobs:
  build-linux:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - setup-linux
      - run:
          name: Install static build dependencies
          command: |
            sudo apt-get install -y --no-install-recommends musl-tools
            rustup target add ${RUST_TARGET}
      - run:
          name: Install pkg-config wrapper
          command: go build -o "${GOPATH}/bin/pkg-config" github.com/influxdata/pkg-config
      - run:
          name: Generate assets
          command: make generate
      - run:
          name: Build release binary
          command: |
            TAGS=osusergo,netgo,static_build,assets
            if [ -n "$NOASM" ]; then
              TAGS="$TAGS,noasm"
            fi
            DEST=dist/inflxud_linux_$(go env GOARCH)
            mkdir -p "$DEST"

            PKG_CONFIG="$GOPATH/bin/pkg-config" CC=musl-gcc go build \
              -tags "$TAGS" \
              -buildmode pie \
              -ldflags "-s -w -X main.version=dev -X main.commit=$(git rev-parse --short HEAD) -X main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ') -extldflags '-fno-PIC -static -Wl,-z,stack-size=8388608'" \
              -o "${DEST}/" \
              ./cmd/influxd/
      - store_artifacts:
          path: dist

  build-mac:
    executor:
      name: mac
    steps:
      - checkout
      - setup-mac
      - run:
          name: Install pkg-config wrapper
          command: go build -o "${GOPATH}/bin/pkg-config" github.com/influxdata/pkg-config
      - run:
          name: Generate assets
          command: make generate
      - run:
          name: Build release binary
          command: |
            DEST=dist/inflxud_darwin_amd64
            mkdir -p "$DEST"

            PKG_CONFIG="$GOPATH/bin/pkg-config" go build \
              -tags assets\
              -buildmode pie \
              -ldflags "-s -w -X main.version=dev -X main.commit=$(git rev-parse --short HEAD) -X main.date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
              -o "${DEST}/" \
              ./cmd/influxd/
      - store_artifacts:
          path: dist

  test-linux:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    parallelism: 8
    steps:
      - checkout
      - setup-linux
      - run:
          name: Download gotestsum
          command: |
            GOTESTSUM_VERSION=1.6.4
            GOTESTSUM_ARCHIVE=gotestsum_${GOTESTSUM_VERSION}_$(go env GOOS)_$(go env GOARCH).tar.gz
            GOTESTSUM_URL=https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/${GOTESTSUM_ARCHIVE}

            wget ${GOTESTSUM_URL}
            tar xzf ${GOTESTSUM_ARCHIVE}
            install gotestsum ${GOPATH}/bin/
      - run:
          name: Run race tests
          command: |
            mkdir -p /tmp/test-results
            GO_TEST_CMD="gotestsum --format standard-quiet --junitfile /tmp/test-results/gotestsum.xml -- -p=4"
            TESTFILES=($(go list ./... | circleci tests split --split-by=timings))
            make GO_TEST_CMD="$GO_TEST_CMD" GO_TEST_PATHS="${TESTFILES[*]}" test-go-race
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results
