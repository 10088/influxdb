// Code generated by protoc-gen-go.
// source: protocol.proto
// DO NOT EDIT!

package protocol

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type FieldDefinition_Type int32

const (
	FieldDefinition_STRING FieldDefinition_Type = 1
	FieldDefinition_INT32  FieldDefinition_Type = 2
	FieldDefinition_DOUBLE FieldDefinition_Type = 3
	FieldDefinition_BOOL   FieldDefinition_Type = 4
)

var FieldDefinition_Type_name = map[int32]string{
	1: "STRING",
	2: "INT32",
	3: "DOUBLE",
	4: "BOOL",
}
var FieldDefinition_Type_value = map[string]int32{
	"STRING": 1,
	"INT32":  2,
	"DOUBLE": 3,
	"BOOL":   4,
}

func (x FieldDefinition_Type) Enum() *FieldDefinition_Type {
	p := new(FieldDefinition_Type)
	*p = x
	return p
}
func (x FieldDefinition_Type) String() string {
	return proto.EnumName(FieldDefinition_Type_name, int32(x))
}
func (x FieldDefinition_Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(x.String())
}
func (x *FieldDefinition_Type) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FieldDefinition_Type_value, data, "FieldDefinition_Type")
	if err != nil {
		return err
	}
	*x = FieldDefinition_Type(value)
	return nil
}

type FieldValue struct {
	StringValue      *string  `protobuf:"bytes,1,opt,name=string_value" json:"string_value,omitempty"`
	IntValue         *int32   `protobuf:"varint,2,opt,name=int_value" json:"int_value,omitempty"`
	DoubleValue      *float64 `protobuf:"fixed64,3,opt,name=double_value" json:"double_value,omitempty"`
	BoolValue        *bool    `protobuf:"varint,4,opt,name=bool_value" json:"bool_value,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (this *FieldValue) Reset()         { *this = FieldValue{} }
func (this *FieldValue) String() string { return proto.CompactTextString(this) }
func (*FieldValue) ProtoMessage()       {}

func (this *FieldValue) GetStringValue() string {
	if this != nil && this.StringValue != nil {
		return *this.StringValue
	}
	return ""
}

func (this *FieldValue) GetIntValue() int32 {
	if this != nil && this.IntValue != nil {
		return *this.IntValue
	}
	return 0
}

func (this *FieldValue) GetDoubleValue() float64 {
	if this != nil && this.DoubleValue != nil {
		return *this.DoubleValue
	}
	return 0
}

func (this *FieldValue) GetBoolValue() bool {
	if this != nil && this.BoolValue != nil {
		return *this.BoolValue
	}
	return false
}

type FieldDefinition struct {
	Type             *FieldDefinition_Type `protobuf:"varint,1,req,name=type,enum=protocol.FieldDefinition_Type" json:"type,omitempty"`
	Name             *string               `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (this *FieldDefinition) Reset()         { *this = FieldDefinition{} }
func (this *FieldDefinition) String() string { return proto.CompactTextString(this) }
func (*FieldDefinition) ProtoMessage()       {}

func (this *FieldDefinition) GetType() FieldDefinition_Type {
	if this != nil && this.Type != nil {
		return *this.Type
	}
	return 0
}

func (this *FieldDefinition) GetName() string {
	if this != nil && this.Name != nil {
		return *this.Name
	}
	return ""
}

type Point struct {
	Values           []*FieldValue `protobuf:"bytes,1,rep,name=values" json:"values,omitempty"`
	Timestamp        *int64        `protobuf:"varint,2,req,name=timestamp" json:"timestamp,omitempty"`
	SequenceNumber   *uint32       `protobuf:"varint,3,req,name=sequence_number" json:"sequence_number,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (this *Point) Reset()         { *this = Point{} }
func (this *Point) String() string { return proto.CompactTextString(this) }
func (*Point) ProtoMessage()       {}

func (this *Point) GetTimestamp() int64 {
	if this != nil && this.Timestamp != nil {
		return *this.Timestamp
	}
	return 0
}

func (this *Point) GetSequenceNumber() uint32 {
	if this != nil && this.SequenceNumber != nil {
		return *this.SequenceNumber
	}
	return 0
}

type Series struct {
	Points           []*Point           `protobuf:"bytes,1,rep,name=points" json:"points,omitempty"`
	Name             *string            `protobuf:"bytes,2,req,name=name" json:"name,omitempty"`
	Fields           []*FieldDefinition `protobuf:"bytes,3,rep,name=fields" json:"fields,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (this *Series) Reset()         { *this = Series{} }
func (this *Series) String() string { return proto.CompactTextString(this) }
func (*Series) ProtoMessage()       {}

func (this *Series) GetName() string {
	if this != nil && this.Name != nil {
		return *this.Name
	}
	return ""
}

func init() {
	proto.RegisterEnum("protocol.FieldDefinition_Type", FieldDefinition_Type_name, FieldDefinition_Type_value)
}
